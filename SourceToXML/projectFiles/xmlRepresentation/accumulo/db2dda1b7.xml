<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/db2dda1b7.java"><expr><name>From</name> <name>db2dda1b7b6431a2ee57148db2de74c0432b9480</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Billie</name> <name><name>Rinaldi</name> <argument_list type="generic">&lt;<argument><name>billie</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">4</literal> <name>Nov</name> <literal type="number">2014</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">16</literal><operator>:</operator><literal type="number">11</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">898</literal> <name>convert</name> <name>accumulo</name> <name>to</name> <name>use</name> <name>htrace</name>

<operator>--</operator>
 <name>assemble</name><operator>/</operator><name>bin</name><operator>/</operator><name>stop</name><operator>-</operator><name><name>all</name><operator>.</operator><name>sh</name></name>                      <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <name>assemble</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>                              <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <name>assemble</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>assemblies</name><operator>/</operator><name><name>component</name><operator>.</operator><name>xml</name></name>    <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>                                  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientConfiguration</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">34</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>PropertyType</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>trace</name></expr>}/<expr><name><name>AsyncSpanReceiver</name><operator>.</operator><name>java</name></name>        <operator>|</operator> <literal type="number">101</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>DistributedTrace</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">208</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>trace</name></expr>}/<expr_stmt><expr><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">30</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceDump</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFormatter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ZooTraceClient</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">78</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name></name> <operator>|</operator> <literal type="number">106</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name><name>distributedTracing</name><operator>.</operator><name>html</name></name>    <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>simple</name><operator>/</operator><name>client</name><operator>/</operator><name><name>TracingExample</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">29</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>minicluster</name><operator>/</operator><name><name>MiniAccumuloInstance</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <name><name>pom</name><operator>.</operator><name>xml</name></name>                                       <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>Accumulo</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">9</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>init</name><operator>/</operator><name><name>Initialize</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">1</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFSDataInputStream</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">90</literal> <operator>--</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFileSystem</name><operator>.</operator><name>java</name></name>         <operator>|</operator> <literal type="number">818</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>AccumuloStatus</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ZooZap</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>Master</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>master</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>ReplicationDriver</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>monitor</name><operator>/</operator><name><name>Monitor</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ShowTrace</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">26</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>monitor</name><operator>/</operator><name><name>ShowTraceLinkTypeTest</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">60</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tracer</name><operator>/</operator><name><name>TraceServer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">21</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name><name>BulkFailedCopyProcessor</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>replication</name><operator>/</operator><name><name>AccumuloReplicaSystem</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>TraceCommand</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>TestIngest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>VerifyIngest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ConditionalWriterIT</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BulkFileIT</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>SimpleMacIT</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">18</literal> <operator>+</operator><operator>-</operator>
 <name>trace</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>                                 <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CloudtraceSpan</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">71</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CountSampler</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">18</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Span</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">213</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Trace</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">133</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceCallable</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">24</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceExecutorService</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceProxy</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">72</literal> <operator>--</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceRunnable</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Tracer</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">127</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>MilliSpan</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">141</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>NullSpan</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">102</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>RootMilliSpan</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">43</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>LogSpans</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">63</literal> <operator>--</operator>
 <operator>...</operator><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SpanReceiver</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">28</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>ZooSpanClient</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">122</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>Annotation</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">502</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>RemoteSpan</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">224</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>trace</name><operator>.</operator><name>thrift</name></name>            <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TracerTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">63</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">66</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">1803</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">2000</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>rename</name> <block>{<expr><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name> <operator>=</operator><operator>&gt;</operator> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name></expr>}</block><operator>/</operator><call><name><name>AsyncSpanReceiver</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">56</literal><operator>%</operator></expr></argument>)</argument_list></call>
 <name>rename</name> <block>{<expr><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name> <operator>=</operator><operator>&gt;</operator> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name></expr>}</block><operator>/</operator><call><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">85</literal><operator>%</operator></expr></argument>)</argument_list></call>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFSDataInputStream</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFileSystem</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CloudtraceSpan</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceProxy</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>MilliSpan</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>NullSpan</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>RootMilliSpan</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>LogSpans</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SpanReceiver</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>ZooSpanClient</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>Annotation</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name>bin</name><operator>/</operator><name>stop</name><operator>-</operator><name><name>all</name><operator>.</operator><name>sh</name></name> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name>bin</name><operator>/</operator><name>stop</name><operator>-</operator><name><name>all</name><operator>.</operator><name>sh</name></name>
<name>index</name> <literal type="number">4bf06c033</literal><operator>..</operator><literal type="number">0af0ee159</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name>bin</name><operator>/</operator><name>stop</name><operator>-</operator><name><name>all</name><operator>.</operator><name>sh</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name>bin</name><operator>/</operator><name>stop</name><operator>-</operator><name><name>all</name><operator>.</operator><name>sh</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">5</literal> @@ <name>done</name>
 <literal type="string">"${bin}/tdown.sh"</literal>
 
 <name>echo</name> <literal type="string">"Cleaning all server entries in ZooKeeper"</literal>
<literal type="string">"$ACCUMULO_HOME/bin/accumulo"</literal> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>ZooZap</name></name> <operator>-</operator><name>master</name> <operator>-</operator><name>tservers</name> <operator>-</operator><name>tracers</name>
<literal type="string">"$ACCUMULO_HOME/bin/accumulo"</literal> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>ZooZap</name></name> <operator>-</operator><name>master</name> <operator>-</operator><name>tservers</name> <operator>-</operator><name>tracers</name> <operator>--</operator><name>site</name><operator>-</operator><name>file</name> <literal type="string">"$ACCUMULO_CONF_DIR/accumulo-site.xml"</literal>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">89a374776</literal><operator>..</operator><name>c764091bd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name><name>jetty</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>jetty</name><operator>-</operator><name><name>util</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>htrace</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>htrace</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>assemblies</name><operator>/</operator><name><name>component</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>assemblies</name><operator>/</operator><name><name>component</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">599d26c7d</literal><operator>..</operator><literal type="number">3f18da376</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>assemble</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>assemblies</name><operator>/</operator><name><name>component</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>assemble</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>assemblies</name><operator>/</operator><name><name>component</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jetty</name></name><operator>:</operator><name>jetty</name><operator>-</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jetty</name></name><operator>:</operator><name>jetty</name><operator>-</operator><name><name>servlet</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>eclipse</name><operator>.</operator><name>jetty</name></name><operator>:</operator><name>jetty</name><operator>-</operator><name><name>util</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>htrace</name></name><operator>:</operator><name>htrace</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>slf4j</name></name><operator>:</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>slf4j</name></name><operator>:</operator><name>slf4j</name><operator>-</operator><name><name>log4j12</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
       <operator>&lt;</operator><operator>/</operator><name>includes</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">10e7d7176</literal><operator>..</operator><literal type="number">1cbc6dfdd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>zookeeper</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>zookeeper</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>htrace</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>htrace</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientConfiguration</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">39b460d67</literal><operator>..</operator><literal type="number">6fe61a51b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientConfiguration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientConfiguration</name> extends <name>CompositeConfiguration</name> <block>{
     <expr><call><name>INSTANCE_ZK_HOST</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_ZK_HOST</name></name></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>INSTANCE_ZK_TIMEOUT</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_ZK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>INSTANCE_NAME</name><argument_list>(<argument><expr><literal type="string">"instance.name"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><literal type="string">"Name of Accumulo instance to connect to"</literal></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>INSTANCE_ID</name><argument_list>(<argument><expr><literal type="string">"instance.id"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><literal type="string">"UUID of Accumulo instance to connect to"</literal></expr></argument>)</argument_list></call></expr>, ;
    <expr><call><name>INSTANCE_ID</name><argument_list>(<argument><expr><literal type="string">"instance.id"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><literal type="string">"UUID of Accumulo instance to connect to"</literal></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>TRACE_SPAN_RECEIVERS</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVERS</name></name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>TRACE_SPAN_RECEIVER_PREFIX</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVER_PREFIX</name></name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>TRACE_ZK_PATH</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_ZK_PATH</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><specifier>private</specifier> <name>String</name> <name>key</name></expr>;
     <expr><specifier>private</specifier> <name>String</name> <name>defaultValue</name></expr>;
@@ <expr><operator>-</operator><literal type="number">208</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">214</literal></expr>,<expr><literal type="number">32</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientConfiguration</name> extends <name>CompositeConfiguration</name> <block>{
       <return>return <expr><call><name><name>prop</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>
 
  <specifier>private</specifier> <name>void</name> <call><name>checkType</name><argument_list>(<argument><expr><name>ClientProperty</name> <name>property</name></expr></argument>, <argument><expr><name>PropertyType</name> <name>type</name></expr></argument>)</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>property</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"Configuration method intended for type "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">" called with a "</literal> <operator>+</operator> <call><name><name>property</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" argument ("</literal> <operator>+</operator> <call><name><name>property</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
  }

  <comment type="block" format="javadoc">/**
   * Gets all properties under the given prefix in this configuration.
   *
   * @param property prefix property, must be of type PropertyType.PREFIX
   * @return a map of property keys to values
   * @throws IllegalArgumentException if property is not a prefix
   */</comment>
  public <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAllPropertiesWithPrefix</name><parameter_list>(<parameter><decl><type><name>ClientProperty</name></type> <name>property</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkType</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PREFIX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getKeys</name></name><argument_list>(<argument><expr><call><name><name>property</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>propMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>propMap</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Sets the value of property to value
    *
diff --git a/core/src/main/java/org/apache/accumulo/core/conf/Property.java b/core/src/main/java/org/apache/accumulo/core/conf/Property.java
index a5587601f..fe313c14c 100644
-- a/core/src/main/java/org/apache/accumulo/core/conf/Property.java
++ b/core/src/main/java/org/apache/accumulo/core/conf/Property.java
@@ -27,6 +27,7 @@ import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.Set;
 
import org.apache.accumulo.core.Constants;
 import org.apache.accumulo.core.client.security.tokens.PasswordToken;
 import org.apache.accumulo.core.file.rfile.RFile;
 import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;
@@ -329,6 +330,9 @@ public enum Property {
       + "the date shown on the 'Recent Logs' monitor page"),
 
   TRACE_PREFIX("trace.", null, PropertyType.PREFIX, "Properties in this category affect the behavior of distributed tracing."),
  TRACE_SPAN_RECEIVERS("trace.span.receivers", "org.apache.accumulo.core.trace.ZooTraceClient", PropertyType.CLASSNAMELIST, "A list of span receiver classes to send trace spans"),
  TRACE_SPAN_RECEIVER_PREFIX("trace.span.receiver.", null, PropertyType.PREFIX, "Prefix for span receiver configuration properties"),
  TRACE_ZK_PATH("trace.span.receiver.zookeeper.path", Constants.ZTRACERS, PropertyType.STRING, "The zookeeper node where tracers are registered"),
   TRACE_PORT("trace.port.client", "12234", PropertyType.PORT, "The listening port for the trace server"),
   TRACE_TABLE("trace.table", "trace", PropertyType.STRING, "The name of the table to store distributed traces"),
   TRACE_USER("trace.user", "root", PropertyType.STRING, "The name of the user to store distributed traces"),
diff --git a/core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java b/core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java
index fc20535c5..bf39da9b0 100644
-- a/core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java
++ b/core/src/main/java/org/apache/accumulo/core/conf/PropertyType.java
@@ -68,6 +68,9 @@ public enum PropertyType {
   CLASSNAME("java class", "[\\w$.]*", "A fully qualified java class name representing a class on the classpath.\n"
       + "An example is 'java.lang.String', rather than 'String'"),
 
  CLASSNAMELIST("java class list", "[\\w$.,]*", "A list of fully qualified java class names representing classes on the classpath.\n"
      + "An example is 'java.lang.String', rather than 'String'"),

   DURABILITY("durability", "(?:none|log|flush|sync)", "One of 'none', 'log', 'flush' or 'sync'."),
 
   STRING("string", ".*",
diff --git a/trace/src/main/java/org/apache/accumulo/trace/instrument/receivers/AsyncSpanReceiver.java b/core/src/main/java/org/apache/accumulo/core/trace/AsyncSpanReceiver.java
similarity index 56%
rename from trace/src/main/java/org/apache/accumulo/trace/instrument/receivers/AsyncSpanReceiver.java
rename to core/src/main/java/org/apache/accumulo/core/trace/AsyncSpanReceiver.java
index 4eebd6903..379302e42 100644
-- a/trace/src/main/java/org/apache/accumulo/trace/instrument/receivers/AsyncSpanReceiver.java
++ b/core/src/main/java/org/apache/accumulo/core/trace/AsyncSpanReceiver.java
@@ -14,19 +14,29 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name></name>;</package>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>Annotation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>RemoteSpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>HTraceConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>SpanReceiver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TimelineAnnotation</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Timer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimerTask</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentLinkedQueue</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>RemoteSpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>


 <comment type="block" format="javadoc">/**
  * Deliver Span information periodically to a destination.
  * &lt;ul&gt;
@@ -36,26 +46,28 @@ import org.apache.log4j.Logger;
  * &lt;/ul&gt;
  */</comment>
 <class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AsyncSpanReceiver</name><parameter_list>&lt;<parameter><name>SpanKey</name></parameter>,<parameter><name>Destination</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name>SpanReceiver</name></super></implements></super_list> <block>{
  

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AsyncSpanReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>SpanKey</name></argument>,<argument><name>Destination</name></argument>&gt;</argument_list></name></type> <name>clients</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>SpanKey</name></argument>,<argument><name>Destination</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>host</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>service</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>host</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>service</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
   
   <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>Destination</name></type> <name>createDestination</name><parameter_list>(<parameter><decl><type><name>SpanKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
   
   <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Destination</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><name>RemoteSpan</name></type> <name>span</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
   
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>SpanKey</name></type> <name>getSpanKey</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>SpanKey</name></type> <name>getSpanKey</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
   
   <decl_stmt><decl><type><name>Timer</name></type> <name>timer</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="string">"SpanSender"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name><name>AbstractQueue</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name></type> <name>sendQueue</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>AsyncSpanReceiver</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>AbstractQueue</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name></type> <name>sendQueue</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentLinkedQueue</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AsyncSpanReceiver</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AsyncSpanReceiver</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TimerTask</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AsyncSpanReceiver</name><argument_list type="generic">&lt;<argument><name>SpanKey</name></argument>,<argument><name>Destination</name></argument>&gt;</argument_list></name> implements <name>SpanRece</name></expr></expr_stmt>
       
     </block_content>}</block></function><operator>,</operator> <expr_stmt><expr><name>millis</name></expr><operator>,</operator> <expr><name>millis</name></expr></expr_stmt></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  
  <function><type><name>void</name></type> <name>sendSpans</name><parameter_list>()</parameter_list> <block>{<block_content>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>sendSpans</name><parameter_list>()</parameter_list> <block>{<block_content>
     <while>while <condition>(<expr><operator>!</operator><call><name><name>sendQueue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>boolean</name></type> <name>sent</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>RemoteSpan</name></type> <name>s</name> <init>= <expr><call><name><name>sendQueue</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>stop</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>sendQueue</name></expr>)</init> <block>{<block_content>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
       <decl_stmt><decl><type><name>SpanKey</name></type> <name>dest</name> <init>= <expr><call><name>getSpanKey</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Destination</name></type> <name>client</name> <init>= <expr><call><name><name>clients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">48</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AsyncSpanReceiver</name><argument_list type="generic">&lt;<argument><name>SpanKey</name></argument>,<argument><name>Destination</name></argument>&gt;</argument_list></name> implements <name>SpanRece</name></expr></expr_stmt>
           </block_content>}</block></if></if_stmt>
           <expr_stmt><expr><name>sent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
         </block_content>}</block></while> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Got error sending to "</literal> <operator>+</operator> <name>dest</name> <operator>+</operator> <literal type="string">", refreshing client"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>clients</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></catch>
       </block_content>}</block></function>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sent</name></expr>)</condition><block type="pseudo"><block_content>
         <break>break;</break></block_content></block></if></if_stmt>
     </block_content>}</block></function>
   </block_content>}</block></constructor>
  

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>convertToByteBuffers</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>bytesMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>bytesMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>bytes</name> <range>: <expr><call><name><name>bytesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bytes</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bytes</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></type> <name>convertToAnnotations</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TimelineAnnotation</name></argument>&gt;</argument_list></name></type> <name>annotations</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>annotations</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>TimelineAnnotation</name></type> <name>annotation</name> <range>: <expr><name>annotations</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><call><name><name>annotation</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>annotation</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>span</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    
  <function><type><specifier>public</specifier> <name>void</name></type> <name>receiveSpan</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name>convertToByteBuffers</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getKVAnnotations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>SpanKey</name></type> <name>dest</name> <init>= <expr><call><name>getSpanKey</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>traceId</name></expr></argument>, <argument><expr><name>spanId</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></type> <name>annotations</name> <init>= <expr><call><name>convertToAnnotations</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getTimelineAnnotations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><ternary><condition><expr><name>service</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>s</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>service</name></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getTraceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getSpanId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>s</name><operator>.</operator><name>getStartTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getStopTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>annotations</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
  

   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
     <synchronized>synchronized <init>(<expr><name>sendQueue</name></expr>)</init> <block>{<block_content>
       <while>while <condition>(<expr><operator>!</operator><call><name><name>sendQueue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AsyncSpanReceiver</name><argument_list type="generic">&lt;<argument><name>SpanKey</name></argument>,<argument><name>Destination</name></argument>&gt;</argument_list></name> implements <name>SpanRece</name></expr></expr_stmt>
       </block_content>}</block></try>
     </block_content>}</block></while>
   </block_content>}</block></synchronized>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<parameter><decl><type><name>HTraceConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>TRACE_HOST_PROPERTY</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>service</name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>TRACE_SERVICE_PROPERTY</name></name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
   
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>DistributedTrace</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>DistributedTrace</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">83f5c2664</literal><operator>..</operator><name>fe9377edb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>DistributedTrace</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>DistributedTrace</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">213</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Tracer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>ReflectionUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>ShutdownHookManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>HTraceConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>SpanReceiver</name></name>;</import>
 
 
<comment type="block" format="javadoc">/**
 * Utility class to enable tracing for Accumulo server processes.
 *
 */</comment>
 <class><specifier>public</specifier> class <name>DistributedTrace</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HTRACE_CONF_PREFIX</name> <init>= <expr><literal type="string">"hadoop."</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACE_HOST_PROPERTY</name> <init>= <expr><literal type="string">"trace.host"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACE_SERVICE_PROPERTY</name> <init>= <expr><literal type="string">"trace.service"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACER_ZK_HOST</name> <init>= <expr><literal type="string">"tracer.zookeeper.host"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACER_ZK_TIMEOUT</name> <init>= <expr><literal type="string">"tracer.zookeeper.timeout"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACER_ZK_PATH</name> <init>= <expr><literal type="string">"tracer.zookeeper.path"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>SpanReceiver</name></argument>&gt;</argument_list></name></type> <name>receivers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>SpanReceiver</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @deprecated since 1.7, use {@link DistributedTrace#enable(String, String, org.apache.accumulo.core.client.ClientConfiguration)} instead
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>Instance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>ZooReader</name></type> <name>zoo</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>application</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>ZooUtil</name><operator>.</operator><name>getRoot</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>enable</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block" format="javadoc">/**
   * Enable tracing by setting up SpanReceivers for the current process.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>enable</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Enable tracing by setting up SpanReceivers for the current process.
   * If service name is null, the simple name of the class will be used.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>enable</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Enable tracing by setting up SpanReceivers for the current process.
   * If host name is null, it will be determined.
   * If service name is null, the simple name of the class will be used.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hostname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>enable</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Enable tracing by setting up SpanReceivers for the current process.
   * If host name is null, it will be determined.
   * If service name is null, the simple name of the class will be used.
   * Properties required in the client configuration include {@link org.apache.accumulo.core.client.ClientConfiguration.ClientProperty#TRACE_SPAN_RECEIVERS} and any properties specific to the span receiver.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hostname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>spanReceivers</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>TRACE_SPAN_RECEIVERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>zookeepers</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_ZK_HOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_ZK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>zkPath</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>TRACE_ZK_PATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>getAllPropertiesWithPrefix</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>TRACE_SPAN_RECEIVER_PREFIX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>enableTracing</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>spanReceivers</name></expr></argument>, <argument><expr><name>zookeepers</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>zkPath</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Enable tracing by setting up SpanReceivers for the current process.
   * If host name is null, it will be determined.
   * If service name is null, the simple name of the class will be used.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hostname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>spanReceivers</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>zookeepers</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_ZK_HOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_ZK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>zkPath</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_ZK_PATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>getAllPropertiesWithPrefix</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVER_PREFIX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>enableTracing</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>spanReceivers</name></expr></argument>, <argument><expr><name>zookeepers</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>zkPath</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>enableTracing</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hostname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>spanReceivers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zookeepers</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zkPath</name></decl></parameter>,
      <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>properties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVERS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>spanReceivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// remaining properties will be parsed through an HTraceConfiguration by SpanReceivers</comment>
    <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>TRACER_ZK_HOST</name></expr></argument>, <argument><expr><name>zookeepers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>TRACER_ZK_TIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>TRACER_ZK_PATH</name></expr></argument>, <argument><expr><name>zkPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>property</name> <range>: <expr><call><name><name>properties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>property</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVER_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>property</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>TRACE_HOST_PROPERTY</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>service</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>TRACE_SERVICE_PROPERTY</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>setProcessId</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ShutdownHookManager</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addShutdownHook</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>closeReceivers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadSpanReceivers</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Disable tracing by closing SpanReceivers for the current process.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>closeReceivers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>loadSpanReceivers</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>receivers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Already loaded span receivers, enable tracing does not need to be called again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implClass</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>receiverNames</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>getTrimmedStrings</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TRACE_SPAN_RECEIVERS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>receiverNames</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>receiverNames</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>className</name> <range>: <expr><name>receiverNames</name></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>implClass</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>receivers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>loadInstance</name><argument_list>(<argument><expr><name>implClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SpanReceiver "</literal> <operator>+</operator> <name>className</name> <operator>+</operator> <literal type="string">" was loaded successfully."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Class "</literal> <operator>+</operator> <name>className</name> <operator>+</operator> <literal type="string">" cannot be found."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Load SpanReceiver "</literal> <operator>+</operator> <name>className</name> <operator>+</operator> <literal type="string">" failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>SpanReceiver</name></type> <name>rcvr</name> <range>: <expr><name>receivers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>addReceiver</name></name><argument_list>(<argument><expr><name>rcvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SpanReceiver</name></type> <name>loadInstance</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implClass</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SpanReceiver</name></type> <name>impl</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>ReflectionUtils</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>implClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>(</operator><name>SpanReceiver</name><operator>)</operator><name>o</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><call><name>wrapHadoopConf</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <return>return <expr><name>impl</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>HTRACE_CONF_PREFIX</name> <operator>+</operator> <name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>HTRACE_CONF_PREFIX</name> <operator>+</operator> <name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>HTraceConfiguration</name></type> <name>wrapHadoopConf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name>HTraceConfiguration</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HTRACE_CONF_PREFIX</name> <operator>+</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HTRACE_CONF_PREFIX</name> <operator>+</operator> <name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>closeReceivers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SpanReceiver</name></type> <name>rcvr</name> <range>: <expr><name>receivers</name></expr></range></decl></init>)</control> <block>{<block_content>
       <try>try <block>{<block_content>
        <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>address</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rcvr</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to close SpanReceiver correctly: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch></try>
     </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addReceiver</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ZooTraceClient</name><argument_list>(<argument><expr><name>zoo</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>application</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receivers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">85</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4967d97e9</literal><operator>..</operator><literal type="number">87a937856</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>SendSpansViaThrift</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">14</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">14</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@
  <operator>*</operator> <name>See</name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  * limitations under the License.
  */
package org.apache.accumulo.trace.instrument.receivers<empty_stmt>;</empty_stmt></for>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>RemoteSpan</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SpanReceiver</name><operator>.</operator><name>Client</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TSocket</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TTransport</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Send Span data to a destination using thrift.
@@ -36,9 +38,13 @@ public class SendSpansViaThrift extends AsyncSpanReceiver&lt;String,Client&gt; {
   private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(SendSpansViaThrift.class);
   
   private static final String THRIFT = "thrift://";
  
  public SendSpansViaThrift(String host, String service, long millis) {
    super(host, service, millis);

  public SendSpansViaThrift() {
    super();
  }

  public SendSpansViaThrift(long millis) {
    super(millis);
   }
   
   @Override
@@ -69,13 +75,15 @@ public class SendSpansViaThrift extends AsyncSpanReceiver&lt;String,Client&gt; {
         client.span(s);
       } catch (Exception ex) {
         client.getInputProtocol().getTransport().close();
        client = null;
        throw ex;
       }
     }
   }
  
  protected String getSpanKey(Map&lt;String,String&gt; data) {
    String dest = data.get("dest");

  private static final ByteBuffer DEST = ByteBuffer.wrap("dest".getBytes(UTF_8));

  protected String getSpanKey(Map&lt;ByteBuffer,ByteBuffer&gt; data) {
    String dest = new String(data.get(DEST).array());
     if (dest != null &amp;&amp; dest.startsWith(THRIFT)) {
       String hostAddress = dest.substring(THRIFT.length());
       String[] hostAddr = hostAddress.split(":", 2);
diff --git a/core/src/main/java/org/apache/accumulo/core/trace/TraceDump.java b/core/src/main/java/org/apache/accumulo/core/trace/TraceDump.java
index b44cc3ea3..e3f9e5a36 100644
-- a/core/src/main/java/org/apache/accumulo/core/trace/TraceDump.java
++ b/core/src/main/java/org/apache/accumulo/core/trace/TraceDump.java
@@ -37,6 +37,7 @@ import org.apache.accumulo.core.data.Key;
 import org.apache.accumulo.core.data.Range;
 import org.apache.accumulo.core.data.Value;
 import org.apache.hadoop.io.Text;
import org.htrace.Span;
 
 import com.beust.jcommander.Parameter;
 
@@ -134,7 +135,7 @@ public class TraceDump {
       RemoteSpan span = TraceFormatter.getRemoteSpan(entry);
       tree.addNode(span);
       start = min(start, span.start);
      if (span.parentId &lt;= 0)
      if (span.parentId == Span.ROOT_SPAN_ID)
         count++;
     }
     out.print(String.format("Trace started at %s", TraceFormatter.formatDate(new Date(start))));
diff --git a/core/src/main/java/org/apache/accumulo/core/trace/TraceFormatter.java b/core/src/main/java/org/apache/accumulo/core/trace/TraceFormatter.java
index 9d860d99a..d6842dfd0 100644
-- a/core/src/main/java/org/apache/accumulo/core/trace/TraceFormatter.java
++ b/core/src/main/java/org/apache/accumulo/core/trace/TraceFormatter.java
@@ -16,11 +16,15 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name></name>;</package>
 
<import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>Annotation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>RemoteSpan</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceFormatter</name> implements <name>Formatter</name> <block>{
       <expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s%n"</literal></expr></argument>, <argument><expr><literal type="string">"parent"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><name><name>span</name><operator>.</operator><name>parentId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s%n"</literal></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><call><name><name>dateFormatter</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>span</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s%n"</literal></expr></argument>, <argument><expr><literal type="string">"ms"</literal></expr></argument>, <argument><expr><name><name>span</name><operator>.</operator><name>stop</name></name> <operator>-</operator> <name><name>span</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>span</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s%n"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>span</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>span</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>array</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arrayOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>limit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>array</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arrayOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>limit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s%n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
      }</block></class>
      <if_stmt><if>if <condition>(<expr><name><name>span</name><operator>.</operator><name>annotations</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Annotation</name></type> <name>annotation</name> <range>: <expr><name><name>span</name><operator>.</operator><name>annotations</name></name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">" %12s:%s:%s%n"</literal></expr></argument>, <argument><expr><literal type="string">"annotation"</literal></expr></argument>, <argument><expr><call><name><name>annotation</name><operator>.</operator><name>getMsg</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dateFormatter</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>annotation</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
       </block_content>}</block></if></if_stmt>
       
       <if_stmt><if>if <condition>(<expr><name>printTimeStamps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ZooTraceClient</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ZooTraceClient</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9586eaa62</literal><operator>..</operator><name>f53f13385</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ZooTraceClient</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>ZooTraceClient</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">57</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">93</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name></name>;</package>
 
 <import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name><operator>.</operator><name>SendSpansViaThrift</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>WatchedEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>HTraceConfiguration</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Find a Span collector via zookeeper and push spans there via Thrift RPC
 * 
  */</comment>
 <class><specifier>public</specifier> class <name>ZooTraceClient</name> <super_list><extends>extends <super><name>SendSpansViaThrift</name></super></extends> <implements>implements <super><name>Watcher</name></super></implements></super_list> <block>{
  
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ZooTraceClient</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>final</specifier> <name>ZooReader</name></type> <name>zoo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_TIMEOUT</name> <init>= <expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ZooReader</name></type> <name>zoo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>pathExists</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>ZooTraceClient</name><parameter_list>(<parameter><decl><type><name>ZooReader</name></type> <name>zoo</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zoo</name></name> <operator>=</operator> <name>zoo</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateHosts</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>zoo</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <constructor><specifier>public</specifier> <name>ZooTraceClient</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  

  <constructor><specifier>public</specifier> <name>ZooTraceClient</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>synchronized</specifier> <specifier>protected</specifier> <name>String</name></type> <name>getSpanKey</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>synchronized</specifier> <specifier>protected</specifier> <name>String</name></type> <name>getSpanKey</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>hosts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><call><name><name>hosts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"sending data to "</literal> <operator>+</operator> <name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>host</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></function>
  

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<parameter><decl><type><name>HTraceConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>keepers</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>TRACER_ZK_HOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keepers</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Must configure "</literal> <operator>+</operator> <name><name>DistributedTrace</name><operator>.</operator><name>TRACER_ZK_HOST</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>TRACER_ZK_TIMEOUT</name></name></expr></argument>, <argument><expr><name>DEFAULT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zoo</name> <operator>=</operator> <operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><name>keepers</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DistributedTrace</name><operator>.</operator><name>TRACER_ZK_PATH</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Processing event for trace server zk watch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>updateHosts</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>zoo</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pathExists</name> <operator>||</operator> <call><name><name>zoo</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pathExists</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateHosts</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>zoo</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>zoo</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"unable to get destination hosts in zookeeper"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
   </block_content>}</block></function>
  

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>sendSpans</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sendQueue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"No hosts to send data to, dropping queued spans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized <init>(<expr><name>sendQueue</name></expr>)</init> <block>{<block_content>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>sendSpans</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

   <function><type><specifier>synchronized</specifier> <specifier>private</specifier> <name>void</name></type> <name>updateHosts</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Scanning trace hosts in zookeeper: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>da4e56781</name><operator>..</operator><literal type="number">0edc88416</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftUtil</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ThriftUtil</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>TraceProtocol</name> extends <name>TCompactProtocol</name> <block>{
    <expr><specifier>private</specifier> <name>Span</name> <name>span</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
     @<name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>writeMessageBegin</name><argument_list>(<argument><expr><name>TMessage</name> <name>message</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TException</name> <block>{
      <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"client:"</literal> <operator>+</operator> <name><name>message</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></block></expr>;</expr_stmt>
      <expr_stmt><expr><name>span</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"client:"</literal> <operator>+</operator> <name><name>message</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeMessageBegin</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>writeMessageEnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Span</name></type> <name>currentTrace</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>currentTrace</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>currentTrace</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <constructor><specifier>public</specifier> <name>TraceProtocol</name><parameter_list>(<parameter><decl><type><name>TTransport</name></type> <name>transport</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>d5e73f0e7</name><operator>..</operator><name>e9e012634</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">115</literal> @@ <name>the</name> <name>following</name> <name>properties</name>
   <name><name>trace</name><operator>.</operator><name>user</name></name>
   <name><name>trace</name><operator>.</operator><name>token</name><operator>.</operator><name>property</name><operator>.</operator><name>password</name></name>
 
<name>Other</name> <name>tracer</name> <name>configuration</name> <name>properties</name> <name>include</name>

  <name><name>trace</name><operator>.</operator><name>port</name><operator>.</operator><name>client</name></name>
  <name><name>trace</name><operator>.</operator><name>table</name></name>

<operator>==</operator><operator>==</operator> <name>Configuring</name> <name>Tracing</name>
<name>Traces</name> <name>are</name> <name>collected</name> <name>via</name> <name><name>SpanReceivers</name><operator>.</operator> <name>The</name></name> default <name>SpanReceiver</name>
<name>configured</name> <name>is</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>ZooTraceClient</name></name></expr><operator>,</operator> <expr><name>which</name>
<name>sends</name> <name>spans</name> <name>to</name> <name>an</name> <name>Accumulo</name> <name>Tracer</name> <name>process</name></expr><operator>,</operator> <expr><name>as</name> <name>discussed</name> <name>in</name> <name>the</name>
<name>previous</name> <name><name>section</name><operator>.</operator> <name>This</name></name> default <name>can</name> <name>be</name> <name>changed</name> <name>to</name> <name>a</name> <name>different</name> <name>span</name>
<name>receiver</name></expr><operator>,</operator> <expr><name>or</name> <name>additional</name> <name>span</name> <name>receivers</name> <name>can</name> <name>be</name> <name>added</name> <name>in</name> <name>a</name>
<name>comma</name><operator>-</operator><name>separated</name> <name>list</name></expr><operator>,</operator> <expr><name>by</name> <name>modifying</name> <name>the</name> <name>property</name>

  <name><name>trace</name><operator>.</operator><name>span</name><operator>.</operator><name>receivers</name></name>

<name>Individual</name> <name>span</name> <name>receivers</name> <name>may</name> <name>require</name> <name>their</name> <name>own</name> <name>configuration</name>
<name>parameters</name></expr><operator>,</operator> <expr><name>which</name> <name>are</name> <name>grouped</name> <name>under</name> <name>the</name> <name><name>trace</name><operator>.</operator><name>span</name><operator>.</operator><name>receiver</name><operator>.</operator></name>*
<name><name>prefix</name><operator>.</operator>  <name>The</name></name> <name>ZooTraceClient</name> <name>requires</name> <name>the</name> <name>following</name> <name>property</name> <name>that</name>
<name>indicates</name> <name>where</name> <name>the</name> <name>tracer</name> <name>servers</name> <name>will</name> <name>register</name> <name>themselves</name> <name>in</name>
<name><name>ZooKeeper</name><operator>.</operator>

  <name>trace</name><operator>.</operator><name>span</name><operator>.</operator><name>receiver</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>path</name></name>

<name>This</name> <name>is</name> <name>configured</name> <name>to</name> <operator>/</operator><name>tracers</name> <name>by</name> default<operator>.</operator>  <name>If</name> <name>multiple</name> <name>Accumulo</name>
<name>instances</name> <name>are</name> <name>sharing</name> <name>the</name> <name>same</name> <name>ZooKeeper</name> <name>quorum</name></expr><operator>,</operator> <expr><name>take</name> <name>care</name> <name>to</name>
<name>configure</name> <name>Accumulo</name> <name>with</name> <name>unique</name> <name>values</name></expr></expr_stmt> <for>for this property.

Hadoop can also be configured to send traces to Accumulo<operator>,</operator> <expr_stmt><expr><name>as</name> <name>of</name>
<name>Hadoop</name> <literal type="number">2.6.0</literal></expr><operator>,</operator> <expr><name>by</name> <name>setting</name> <name>the</name> <name>following</name> <name>properties</name> <name>in</name> <name>Hadoop</name><literal type="char">'s
core-site.xml file (the path property is optional if left as the
default).

  &lt;property&gt;
    &lt;name&gt;hadoop.htrace.spanreceiver.classes&lt;/name&gt;
    &lt;value&gt;org.apache.accumulo.core.trace.ZooTraceClient&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;hadoop.tracer.zookeeper.host&lt;/name&gt;
    &lt;value&gt;zookeeperHost:2181&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;hadoop.tracer.zookeeper.path&lt;/name&gt;
    &lt;value&gt;/tracers&lt;/value&gt;
  &lt;/property&gt;

The accumulo-core, accumulo-trace, and libthrift jars must also
be placed on Hadoop'</literal><name>s</name> <name><name>classpath</name><operator>.</operator></name>

 ==<operator>==</operator> <name>Instrumenting</name> <name>a</name> <name>Client</name>
 <name>Tracing</name> <name>can</name> <name>be</name> <name>used</name> <name>to</name> <name>measure</name> <name>a</name> <name>client</name> <name>operation</name></expr><operator>,</operator> <expr><name>such</name> <name>as</name> <name>a</name> <name>scan</name></expr><operator>,</operator> <expr><name>as</name>
 <name>the</name> <name>operation</name> <name>traverses</name> <name>the</name> <name>distributed</name> <name><name>system</name><operator>.</operator> <name>To</name></name> <name>enable</name> <name>tracing</name></expr></expr_stmt></for> <for>for
 your application call
 
 [source<operator>,</operator><expr_stmt><expr><name>java</name>]
<call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"myApplication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
<expr_stmt><expr><operator>...</operator>
<call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"myApplication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// do some tracing</comment>
<expr_stmt><expr><operator>...</operator>
<call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
 <decl_stmt><decl><type><name>Once</name> <name>tracing</name> <name>has</name> <name>been</name></type> <name>enabled</name></decl>, <decl><type ref="prev"/><name>a</name> <name>client</name> <name>can</name> <name>wrap</name> <name>an</name> <name>operation</name> <name>in</name> <name>a</name> <name><name>trace</name><operator>.</operator></name>
 
 [<name>source</name></decl>,<decl><type ref="prev"/><name>java</name>]
<name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"Client Scan"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TraceScope</name></name>;</import>
<expr_stmt><expr><operator>...</operator>
<name>TraceScope</name> <name>scope</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Client Scan"</literal></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>ALWAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <decl_stmt><decl><type><name>BatchScanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <comment type="line">// Configure your scanner</comment>
 <for>for <control>(<init><decl><type><name>Entry</name></type> <name>entry</name> <range>: <expr><name>scanner</name></expr></range></decl></init>)</control> <block>{<block_content>
 </block_content>}</block></for>
<expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>scope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
 <expr_stmt><expr><name>Additionally</name></expr><operator>,</operator> <expr><name>the</name> <name>user</name> <name>can</name> <name>create</name> <name>additional</name> <name>Spans</name> <name>within</name> <name>a</name> <name><name>Trace</name><operator>.</operator>
<name>The</name></name> <name>sampler</name></expr></expr_stmt> <for>for the trace should only be specified with the first span<operator>,</operator> <expr_stmt><expr><name>and</name> <name>subsequent</name> <name>spans</name> <name>will</name> <name>be</name> <name>collected</name> <name>depending</name> <name>on</name> <name>whether</name> <name>that</name> <name>first</name> <name>span</name> <name>was</name> <name><name>sampled</name><operator>.</operator></name>
 
 [<name>source</name></expr><operator>,</operator><expr><name>java</name>]
<call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"Client Update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<decl_stmt><decl><type><name>TraceScope</name></type> <name>scope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Client Update"</literal></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>ALWAYS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><operator>...</operator>
<name>Span</name> <name>readSpan</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TraceScope</name></type> <name>readScope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><operator>...</operator>
<call><name><name>readSpan</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>readScope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><operator>...</operator>
<name>Span</name> <name>writeSpan</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"Write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TraceScope</name></type> <name>writeScope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Write"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><operator>...</operator>
<call><name><name>writeSpan</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>writeScope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>scope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
 <decl_stmt><decl><type><name>Like</name></type> <name>Dapper</name></decl>, <decl><type ref="prev"/><name>Accumulo</name> <name>tracing</name> <name>supports</name> <name>user</name> <name>defined</name> <name>annotations</name> <name>to</name> <name>associate</name> <name>additional</name> <name>data</name> <name>with</name> <name>a</name> <name><name>Trace</name><operator>.</operator>
<name>Checking</name></name> <name>whether</name> <name>currently</name> <name>tracing</name> <name>is</name> <name>necessary</name> <name>when</name> <name>using</name> <name>a</name> <name>sampler</name> <name>other</name> <name>than</name> <name><name>Sampler</name><operator>.</operator><name>ALWAYS</name><operator>.</operator></name>
 
 [<name>source</name></decl>,<decl><type ref="prev"/><name>java</name>]
 <modifier>...</modifier>
 <name>int</name> <name>numberOfEntriesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Span</name></type> <name>readSpan</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TraceScope</name></type> <name>readScope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <comment type="line">// Do the read, update the counter</comment>
 <expr_stmt><expr><operator>...</operator>
<call><name><name>readSpan</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"Number of Entries Read"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberOfEntriesRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Trace</name><operator>.</operator><name>isTracing</name></name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name><name>readScope</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addKVAnnotation</name><argument_list>(<argument><expr><literal type="string">"Number of Entries Read"</literal><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberOfEntriesRead</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>It</name> <name>is</name> <name>also</name> <name>possible</name> <name>to</name> <name>add</name> <name>timeline</name> <name>annotations</name> <name>to</name> <name>your</name> <name><name>spans</name><operator>.</operator>
<name>This</name></name> <name>associates</name> <name>a</name> <name>string</name> <name>with</name> <name>a</name> <name>given</name> <name>timestamp</name> <name>between</name> <name>the</name> <name>start</name> <name>and</name> <name>stop</name> <name>times</name></expr></expr_stmt> <for>for a span.

[source<operator>,</operator><expr_stmt><expr><name>java</name>]
<operator>...</operator>
<call><name><name>writeScope</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addTimelineAnnotation</name><argument_list>(<argument><expr><literal type="string">"Initiating Flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
 
 <decl_stmt><decl><type><name>Some</name> <name>client</name> <name>operations</name> <name>may</name> <name>have</name> <name>a</name> <name>high</name> <name>volume</name> <name>within</name> <name>your</name>
 <name><name>application</name><operator>.</operator> <name>As</name></name></type> <name>such</name></decl>, <decl><type ref="prev"/><name>you</name> <name>may</name> <name>wish</name> <name>to</name> <name>only</name> <name>sample</name> <name>a</name> <name>percentage</name> <name>of</name>
@@ -434</decl>,18 +502,18 @@ <decl><type ref="prev"/><name>operations</name> for <name><name>tracing</name><operator>.</operator> <name>As</name></name> <name>seen</name> <name>below</name></decl>, <decl><type ref="prev"/><name>the</name> <name>CountSampler</name> <name>can</name> <name>be</name> <name>used</name> <name>to</name>
 <name>help</name> <name>enable</name> <name>tracing</name> for 1-<name>in</name>-1000 <name><name>operations</name>
 
 <index>[<expr><name>source</name></expr><operator>,</operator><name>java</name>]</index></name>
<name>import</name> <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>impl</name><operator>.</operator><name>CountSampler</name></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>...</operator>
 <name>Sampler</name> <name>sampler</name> <operator>=</operator> <operator>new</operator> <call><name>CountSampler</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><operator>...</operator></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
  <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>TraceScope</name></type> <name>readScope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><operator>...</operator>
<call><name><name>Trace</name><operator>.</operator><name>offNoFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>readScope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Remember</name> <name>to</name> <name>close</name> <name>all</name> <name>spans</name> <name>and</name> <name>disable</name> <name>tracing</name> <name>when</name> <name><name>finished</name><operator>.</operator>
 
<name>It</name></name> <name>should</name> <name>be</name> <name>noted</name> <name>that</name> <name>it</name> <name>is</name> <name>safe</name> <name>to</name> <name>turn</name> <name>off</name> <name>tracing</name> <name>even</name></expr></expr_stmt> <if_stmt><if>if it
isn't currently active. The +Trace.offNoFlush()+ should be used if the
user does not wish to have +Trace.off()+ block while flushing trace
data.
[source,java]
DistributedTrace.disable();
 
 ==== Viewing Collected Traces
 To view collected traces, use the "Recent Traces" link on the Monitor
diff --git a/docs/src/main/resources/distributedTracing.html b/docs/src/main/resources/distributedTracing.html
index 54c9095d7..98438daf9 100644
-- a/docs/src/main/resources/distributedTracing.html
++ b/docs/src/main/resources/distributedTracing.html
@@ -30,13 +30,20 @@ distributed, and the typical lookup is fast.&lt;/p&gt;
 &lt;p&gt;To provide insight into what accumulo is doing during your scan, you can turn on tracing before you do your operation:&lt;/p&gt;
 
 &lt;pre&gt;
   DistributedTrace.enable(instance, zooReader, hostname, "myApplication");
   Trace scanTrace = Trace.on("client:scan");
   import org.apache.accumulo.core.trace.DistributedTrace;
   import org.htrace.Sampler;
   import org.htrace.Trace;
   import org.htrace.TraceScope;
   ...

   DistributedTrace.enable(hostname, "myApplication");
   TraceScope scanTrace = Trace.startSpan("client:scan", Sampler.ALWAYS);
    BatchScanner scanner = conn.createBatchScanner(...);
    // Configure your scanner
    for (Entry&lt;Key, Value&gt; entry : scanner) {
    }
   Trace.off();
   scanTrace.close();
   DistributedTrace.disableTracing();
 &lt;/pre&gt;
 
 
diff --git a/examples/simple/src/main/java/org/apache/accumulo/examples/simple/client/TracingExample.java b/examples/simple/src/main/java/org/apache/accumulo/examples/simple/client/TracingExample.java
index a542263fe..3a010a688 100644
-- a/examples/simple/src/main/java/org/apache/accumulo/examples/simple/client/TracingExample.java
++ b/examples/simple/src/main/java/org/apache/accumulo/examples/simple/client/TracingExample.java
@@ -17,6 +17,7 @@
 
 package org.apache.accumulo.examples.simple.client;
 
import static java.nio.charset.StandardCharsets.UTF_8;
 import java.util.Map.Entry;
 
 import org.apache.accumulo.core.cli.ClientOnDefaultTable;
@@ -33,9 +34,9 @@ import org.apache.accumulo.core.data.Mutation;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.trace.DistributedTrace;
import org.apache.accumulo.fate.zookeeper.ZooReader;
import org.apache.accumulo.trace.instrument.Span;
import org.apache.accumulo.trace.instrument.Trace;
import org.htrace.Sampler;
import org.htrace.Trace;
import org.htrace.TraceScope;
 
 import com.beust.jcommander.Parameter;
 
@@ -64,7 +65,7 @@ public class TracingExample {
   }
 
   public void enableTracing(Opts opts) throws Exception {
    DistributedTrace.enable(opts.getInstance(), new ZooReader(opts.getInstance().getZooKeepers(), 1000), "myHost", "myApp");
    DistributedTrace.enable("myHost", "myApp");
   }
 
   public void execute(Opts opts) throws TableNotFoundException, InterruptedException, AccumuloException, AccumuloSecurityException, TableExistsException {
@@ -91,22 +92,21 @@ public class TracingExample {
     // Trace the write operation. Note, unless you flush the BatchWriter, you will not capture
     // the write operation as it is occurs asynchronously. You can optionally create additional Spans
     // within a given Trace as seen below around the flush
    Trace.on("Client Write");
    TraceScope scope = Trace.startSpan("Client Write", Sampler.ALWAYS);
 
    System.out.println("TraceID: " + Long.toHexString(Trace.currentTrace().traceId()));
    System.out.println("TraceID: " + Long.toHexString(scope.getSpan().getTraceId()));
     BatchWriter batchWriter = opts.getConnector().createBatchWriter(opts.getTableName(), new BatchWriterConfig());
 
     Mutation m = new Mutation("row");
     m.put("cf", "cq", "value");
 
     batchWriter.addMutation(m);
    Span flushSpan = Trace.start("Client Flush");
    // You can add timeline annotations to Spans which will be able to be viewed in the Monitor
    scope.getSpan().addTimelineAnnotation("Initiating Flush");
     batchWriter.flush();
    flushSpan.stop();
 
    // Use Trace.offNoFlush() if you don't want the operation to block.
     batchWriter.close<condition>()</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>readEntries</name><parameter_list>(<parameter><decl><type><name>Opts</name></type> <name>opts</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracingExample</name> <block>{
     <expr><name>Scanner</name> <name>scanner</name> <operator>=</operator> <call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createScanner</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>auths</name></name></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Trace the read operation.</comment>
    <name>Span</name> <name>readSpan</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"Client Read"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"TraceID: "</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>traceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TraceScope</name></type> <name>readScope</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><literal type="string">"Client Read"</literal></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>ALWAYS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"TraceID: "</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><call><name><name>readScope</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTraceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>int</name></type> <name>numberOfEntriesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>scanner</name></expr></range></decl></init>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracingExample</name> <block>{
       <expr><operator>++</operator><name>numberOfEntriesRead</name></expr>;
     }</block></expr></expr_stmt>
     <comment type="line">// You can add additional metadata (key, values) to Spans which will be able to be viewed in the Monitor</comment>
    <expr_stmt><expr><call><name><name>readSpan</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"Number of Entries Read"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberOfEntriesRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>readScope</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addKVAnnotation</name><argument_list>(<argument><expr><literal type="string">"Number of Entries Read"</literal><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberOfEntriesRead</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>readScope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></for>
 
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>minicluster</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>minicluster</name><operator>/</operator><name><name>MiniAccumuloInstance</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>minicluster</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>minicluster</name><operator>/</operator><name><name>MiniAccumuloInstance</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">54897cb21</literal><operator>..</operator><name>e0c93a624</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>minicluster</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>minicluster</name><operator>/</operator><name><name>MiniAccumuloInstance</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>minicluster</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>minicluster</name><operator>/</operator><name><name>MiniAccumuloInstance</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MiniAccumuloInstance</name> extends <name>ZooKeeperInstance</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getZooKeepersFromDir</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getZooKeepersFromDir</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>directory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Not a directory "</literal> <operator>+</operator> <call><name><name>directory</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>configFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"accumulo-site.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>ebc2f2f1f</name><operator>..</operator><name>e9338f4fe</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
     <operator>&lt;</operator><name>forkCount</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>forkCount</name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>!</operator><operator>--</operator> <name>overwritten</name> <name>in</name> <name>profiles</name> <name>hadoop</name><operator>-</operator><literal type="number">1</literal> <name>or</name> <name>hadoop</name><operator>-</operator><literal type="number">2</literal> <operator>--</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>hadoop</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">2.2.0</literal><operator>&lt;</operator><operator>/</operator><name><name>hadoop</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
    <operator>&lt;</operator><name><name>htrace</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">3.0.4</literal><operator>&lt;</operator><operator>/</operator><name><name>htrace</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>httpclient</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">3.1</literal><operator>&lt;</operator><operator>/</operator><name><name>httpclient</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>jetty</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">9.1.5.v20140505</literal><operator>&lt;</operator><operator>/</operator><name><name>jetty</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>!</operator><operator>--</operator> <name>the</name> <name>maven</name><operator>-</operator><name>release</name><operator>-</operator><name>plugin</name> <name>makes</name> <name>this</name> <name>recommendation</name></expr><operator>,</operator> <expr><name>due</name> <name>to</name> <name>plugin</name> <name>bugs</name> <operator>--</operator><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">461</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">462</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
         <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>jetty</name><operator>-</operator><name><name>util</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>version</name><operator>&gt;</operator><name>$</name><block>{<expr><name><name>jetty</name><operator>.</operator><name>version</name></name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
       <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>htrace</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>htrace</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><name>$</name><block>{<expr><name><name>htrace</name><operator>.</operator><name>version</name></name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
         <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>mortbay</name><operator>.</operator><name><name>jetty</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
         <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>jetty</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>Accumulo</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>Accumulo</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5c93a53c5</literal><operator>..</operator><literal type="number">87c615ebb</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>Accumulo</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>Accumulo</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>AddressUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>Accumulo</name> <block>{
     <return>return <expr><call><name><name>ServerConstants</name><operator>.</operator><name>getInstanceIdLocation</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enableTracing</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>application</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><call><name><name>HdfsZooInstance</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>application</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"creating remote sink for trace spans"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Finds the best log4j configuration file. A generic file is used only if an
    * application-specific file is not available. An XML file is preferred over
diff --git a/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java b/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java
index 24ff63750..a15e05e1f 100644
-- a/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java
++ b/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java
@@ -477,7 +477,6 @@ public class Initialize {
     zoo.putPersistentData(zkInstanceRoot + RootTable.ZROOT_TABLET, EMPTY_BYTE_ARRAY, NodeExistsPolicy.FAIL);
     zoo.putPersistentData(zkInstanceRoot + RootTable.ZROOT_TABLET_WALOGS, EMPTY_BYTE_ARRAY, NodeExistsPolicy.FAIL);
     zoo.putPersistentData(zkInstanceRoot + RootTable.ZROOT_TABLET_PATH, rootTabletDir.getBytes(UTF_8), NodeExistsPolicy.FAIL);
    zoo.putPersistentData(zkInstanceRoot + Constants.ZTRACERS, EMPTY_BYTE_ARRAY, NodeExistsPolicy.FAIL);
     zoo.putPersistentData(zkInstanceRoot + Constants.ZMASTERS, EMPTY_BYTE_ARRAY, NodeExistsPolicy.FAIL);
     zoo.putPersistentData(zkInstanceRoot + Constants.ZMASTER_LOCK, EMPTY_BYTE_ARRAY, NodeExistsPolicy.FAIL);
     zoo.putPersistentData(zkInstanceRoot + Constants.ZMASTER_GOAL_STATE, MasterGoalState.NORMAL.toString().getBytes(UTF_8), NodeExistsPolicy.FAIL);
diff --git a/server/base/src/main/java/org/apache/accumulo/server/trace/TraceFSDataInputStream.java b/server/base/src/main/java/org/apache/accumulo/server/trace/TraceFSDataInputStream.java
deleted file mode 100644
index 5162e019f..000000000
-- a/server/base/src/main/java/org/apache/accumulo/server/trace/TraceFSDataInputStream.java
++ /dev/null
@@ -1,90 +0,0 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>trace</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FSDataInputStream</name></name>;</import>


<class><specifier>public</specifier> class <name>TraceFSDataInputStream</name> <super_list><extends>extends <super><name>FSDataInputStream</name></super></extends></super_list> <block>{
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>desired</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"FSDataInputStream.seek"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"FSDataInputStream.read"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"FSDataInputStream.readFully"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"FSDataInputStream.readFully"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>seekToNewSource</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>targetPos</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"FSDataInputStream.seekToNewSource"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>seekToNewSource</name></name><argument_list>(<argument><expr><name>targetPos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FSDataInputStream</name></type> <name>impl</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>TraceFSDataInputStream</name><parameter_list>(<parameter><decl><type><name>FSDataInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>impl</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFileSystem</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>d3fbad7c9</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>TraceFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">818</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>trace</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>BlockLocation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>ContentSummary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FSDataInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FSDataOutputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileChecksum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>PathFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>permission</name><operator>.</operator><name>FsPermission</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>Progressable</name></name>;</import>

<comment type="line">// If FileSystem was an interface, we could use a Proxy, but it's not, so we have to override everything manually</comment>

<class><specifier>public</specifier> class <name>TraceFileSystem</name> <super_list><extends>extends <super><name>FileSystem</name></super></extends></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setConf</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setConf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>impl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setConf</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setConf</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Configuration</name></type> <name>getConf</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getConf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name></type> <name>getFileBlockLocations</name><parameter_list>(<parameter><decl><type><name>FileStatus</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getFileBlockLocations"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getFileBlockLocations</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TraceFSDataInputStream</name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>

      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>createNewFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"createNewFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>createNewFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"append"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"append"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>short</name></type> <name>getReplication</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getReplication"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplication</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>setReplication</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setReplication"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"exists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"isDirectory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isDir</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"isFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>isFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getLength</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getLength</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>ContentSummary</name></type> <name>getContentSummary</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getContentSummary"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getContentSummary</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>PathFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"listStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>listStatus</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name><name>Path</name><index>[]</index></name></type> <name>files</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"listStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>listStatus</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name><name>Path</name><index>[]</index></name></type> <name>files</name></decl></parameter>, <parameter><decl><type><name>PathFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"listStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>listStatus</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>globStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>pathPattern</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"globStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><call><name><name>pathPattern</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>globStatus</name></name><argument_list>(<argument><expr><name>pathPattern</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>globStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>pathPattern</name></decl></parameter>, <parameter><decl><type><name>PathFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"globStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><call><name><name>pathPattern</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>globStatus</name></name><argument_list>(<argument><expr><name>pathPattern</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Path</name></type> <name>getHomeDirectory</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getHomeDirectory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getHomeDirectory</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>mkdirs</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"mkdirs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyFromLocalFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyFromLocalFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>moveFromLocalFile</name><parameter_list>(<parameter><decl><type><name><name>Path</name><index>[]</index></name></type> <name>srcs</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"moveFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>moveFromLocalFile</name></name><argument_list>(<argument><expr><name>srcs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>moveFromLocalFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"moveFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>moveFromLocalFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyFromLocalFile</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delSrc</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyFromLocalFile</name></name><argument_list>(<argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyFromLocalFile</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delSrc</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name><name>Path</name><index>[]</index></name></type> <name>srcs</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyFromLocalFile</name></name><argument_list>(<argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>srcs</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyFromLocalFile</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delSrc</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyFromLocalFile</name></name><argument_list>(<argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyToLocalFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyFromLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyToLocalFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>moveToLocalFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"moveToLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>moveToLocalFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copyToLocalFile</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delSrc</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"copyToLocalFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>copyToLocalFile</name></name><argument_list>(<argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Path</name></type> <name>startLocalOutput</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>fsOutputFile</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>tmpLocalFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"startLocalOutput"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><call><name><name>fsOutputFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><call><name><name>tmpLocalFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>startLocalOutput</name></name><argument_list>(<argument><expr><name>fsOutputFile</name></expr></argument>, <argument><expr><name>tmpLocalFile</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>completeLocalOutput</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>fsOutputFile</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>tmpLocalFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"completeLocalOutput"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><call><name><name>fsOutputFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><call><name><name>tmpLocalFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>completeLocalOutput</name></name><argument_list>(<argument><expr><name>fsOutputFile</name></expr></argument>, <argument><expr><name>tmpLocalFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getUsed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getUsed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getUsed</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getBlockSize</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getBlockSize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getBlockSize</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getDefaultBlockSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getDefaultBlockSize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getDefaultBlockSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>short</name></type> <name>getDefaultReplication</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getDefaultReplication"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getDefaultReplication</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FileChecksum</name></type> <name>getFileChecksum</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getFileChecksum"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getFileChecksum</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setVerifyChecksum</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>verifyChecksum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setVerifyChecksum"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><name>verifyChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setPermission</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setPermission"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setPermission</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setOwner</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>groupname</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setOwner"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><name>groupname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setOwner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>groupname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setTimes</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>atime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setTimes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setTimes</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>impl</name></decl>;</decl_stmt>

  <constructor><name>TraceFileSystem</name><parameter_list>(<parameter><decl><type><name>FileSystem</name></type> <name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>impl</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"impl is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>impl</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>FileSystem</name></type> <name>getImplementation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>impl</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>URI</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getUri"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TraceFSDataInputStream</name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>URI</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"initialize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"append"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"rename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"listStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>listStatus</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setWorkingDirectory</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>new_dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"setWorkingDirectory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>new_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Path</name></type> <name>getWorkingDirectory</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getWorkingDirectory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getWorkingDirectory</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>mkdirs</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"mkdirs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FileStatus</name></type> <name>getFileStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"getFileStatus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name>FileSystem</name></type> <name>fileSystem</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TraceFileSystem</name><argument_list>(<argument><expr><name>fileSystem</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>getAndWrap</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>wrap</name><argument_list>(<argument><expr><call><name><name>FileSystem</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>AccumuloStatus</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>AccumuloStatus</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c7fd47e5</literal><operator>..</operator><literal type="number">7bd5f6d2d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>AccumuloStatus</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>AccumuloStatus</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloStatus</name> <block>{
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reader</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>rootPath</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTSERVERS</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>child</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
       }</block></expr></expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reader</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>rootPath</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <comment type="line">// TODO: check configured tracers location instead of default</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reader</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reader</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>rootPath</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZMASTER_LOCK</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ZooZap</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ZooZap</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1f5953177</literal><operator>..</operator><literal type="number">7fdbf13e1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ZooZap</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ZooZap</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>IZooReaderWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name><operator>.</operator><name>NodeMissingPolicy</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZooZap</name> <block>{
     <expr><name>boolean</name> <name>zapTracers</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
     @<call><name>Parameter</name><argument_list>(<argument><expr><name>names</name><operator>=</operator><literal type="string">"-verbose"</literal></expr></argument>, <argument><expr><name>description</name><operator>=</operator><literal type="string">"print out messages about progress"</literal></expr></argument>)</argument_list></call>
     <name>boolean</name> <name>verbose</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>

    <function><type><name>String</name></type> <name>getTraceZKPath</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getClientConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>TRACE_ZK_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
   
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZooZap</name> <block>{
     }</block></expr></expr_stmt>
     
     <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>zapTracers</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ZROOT</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>iid</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getTraceZKPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>zapDirectory</name><argument_list>(<argument><expr><name>zoo</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">01fd2c8e7</literal><operator>..</operator><literal type="number">720d18b05</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>NamingThreadFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ServerServices</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>TServerUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>TabletIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooLock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>CountSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Sampler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Span</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleGarbageCollector</name> implements <name>Iface</name> <block>{
     <expr><name>AccumuloConfiguration</name> <name>config</name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr>;
 
     <call><name><name>gc</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><call><name><name>SystemCredentials</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Accumulo</name><operator>.</operator><name>enableTracing</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>gc</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -568,11 +572,10 @@ public class SimpleGarbageCollector implements Iface {
       return;
     }
 
    Sampler sampler = new CountSampler(100);
    CountSampler sampler = new CountSampler(100);
 
     while (true) {
      if (sampler.next())
        Trace.on("gc");
      Trace.on("gc", sampler);
 
       Span gcSpan = Trace.start("loop");
       tStart = System.currentTimeMillis();
@@ -634,7 +637,7 @@ public class SimpleGarbageCollector implements Iface {
         log.warn(e, e);
       }
 
      Trace.offNoFlush();
      Trace.off();
       try {
         long gcDelay = config.getTimeInMillis(Property.GC_CYCLE_DELAY);
         log.debug("Sleeping for " + gcDelay + " milliseconds");
diff --git a/server/master/src/main/java/org/apache/accumulo/master/Master.java b/server/master/src/main/java/org/apache/accumulo/master/Master.java
index b6b96a096..bbd23962b 100644
-- a/server/master/src/main/java/org/apache/accumulo/master/Master.java
++ b/server/master/src/main/java/org/apache/accumulo/master/Master.java
@@ -69,6 +69,7 @@ import org.apache.accumulo.core.security.Credentials;
 import org.apache.accumulo.core.security.NamespacePermission;
 import org.apache.accumulo.core.security.SecurityUtil;
 import org.apache.accumulo.core.security.TablePermission;
import org.apache.accumulo.core.trace.DistributedTrace;
 import org.apache.accumulo.core.util.Daemon;
 import org.apache.accumulo.core.util.Pair;
 import org.apache.accumulo.core.util.UtilWaitThread;
@@ -1259,11 +1260,13 @@ public class Master implements LiveTServerSet.Listener, TableObserver, CurrentSt
       VolumeManager fs = VolumeManagerImpl.get();
       Accumulo.init(fs, conf, app);
       Master master = new Master(conf, fs, hostname);
      Accumulo.enableTracing(hostname, app);
      DistributedTrace.enable(hostname, app, conf.getConfiguration());
       master.run();
     } catch (Exception ex) {
       log.error("Unexpected exception, exiting", ex);
       System.exit(1);
    } finally {
      DistributedTrace.disable();
     }
   }
 
diff --git a/server/master/src/main/java/org/apache/accumulo/master/replication/ReplicationDriver.java b/server/master/src/main/java/org/apache/accumulo/master/replication/ReplicationDriver.java
index a52f7439f..e3bbafa04 100644
-- a/server/master/src/main/java/org/apache/accumulo/master/replication/ReplicationDriver.java
++ b/server/master/src/main/java/org/apache/accumulo/master/replication/ReplicationDriver.java
@@ -25,7 +25,6 @@ import org.apache.accumulo.core.util.Daemon;
 import org.apache.accumulo.fate.util.UtilWaitThread;
 import org.apache.accumulo.master.Master;
 import org.apache.accumulo.trace.instrument.CountSampler;
import org.apache.accumulo.trace.instrument.Sampler;
 import org.apache.accumulo.trace.instrument.Trace;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -54,7 +53,7 @@ public class ReplicationDriver extends Daemon {
 
   @Override
   public void run() {
    Sampler sampler = new CountSampler(10);
    CountSampler sampler = new CountSampler(10);
 
     while (master.stillMaster()) {
       if (null == workMaker) {
@@ -73,9 +72,7 @@ public class ReplicationDriver extends Daemon {
         rcrr = new RemoveCompleteReplicationRecords(conn);
       }
 
      if (sampler.next()) {
        Trace.on("masterReplicationDriver");
      }
      Trace.on("masterReplicationDriver", sampler);
 
       // Make status markers from replication records in metadata, removing entries in
       // metadata which are no longer needed (closed records)
@@ -109,7 +106,7 @@ public class ReplicationDriver extends Daemon {
         log.error("Caught Exception trying to remove finished Replication records", e);
       }
 
      Trace.offNoFlush();
      Trace.off();
 
       // Sleep for a bit
       long sleepMillis = conf.getTimeInMillis(Property.MASTER_REPLICATION_SCAN_INTERVAL);
diff --git a/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java b/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
index 49bb56da7..7fe1af7fc 100644
-- a/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
++ b/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
@@ -54,6 +54,7 @@ import org.apache.accumulo.core.util.ServerServices;
 import org.apache.accumulo.core.util.ServerServices.Service;
 import org.apache.accumulo.core.util.ThriftUtil;
 import org.apache.accumulo.core.util.UtilWaitThread;
import org.apache.accumulo.core.trace.DistributedTrace;
 import org.apache.accumulo.core.zookeeper.ZooUtil;
 import org.apache.accumulo.fate.zookeeper.ZooLock.LockLossReason;
 import org.apache.accumulo.fate.zookeeper.ZooUtil.NodeExistsPolicy;
@@ -413,8 +414,12 @@ public class Monitor {
     config = new ServerConfigurationFactory(instance);
     Accumulo.init(fs, config, app);
     Monitor monitor = new Monitor();
    Accumulo.enableTracing(hostname, app);
    monitor.run(hostname);
    DistributedTrace.enable(hostname, app, config.getConfiguration());
    try {
      monitor.run(hostname);
    } finally {
      DistributedTrace.disable();
    }
   }
 
   private static long START_TIME;
diff --git a/server/monitor/src/main/java/org/apache/accumulo/monitor/servlets/trace/ShowTrace.java b/server/monitor/src/main/java/org/apache/accumulo/monitor/servlets/trace/ShowTrace.java
index a476201f4..896808874 100644
-- a/server/monitor/src/main/java/org/apache/accumulo/monitor/servlets/trace/ShowTrace.java
++ b/server/monitor/src/main/java/org/apache/accumulo/monitor/servlets/trace/ShowTrace.java
@@ -17,7 +17,9 @@
 package org.apache.accumulo.monitor.servlets.trace;
 
 import static java.lang.Math.min;
import static java.nio.charset.StandardCharsets.UTF_8;
 
import java.nio.ByteBuffer;
 import java.util.Collection;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -34,6 +36,7 @@ import org.apache.accumulo.core.trace.SpanTreeVisitor;
 import org.apache.accumulo.core.trace.TraceDump;
 import org.apache.accumulo.core.trace.TraceFormatter;
 import org.apache.accumulo.monitor.servlets.BasicServlet;
import org.apache.accumulo.trace.thrift.Annotation;
 import org.apache.accumulo.trace.thrift.RemoteSpan;
 import org.apache.hadoop.io.Text;
 
@@ -115,7 +118,8 @@ public class ShowTrace extends Basic {
         sb.append(String.format("&lt;td style='text-indent: %dpx'&gt;%s@%s&lt;/td&gt;%n", level * 5, node.svc, node.sender));
         sb.append("&lt;td&gt;" + node.description + "&lt;/td&gt;");
         boolean hasData = node.data != null &amp;&amp; !node.data.isEmpty();
        if (hasData) {
        boolean hasAnnotations = node.annotations != null &amp;&amp; !node.annotations.isEmpty();
        if (hasData || hasAnnotations) {
           String hexSpanId = Long.toHexString(node.spanId);
           sb.append("&lt;td&gt;&lt;input type='checkbox' id=\"");
           sb.append(hexSpanId);
@@ -127,11 +131,23 @@ public class ShowTrace extends Basic {
         sb.append("&lt;/tr&gt;\n");
         sb.append("&lt;tr id='" + Long.toHexString(node.spanId) + "' style='display:none'&gt;");
         sb.append("&lt;td colspan='5'&gt;\n");
        if (hasData) {
        if (hasData || hasAnnotations) {
           sb.append("  &lt;table class='indent,noborder'&gt;\n");
          for (Entry&lt;String,String&gt; entry : node.data.entrySet()) {
            sb.append("  &lt;tr&gt;&lt;td&gt;" + BasicServlet.sanitize(entry.getKey()) + "&lt;/td&gt;");
            sb.append("&lt;td&gt;" + BasicServlet.sanitize(entry.getValue()) + "&lt;/td&gt;&lt;/tr&gt;\n");
          if (hasData) {
            sb.append("  &lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;\n");
            for (Entry&lt;ByteBuffer, ByteBuffer&gt; entry : node.data.entrySet()) {
              String key = new String(entry.getKey().array(), entry.getKey().arrayOffset(), entry.getKey().limit(), UTF_8);
              String value = new String(entry.getValue().array(), entry.getValue().arrayOffset(), entry.getValue().limit(), UTF_8);
              sb.append("  &lt;tr&gt;&lt;td&gt;" + BasicServlet.sanitize(key) + "&lt;/td&gt;");
              sb.append("&lt;td&gt;" + BasicServlet.sanitize(value) + "&lt;/td&gt;&lt;/tr&gt;\n");
            }
          }
          if (hasAnnotations) {
            sb.append("  &lt;tr&gt;&lt;th&gt;Annotation&lt;/th&gt;&lt;th&gt;Time Offset&lt;/th&gt;&lt;/tr&gt;\n");
            for (Annotation entry : node.annotations) {
              sb.append("  &lt;tr&gt;&lt;td&gt;" + BasicServlet.sanitize(entry.getMsg()) + "&lt;/td&gt;");
              sb.append(String.format("&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;\n", entry.getTime() - finalStart));
            }
           }
           sb.append("  &lt;/table&gt;");
         }
diff --git a/server/monitor/src/test/java/org/apache/accumulo/monitor/ShowTraceLinkTypeTest.java b/server/monitor/src/test/java/org/apache/accumulo/monitor/ShowTraceLinkTypeTest.java
index a63043423..effb0e637 100644
-- a/server/monitor/src/test/java/org/apache/accumulo/monitor/ShowTraceLinkTypeTest.java
++ b/server/monitor/src/test/java/org/apache/accumulo/monitor/ShowTraceLinkTypeTest.java
@@ -20,45 +20,47 @@ import java.util.ArrayList;
 import java.util.Collections;
 
 import org.apache.accumulo.trace.thrift.RemoteSpan;
import org.apache.accumulo.trace.thrift.Annotation;
 import org.junit.Assert;
 import org.junit.Test;
 
import java.nio.ByteBuffer;

 public class ShowTraceLinkTypeTest {
  
  private static RemoteSpan rs(long start, long stop, String description) {
    return new RemoteSpan("sender", "svc", 0l, 0l, 0l, start, stop, description, Collections.&lt;ByteBuffer, ByteBuffer&gt;emptyMap(), Collections.&lt;Annotation&gt;emptyList());
  }

   @Test
   public void testTraceSortingForMonitor() {
    /*
     * public RemoteSpan(String sender, String svc, long traceId, long spanId, long parentId, long start, long stop, String description, Map&lt;String,String&gt;
     * data)
     */</comment>
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name></type> <name>spans</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>expectedOrdering</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>RemoteSpan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    

     <comment type="line">// "Random" ordering</comment>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="string">"desc5"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="number">30l</literal></expr></argument>, <argument><expr><literal type="string">"desc2"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">85l</literal></expr></argument>, <argument><expr><literal type="number">90l</literal></expr></argument>, <argument><expr><literal type="string">"desc8"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">45l</literal></expr></argument>, <argument><expr><literal type="number">60l</literal></expr></argument>, <argument><expr><literal type="string">"desc4"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">35l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="string">"desc3"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">95l</literal></expr></argument>, <argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><literal type="string">"desc9"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">65l</literal></expr></argument>, <argument><expr><literal type="number">80l</literal></expr></argument>, <argument><expr><literal type="string">"desc6"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="number">120l</literal></expr></argument>, <argument><expr><literal type="string">"desc10"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">15l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="string">"desc1"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="string">"desc7"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="string">"desc5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="number">30l</literal></expr></argument>, <argument><expr><literal type="string">"desc2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">85l</literal></expr></argument>, <argument><expr><literal type="number">90l</literal></expr></argument>, <argument><expr><literal type="string">"desc8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">45l</literal></expr></argument>, <argument><expr><literal type="number">60l</literal></expr></argument>, <argument><expr><literal type="string">"desc4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">35l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="string">"desc3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">95l</literal></expr></argument>, <argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><literal type="string">"desc9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">65l</literal></expr></argument>, <argument><expr><literal type="number">80l</literal></expr></argument>, <argument><expr><literal type="string">"desc6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="number">120l</literal></expr></argument>, <argument><expr><literal type="string">"desc10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">15l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="string">"desc1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="string">"desc7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="line">// We expect them to be sorted by 'start'</comment>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">15l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="string">"desc1"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="number">30l</literal></expr></argument>, <argument><expr><literal type="string">"desc2"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">35l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="string">"desc3"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">45l</literal></expr></argument>, <argument><expr><literal type="number">60l</literal></expr></argument>, <argument><expr><literal type="string">"desc4"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="string">"desc5"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">65l</literal></expr></argument>, <argument><expr><literal type="number">80l</literal></expr></argument>, <argument><expr><literal type="string">"desc6"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="string">"desc7"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">85l</literal></expr></argument>, <argument><expr><literal type="number">90l</literal></expr></argument>, <argument><expr><literal type="string">"desc8"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">95l</literal></expr></argument>, <argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><literal type="string">"desc9"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoteSpan</name><argument_list>(<argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="number">120l</literal></expr></argument>, <argument><expr><literal type="string">"desc10"</literal></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>,<argument><expr><name>String</name><operator>&gt;</operator> <call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">15l</literal></expr></argument>, <argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="string">"desc1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">25l</literal></expr></argument>, <argument><expr><literal type="number">30l</literal></expr></argument>, <argument><expr><literal type="string">"desc2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">35l</literal></expr></argument>, <argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="string">"desc3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">45l</literal></expr></argument>, <argument><expr><literal type="number">60l</literal></expr></argument>, <argument><expr><literal type="string">"desc4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">55l</literal></expr></argument>, <argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="string">"desc5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">65l</literal></expr></argument>, <argument><expr><literal type="number">80l</literal></expr></argument>, <argument><expr><literal type="string">"desc6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">75l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="string">"desc7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">85l</literal></expr></argument>, <argument><expr><literal type="number">90l</literal></expr></argument>, <argument><expr><literal type="string">"desc8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">95l</literal></expr></argument>, <argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><literal type="string">"desc9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expectedOrdering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rs</name><argument_list>(<argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="number">120l</literal></expr></argument>, <argument><expr><literal type="string">"desc10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>spans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedOrdering</name></expr></argument>, <argument><expr><name>spans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tracer</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tracer</name><operator>/</operator><name><name>TraceServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tracer</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tracer</name><operator>/</operator><name><name>TraceServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4858b8ad8</literal><operator>..</operator><name>af1ec568a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tracer</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tracer</name><operator>/</operator><name><name>TraceServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tracer</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tracer</name><operator>/</operator><name><name>TraceServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>user</name><operator>.</operator><name>AgeOffFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceFormatter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceFormatter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>IZooReaderWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name><operator>.</operator><name>NodeExistsPolicy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>Accumulo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>ServerOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>client</name><operator>.</operator><name>HdfsZooInstance</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">224</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceServer</name> implements <name>Watcher</name> <block>{
     <expr><name><name>TThreadPoolServer</name><operator>.</operator><name>Args</name></name> <name>options</name> <operator>=</operator> <operator>new</operator> <call><name><name>TThreadPoolServer</name><operator>.</operator><name>Args</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>options</name><operator>.</operator><name>processor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Processor</name><argument_list type="generic">&lt;<argument><name>Iface</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Receiver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>new</operator> <call><name>TThreadPoolServer</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerInZooKeeper</name><argument_list>(<argument><expr><call><name><name>sock</name><operator>.</operator><name>getInetAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>sock</name><operator>.</operator><name>getLocalPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerInZooKeeper</name><argument_list>(<argument><expr><call><name><name>sock</name><operator>.</operator><name>getInetAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>sock</name><operator>.</operator><name>getLocalPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TRACE_ZK_PATH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name>BatchWriter</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>connector</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMaxLatency</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">277</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceServer</name> implements <name>Watcher</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>registerInZooKeeper</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>root</name> <init>= <expr><call><name><name>ZooUtil</name><operator>.</operator><name>getRoot</name></name><argument_list>(<argument><expr><call><name><name>serverConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTRACERS</name></name></expr></init></decl>;</decl_stmt>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>registerInZooKeeper</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>root</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>IZooReaderWriter</name></type> <name>zoo</name> <init>= <expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>zoo</name><operator>.</operator><name>putPersistentData</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>SKIP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Registering tracer "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" at "</literal> <operator>+</operator> <name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>zoo</name><operator>.</operator><name>putEphemeralSequential</name></name><argument_list>(<argument><expr><name>root</name> <operator>+</operator> <literal type="string">"/trace-"</literal></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>zoo</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceServer</name> implements <name>Watcher</name> <block>{
     <expr><call><name><name>Accumulo</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;
     <name>String</name> <name>hostname</name> <operator>=</operator> <call><name><name>opts</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>TraceServer</name></type> <name>server</name> <init>= <expr><operator>new</operator> <call><name>TraceServer</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Accumulo</name><operator>.</operator><name>enableTracing</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tracer stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tracer stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getZooKeeper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>BulkFailedCopyProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>BulkFailedCopyProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f7bda49f7</name><operator>..</operator><literal type="number">034becdde</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>BulkFailedCopyProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>BulkFailedCopyProcessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>SiteConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeManagerImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceFileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>DistributedWorkQueue</name><operator>.</operator><name>Processor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileUtil</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BulkFailedCopyProcessor</name> implements <name>Processor</name> <block>{
 
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>VolumeManager</name></type> <name>vm</name> <init>= <expr><call><name><name>VolumeManagerImpl</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSystem</name></type> <name>origFs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSystem</name></type> <name>destFs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSystem</name></type> <name>origFs</name> <init>= <expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSystem</name></type> <name>destFs</name> <init>= <expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       
       <expr_stmt><expr><call><name><name>FileUtil</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>origFs</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>destFs</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>destFs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BulkFailedCopyProcessor</name> implements <name>Processor</name> <block>{
     }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <try>try <block>{<block_content>
         <decl_stmt><decl><type><name>VolumeManager</name></type> <name>vm</name> <init>= <expr><call><name><name>VolumeManagerImpl</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>destFs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>destFs</name> <init>= <expr><call><name><name>vm</name><operator>.</operator><name>getVolumeByPath</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>destFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">" marked "</literal> <operator>+</operator> <name>dest</name> <operator>+</operator> <literal type="string">" failed"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9a1117dde</literal><operator>..</operator><literal type="number">7378348ff</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>LocalityGroupConfigurationError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>Partitioner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceFileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>mutable</name><operator>.</operator><name>MutableLong</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">557</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">556</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <expr><specifier>private</specifier> <specifier>synchronized</specifier> <name>FileSKVIterator</name> <call><name>getReader</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         
         <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>RFileOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openReader</name><argument_list>(<argument><expr><name>memDumpFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">712</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">711</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
       <comment type="line">// dump memmap exactly as is to a tmp file on disk, and switch scans to that temp file</comment>
       <try>try <block>{<block_content>
         <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         
         <decl_stmt><decl><type><name>String</name></type> <name>tmpFile</name> <init>= <expr><name>memDumpDir</name> <operator>+</operator> <literal type="string">"/memDump"</literal> <operator>+</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>RFile</name><operator>.</operator><name>EXTENSION</name></name></expr></init></decl>;</decl_stmt>
         
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">54c75f8b6</literal><operator>..</operator><literal type="number">9fd255a8e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Iface</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Processor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ColumnFQ</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2876</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">2877</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> implements <name>Runnable</name> <block>{
       <expr><call><name><name>Accumulo</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;
       <name>TabletServer</name> <name>server</name> <operator>=</operator> <operator>new</operator> <call><name>TabletServer</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>config</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Accumulo</name><operator>.</operator><name>enableTracing</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Uncaught exception in TabletServer.main, exiting"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
   }</block></expr></expr_stmt></block_content></block></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>AccumuloReplicaSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>AccumuloReplicaSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">732907d53</literal><operator>..</operator><literal type="number">4a899efc2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>AccumuloReplicaSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>AccumuloReplicaSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloReplicaSystem</name> implements <name>ReplicaSystem</name> <block>{
       <comment type="line">// We made no status, punt on it for now, and let it re-queue itself for work</comment>
       <return>return <expr><name>status</name></expr>;</return>
     }</block></expr></expr_stmt> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>offNoFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
   </block_content>}</block></if></if_stmt>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ef3a0c903</name><operator>..</operator><literal type="number">9dd432348</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">2078</literal><operator>,</operator><literal type="number">11</literal> <operator>+</operator><literal type="number">2078</literal><operator>,</operator><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
           <expr><call><name><name>this</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;
         }</block>
 
        <name>Span</name> <name>curr</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>curr</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"extent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name>getExtent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"extent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name>getExtent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>majCStats</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>curr</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name><name>majCStats</name><operator>.</operator><name>getEntriesRead</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>curr</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"written"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name><name>majCStats</name><operator>.</operator><name>getEntriesWritten</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name><name>majCStats</name><operator>.</operator><name>getEntriesRead</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"written"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name><name>majCStats</name><operator>.</operator><name>getEntriesWritten</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></catch></try>
     </block_content>}</block></catch> <finally>finally <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a0ff17abd</name><operator>..</operator><literal type="number">996b2afdd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>format</name><operator>.</operator><name>Formatter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>format</name><operator>.</operator><name>FormatterFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>volume</name><operator>.</operator><name>VolumeConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>start</name><operator>.</operator><name>classloader</name><operator>.</operator><name>vfs</name><operator>.</operator><name>AccumuloVFSClassLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>start</name><operator>.</operator><name>classloader</name><operator>.</operator><name>vfs</name><operator>.</operator><name>ContextManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>shell</name><operator>.</operator><name>commands</name><operator>.</operator><name>AboutCommand</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">328</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Shell</name> extends <name>ShellOptions</name> <block>{
       }</block></expr></expr_stmt>
 
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>options</name><operator>.</operator><name>isFake</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ZooReader</name></type> <name>zr</name> <init>= <expr><operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepersSessionTimeOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zr</name></expr></argument>, <argument><expr><literal type="string">"shell"</literal></expr></argument>, <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"shell"</literal></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>getClientConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">525</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">523</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Shell</name> extends <name>ShellOptions</name> <block>{
       <expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><call><name><name>shell</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
   </block_content>}</block></finally>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>TraceCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>TraceCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7f6357074</literal><operator>..</operator><literal type="number">819f61c71</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>TraceCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>TraceCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceCommand</name> extends <name>DebugCommand</name> <block>{
         <expr><call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"shell:"</literal> <operator>+</operator> <call><name><name>shellState</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       }</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>trace</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>traceId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>trace</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>currentTraceId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>int</name></type> <name>traceCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>TestIngest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>TestIngest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7f6c514be</literal><operator>..</operator><literal type="number">47033f3d7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>TestIngest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>TestIngest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>MutationsRejectedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableExistsException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>ColumnVisibility</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>FastFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIngest</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr>;
     <name>BatchWriterOpts</name> <name>bwOpts</name> <operator>=</operator> <operator>new</operator> <call><name>BatchWriterOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>TestIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    

     <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>TestIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepersSessionTimeOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>startTracing</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIngest</name> <block>{
     }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>stopTracing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
   </block_content>}</block></try>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>VerifyIngest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>VerifyIngest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">74b03e437</literal><operator>..</operator><literal type="number">902d49ecd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>VerifyIngest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>VerifyIngest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ScannerOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>DistributedTrace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Trace</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>VerifyIngest</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr>;
     <name>ScannerOpts</name> <name>scanOpts</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>VerifyIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>trace</name></name></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>VerifyIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>instance</name><operator>.</operator><name>getZooKeepersSessionTimeOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>(<argument><expr><literal type="string">"cmdLine"</literal></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><literal type="string">"cmdLine"</literal></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><call><name>verifyIngest</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     </block_content>}</block> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>off</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
   </block_content>}</block></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ConditionalWriterIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ConditionalWriterIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c85373d52</name><operator>..</operator><literal type="number">81e519e0c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ConditionalWriterIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ConditionalWriterIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceDump</name><operator>.</operator><name>Printer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>FastFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>examples</name><operator>.</operator><name>simple</name><operator>.</operator><name>constraints</name><operator>.</operator><name>AlphaNumKeyConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>BadIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>SimpleMacIT</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>SlowIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1234</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1233</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConditionalWriterIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deleteRows</name><argument_list>(<argument><expr><literal type="string">"trace"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ZooReader</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getZooKeepers</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">30</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testTrace"</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DistributedTrace</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"testTrace"</literal></expr></argument>, <argument><expr><call><name>getClientConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Span</name></type> <name>root</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"traceTest"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ConditionalWriter</name></type> <name>cw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createConditionalWriter</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConditionalWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BulkFileIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BulkFileIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">80ee99029</literal><operator>..</operator><literal type="number">13bdc7ec8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BulkFileIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BulkFileIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>volume</name><operator>.</operator><name>VolumeConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>trace</name><operator>.</operator><name>TraceFileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BulkFileIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSplits</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>splits</name></expr></argument>)</argument_list></call></expr>;
     <name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>aconf</name> <init>= <expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>TraceFileSystem</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>VolumeConfiguration</name><operator>.</operator><name>getDefaultVolume</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>aconf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>VolumeConfiguration</name><operator>.</operator><name>getDefaultVolume</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>aconf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>String</name></type> <name>dir</name> <init>= <expr><call><name>rootPath</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/bulk_test_diff_files_89723987592_"</literal> <operator>+</operator> <call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">210e05757</literal><operator>..</operator><literal type="number">5b03b179c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">146</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">146</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExamplesIT</name> extends <name>ConfigurableMacIT</name> <block>{
     }</block>
     <call><name>assertTrue</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>FunctionalTestUtils</name><operator>.</operator><name>readAll</name></name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name><name>TraceDumpExample</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"myHost@myApp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"myApp@myHost"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>SimpleMacIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>SimpleMacIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">03677f4a0</literal><operator>..</operator><literal type="number">3f04b9435</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>SimpleMacIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>SimpleMacIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>MiniAccumuloInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>MiniAccumuloClusterImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>MiniAccumuloConfigImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>ZooKeeperBindException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>configuration</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>configuration</name><operator>.</operator><name>PropertiesConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>AfterClass</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <class><specifier>public</specifier> class <name>SimpleMacIT</name> <super_list><extends>extends <super><name>AbstractMacIT</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SimpleMacIT</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INSTANCE_NAME</name> <init>= <expr><literal type="string">"instance1"</literal></expr></init></decl>;</decl_stmt>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>folder</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>MiniAccumuloClusterImpl</name></type> <name>cluster</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleMacIT</name> extends <name>AbstractMacIT</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>private</specifier> <specifier>static</specifier> <name>Connector</name> <call><name>getInstanceOneConnector</name><argument_list>()</argument_list></call> <block>{
     <try>try <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>MiniAccumuloInstance</name><argument_list>(<argument><expr><literal type="string">"instance1"</literal></expr></argument>, <argument><expr><call><name>getInstanceOnePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getConnector</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>PasswordToken</name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><operator>new</operator> <call><name>MiniAccumuloInstance</name><argument_list>(<argument><expr><name>INSTANCE_NAME</name></expr></argument>, <argument><expr><call><name>getInstanceOnePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getConnector</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>PasswordToken</name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/></block_content></block></try></block></expr>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     </block_content>}</block></catch>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleMacIT</name> extends <name>AbstractMacIT</name> <block>{
     <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/accumulo-maven-plugin/instance1"</literal></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>ClientConfiguration</name></type> <name>getClientConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getInstanceOneConnector</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>ClientConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertiesConfiguration</name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><call><name>getInstanceOnePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>ClientConfiguration</name><argument_list>(<argument><expr><call><name><name>MiniAccumuloInstance</name><operator>.</operator><name>getConfigProperties</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>withInstance</name><argument_list>(<argument><expr><name>INSTANCE_NAME</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>withZkHosts</name><argument_list>(<argument><expr><call><name><name>MiniAccumuloInstance</name><operator>.</operator><name>getZooKeepersFromDir</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>aacfb56c8</name><operator>..</operator><name>d64e3ccd4</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>zookeeper</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>zookeeper</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>htrace</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>htrace</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CloudtraceSpan</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CloudtraceSpan</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..fb9744eea</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CloudtraceSpan</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">71</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base interface for gathering and reporting statistics about a block of execution.
 */</comment>
<interface><specifier>public</specifier> interface <name>CloudtraceSpan</name> <block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ROOT_SPAN_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Begin gathering timing information */</comment>
  <function_decl><type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** The block has completed, stop the clock */</comment>
  <function_decl><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Get the start time, in milliseconds */</comment>
  <function_decl><type><name>long</name></type> <name>getStartTimeMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Get the stop time, in milliseconds */</comment>
  <function_decl><type><name>long</name></type> <name>getStopTimeMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return the total amount of time elapsed since start was called, if running, or difference between stop and start */</comment>
  <function_decl><type><name>long</name></type> <name>accumulatedMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Has the span been started and not yet stopped? */</comment>
  <function_decl><type><name>boolean</name></type> <name>running</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return a textual description of this span */</comment>
  <function_decl><type><name>String</name></type> <name>description</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** A pseudo-unique (random) number assigned to this span instance */</comment>
  <function_decl><type><name>long</name></type> <name>spanId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** The parent span: returns null if this is the root span */</comment>
  <function_decl><type><name>Span</name></type> <name>parent</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** A pseudo-unique (random) number assigned to the trace associated with this span */</comment>
  <function_decl><type><name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Create a child span of this span with the given description */</comment>
  <decl_stmt><decl><type><name>Span</name></type> <name>child</name><argument_list>(<argument><expr><name>String</name> <name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <function_decl><annotation>@<name>Override</name></annotation>
  <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return the pseudo-unique (random) number of the parent span, returns ROOT_SPAN_ID if this is the root span */</comment>
  <function_decl><type><name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Add data associated with this span */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>data</name><argument_list>(<argument><expr><name>String</name> <name>key</name></expr></argument>, <argument><expr><name>String</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Get data associated with this span (read only) */</comment>
  <function_decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CountSampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CountSampler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9a5bdbb53</literal><operator>..</operator><name>b291ee9da</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CountSampler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>CountSampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

 <comment type="block" format="javadoc">/**
 * Sampler that returns true every N calls.
 * 
 * use org.htrace.impl.CountSampler instead
  */</comment>
<class><specifier>public</specifier> class <name>CountSampler</name> <super_list><implements>implements <super><name>Sampler</name></super></implements></super_list> <block>{
  
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>frequency</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
<class><specifier>public</specifier> class <name>CountSampler</name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>impl</name><operator>.</operator><name>CountSampler</name></name></super></extends> <implements>implements <super><name>Sampler</name></super></implements></super_list> <block>{
   <constructor><specifier>public</specifier> <name>CountSampler</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>frequency</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>frequency</name></name> <operator>=</operator> <name>frequency</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
   
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>count</name><operator>++</operator> <operator>%</operator> <name>frequency</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>next</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4abb40a19</literal><operator>..</operator><literal type="number">3813530be</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
 <comment type="block" format="javadoc">/**
 * Extremely simple callback to determine the frequency that an action should be performed.
 * 
 * @see Trace#wrapAll
 * use org.htrace.Sampler instead
  */</comment>
<interface><specifier>public</specifier> interface <name>Sampler</name> <block>{
<interface><specifier>public</specifier> interface <name>Sampler</name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></name></super></extends></super_list> <block>{
   
   <function_decl><type><name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list>;</function_decl>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Span</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Span</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">52671748e</literal><operator>..</operator><literal type="number">84275cebc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Span</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Span</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">56</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">173</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>NullScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TimelineAnnotation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TraceScope</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * Base interface for gathering and reporting statistics about a block of execution.
 * This is a wrapper for a TraceScope object, which is a wrapper for a Span and its parent.
  */</comment>
<interface><specifier>public</specifier> interface <name>Span</name> <block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ROOT_SPAN_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Begin gathering timing information */</comment>
  <function_decl><type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** The block has completed, stop the clock */</comment>
  <function_decl><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Get the start time, in milliseconds */</comment>
  <function_decl><type><name>long</name></type> <name>getStartTimeMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Get the stop time, in milliseconds */</comment>
  <function_decl><type><name>long</name></type> <name>getStopTimeMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return the total amount of time elapsed since start was called, if running, or difference between stop and start */</comment>
  <function_decl><type><name>long</name></type> <name>accumulatedMillis</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Has the span been started and not yet stopped? */</comment>
  <function_decl><type><name>boolean</name></type> <name>running</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return a textual description of this span */</comment>
  <function_decl><type><name>String</name></type> <name>description</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** A pseudo-unique (random) number assigned to this span instance */</comment>
  <function_decl><type><name>long</name></type> <name>spanId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** The parent span: returns null if this is the root span */</comment>
  <function_decl><type><name>Span</name></type> <name>parent</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** A pseudo-unique (random) number assigned to the trace associated with this span */</comment>
  <function_decl><type><name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Create a child span of this span with the given description */</comment>
  <decl_stmt><decl><type><name>Span</name></type> <name>child</name><argument_list>(<argument><expr><name>String</name> <name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <function_decl><annotation>@<name>Override</name></annotation>
  <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Return the pseudo-unique (random) number of the parent span, returns ROOT_SPAN_ID if this is the root span */</comment>
  <function_decl><type><name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="block" format="javadoc">/** Add data associated with this span */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>data</name><argument_list>(<argument><expr><name>String</name> <name>key</name></expr></argument>, <argument><expr><name>String</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/** Get data associated with this span (read only) */</comment>
  <function_decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list>;</function_decl>
<class><specifier>public</specifier> class <name>Span</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></super>, <super><name>CloudtraceSpan</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ROOT_SPAN_ID</name> <init>= <expr><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name><operator>.</operator><name>ROOT_SPAN_ID</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Span</name></type> <name>NULL_SPAN</name> <init>= <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><name><name>NullScope</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>TraceScope</name></type> <name>scope</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></type> <name>span</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Span</name><parameter_list>(<parameter><decl><type><name>TraceScope</name></type> <name>scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>span</name></name> <operator>=</operator> <call><name><name>scope</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>Span</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>span</name></name> <operator>=</operator> <name>span</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TraceScope</name></type> <name>getScope</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>scope</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></type> <name>getSpan</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>span</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getTraceId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>data</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>addKVAnnotation</name></name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>scope</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStartTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getStartTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStopTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getStopTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getAccumulatedMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getAccumulatedMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getSpanId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getSpanId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getTraceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getTraceId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Span</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>child</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getParentId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addKVAnnotation</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>addKVAnnotation</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addTimelineAnnotation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>addTimelineAnnotation</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>getKVAnnotations</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getKVAnnotations</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TimelineAnnotation</name></argument>&gt;</argument_list></name></type> <name>getTimelineAnnotations</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getTimelineAnnotations</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getProcessId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>span</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"can't start span"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>accumulatedMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getAccumulatedMillis</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>running</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>isRunning</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>spanId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getSpanId</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Span</name></type> <name>parent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"can't get parent"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getParentId</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>span</name><operator>.</operator><name>getKVAnnotations</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringData</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>d</name> <range>: <expr><call><name><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>stringData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>stringData</name></expr>;</return>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Trace</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Trace</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">19171c445</literal><operator>..</operator><literal type="number">5ad52fb87</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Trace</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>Trace</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">79</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">124</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TraceInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>wrappers</name><operator>.</operator><name>TraceProxy</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * A Trace allows a user to gather global, distributed, detailed performance information while requesting a service. The general usage for a user is to do
 * something like this:
 * 
 * Trace.on("doSomething"); try { doSomething(); } finally { Trace.off(); }
 * 
 * This updates the environment for this thread, and data collection will occur whenever the thread encounters any Span notations in the code. The information
 * about the trace will also be carried over RPC calls as well. If the thread should hand off work to another thread, the environment can be carried with it, so
 * that the trace continues on the new thread.
 * Utility class for tracing within Accumulo.  Not intended for client use!
 *
  */</comment>
 <class><specifier>public</specifier> class <name>Trace</name> <block>{
  
  <comment type="line">// Initiate tracing if it isn't already started</comment>
  <comment type="block" format="javadoc">/**
   * Start a trace span with a given description.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Span</name></type> <name>on</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>on</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>on</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>ALWAYS</name></name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// Turn tracing off:</comment>

  <comment type="block" format="javadoc">/**
   * Start a trace span with a given description with the given sampler.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>Span</name></type> <name>on</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>sampler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Finish the current trace.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>off</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stopTracing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></type> <name>span</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>continueSpan</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
  

  <comment type="block" format="javadoc">/**
   * @deprecated since 1.7, use {@link #off()} instead
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>offNoFlush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stopTracing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
  
  <comment type="line">// Are we presently tracing?</comment>

  <comment type="block" format="javadoc">/**
   * Returns whether tracing is currently on.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isTracing</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// If we are tracing, return the current span, else null</comment>

  <comment type="block" format="javadoc">/**
   * Return the current span.
   * @deprecated since 1.7 -- it is better to save the span you create in a local variable and call its methods, rather than retrieving the current span
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>Span</name></type> <name>currentTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currentTrace</name><argument_list>()</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// Create a new time span, if tracing is on</comment>

  <comment type="block" format="javadoc">/**
   * Get the trace id of the current span.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>currentTraceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTraceId</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Start a new span with a given description, if already tracing.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Span</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// Start a trace in the current thread from information passed via RPC</comment>

  <comment type="block" format="javadoc">/**
   * Continue a trace by starting a new span with a given parent and description.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Span</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>TInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>traceId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>Tracer</name><operator>.</operator><name>NULL_SPAN</name></name></expr>;</return>
      <return>return <expr><name><name>Span</name><operator>.</operator><name>NULL_SPAN</name></name></expr>;</return>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>continueTrace</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>parentId</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>TraceInfo</name></type> <name>ti</name> <init>= <expr><operator>new</operator> <call><name>TraceInfo</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>parentId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// Initiate a trace in this thread, starting now</comment>

  <comment type="block" format="javadoc">/**
   * Start a new span with a given description and parent.
   * @deprecated since 1.7 -- use htrace API
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>Span</name></type> <name>startThread</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startThread</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>Span</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>startSpan</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>getSpan</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="line">// Stop a trace in this thread, starting now</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>endThread</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endThread</name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" format="javadoc">/**
   * Add data to the current span.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>data</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name></type> <name>span</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>addKVAnnotation</name></name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   </block_content>}</block></function>
  
  <comment type="line">// Wrap the runnable in a new span, if tracing</comment>

  <comment type="block" format="javadoc">/**
   * Wrap a runnable in a TraceRunnable, if tracing.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Runnable</name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>new</operator> <call><name>TraceRunnable</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>runnable</name></expr>;</return>
    <if_stmt><if>if <condition>(<expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TraceRunnable</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>runnable</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
  

   <comment type="line">// Wrap all calls to the given object with spans</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>wrapAll</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="line">// Sample trace all calls to the given object</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>wrapAll</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Sampler</name></type> <name>dist</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceCallable</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceCallable</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c3072b17e</name><operator>..</operator><name>f682d613f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceCallable</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceCallable</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TraceScope</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -25,27 +29,41 @@ import java.util.concurrent.Callable;
 public class TraceCallable&lt;V&gt; implements Callable&lt;V&gt; {
   private final Callable&lt;V&gt; impl;
   private final Span parent;
  private final String description;
   
   TraceCallable(Callable&lt;V&gt; impl) {
    this(Trace.currentTrace(), impl);
    this(Trace.currentSpan(), impl);
   }
   
   TraceCallable(Span parent, Callable&lt;V&gt; impl) {
    this(parent, impl, null);
  }

  TraceCallable(Span parent, Callable&lt;V&gt; impl, String description) {
     this.impl = impl;
     this.parent = parent;
    this.description = description;
   }
   
   @Override
   public V call() throws Exception {
     if (parent != null) {
      Span chunk = Trace.startThread(parent, Thread.currentThread().getName());
      TraceScope chunk = Trace.startSpan(getDescription(), parent);
       try {
         return impl.call();
       } finally {
        Trace.endThread(chunk);
        TraceExecutorService.endThread(chunk.getSpan());
       }
     } else {
       return impl.call();
     }
   }

  public Callable&lt;V&gt; getImpl() {
    return impl;
  }

  private String getDescription() {
    return this.description == null ? Thread.currentThread().getName() : description;
  }
 }
diff --git a/trace/src/main/java/org/apache/accumulo/trace/instrument/TraceExecutorService.java b/trace/src/main/java/org/apache/accumulo/trace/instrument/TraceExecutorService.java
index 04dcc39e2..36563d799 100644
-- a/trace/src/main/java/org/apache/accumulo/trace/instrument/TraceExecutorService.java
++ b/trace/src/main/java/org/apache/accumulo/trace/instrument/TraceExecutorService.java
@@ -16,6 +16,9 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Tracer</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TraceExecutorService</name> implements <name>ExecutorService</name> <block>{
     <return>return <expr><call><name><name>impl</name><operator>.</operator><name>invokeAny</name></name><argument_list>(<argument><expr><call><name>wrapCollection</name><argument_list>(<argument><expr><name>tasks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
   
  <comment type="block" format="javadoc">/**
   * Finish a given trace and set the span for the current thread to null.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>endThread</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>continueSpan</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceProxy</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceProxy</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>cb9321039</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceProxy</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">72</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationHandler</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Proxy</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>

<class><specifier>public</specifier> class <name>TraceProxy</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TraceProxy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Sampler</name></type> <name>ALWAYS</name> <init>= <expr><operator>new</operator> <class><super><name>Sampler</name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>trace</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>ALWAYS</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>T</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Sampler</name></type> <name>sampler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>InvocationHandler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <class><super><name>InvocationHandler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>Method</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>span</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <return>return <expr><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
          <comment type="line">// Can throw RuntimeException, Error, or any checked exceptions of the method.</comment>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>ite</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><call><name><name>ite</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>cause</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// This should never happen, but account for it anyway</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Invocation exception during trace with null cause: "</literal></expr></argument>, <argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <throw>throw <expr><name>cause</name></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>Proxy</name><operator>.</operator><name>newProxyInstance</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>instance</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInterfaces</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceRunnable</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceRunnable</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">41c765d25</literal><operator>..</operator><literal type="number">0ddeb9ee2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceRunnable</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TraceRunnable</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>TraceScope</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Wrap a Runnable with a Span that survives a change in threads.
  * 
@@ -24,29 +28,39 @@ public class TraceRunnable implements Runnable, Comparable&lt;TraceRunnable&gt; {
   
   private final Span parent;
   private final Runnable runnable;
  private final String description;
   
   public TraceRunnable(Runnable runnable) {
    this(Trace.currentTrace(), runnable);
    this(Trace.currentSpan(), runnable);
   }
   
   public TraceRunnable(Span parent, Runnable runnable) {
    this(parent, runnable, null);
  }

  public TraceRunnable(Span parent, Runnable runnable, String description) {
     this.parent = parent;
     this.runnable = runnable;
    this.description = description;
   }
   
   @Override
   public void run() {
     if (parent != null) {
      Span chunk = Trace.startThread(parent, Thread.currentThread().getName());
      TraceScope chunk = Trace.startSpan(getDescription(), parent);
       try {
         runnable.run();
       } finally {
        Trace.endThread(chunk);
        TraceExecutorService.endThread(chunk.getSpan());
       }
     } else {
       runnable.run();
     }
   }

  private String getDescription() {
    return this.description == null ? Thread.currentThread().getName() : description;
  }
   
   @Override
   public boolean equals(Object o) {
diff --git a/trace/src/main/java/org/apache/accumulo/trace/instrument/Tracer.java b/trace/src/main/java/org/apache/accumulo/trace/instrument/Tracer.java
index d70aeeacb..246d1eb17 100644
-- a/trace/src/main/java/org/apache/accumulo/trace/instrument/Tracer.java
++ b/trace/src/main/java/org/apache/accumulo/trace/instrument/Tracer.java
@@ -16,129 +16,20 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>impl</name><operator>.</operator><name>NullSpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>impl</name><operator>.</operator><name>RootMilliSpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name><operator>.</operator><name>SpanReceiver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name>;</import>
 

<comment type="block" format="javadoc">/**
 * A Tracer provides the implementation for collecting and distributing Spans within a process.
 */</comment>
 <class><specifier>public</specifier> class <name>Tracer</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SpanReceiver</name></argument>&gt;</argument_list></name></type> <name>receivers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SpanReceiver</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Span</name></argument>&gt;</argument_list></name></type> <name>currentTrace</name> <init>= <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Span</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NullSpan</name></type> <name>NULL_SPAN</name> <init>= <expr><operator>new</operator> <call><name>NullSpan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TInfo</name></type> <name>dontTrace</name> <init>= <expr><operator>new</operator> <call><name>TInfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Tracer</name></type> <name>instance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>synchronized</specifier> <specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInstance</name><parameter_list>(<parameter><decl><type><name>Tracer</name></type> <name>tracer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>instance</name> <operator>=</operator> <name>tracer</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>synchronized</specifier> <specifier>public</specifier> <specifier>static</specifier> <name>Tracer</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>Tracer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>instance</name></expr>;</return>
  </block_content>}</block></function>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TInfo</name></type> <name>DONT_TRACE</name> <init>= <expr><operator>new</operator> <call><name>TInfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Obtain {@link org.apache.accumulo.trace.thrift.TInfo} for the current span.
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TInfo</name></type> <name>traceInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>currentTrace</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>currentSpan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TInfo</name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>traceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>spanId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>dontTrace</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>parent</name> <init>= <expr><call><name><name>currentTrace</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL_SPAN</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>push</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>child</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>on</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Span</name></type> <name>parent</name> <init>= <expr><call><name><name>currentTrace</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Span</name></type> <name>root</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>RootMilliSpan</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><call><name><name>random</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>random</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Span</name><operator>.</operator><name>ROOT_SPAN_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>child</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name>push</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>startThread</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>push</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>child</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>endThread</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentTrace</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTracing</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>currentTrace</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>currentTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>currentTrace</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>stopTracing</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>endThread</name><argument_list>(<argument><expr><call><name>currentTrace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>deliver</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SpanReceiver</name></type> <name>receiver</name> <range>: <expr><name>receivers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>receiver</name><operator>.</operator><name>span</name></name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>traceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>spanId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>parentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>getStartTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>getStopTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    </block_content>}</block></for>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addReceiver</name><parameter_list>(<parameter><decl><type><name>SpanReceiver</name></type> <name>receiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>receivers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeReceiver</name><parameter_list>(<parameter><decl><type><name>SpanReceiver</name></type> <name>receiver</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>receivers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>currentTrace</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>span</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>pop</name><parameter_list>(<parameter><decl><type><name>Span</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>span</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>deliver</name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentTrace</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>parent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>currentTrace</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>continueTrace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>push</name><argument_list>(<argument><expr><operator>new</operator> <call><name>RootMilliSpan</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name>traceId</name></expr></argument>, <argument><expr><call><name><name>random</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SpanReceiver</name></type> <name>receiver</name> <range>: <expr><name>receivers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>receiver</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>TInfo</name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>getTraceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>getSpanId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
    <return>return <expr><name>DONT_TRACE</name></expr>;</return>
   </block_content>}</block></function>
  
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>MilliSpan</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>MilliSpan</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>b641a2c08</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>MilliSpan</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">141</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Span</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Tracer</name></name>;</import>


<comment type="block" format="javadoc">/**
 * A Span implementation that stores its information in milliseconds since the epoch.
 */</comment>
<class><specifier>public</specifier> class <name>MilliSpan</name> <super_list><implements>implements <super><name>Span</name></super></implements></super_list> <block>{
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Random</name></type> <name>next</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>Span</name></type> <name>parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>long</name></type> <name>spanId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>long</name></type> <name>traceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>traceInfo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <name>Span</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>MilliSpan</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><call><name><name>next</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>traceId</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <constructor><specifier>public</specifier> <name>MilliSpan</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>Span</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>spanId</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name>traceId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Span for "</literal> <operator>+</operator> <name>description</name> <operator>+</operator> <literal type="string">" has already been started"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Span for "</literal> <operator>+</operator> <name>description</name> <operator>+</operator> <literal type="string">" has not been started"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>stop</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pop</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>protected</specifier> <name>long</name></type> <name>currentTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>running</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>start</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stop</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>accumulatedMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>stop</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>stop</name> <operator>-</operator> <name>start</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>currentTimeMillis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>parentId</name> <init>= <expr><call><name>parentId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><literal type="string">"\""</literal> <operator>+</operator> <call><name>description</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\" trace:"</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><call><name>traceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" span:"</literal> <operator>+</operator> <name>spanId</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>parentId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">" parent:"</literal> <operator>+</operator> <name>parentId</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">" start:"</literal>
        <operator>+</operator> <name>start</name> <operator>+</operator> <literal type="string">" ms: "</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name>accumulatedMillis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>running</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"..."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</return>
    
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>description</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>spanId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>spanId</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Span</name></type> <name>parent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>parent</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>parent</name><operator>.</operator><name>spanId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>traceId</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStartTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>start</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStopTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>stop</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>data</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>traceInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>traceInfo</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>traceInfo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>traceInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>traceInfo</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>NullSpan</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>NullSpan</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">916b6cf37</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>NullSpan</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">102</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>Span</name></name>;</import>


<comment type="block" format="javadoc">/**
 * A Span that does nothing. Used to avoid returning and checking for nulls when we are not tracing.
 * 
 */</comment>
<class><specifier>public</specifier> class <name>NullSpan</name> <super_list><implements>implements <super><name>Span</name></super></implements></super_list> <block>{
  
  <constructor><specifier>public</specifier> <name>NullSpan</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>accumulatedMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"NullSpan"</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStartTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getStopTimeMillis</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Span</name></type> <name>parent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>running</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>spanId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Span</name></type> <name>child</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>data</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"Not Tracing"</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>RootMilliSpan</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>RootMilliSpan</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>c25e64442</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>RootMilliSpan</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">43</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>impl</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Span that roots the span tree in a process, but perhaps not the whole trace.
 * 
 */</comment>
<class><specifier>public</specifier> class <name>RootMilliSpan</name> <super_list><extends>extends <super><name>MilliSpan</name></super></extends></super_list> <block>{
  
  <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>traceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>parentId</name></decl>;</decl_stmt>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>traceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>traceId</name></expr>;</return>
  </block_content>}</block></function>
  
  <constructor><specifier>public</specifier> <name>RootMilliSpan</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><name>spanId</name></expr></argument>, <argument><expr><name>traceId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name>traceId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parentId</name></name> <operator>=</operator> <name>parentId</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>long</name></type> <name>parentId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>parentId</name></expr>;</return>
  </block_content>}</block></function>
  
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>LogSpans</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>LogSpans</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>dfed660a9</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>LogSpans</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">63</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A SpanReceiver that just logs the data using log4j.
 */</comment>
<class><specifier>public</specifier> class <name>LogSpans</name> <super_list><implements>implements <super><name>SpanReceiver</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name></type> <name>log</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LogSpans</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <class><specifier>static</specifier> <specifier>public</specifier> class <name>SpanLevel</name> <super_list><extends>extends <super><name>Level</name></super></extends></super_list> <block>{
    
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>protected</specifier> <name>SpanLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>DEBUG_INT</name></name> <operator>+</operator> <literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"SPAN"</literal></expr></argument>, <argument><expr><name><name>Level</name><operator>.</operator><name>DEBUG_INT</name></name> <operator>+</operator> <literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Level</name></type> <name>toLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>DEBUG_INT</name></name> <operator>+</operator> <literal type="number">150</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>Level</name><operator>.</operator><name>DEBUG</name></name></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><call><name><name>Level</name><operator>.</operator><name>toLevel</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Level</name></type> <name>SPAN</name> <init>= <expr><operator>new</operator> <call><name>SpanLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>parentStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>parentId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>parentStr</name> <operator>=</operator> <literal type="string">" parent:"</literal> <operator>+</operator> <name>parentId</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>startStr</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"HH:mm:ss.SSS"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%20s:%x id:%d%s start:%s ms:%d"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>traceId</name></expr></argument>, <argument><expr><name>spanId</name></expr></argument>, <argument><expr><name>parentStr</name></expr></argument>, <argument><expr><name>startStr</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>span</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>SPAN</name></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>traceId</name></expr></argument>, <argument><expr><name>spanId</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SpanReceiver</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SpanReceiver</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>b44e51edf</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>SpanReceiver</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The collector within a process that is the destination of Spans when a trace is running.
 */</comment>
<interface><specifier>public</specifier> interface <name>SpanReceiver</name> <block>{
  <decl_stmt><decl><type><name>void</name></type> <name>span</name><argument_list>(<argument><expr><name>long</name> <name>traceId</name></expr></argument>, <argument><expr><name>long</name> <name>spanId</name></expr></argument>, <argument><expr><name>long</name> <name>parentId</name></expr></argument>, <argument><expr><name>long</name> <name>start</name></expr></argument>, <argument><expr><name>long</name> <name>stop</name></expr></argument>, <argument><expr><name>String</name> <name>description</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <function_decl><type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>ZooSpanClient</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>ZooSpanClient</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">84e320475</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name>receivers</name><operator>/</operator><name><name>ZooSpanClient</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">122</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name></name>;</package>

<import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>WatchedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooKeeper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooKeeper</name><operator>.</operator><name>States</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Find a Span collector via zookeeper and push spans there via Thrift RPC
 * 
 */</comment>
<class><specifier>public</specifier> class <name>ZooSpanClient</name> <super_list><extends>extends <super><name>SendSpansViaThrift</name></super></extends></super_list> <block>{
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ZooSpanClient</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TOTAL_TIME_WAIT_CONNECT_MS</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIME_WAIT_CONNECT_CHECK_MS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>ZooKeeper</name></type> <name>zoo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>ZooSpanClient</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keepers</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zoo</name> <operator>=</operator> <operator>new</operator> <call><name>ZooKeeper</name><argument_list>(<argument><expr><name>keepers</name></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Watcher</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>zoo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>updateHosts</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>zoo</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"unable to get destination hosts in zookeeper"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TOTAL_TIME_WAIT_CONNECT_MS</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>TIME_WAIT_CONNECT_CHECK_MS</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>zoo</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>States</name><operator>.</operator><name>CONNECTED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>TIME_WAIT_CONNECT_CHECK_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>zoo</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><name>void</name></type> <name>sendSpans</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sendQueue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"No hosts to send data to, dropping queued spans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized <init>(<expr><name>sendQueue</name></expr>)</init> <block>{<block_content>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>sendQueue</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>sendSpans</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>synchronized</specifier> <specifier>private</specifier> <name>void</name></type> <name>updateHosts</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Scanning trace hosts in zookeeper: "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>child</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>zoo</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>child</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>hosts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>hosts</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Trace hosts: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>hosts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"unable to get destination hosts in zookeeper"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>synchronized</specifier> <specifier>protected</specifier> <name>String</name></type> <name>getSpanKey</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><call><name><name>hosts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"sending data to "</literal> <operator>+</operator> <name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>host</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>Annotation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>Annotation</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c00744eee</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>Annotation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">502</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>Annotation</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>, <argument><name><name>Annotation</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"Annotation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TIME_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>MSG_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AnnotationStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AnnotationTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>time</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>msg</name></decl>;</decl_stmt> <comment type="line">// required</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>TIME</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>MSG</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// TIME</comment>
          <return>return <expr><name>TIME</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// MSG</comment>
          <return>return <expr><name>MSG</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__TIME_ISSET_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>__isset_bitfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TIME</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>MSG</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>Annotation</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>Annotation</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>Annotation</name><parameter_list>(
    <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>,
    <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setTimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>Annotation</name><parameter_list>(<parameter><decl><type><name>Annotation</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>__isset_bitfield</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>msg</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>Annotation</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setTimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getTime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>time</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Annotation</name></type> <name>setTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setTimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetTime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__TIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field time is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__TIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__TIME_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getMsg</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>msg</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Annotation</name></type> <name>setMsg</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetMsg</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field msg is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetMsg</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setMsgIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setTime</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>MSG</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetMsg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setMsg</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIME</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>MSG</name></expr>:</case>
      <return>return <expr><call><name>getMsg</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIME</name></expr>:</case>
      <return>return <expr><call><name>isSetTime</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>MSG</name></expr>:</case>
      <return>return <expr><call><name>isSetMsg</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>Annotation</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>Annotation</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Annotation</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_time</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_time</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_time</name> <operator>||</operator> <name>that_present_time</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_time</name> <operator>&amp;&amp;</operator> <name>that_present_time</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>time</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>time</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_msg</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_msg</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_msg</name> <operator>||</operator> <name>that_present_msg</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_msg</name> <operator>&amp;&amp;</operator> <name>that_present_msg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>msg</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Annotation</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetTime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetMsg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetMsg</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"Annotation("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"time:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"msg:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>msg</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.</comment>
      <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AnnotationStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>AnnotationStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>AnnotationStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AnnotationStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>Annotation</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// TIME</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// MSG</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setMsgIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>Annotation</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TIME_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>msg</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>MSG_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AnnotationTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>AnnotationTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>AnnotationTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AnnotationTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>Annotation</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetMsg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>Annotation</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setMsgIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>RemoteSpan</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>RemoteSpan</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">416ae1792</literal><operator>..</operator><name>bfe183d3e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>RemoteSpan</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>RemoteSpan</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>START_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>STOP_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>DESCRIPTION_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>DATA_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>DATA_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>ANNOTATIONS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"annotations"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
   <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>start</name></decl>;</decl_stmt> <comment type="line">// required</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>stop</name></decl>;</decl_stmt> <comment type="line">// required</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name></type> <name>annotations</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
   <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
   <enum><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl><name>START</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></decl>,
     <decl><name>STOP</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></decl>,
     <decl><name>DESCRIPTION</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>DATA</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></decl>;
    <decl><name>DATA</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>ANNOTATIONS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"annotations"</literal></expr></argument>)</argument_list></decl>;
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>STOP</name></expr>;</return>
         <case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="line">// DESCRIPTION</comment>
           <return>return <expr><name>DESCRIPTION</name></expr>;</return>
        <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// DATA</comment>
        <case>case <expr><literal type="number">10</literal></expr>:</case> <comment type="line">// DATA</comment>
           <return>return <expr><name>DATA</name></expr>;</return>
        <case>case <expr><literal type="number">11</literal></expr>:</case> <comment type="line">// ANNOTATIONS</comment>
          <return>return <expr><name>ANNOTATIONS</name></expr>;</return>
         <default>default:</default>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
       }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)</block_content></block>;</function>
     <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
         <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>MapMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>            , <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> 
            <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>            , <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block></class>)</block></interface>)</block><empty_stmt>;</empty_stmt></interface>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>ANNOTATIONS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"annotations"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>ListMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>Annotation</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <constructor_decl><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><parameter_list>(<parameter><decl><type><name><name>RemoteSpan</name><operator>.</operator><name>class</name></name></type></decl></parameter>, <parameter><decl><type><name>metaDataMap</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
   }</block></interface>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">205</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">213</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>,
     <decl><type ref="prev"/><name>long</name> <name>stop</name></decl>,
     <decl><type ref="prev"/><name>String</name> <name>description</name></decl>,
    <decl><type ref="prev"/><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>data</name></decl>)
    Map&lt;ByteBuffer<operator>,</operator>ByteBuffer&gt; data<operator>,</operator>
    List&lt;Annotation&gt; annotations</decl_stmt>)</block>
   <block>{<block_content>
     <constructor_decl><name>this</name><parameter_list>()</parameter_list>;</constructor_decl>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sender</name></name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">231</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <expr_stmt><expr><call><name>setStopIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <name>annotations</name></expr>;</expr_stmt>
   </block_content>}</block></class>
 
   <comment type="block" format="javadoc">/**
@@ -244,9 +254,16 @@ import org.slf4j.LoggerFactory;
       this.description = other.description;
     }
     if (other.isSetData()) {
      Map&lt;String,String&gt; __this__data = new HashMap&lt;String,String&gt;(other.data);
      Map&lt;ByteBuffer,ByteBuffer&gt; __this__data = new HashMap&lt;ByteBuffer,ByteBuffer&gt;(other.data);
       this.data = __this__data;
     }
    if (other.isSetAnnotations()) {
      List&lt;Annotation&gt; __this__annotations = new ArrayList&lt;Annotation&gt;(other.annotations.size());
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
   }
 
   public RemoteSpan deepCopy() {
@@ -269,6 +286,7 @@ import org.slf4j.LoggerFactory;
     this.stop = 0;
     this.description = null;
     this.data = null;
    this.annotations = null;
   }
 
   public String getSender() {
@@ -462,18 +480,18 @@ import org.slf4j.LoggerFactory;
     return (this.data == null) ? 0 : this.data.size();
   }
 
  public void putToData(String key, String val) {
  public void putToData(ByteBuffer key, ByteBuffer val) {
     if (this.data == null) {
      this.data = new HashMap&lt;String,String&gt;();
      this.data = new HashMap&lt;ByteBuffer,ByteBuffer&gt;();
     }
     this.data.put(key, val);
   }
 
  public Map&lt;String,String&gt; getData() {
  public Map&lt;ByteBuffer,ByteBuffer&gt; getData() {
     return this.data;
   }
 
  public RemoteSpan setData(Map&lt;String,String&gt; data) {
  public RemoteSpan setData(Map&lt;ByteBuffer,ByteBuffer&gt; data) {
     this.data = data;
     return this;
   }
@@ -493,6 +511,45 @@ import org.slf4j.LoggerFactory;
     }
   }
 
  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator&lt;Annotation&gt; getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList&lt;Annotation&gt;();
    }
    this.annotations.add(elem);
  }

  public List&lt;Annotation&gt; getAnnotations() {
    return this.annotations;
  }

  public RemoteSpan setAnnotations(List&lt;Annotation&gt; annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetAnnotations</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>annotations</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnnotationsIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
     <case>case <expr><name>SENDER</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">563</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">620</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>unsetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setData</name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setData</name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>ANNOTATIONS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetAnnotations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setAnnotations</name><argument_list>(<argument><expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
       <break>break;</break>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">599</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">664</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <case>case <expr><name>DATA</name></expr>:</case>
       <return>return <expr><call><name>getData</name><argument_list>()</argument_list></call></expr>;</return>
 
    <case>case <expr><name>ANNOTATIONS</name></expr>:</case>
      <return>return <expr><call><name>getAnnotations</name><argument_list>()</argument_list></call></expr>;</return>

     </block_content>}</block></switch>
     <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">628</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">696</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <return>return <expr><call><name>isSetDescription</name><argument_list>()</argument_list></call></expr>;</return>
     <case>case <expr><name>DATA</name></expr>:</case>
       <return>return <expr><call><name>isSetData</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>ANNOTATIONS</name></expr>:</case>
      <return>return <expr><call><name>isSetAnnotations</name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></try>
     <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw></block></expr>;</expr_stmt>
   </block_content>}</block></constructor>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">726</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">796</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
     }</block></class>
 
    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_annotations</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetAnnotations</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_annotations</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetAnnotations</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_annotations</name> <operator>||</operator> <name>that_present_annotations</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_annotations</name> <operator>&amp;&amp;</operator> <name>that_present_annotations</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>annotations</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

     <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">832</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">911</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><name>lastComparison</name></expr>;</return>
       </block_content>}</block></function>
     </block_content>}</block></function>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetAnnotations</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetAnnotations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetAnnotations</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>annotations</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
     <return>return <expr><literal type="number">0</literal></expr>;</return>
   }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">903</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">992</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
     first <expr_stmt><expr><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"annotations:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>annotations</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
   }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">1012</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1109</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }
             break<empty_stmt>;</empty_stmt>
          <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// DATA</comment>
          <case>case <expr><literal type="number">10</literal></expr>:</case> <comment type="line">// DATA</comment>
             <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
               <block>{<block_content>
                 <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map0</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map0</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map0</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <for>for <control>(<init><decl><type><name>int</name></type> <name>_i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i1</name> <operator>&lt;</operator> <name><name>_map0</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i1</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key2</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val3</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key2</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val3</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key2</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_val3</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key2</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val3</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key2</name></expr></argument>, <argument><expr><name>_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1032</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1129</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block>
             <break>break;</break>
          <case>case <expr><literal type="number">11</literal></expr>:</case> <comment type="line">// ANNOTATIONS</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
              <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list4</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list4</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i5</name> <operator>&lt;</operator> <name><name>_list4</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i5</name></expr></incr>)</control>
                <block>{<block_content>
                  <decl_stmt><decl><type><name>Annotation</name></type> <name>_elem6</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem6</name> <operator>=</operator> <operator>new</operator> <call><name>Annotation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem6</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>annotations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAnnotationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
           <default>default:</default>
             <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1081</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1197</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>DATA_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter4</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></name></type> <name>_iter7</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
           <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter4</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter4</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter7</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter7</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for></block_content></block></for>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
      if <expr_stmt><expr><operator>(</operator><name><name>struct</name><operator>.</operator><name>annotations</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
        <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>ANNOTATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;
        <expr><block>{
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>annotations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
          <for>for <control>(<init><decl><type><name>Annotation</name></type> <name>_iter8</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>annotations</name></name></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>_iter8</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></for>}</block>
          <call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
        <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }
       oprot<expr_stmt><expr><operator>.</operator><call><name>writeFieldStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">1135</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1263</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetData</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAnnotations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSender</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1163</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1294</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetData</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter5</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></name></type> <name>_iter9</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
           <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter5</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter5</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter9</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter9</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for></block_content></block></for>
        </block_content>}</block>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAnnotations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>annotations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>Annotation</name></type> <name>_iter10</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>annotations</name></name></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>_iter10</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for>
         </block_content>}</block>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1315</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>RemoteSpan</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
       <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>sender</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSenderIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1210</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">1350</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       </block_content>}</block></if></if_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <block>{<block_content>
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map6</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map6</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>_i7</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i7</name> <operator>&lt;</operator> <name><name>_map6</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i7</name></expr></incr>)</control><block type="pseudo"><block_content>
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map11</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map11</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>_i12</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i12</name> <operator>&lt;</operator> <name><name>_map11</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i12</name></expr></incr>)</control>
           <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>_key8</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>_val9</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>_key8</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>_val9</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key8</name></expr></argument>, <argument><expr><name>_val9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key13</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_val14</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>_key13</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>_val14</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key13</name></expr></argument>, <argument><expr><name>_val14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for>
         </block_content>}</block>
         <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setDataIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list15</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>annotations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list15</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>_i16</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i16</name> <operator>&lt;</operator> <name><name>_list15</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i16</name></expr></incr>)</control>
          <block>{<block_content>
            <decl_stmt><decl><type><name>Annotation</name></type> <name>_elem17</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>_elem17</name> <operator>=</operator> <operator>new</operator> <call><name>Annotation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>_elem17</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>annotations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem17</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAnnotationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></function>
   }
 
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>trace</name><operator>.</operator><name>thrift</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>trace</name><operator>.</operator><name>thrift</name></name>
<name>index</name> <literal type="number">76bcafe74</literal><operator>..</operator><name>b7e0abf43</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>trace</name><operator>.</operator><name>thrift</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>trace</name><operator>.</operator><name>thrift</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
 <name>namespace</name> <name>java</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name></name>
 <name>namespace</name> <name>cpp</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name></name>
 
<name>struct</name> <name>Annotation</name> <block>{
   <expr><literal type="number">1</literal><operator>:</operator><name>i64</name> <name>time</name></expr>,
   <expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>msg</name></expr>
}</block>

 <name>struct</name> <name>RemoteSpan</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name>string</name> <name>sender</name></expr>,
    <expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>svc</name></expr>, 
@@ <expr><operator>-</operator><literal type="number">26</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr>,<expr><literal type="number">8</literal> @@ <name>struct</name> <name>RemoteSpan</name> <block>{
    <expr><literal type="number">6</literal><operator>:</operator><name>i64</name> <name>start</name></expr>, 
    <expr><literal type="number">7</literal><operator>:</operator><name>i64</name> <name>stop</name></expr>, 
    <expr><literal type="number">8</literal><operator>:</operator><name>string</name> <name>description</name></expr>, 
   <expr><literal type="number">9</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>, <argument><name>string</name></argument>&gt;</argument_list></name> <name>data</name>
   <literal type="number">10</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>binary</name></argument>, <argument><name>binary</name></argument>&gt;</argument_list></name> <name>data</name></expr>,
   <expr><literal type="number">11</literal><operator>:</operator><name><name>list</name><argument_list type="generic">&lt;<argument><name>Annotation</name></argument>&gt;</argument_list></name> <name>annotations</name></expr>
 }</block>
 
 <name>struct</name> <name>TInfo</name> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TracerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TracerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f338bd8fb</name><operator>..</operator><literal type="number">4afdebe01</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TracerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>trace</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>trace</name><operator>/</operator><name>instrument</name><operator>/</operator><name><name>TracerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import></block></expr>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import></block></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ServerSocket</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>receivers</name><operator>.</operator><name>SpanReceiver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>instrument</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TraceWrap</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TestService</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>TThreadPoolServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TServerSocket</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TSocket</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TTransport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>HTraceConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>SpanReceiver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>wrappers</name><operator>.</operator><name>TraceProxy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 
 <class><specifier>public</specifier> class <name>TracerTest</name> <block>{
   <class><specifier>static</specifier> class <name>SpanStruct</name> <block>{
    <constructor><specifier>public</specifier> <name>SpanStruct</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>SpanStruct</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>traceId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>spanId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name>traceId</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>spanId</name></name> <operator>=</operator> <name>spanId</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracerTest</name> <block>{
     <expr><specifier>public</specifier> <name>long</name> <name>start</name></expr>;
     <expr><specifier>public</specifier> <name>long</name> <name>stop</name></expr>;
     <expr><specifier>public</specifier> <name>String</name> <name>description</name></expr>;
    <expr><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>data</name></expr>;
    <expr><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name> <name>data</name></expr>;
     
     <expr><specifier>public</specifier> <name>long</name> <call><name>millis</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><name>stop</name> <operator>-</operator> <name>start</name></expr>;</return>
@@ <operator>-</operator><literal type="number">77</literal><operator>,</operator><literal type="number">21</literal> <operator>+</operator><literal type="number">81</literal><operator>,</operator><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracerTest</name> <block>{
     <expr><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>SpanStruct</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>traces</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>SpanStruct</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>span</name><argument_list>(<argument><expr><name>long</name> <name>traceId</name></expr></argument>, <argument><expr><name>long</name> <name>spanId</name></expr></argument>, <argument><expr><name>long</name> <name>parentId</name></expr></argument>, <argument><expr><name>long</name> <name>start</name></expr></argument>, <argument><expr><name>long</name> <name>stop</name></expr></argument>, <argument><expr><name>String</name> <name>description</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>data</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>SpanStruct</name> <name>span</name> <operator>=</operator> <operator>new</operator> <call><name>SpanStruct</name><argument_list>(<argument><expr><name>traceId</name></expr></argument>, <argument><expr><name>spanId</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;
    <expr><specifier>public</specifier> <name>void</name> <call><name>receiveSpan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Span</name></name> <name>s</name></expr></argument>)</argument_list></call>  <block>{
      <expr><name>long</name> <name>traceId</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>getTraceId</name></name><argument_list>()</argument_list></call></expr>;
      <expr><name>SpanStruct</name> <name>span</name> <operator>=</operator> <operator>new</operator> <call><name>SpanStruct</name><argument_list>(<argument><expr><name>traceId</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getSpanId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getStartTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getStopTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>s</name><operator>.</operator><name>getKVAnnotations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>traces</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>traces</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SpanStruct</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <call><name><name>traces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></block></expr>;
     }</block>
     
     @<name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>flush</name><argument_list>()</argument_list></call> <block>{}</block>
    <specifier>public</specifier> <name>void</name> <call><name>configure</name><argument_list>(<argument><expr><name>HTraceConfiguration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
    }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    }</block></expr></argument></throws></expr>
   }</block></block>
   
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
   <annotation>@<name>Test</name></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testTrace</name><argument_list>()</argument_list></call></expr> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>TestReceiver</name> <name>tracer</name> <operator>=</operator> <operator>new</operator> <call><name>TestReceiver</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addReceiver</name><argument_list>(<argument><expr><name>tracer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>addReceiver</name></name><argument_list>(<argument><expr><name>tracer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracerTest</name> <block>{
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     
     <expr><name>Span</name> <name>start</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>start</name><operator>.</operator><name>getScope</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSpan</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Trace</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     
    <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"shortest trace ever"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;
    <expr><name>long</name> <name>traceId</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>currentTrace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>traceId</name><argument_list>()</argument_list></call></expr>;
    <expr><name>Span</name> <name>span</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"shortest trace ever"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>long</name> <name>traceId</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>currentTraceId</name></name><argument_list>()</argument_list></call></expr>;
     <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>tracer</name><operator>.</operator><name>traces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>tracer</name><operator>.</operator><name>traces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"shortest trace ever"</literal></expr></argument>, <argument><expr><call><name><name>tracer</name><operator>.</operator><name>traces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>traceId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>description</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">149</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">161</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracerTest</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testThrift</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>TestReceiver</name> <name>tracer</name> <operator>=</operator> <operator>new</operator> <call><name>TestReceiver</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name><name>Tracer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addReceiver</name><argument_list>(<argument><expr><name>tracer</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>org</name><operator>.</operator><name>htrace</name><operator>.</operator><name>Trace</name><operator>.</operator><name>addReceiver</name></name><argument_list>(<argument><expr><name>tracer</name></expr></argument>)</argument_list></call></expr>;
     
     <expr><name>ServerSocket</name> <name>socket</name> <operator>=</operator> <operator>new</operator> <call><name>ServerSocket</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>TServerSocket</name> <name>transport</name> <operator>=</operator> <operator>new</operator> <call><name>TServerSocket</name><argument_list>(<argument><expr><name>socket</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">195</literal></expr>,<expr><literal type="number">25</literal> <operator>+</operator><literal type="number">207</literal></expr>,<expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>TracerTest</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Verify that exceptions propagate up through the trace wrapping with sampling enabled, instead of seeing the reflexive exceptions.
   * Verify that exceptions propagate up through the trace wrapping with sampling enabled, as the cause of the reflexive exceptions.
    */</comment>
   @<call><name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IOException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testTracedException</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
  <expr><specifier>public</specifier> <name>void</name> <call><name>testTracedException</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Throwable</name> <block>{</block></expr></argument></throws></expr>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw>
    <expr_stmt/></block_content></block></catch>}</block></expr></expr_stmt>
   </block_content>}</block></constructor>
 
   <comment type="block" format="javadoc">/**
   * Verify that exceptions propagate up through the trace wrapping with sampling disabled, instead of seeing the reflexive exceptions.
   * Verify that exceptions propagate up through the trace wrapping with sampling disabled, as the cause of the reflexive exceptions.
    */</comment>
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IOException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUntracedException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Sampler</name></type> <name>never</name> <init>= <expr><operator>new</operator> <class><super><name>Sampler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><name>never</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testUntracedException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>TraceProxy</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>NEVER</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></constructor></block></class></block></class>

</unit>
