<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/45f18c174.java"><expr_stmt><expr><name>From</name> <literal type="number">45f18c174612d1a41eed1d2eec9e77d3b3e71a82</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Keith</name> <name><name>Turner</name> <argument_list type="generic">&lt;<argument><name>kturner</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">21</literal> <name>Sep</name> <literal type="number">2015</literal> <literal type="number">09</literal><operator>:</operator><literal type="number">44</literal><operator>:</operator><literal type="number">47</literal> <operator>-</operator><literal type="number">0400</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">3913</literal> <name>Added</name> <name>per</name> <name>table</name> <name>sampling</name>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientSideIteratorScanner</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">161</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name><name>SampleNotPresentException</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">42</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ScannerBase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">46</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>NewTableConfiguration</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">31</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SamplerConfiguration</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">91</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">29</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>BaseIteratorEnvironment</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">83</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>OfflineIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">52</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerOptions</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">29</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">39</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchReaderIterator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftScanner</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">15</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">19</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">15</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">19</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputTableConfig</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">26</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>RangeInputSplit</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">21</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SplitUtils</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>FileOutputConfigurator</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">29</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">53</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockScannerBase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">16</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockTableOperations</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">17</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>CompactionSettings</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>NullType</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">29</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>BloomFilterLayer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>FileSKVIterator</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>map</name><operator>/</operator><name><name>MapFileOperations</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiIndexIterator</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndex</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>PrintInfo</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">28</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFile</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">511</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileOperations</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>IteratorEnvironment</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">50</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>WrappingIterator</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">8</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>EmptyIterator</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">72</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>MapFileIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SampleIterator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">46</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>system</name><operator>/</operator><name><name>SequenceFileIterator</name><operator>.</operator><name>java</name></name>          <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>AbstractHashSampler</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">106</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowColumnSampler</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">124</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowSampler</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">49</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">57</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">184</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerFactory</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">48</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSampleNotPresentException</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">409</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSamplerConfiguration</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">556</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TabletClientService</name><operator>.</operator><name>java</name></name>           <operator>|</operator> <literal type="number">1762</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LocalityGroupUtil</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>tabletserver</name><operator>.</operator><name>thrift</name></name>      <operator>|</operator>   <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">17</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">13</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndexTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">333</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>iterators</name><operator>/</operator><name><name>DefaultIteratorEnvironment</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>FirstEntryInRowIteratorTest</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">37</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIteratorTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">46</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>user</name><operator>/</operator><name><name>RowDeletingIteratorTest</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">30</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>user</name><operator>/</operator><name><name>RowEncodingIteratorTest</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">52</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>user</name><operator>/</operator><name><name>TransformingIteratorTest</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">41</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>ver_7</name><operator>.</operator><name>rf</name></name>  <operator>|</operator>  <name>Bin</name> <literal type="number">0</literal> <operator>-&gt;</operator> <literal type="number">14557</literal> <name>bytes</name>
 <operator>...</operator><operator>/</operator><name>asciidoc</name><operator>/</operator><name><name>accumulo_user_manual</name><operator>.</operator><name>asciidoc</name></name>    <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator>
 <name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name></name>  <operator>|</operator>   <literal type="number">86</literal> <operator>+</operator>
 <name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>examples</name><operator>/</operator><name>README</name>       <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>examples</name><operator>/</operator><name><name>README</name><operator>.</operator><name>sample</name></name> <operator>|</operator>  <literal type="number">192</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>SampleExample</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">150</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>shard</name><operator>/</operator><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">123</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>Query</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">31</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>VerifyTabletAssignments</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>iterators</name><operator>/</operator><name><name>MetadataBulkLoadFilterTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>replication</name><operator>/</operator><name><name>StatusCombinerTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">39</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>NullScanner</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">11</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>FileManager</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">30</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">244</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemKeyConversionIterator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemValue</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">63</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>NativeMap</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletIteratorEnvironment</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">61</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">38</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>ConfigurableCompactionStrategy</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">22</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>LookupTask</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>NextBatchTask</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name>session</name><operator>/</operator><name><name>MultiScanSession</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanDataSource</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">24</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanOptions</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>TabletMemory</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMapTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">383</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>DefaultCompactionStrategyTest</name><operator>.</operator><name>java</name></name>        <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>        <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>GrepCommand</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ScanCommand</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">23</literal> <operator>+</operator>
 <name>start</name><operator>/</operator><operator>.</operator><name>gitignore</name>                              <operator>|</operator>    <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name><name>InMemoryMapMemoryUsageTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>SampleIT</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">497</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">72</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ReadWriteIT</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">18</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">57</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">18</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">49</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>performance</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>NullTserver</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">109</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">6864</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">1139</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>SampleNotPresentException</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SamplerConfiguration</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>BaseIteratorEnvironment</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>NullType</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>EmptyIterator</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SampleIterator</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>AbstractHashSampler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowColumnSampler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowSampler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSampleNotPresentException</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSamplerConfiguration</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIteratorTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>ver_7</name><operator>.</operator><name>rf</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>examples</name><operator>/</operator><name><name>README</name><operator>.</operator><name>sample</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>SampleExample</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>SampleIT</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientSideIteratorScanner</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientSideIteratorScanner</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>eb3c923f7</name><operator>..</operator><literal type="number">5dc6d5961</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientSideIteratorScanner</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ClientSideIteratorScanner</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ScannerOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ArrayByteSequence</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * A scanner that instantiates iterators on the client side instead of on the tablet server. This can be useful for testing iterators or in cases where you
  * don't want iterators affecting the performance of tablet servers.&lt;br&gt;
@@ -60,6 +63,7 @@ public class ClientSideIteratorScanner extends ScannerOptions implements Scanner
   private Range range;
   private boolean isolated = false;
   private long readaheadThreshold = Constants.SCANNER_DEFAULT_READAHEAD_THRESHOLD;
  private SamplerConfiguration iteratorSamplerConfig;
 
   /**
    * @deprecated since 1.7.0 was never intended for public use. However this could have been used by anything extending this class.
@@ -67,7 +71,7 @@ public class ClientSideIteratorScanner extends ScannerOptions implements Scanner
   @Deprecated
   public class ScannerTranslator extends ScannerTranslatorImpl {
     public ScannerTranslator(Scanner scanner) {
      super(scanner);
      super(scanner, scanner.getSamplerConfiguration());
     }
 
     @Override
@@ -76,6 +80,62 @@ public class ClientSideIteratorScanner extends ScannerOptions implements Scanner
     }
   }
 
  private class ClientSideIteratorEnvironment implements IteratorEnvironment {

    private SamplerConfiguration samplerConfig;
    private boolean sampleEnabled;

    ClientSideIteratorEnvironment(boolean sampleEnabled, SamplerConfiguration samplerConfig) {
      this.sampleEnabled = sampleEnabled;
      this.samplerConfig = samplerConfig;
    }

    @Override
    public SortedKeyValueIterator&lt;Key,Value&gt; reserveMapFileReader(String mapFileName) throws IOException {
      throw new UnsupportedOperationException();
    }

    @Override
    public AccumuloConfiguration getConfig() {
      throw new UnsupportedOperationException();
    }

    @Override
    public IteratorScope getIteratorScope() {
      return IteratorScope.scan;
    }

    @Override
    public boolean isFullMajorCompaction() {
      return false;
    }

    @Override
    public void registerSideChannel(SortedKeyValueIterator&lt;Key,Value&gt; iter) {
      throw new UnsupportedOperationException();
    }

    @Override
    public Authorizations getAuthorizations() {
      return ClientSideIteratorScanner.this.getAuthorizations();
    }

    @Override
    public IteratorEnvironment cloneWithSamplingEnabled() {
      return new ClientSideIteratorEnvironment(true, samplerConfig);
    }

    @Override
    public boolean isSamplingEnabled() {
      return sampleEnabled;
    }

    @Override
    public SamplerConfiguration getSamplerConfiguration() {
      return samplerConfig;
    }
  }

   /**
    * A class that wraps a Scanner in a SortedKeyValueIterator so that other accumulo iterators can use it as a source.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name>
     <specifier>protected</specifier> <name>Scanner</name> <name>scanner</name></expr>;</expr_stmt>
     <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>top</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Constructs an accumulo iterator from a scanner.
@@ -90,8 +151,9 @@ public class ClientSideIteratorScanner extends ScannerOptions implements Scanner
      * @param scanner
      *          the scanner to iterate over
      */</comment>
    <constructor><specifier>public</specifier> <name>ScannerTranslatorImpl</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Scanner</name></type> <name>scanner</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>ScannerTranslatorImpl</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Scanner</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scanner</name></name> <operator>=</operator> <name>scanner</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name></expr></expr_stmt>
       <for>for <control>(<init><decl><type><name>ByteSequence</name></type> <name>colf</name> <range>: <expr><name>columnFamilies</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>fetchColumnFamily</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>colf</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>clearSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

       <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">138</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name>
 
     @<name>Override</name>
     <specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>deepCopy</name><argument_list>(<argument><expr><name>final</name> <name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>env</name><operator>.</operator><name>isSamplingEnabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>env</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
     }
   }
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">220</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name>
    <operator>*</operator>          <name>the</name> <name>source</name> <name>scanner</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <call><name>ClientSideIteratorScanner</name><argument_list>(<argument><expr><name>final</name> <name>Scanner</name> <name>scanner</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>smi</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>smi</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><call><name><name>scanner</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getBatchSize</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>timeOut</name></name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getTimeout</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getTimeout</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getReadaheadThreshold</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>SamplerConfiguration</name> <name>samplerConfig</name> <operator>=</operator> <call><name><name>scanner</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/**
    * Sets the source Scanner.
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>setSource</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Scanner</name></type> <name>scanner</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>smi</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>smi</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerTranslatorImpl</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><call><name><name>scanner</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name></expr></expr_stmt>
     <if_stmt><else>else<block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>smi</name><operator>.</operator><name>scanner</name><operator>.</operator><name>disableIsolation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 
    <expr_stmt><expr><name><name>smi</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <call><name>getSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

     <decl_stmt><decl><type><specifier>final</specifier> <name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>IterInfo</name></argument>&gt;</argument_list></name></type> <name>tm</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>IterInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <for>for <control>(<init><decl><type><name>IterInfo</name></type> <name>iterInfo</name> <range>: <expr><name>serverSideIteratorList</name></expr></range></decl></init>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">185</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">259</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name>
 
     <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>skvi</name></expr>;</expr_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>skvi</name> <operator>=</operator> <call><name><name>IteratorUtil</name><operator>.</operator><name>loadIterators</name></name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><call><name><name>tm</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>serverSideIteratorOptions</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>IteratorEnvironment</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>mapFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>smi</name><operator>.</operator><name>scanner</name><operator>.</operator><name>getAuthorizations</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>skvi</name> <operator>=</operator> <call><name><name>IteratorUtil</name><operator>.</operator><name>loadIterators</name></name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><call><name><name>tm</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>serverSideIteratorOptions</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ClientSideIteratorEnvironment</name><argument_list>(<argument><expr><call><name>getSamplerConfiguration</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>,
          <argument><expr><call><name>getIteratorSamplerConfigurationInternal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">344</literal></expr><operator>,</operator><expr><literal type="number">50</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientSideIteratorScanner</name> extends <name>ScannerOptions</name> implements <name>Scanner</name></expr></expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <name>batches</name></expr>;</expr_stmt>
   }

  private <function><type><name>SamplerConfiguration</name></type> <name>getIteratorSamplerConfigurationInternal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>scannerSamplerConfig</name> <init>= <expr><call><name>getSamplerConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>scannerSamplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>iteratorSamplerConfig</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>iteratorSamplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>scannerSamplerConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Scanner and iterator sampler configuration differ"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>scannerSamplerConfig</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>iteratorSamplerConfig</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This is provided for the case where no sampler configuration is set on the scanner, but there is a need to create iterator deep copies that have sampling
   * enabled. If sampler configuration is set on the scanner, then this method does not need to be called inorder to create deep copies with sampling.
   *
   * &lt;p&gt;
   * Setting this differently than the scanners sampler configuration may cause exceptions.
   *
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setIteratorSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorSamplerConfig</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Clear any iterator sampler configuration.
   *
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>clearIteratorSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorSamplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return currently set iterator sampler configuration.
   *
   * @since 1.8.0
   */</comment>

  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getIteratorSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>iteratorSamplerConfig</name></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>SampleNotPresentException</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>SampleNotPresentException</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c70a89859</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>SampleNotPresentException</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Exception thrown when a table does not have sampling configured or when sampling is configured but it differs from what was requested.
 *
 * @since 1.8.0
 */</comment>

<class><specifier>public</specifier> class <name>SampleNotPresentException</name> <super_list><extends>extends <super><name>RuntimeException</name></super></extends></super_list> <block>{

  <constructor><specifier>public</specifier> <name>SampleNotPresentException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SampleNotPresentException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SampleNotPresentException</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ScannerBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ScannerBase</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e9d288bd0</name><operator>..</operator><literal type="number">564278581</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ScannerBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name><name>ScannerBase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">176</literal></expr><operator>,</operator><expr><literal type="number">51</literal> @@ <specifier>public</specifier> interface <name>ScannerBase</name> extends <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call></expr>;
 
  <comment type="block" format="javadoc">/**
   * Setting this will cause the scanner to read sample data, as long as that sample data was generated with the given configuration. By default this is not set
   * and all data is read.
   *
   * &lt;p&gt;
   * One way to use this method is as follows, where the sampler configuration is obtained from the table configuration. Sample data can be generated in many
   * different ways, so its important to verify the sample data configuration meets expectations.
   *
   * &lt;p&gt;
   *
   * &lt;pre&gt;
   * &lt;code&gt;
   *   // could cache this if creating many scanners to avoid RPCs.
   *   SamplerConfiguration samplerConfig = connector.tableOperations().getSamplerConfiguration(table);
   *   // verify table's sample data is generated in an expected way before using
   *   userCode.verifySamplerConfig(samplerConfig);
   *   scanner.setSamplerCongiguration(samplerConfig);
   * &lt;/code&gt;
   * &lt;/pre&gt;
   *
   * &lt;p&gt;
   * Of course this is not the only way to obtain a {@link SamplerConfiguration}, it could be a constant, configuration, etc.
   *
   * &lt;p&gt;
   * If sample data is not present or sample data was generated with a different configuration, then the scanner iterator will throw a
   * {@link SampleNotPresentException}. Also if a table's sampler configuration is changed while a scanner is iterating over a table, a
   * {@link SampleNotPresentException} may be thrown.
   *
   * @since 1.8.0
   */</comment>
  <expr><name>void</name> <call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * @return currently set sampler configuration. Returns null if no sampler configuration is set.
   * @since 1.8.0
   */</comment>
  <expr><name>SamplerConfiguration</name> <call><name>getSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * Clears sampler configuration making a scanner read all data. After calling this, {@link #getSamplerConfiguration()} should return null.
   *
   * @since 1.8.0
   */</comment>
  <expr><name>void</name> <call><name>clearSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;

   <comment type="block" format="javadoc">/**
    * This setting determines how long a scanner will wait to fill the returned batch. By default, a scanner wait until the batch is full.
    *
diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/NewTableConfiguration.java b/core/src/main/java/org/apache/accumulo/core/client/admin/NewTableConfiguration.java
index 4db1d8963..2107dc8cf 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/admin/NewTableConfiguration.java
++ b/core/src/main/java/org/apache/accumulo/core/client/admin/NewTableConfiguration.java
@@ -24,6 +24,9 @@ import java.util.Map;
 
 import org.apache.accumulo.core.iterators.IteratorUtil;
 import org.apache.accumulo.core.iterators.user.VersioningIterator;
import org.apache.accumulo.core.sample.impl.SamplerConfigurationImpl;

import com.google.common.base.Preconditions;
 
 /**
  * This object stores table creation parameters. Currently includes: {@link TimeType}, whether to include default iterators, and user-specified initial
@@ -39,6 +42,7 @@ public class NewTableConfiguration {
   private boolean limitVersion = true;
 
   private Map&lt;String,String&gt; properties = new HashMap&lt;String,String&gt;();
  private SamplerConfiguration samplerConfiguration;
 
   /**
    * Configure logical or millisecond time for tables created with this configuration.
@@ -84,6 +88,7 @@ public class NewTableConfiguration {
    */</comment>
   <expr><specifier>public</specifier> <name>NewTableConfiguration</name> <call><name>setProperties</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>prop</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>prop</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"properties is null"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>checkDisjoint</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name><name>this</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><name>this</name></expr>;</return>
@@ <operator>-</operator><literal type="number">101</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">106</literal><operator>,</operator><literal type="number">33</literal> @@ <specifier>public</specifier> <name>class</name> <name>NewTableConfiguration</name> <block>{
       <expr><call><name><name>propertyMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>IteratorUtil</name><operator>.</operator><name>generateInitialTableProperties</name></name><argument_list>(<argument><expr><name>limitVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></block></expr>
 
    <if_stmt><if>if <condition>(<expr><name>samplerConfiguration</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>propertyMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toTablePropertiesMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>

     <call><name><name>propertyMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>propertyMap</name></expr></argument>)</argument_list></call></expr>;</return>
   }

  private <function><type><name>void</name></type> <name>checkDisjoint</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>props</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>samplerConfiguration</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sampleProps</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toTablePropertiesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>disjoint</name></name><argument_list>(<argument><expr><call><name><name>props</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sampleProps</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Properties and derived sampler properties are not disjoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Enable building a sample data set on the new table using the given sampler configuration.
   *
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <name>NewTableConfiguration</name></type> <name>enableSampling</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkDisjoint</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfiguration</name></name> <operator>=</operator> <name>samplerConfiguration</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SamplerConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SamplerConfiguration</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..079d324a4</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SamplerConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">91</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class encapsultes configuration and options needed to setup and use sampling.
 *
 * @since 1.8.0
 */</comment>

<class><specifier>public</specifier> class <name>SamplerConfiguration</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>samplerClassName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>samplerClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>samplerClassName</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>setOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>addOption</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>addOption</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>option</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"option is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"value is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getSamplerClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>className</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>SamplerConfiguration</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>osc</name> <init>= <expr><operator>(</operator><name>SamplerConfiguration</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>osc</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>options</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>osc</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>className</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>options</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>className</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>options</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b7c70e986</name><operator>..</operator><name>fa6fef40e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> interface <name>TableOperations</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <name>boolean</name> <call><name>testClassLoad</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>className</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>asTypeName</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument>,
       <argument><expr><name>TableNotFoundException</name></expr></argument></throws></expr>;

  <comment type="block" format="javadoc">/**
   * Set or update the sampler configuration for a table. If the table has existing sampler configuration, those properties will be cleared before setting the
   * new table properties.
   *
   * @param tableName
   *          the name of the table
   * @since 1.8.0
   */</comment>
  <expr><name>void</name> <call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>SamplerConfiguration</name> <name>samplerConfiguration</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>,
      <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws></expr>;

  <comment type="block" format="javadoc">/**
   * Clear all sampling configuration properties on the table.
   *
   * @param tableName
   *          the name of the table
   * @since 1.8.0
   */</comment>
  <expr><name>void</name> <call><name>clearSamplerConfiguration</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws></expr>;

  <comment type="block" format="javadoc">/**
   * Reads the sampling configuration properties for a table.
   *
   * @param tableName
   *          the name of the table
   * @since 1.8.0
   */</comment>
  <expr><name>SamplerConfiguration</name> <call><name>getSamplerConfiguration</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws></expr>;
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>BaseIteratorEnvironment</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>BaseIteratorEnvironment</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..dc138ceb7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>BaseIteratorEnvironment</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An implementation of {@link IteratorEnvironment} that throws {@link UnsupportedOperationException} for each operation. This is useful for situations that
 * need to extend {@link IteratorEnvironment} and implement a subset of the methods.
 */</comment>

<class><specifier>public</specifier> class <name>BaseIteratorEnvironment</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mapFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>IteratorEnvironment</name></type> <name>cloneWithSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>OfflineIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>OfflineIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">793b04481</literal><operator>..</operator><literal type="number">9cce089be</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>OfflineIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>OfflineIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name></name>;</package>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>RowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>ConfigurationCopy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>DataFileColumnFamily</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>ColumnVisibility</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>

 <class>class <name>OfflineIterator</name> <super_list><implements>implements <super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
 
   <class><specifier>static</specifier> class <name>OfflineIteratorEnvironment</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Authorizations</name></type> <name>authorizations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AccumuloConfiguration</name></type> <name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useSample</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfiguration</name></type> <name>sampleConf</name></decl>;</decl_stmt>
 
    <constructor><specifier>public</specifier> <name>OfflineIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>Authorizations</name></type> <name>auths</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>OfflineIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>Authorizations</name></type> <name>auths</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>acuTableConf</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useSample</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConf</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>auths</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conf</name></name> <operator>=</operator> <name>acuTableConf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useSample</name></name> <operator>=</operator> <name>useSample</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleConf</name></name> <operator>=</operator> <name>samplerConf</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>OfflineIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>AccumuloConfiguration</name> <call><name>getConfig</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
      <return>return <expr><name>conf</name></expr>;</return>
     }</block></expr></expr_stmt>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <name>class</name> <name>OfflineIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
       <expr><call><name><name>allIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;
       <return>return <expr><operator>new</operator> <call><name>MultiIterator</name><argument_list>(<argument><expr><name>allIters</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>useSample</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>sampleConf</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>IteratorEnvironment</name></type> <name>cloneWithSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>sampleConf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><operator>new</operator> <call><name>OfflineIteratorEnvironment</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></constructor>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>OfflineIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
         <expr><call><name>nextTablet</name><argument_list>()</argument_list></call></expr>;
 
     }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>e</name></expr>;</throw></block_content></block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch>
   }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">306</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">334</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <name>class</name> <name>OfflineIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
 
     <expr><call><name><name>readers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
 
    <expr><name>SamplerConfiguration</name> <name>scannerSamplerConfig</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>SamplerConfigurationImpl</name> <name>scannerSamplerConfigImpl</name> <operator>=</operator> <ternary><condition><expr><name>scannerSamplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>scannerSamplerConfig</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;
    <expr><name>SamplerConfigurationImpl</name> <name>samplerConfImpl</name> <operator>=</operator> <call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuTableConf</name></expr></argument>)</argument_list></call></expr>;

    <if_stmt><if>if <condition>(<expr><name>scannerSamplerConfigImpl</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>samplerConfImpl</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>scannerSamplerConfigImpl</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>samplerConfImpl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>samplerConfImpl</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

     <comment type="line">// TODO need to close files - ACCUMULO-1303</comment>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>file</name> <range>: <expr><name>absFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>VolumeConfiguration</name><operator>.</operator><name>getVolume</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>reader</name> <init>= <expr><call><name><name>FileOperations</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openReader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>acuTableConf</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>scannerSamplerConfigImpl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><name>scannerSamplerConfigImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><call><name><name>readers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
 
     <decl_stmt><decl><type><name>MultiIterator</name></type> <name>multiIter</name> <init>= <expr><operator>new</operator> <call><name>MultiIterator</name><argument_list>(<argument><expr><name>readers</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name>OfflineIteratorEnvironment</name></type> <name>iterEnv</name> <init>= <expr><operator>new</operator> <call><name>OfflineIteratorEnvironment</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OfflineIteratorEnvironment</name></type> <name>iterEnv</name> <init>= <expr><operator>new</operator> <call><name>OfflineIteratorEnvironment</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>acuTableConf</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>samplerConfImpl</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr>
        </then><else>: <expr><call><name><name>samplerConfImpl</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>DeletingIterator</name></type> <name>delIter</name> <init>= <expr><operator>new</operator> <call><name>DeletingIterator</name><argument_list>(<argument><expr><name>multiIter</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">764db2156</literal><operator>..</operator><literal type="number">55b0a851c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableOfflineException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
           <expr><call><name><name>synchQ</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentBatch</name></expr></argument>)</argument_list></call></expr>;
           <return>return;</return>
         }</block></expr></expr_stmt>
      }</block></class> <catch>catch <parameter_list>(<parameter><decl><type><name>IsolationException</name></type> | <type><name>ScanTimedOutException</name></type> | <type><name>AccumuloException</name></type> | <type><name>AccumuloSecurityException</name></type> | <type><name>TableDeletedException</name></type> | <type><name>TableOfflineException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IsolationException</name></type> | <type><name>ScanTimedOutException</name></type> | <type><name>AccumuloException</name></type> | <type><name>AccumuloSecurityException</name></type> | <type><name>TableDeletedException</name></type> | <type><name>TableOfflineException</name></type>
          | <type><name>SampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>synchQ</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerIterator</name> implements <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <block>{
     }</block>
 
     <name>scanState</name> <operator>=</operator> <operator>new</operator> <call><name>ScanState</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tableId</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>fetchedColumns</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>serverSideIteratorList</name></name></expr></argument>,
        <argument><expr><name><name>options</name><operator>.</operator><name>serverSideIteratorOptions</name></name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>readaheadThreshold</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>serverSideIteratorOptions</name></name></expr><operator>,</operator> <expr><name>isolated</name></expr><operator>,</operator> <expr><name>readaheadThreshold</name></expr><operator>,</operator> <expr><call><name><name>options</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>options</name><operator>.</operator><name>batchTimeOut</name></name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch>
 
     <comment type="line">// If we want to start readahead immediately, don't wait for hasNext to be called</comment>
     <if_stmt><if>if <condition>(<expr><literal type="number">0l</literal> <operator>==</operator> <name>readaheadThreshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerOptions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerOptions</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cc337dd7b</name><operator>..</operator><literal type="number">8d9646406</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerOptions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ScannerOptions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ScannerBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>TextUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

 <class><specifier>public</specifier> class <name>ScannerOptions</name> <super_list><implements>implements <super><name>ScannerBase</name></super></implements></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name></type> <name>serverSideIteratorList</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerOptions</name> implements <name>ScannerBase</name> <block>{
 
   <expr><specifier>private</specifier> <name>String</name> <name>regexIterName</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
  <specifier>private</specifier> <name>SamplerConfiguration</name> <name>samplerConfig</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>

   <constructor><specifier>protected</specifier> <name>ScannerOptions</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
 
   <constructor><specifier>public</specifier> <name>ScannerOptions</name><parameter_list>(<parameter><decl><type><name>ScannerOptions</name></type> <name>so</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerOptions</name> implements <name>ScannerBase</name> <block>{
         <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>es</name> <operator>=</operator> <call><name><name>src</name><operator>.</operator><name>serverSideIteratorOptions</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
         <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>es</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>dst</name><operator>.</operator><name>serverSideIteratorOptions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name><name>dst</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name><name>src</name><operator>.</operator><name>samplerConfig</name></name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>dst</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name><name>src</name><operator>.</operator><name>batchTimeOut</name></name></expr>;</expr_stmt>
       </block_content>}</block></constructor>
     }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerOptions</name> implements <name>ScannerBase</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>void</name> <call><name>setTimeout</name><argument_list>(<argument><expr><name>long</name> <name>timeout</name></expr></argument>, <argument><expr><name>TimeUnit</name> <name>timeUnit</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>setTimeout</name><argument_list>(<argument><expr><name>long</name> <name>timeout</name></expr></argument>, <argument><expr><name>TimeUnit</name> <name>timeUnit</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name>timeOut</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"TimeOut must be positive : "</literal> <operator>+</operator> <name>timeOut</name></expr></argument>)</argument_list></call></expr>;</throw>
     <expr_stmt/></block_content></block></if></if_stmt></block></expr>}</block>
@@ <operator>-</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">198</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerOptions</name> implements <name>ScannerBase</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>long</name> <call><name>getTimeout</name><argument_list>(<argument><expr><name>TimeUnit</name> <name>timeunit</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name> <call><name>getTimeout</name><argument_list>(<argument><expr><name>TimeUnit</name> <name>timeunit</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><call><name><name>timeunit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>timeOut</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
   }</block>
 
@@ <operator>-</operator><literal type="number">201</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScannerOptions</name> implements <name>ScannerBase</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>synchronized</specifier> <name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"No authorizations to return"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;</block></expr>
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;
    <name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></block></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>synchronized</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>samplerConfig</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clearSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>setBatchTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>timeOut</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d65bcec90</name><operator>..</operator><literal type="number">8434f2f57</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DiskUsage</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>FindMax</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>NewTableConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>TableOperations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>TimeType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name><operator>.</operator><name>TabletLocation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>RootTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NotServingTabletException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1474</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1476</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@ <specifier>public</specifier> <name>class</name> <name>TableOperationsImpl</name> extends <name>TableOperationsHelper</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>clearSamplerOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name>getProperties</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>property</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>removeProperty</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>,
      <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>clearSamplerOptions</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfiguration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toTableProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><name>props</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clearSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>removeProperty</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearSamplerOptions</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getProperties</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sci</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sci</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>sci</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchReaderIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchReaderIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0b0980821</literal><operator>..</operator><literal type="number">1ff56b979</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchReaderIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchReaderIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableOfflineException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NoSuchScanIDException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>Tracer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">375</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">378</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchReaderIterator</name> implements <name>Iterator</name><operator>&lt;</operator><name>Entry</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Value</name>
           <name>fatalException</name> <operator>=</operator> <operator>new</operator> <call><name>TableDeletedException</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>
           <expr_stmt><expr><name>fatalException</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      } catch <expr_stmt><expr><operator>(</operator><name>SampleNotPresentException</name> <name>e</name><operator>)</operator> <block>{
        <expr><name>fatalException</name> <operator>=</operator> <name>e</name></expr>;
       }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>queryThreadPool</name><operator>.</operator><name>isShutdown</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Caught exception, but queryThreadPool is shutdown"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">643</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">648</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchReaderIterator</name> implements <name>Iterator</name><operator>&lt;</operator><name>Entry</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Value</name>
             <name><name>Translators</name><operator>.</operator><name>RT</name></name></expr></expr_stmt>)</block_content></block></catch>)<empty_stmt>;</empty_stmt>
         <decl_stmt><decl><type><name>InitialMultiScan</name></type> <name>imsr</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><call><name><name>Tracer</name><operator>.</operator><name>traceInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>rpcCreds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>thriftTabletRanges</name></expr></argument>,
             <argument><expr><call><name><name>Translator</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name><name>Translators</name><operator>.</operator><name>CT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>serverSideIteratorList</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>serverSideIteratorOptions</name></name></expr></argument>,
            <argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toByteBuffers</name></name><argument_list>(<argument><expr><call><name><name>authorizations</name><operator>.</operator><name>getAuthorizations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toByteBuffers</name></name><argument_list>(<argument><expr><call><name><name>authorizations</name><operator>.</operator><name>getAuthorizations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>waitForWrites</name></expr><operator>,</operator>
            <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>toThrift</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>options</name><operator>.</operator><name>batchTimeOut</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
         <if_stmt><if>if <condition>(<expr><name>waitForWrites</name></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>ThriftScanner</name><operator>.</operator><name>serversWaitedForWrites</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">719</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">725</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchReaderIterator</name> implements <name>Iterator</name><operator>&lt;</operator><name>Entry</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Value</name></expr></expr_stmt>
     } catch <expr_stmt><expr><operator>(</operator><name>NoSuchScanIDException</name> <name>e</name><operator>)</operator> <block>{
       <expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Server : {} msg : {}"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <throw>throw <argument_list>new <argument><expr><call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
    }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Server : "</literal> <operator>+</operator> <name>server</name> <operator>+</operator> <literal type="string">" msg : "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>tableInfo</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getExtent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><operator>new</operator> <call><name>KeyExtent</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getExtent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTableId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tableInfo</name> <operator>=</operator> <call><name><name>Tables</name><operator>.</operator><name>getPrintableTableInfoFromId</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><literal type="string">"Table "</literal> <operator>+</operator> <name>tableInfo</name> <operator>+</operator> <literal type="string">" does not have sampling configured or built"</literal></expr></init></decl>;</decl_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Server : {} msg : {}"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>timeoutTracker</name><operator>.</operator><name>errorOccured</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftScanner</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftScanner</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c2cc1e3a2</name><operator>..</operator><literal type="number">52f333015</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftScanner</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftScanner</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableOfflineException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name><operator>.</operator><name>TabletLocation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Column</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NoSuchScanIDException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NotServingTabletException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>Span</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
       <try>try <block>{<block_content>
         <comment type="line">// not reading whole rows (or stopping on row boundries) so there is no need to enable isolation below</comment>
         <decl_stmt><decl><type><name>ScanState</name></type> <name>scanState</name> <init>= <expr><operator>new</operator> <call><name>ScanState</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>extent</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>fetchedColumns</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>serverSideIteratorList</name></expr></argument>,
            <argument><expr><name>serverSideIteratorOptions</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>SCANNER_DEFAULT_READAHEAD_THRESHOLD</name></name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>serverSideIteratorOptions</name></expr><operator>,</operator> <expr><literal type="boolean">false</literal></expr><operator>,</operator> <expr><name><name>Constants</name><operator>.</operator><name>SCANNER_DEFAULT_READAHEAD_THRESHOLD</name></name></expr><operator>,</operator> <expr><literal type="null">null</literal></expr><operator>,</operator> <expr><name>batchTimeOut</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
 
         <name>TabletType</name> <name>ttype</name> <operator>=</operator> <call><name><name>TabletType</name><operator>.</operator><name>type</name></name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>boolean</name></type> <name>waitForWrites</name> <init>= <expr><operator>!</operator><call><name><name>serversWaitedForWrites</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>InitialScan</name></type> <name>isr</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><call><name><name>scanState</name><operator>.</operator><name>context</name><operator>.</operator><name>rpcCreds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>extent</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scanState</name><operator>.</operator><name>range</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>Translator</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name><name>scanState</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>Translators</name><operator>.</operator><name>CT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>serverSideIteratorList</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>serverSideIteratorOptions</name></name></expr></argument>,
            <argument><expr><call><name><name>scanState</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>scanState</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>waitForWrites</name></expr><operator>,</operator> <expr><name><name>scanState</name><operator>.</operator><name>isolated</name></name></expr><operator>,</operator> <expr><name><name>scanState</name><operator>.</operator><name>readaheadThreshold</name></name></expr><operator>,</operator> <expr><literal type="null">null</literal></expr><operator>,</operator> <expr><name><name>scanState</name><operator>.</operator><name>batchTimeOut</name></name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch>
         <if_stmt><if>if <condition>(<expr><name>waitForWrites</name></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>serversWaitedForWrites</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
 
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>serverSideIteratorOptions</name></expr>;
 
    <expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr>;

     <expr><specifier>public</specifier> <call><name>ScanState</name><argument_list>(<argument><expr><name>ClientContext</name> <name>context</name></expr></argument>, <argument><expr><name>Text</name> <name>tableId</name></expr></argument>, <argument><expr><name>Authorizations</name> <name>authorizations</name></expr></argument>, <argument><expr><name>Range</name> <name>range</name></expr></argument>, <argument><expr><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name> <name>fetchedColumns</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>,
         <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>serverSideIteratorList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>serverSideIteratorOptions</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>,
        <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr>, <expr><name>long</name> <name>batchTimeOut</name></expr>) <block>{
       <expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;
 
       <expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>authorizations</name></expr>;
@@ <expr><operator>-</operator><literal type="number">183</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">189</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
 
       <expr><name><name>this</name><operator>.</operator><name>isolated</name></name> <operator>=</operator> <name>isolated</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <name>readaheadThreshold</name></expr>;

      <expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;

       <expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;
     }</block></expr>
   }</block></block>
@@ <operator>-</operator><literal type="number">288</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">297</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
           <throw>throw <argument_list>e</argument_list></throw>;
         }</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>TApplicationException</name></type> <name>tae</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>AccumuloServerException</name><argument_list>(<argument><expr><name><name>loc</name><operator>.</operator><name>tablet_location</name></name></expr></argument>, <argument><expr><name>tae</name></expr></argument>)</argument_list></call></expr>;</throw>
        <expr_stmt/></block_content></block></catch>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><literal type="string">"Table "</literal> <operator>+</operator> <call><name><name>Tables</name><operator>.</operator><name>getPrintableTableInfoFromId</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><call><name><name>scanState</name><operator>.</operator><name>tableId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
              <operator>+</operator> <literal type="string">" does not have sampling configured or built"</literal></expr></init></decl>;</decl_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>tsnpe</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NotServingTabletException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Scan failed, not serving tablet "</literal> <operator>+</operator> <name>loc</name></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>error</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lastError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">377</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">390</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
   }</block>
 
   <specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>KeyValue</name></argument>&gt;</argument_list></name> <call><name>scan</name><argument_list>(<argument><expr><name>TabletLocation</name> <name>loc</name></expr></argument>, <argument><expr><name>ScanState</name> <name>scanState</name></expr></argument>, <argument><expr><name>ClientContext</name> <name>context</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>,
      <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name> <block>{
      <expr><name>NotServingTabletException</name></expr>, <argument><expr><name>TException</name></expr></argument>, <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name> <block>{</block></expr></argument></block></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>scanState</name><operator>.</operator><name>finished</name></name></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">408</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">421</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftScanner</name> <block>{
 
         <expr><name>TabletType</name> <name>ttype</name> <operator>=</operator> <call><name><name>TabletType</name><operator>.</operator><name>type</name></name><argument_list>(<argument><expr><name><name>loc</name><operator>.</operator><name>tablet_extent</name></name></expr></argument>)</argument_list></call></expr>;
         <expr><name>boolean</name> <name>waitForWrites</name> <operator>=</operator> <operator>!</operator><call><name><name>serversWaitedForWrites</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>loc</name><operator>.</operator><name>tablet_location</name></name></expr></argument>)</argument_list></call></expr>;

         <expr><name>InitialScan</name> <name>is</name> <operator>=</operator> <call><name><name>client</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><call><name><name>scanState</name><operator>.</operator><name>context</name><operator>.</operator><name>rpcCreds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>loc</name><operator>.</operator><name>tablet_extent</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scanState</name><operator>.</operator><name>range</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>Translator</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name><name>scanState</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>Translators</name><operator>.</operator><name>CT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>serverSideIteratorList</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>serverSideIteratorOptions</name></name></expr></argument>,
            <argument><expr><call><name><name>scanState</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>scanState</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;
            <expr><call><name><name>scanState</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr>, <expr><name>waitForWrites</name></expr>, <expr><name><name>scanState</name><operator>.</operator><name>isolated</name></name></expr>, <expr><name><name>scanState</name><operator>.</operator><name>readaheadThreshold</name></name></expr>,
            <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>toThrift</name></name><argument_list>(<argument><expr><name><name>scanState</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>, <expr><name><name>scanState</name><operator>.</operator><name>batchTimeOut</name></name></expr>)</block></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>waitForWrites</name></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>serversWaitedForWrites</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>loc</name><operator>.</operator><name>tablet_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d11639e9b</name><operator>..</operator><name>b581deb28</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableOfflineException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SecurityOperations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">574</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">575</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> implements <name><name>InputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
         }</block></expr></expr_stmt>
       </block_content>}</block></catch>
 
      <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name> <init>= <expr><call><name><name>baseSplit</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>samplerConfig</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <call><name><name>tableConfig</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>scannerBase</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

       <expr_stmt><expr><name>scannerIterator</name> <operator>=</operator> <call><name><name>scannerBase</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>numKeysRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0eb304f4f</literal><operator>..</operator><name>b383f3e23</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapred</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>ConfiguratorBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>FileOutputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormat</name> extends <name><name>FileOutputFormat</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <block>{
     <expr><call><name><name>FileOutputConfigurator</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/**
   * Specify a sampler to be used when writing out data. This will result in the output file having sample data.
   *
   * @param job
   *          The Hadoop job instance to be configured
   * @param samplerConfig
   *          The configuration for creating sample data in the output file.
   * @since 1.8.0
   */</comment>

  <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setSampler</name><argument_list>(<argument><expr><name>JobConf</name> <name>job</name></expr></argument>, <argument><expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name><name>FileOutputConfigurator</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;
  }</block>

   @<name>Override</name>
   <specifier>public</specifier> <name><name>RecordWriter</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>getRecordWriter</name><argument_list>(<argument><expr><name>FileSystem</name> <name>ignored</name></expr></argument>, <argument><expr><name>JobConf</name> <name>job</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// get the path of the temporary output file</comment>
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ffb02a9d4</name><operator>..</operator><name>a9403a509</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@</expr></argument></throws></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientSideIteratorScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IsolatedScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ScannerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>InputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">337</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">339</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>InputFormatBase</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> extends <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
     <return>return <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>isBatchScan</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Causes input format to read sample data. If sample data was created using a different configuration or a tables sampler configuration changes while reading
   * data, then the input format will throw an error.
   *
   *
   * @param job
   *          the Hadoop job instance to be configured
   * @param samplerConfig
   *          The sampler configuration that sample must have been created with inorder for reading sample data to succeed.
   *
   * @since 1.8.0
   * @see ScannerBase#setSamplerConfiguration(SamplerConfiguration)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>JobConf</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Initializes an Accumulo {@link org.apache.accumulo.core.client.impl.TabletLocator} based on the configuration.
    *
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
index 7db67c7b6..0e51f037b 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
@@ -43,6 +43,7 @@ import org.apache.accumulo.core.client.TableDeletedException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.TableOfflineException;
 import org.apache.accumulo.core.client.admin.DelegationTokenConfig;
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.client.admin.SecurityOperations;
 import org.apache.accumulo.core.client.impl.AuthenticationTokenIdentifier;
 import org.apache.accumulo.core.client.impl.ClientContext;
@@ -604,6 +605,15 @@ public abstract class AbstractInputFormat&lt;K,V&gt; extends InputFormat&lt;K,V&gt; {
         }
       }
 
      SamplerConfiguration samplerConfig = split.getSamplerConfiguration();
      if (null == samplerConfig) {
        samplerConfig = tableConfig.getSamplerConfiguration();
      }

      if (samplerConfig != null) {
        scannerBase.setSamplerConfiguration(samplerConfig);
      }

       scannerIterator = scannerBase.iterator();
       numKeysRead = 0;
     }
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloFileOutputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloFileOutputFormat.java
index abd96b6ef..7d4c0e215 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloFileOutputFormat.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloFileOutputFormat.java
@@ -19,6 +19,7 @@ package org.apache.accumulo.core.client.mapreduce;
 import java.io.IOException;
 import java.util.Arrays;
 
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.client.mapreduce.lib.impl.FileOutputConfigurator;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.Property;
@@ -138,6 +139,20 @@ public class AccumuloFileOutputFormat extends FileOutputFormat&lt;Key,Value&gt; {
     FileOutputConfigurator.setReplication(CLASS, job.getConfiguration(), replication);
   }
 
  /**
   * Specify a sampler to be used when writing out data. This will result in the output file having sample data.
   *
   * @param job
   *          The Hadoop job instance to be configured
   * @param samplerConfig
   *          The configuration for creating sample data in the output file.
   * @since 1.8.0
   */</comment>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSampler</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>FileOutputConfigurator</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>job</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name><name>RecordWriter</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>getRecordWriter</name><parameter_list>(<parameter><decl><type><name>TaskAttemptContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// get the path of the temporary output file</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6ab8a1926</literal><operator>..</operator><name>e5a0b90c0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>InputFormatBase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientSideIteratorScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IsolatedScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ScannerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>InputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">336</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">338</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>InputFormatBase</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> extends <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
     <return>return <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>isBatchScan</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Causes input format to read sample data. If sample data was created using a different configuration or a tables sampler configuration changes while reading
   * data, then the input format will throw an error.
   *
   *
   * @param job
   *          the Hadoop job instance to be configured
   * @param samplerConfig
   *          The sampler configuration that sample must have been created with inorder for reading sample data to succeed.
   *
   * @since 1.8.0
   * @see ScannerBase#setSamplerConfiguration(SamplerConfiguration)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>job</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Initializes an Accumulo {@link org.apache.accumulo.core.client.impl.TabletLocator} based on the configuration.
    *
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputTableConfig.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputTableConfig.java
index 257f6c910..51ad7ebf8 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputTableConfig.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputTableConfig.java
@@ -25,6 +25,8 @@ import java.util.HashSet;
 import java.util.List;
 
 import org.apache.accumulo.core.client.IteratorSetting;
import org.apache.accumulo.core.client.ScannerBase;
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.data.Range;
 import org.apache.accumulo.core.util.Pair;
 import org.apache.hadoop.io.Text;
@@ -43,6 +45,7 @@ public class InputTableConfig implements Writable {
   private boolean useLocalIterators = false;
   private boolean useIsolatedScanners = false;
   private boolean offlineScan = false;
  private SamplerConfiguration samplerConfig = null;
 
   public InputTableConfig() {}
 
@@ -241,6 +244,26 @@ public class InputTableConfig implements Writable {
     return useIsolatedScanners;
   }
 
  /**
   * Set the sampler configuration to use when reading from the data.
   *
   * @see ScannerBase#setSamplerConfiguration(SamplerConfiguration)
   * @see InputFormatBase#setSamplerConfiguration(org.apache.hadoop.mapreduce.Job, SamplerConfiguration)
   *
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfiguration</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   *
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>samplerConfig</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dataOutput</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>iterators</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">363</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>InputTableConfig</name> implements <name>Writable</name> <block>{
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>ranges</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name><name>ranges</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>that</name><operator>.</operator><name>ranges</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name><name>samplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>that</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
     <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">352</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">377</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InputTableConfig</name> implements <name>Writable</name> <block>{
     <expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><name>useLocalIterators</name> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>;
     <expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>useIsolatedScanners</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;
     <expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>offlineScan</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;
    <expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>samplerConfig</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;
     <return>return <expr><name>result</name></expr>;</return>
   }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>RangeInputSplit</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>RangeInputSplit</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f3e17c6aa</name><operator>..</operator><name>b4f9dca63</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>RangeInputSplit</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>RangeInputSplit</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ZooKeeperInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>impl</name><operator>.</operator><name>SplitUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>ConfiguratorBase</name><operator>.</operator><name>TokenSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>InputConfigurator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>PartialKey</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>DeprecationUtil</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RangeInputSplit</name> extends <name>InputSplit</name> implements <name>Writable</name> <block>{
   <expr><specifier>private</specifier> <name>Authorizations</name> <name>auths</name></expr>;
   <expr><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>,<argument><name>Text</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>fetchedColumns</name></expr>;
   <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr>;
  <expr><specifier>private</specifier> <name>SamplerConfiguration</name> <name>samplerConfig</name></expr>;
   <expr><specifier>private</specifier> <name>Level</name> <name>level</name></expr>;
 
   <expr><specifier>public</specifier> <call><name>RangeInputSplit</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">215</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">218</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>RangeInputSplit</name> extends <name>InputSplit</name> implements <name>Writable</name> <block>{
     <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name><name>Level</name><operator>.</operator><name>toLevel</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>

    <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
   }</block>
 
   @<name>Override</name>
@@ <operator>-</operator><literal type="number">301</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">308</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>RangeInputSplit</name> extends <name>InputSplit</name> implements <name>Writable</name> <block>{
     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>level</name><operator>.</operator><name>toInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block>

    <call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><literal type="null">null</literal> <operator>!=</operator> <name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>samplerConfig</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -510,6 +522,15 @@ public class RangeInputSplit extends InputSplit implements Writable {
     sb.append(" fetchColumns: ").append(fetchedColumns);
     sb.append(" iterators: ").append(iterators);
     sb.append(" logLevel: ").append(level);
    sb.append(" samplerConfig: ").append(samplerConfig);
     return sb.toString();
   }

  public void setSamplerConfiguration(SamplerConfiguration samplerConfiguration) {
    this.samplerConfig = samplerConfiguration;
  }

  public SamplerConfiguration getSamplerConfiguration() {
    return samplerConfig;
  }
 }
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/SplitUtils.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/SplitUtils.java
index 68268fc52..b81b06454 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/SplitUtils.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/SplitUtils.java
@@ -50,6 +50,8 @@ public class SplitUtils {
     split.setFetchedColumns(tableConfig.getFetchedColumns());
     split.setIterators(tableConfig.getIterators());
     split.setLogLevel(logLevel);

    split.setSamplerConfiguration(tableConfig.getSamplerConfiguration());
   }
 
   public static float getProgress(ByteSequence start, ByteSequence end, ByteSequence position) {
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/lib/impl/FileOutputConfigurator.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/lib/impl/FileOutputConfigurator.java
index 882c6d309..65248c52b 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/lib/impl/FileOutputConfigurator.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/lib/impl/FileOutputConfigurator.java
@@ -17,11 +17,15 @@
 package org.apache.accumulo.core.client.mapreduce.lib.impl;
 
 import java.util.Arrays;
import java.util.Map;
 import java.util.Map.Entry;
import java.util.Set;
 
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.ConfigurationCopy;
 import org.apache.accumulo.core.conf.Property;
import org.apache.accumulo.core.sample.impl.SamplerConfigurationImpl;
 import org.apache.hadoop.conf.Configuration;
 
 /**
@@ -97,8 +101,17 @@ public class FileOutputConfigurator extends ConfiguratorBase {
     String prefix = enumToConfKey(implementingClass, Opts.ACCUMULO_PROPERTIES) + ".";
     ConfigurationCopy acuConf = new ConfigurationCopy(AccumuloConfiguration.getDefaultConfiguration());
     for (Entry&lt;String,String&gt; entry : conf)
      if (entry.getKey().startsWith(prefix))
        acuConf.set(Property.getPropertyByKey(entry.getKey().substring(prefix.length())), entry.getValue());
      if (entry.getKey().startsWith(prefix)) {
        String propString = entry.getKey().substring(prefix.length());
        Property prop = Property.getPropertyByKey(propString);
        if (prop != null) {
          acuConf.set(prop, entry.getValue());
        } else if (Property.isValidTablePropertyKey(propString)) {
          acuConf.set(propString, entry.getValue());
        } else {
          throw new IllegalArgumentException("Unknown accumulo file property " + propString);
        }
      }
     return acuConf;
   }
 
@@ -184,4 +197,16 @@ public class FileOutputConfigurator extends ConfiguratorBase {
     setAccumuloProperty(implementingClass, conf, Property.TABLE_FILE_REPLICATION, replication);
   }
 
  /**
   * @since 1.8.0
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSampler</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implementingClass</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toTablePropertiesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>es</name> <init>= <expr><call><name><name>props</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>es</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>Opts</name><operator>.</operator><name>ACCUMULO_PROPERTIES</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>efda7d9de</name><operator>..</operator><literal type="number">6ba34af05</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>RowIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>DelegationTokenImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>TablePermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -87,7 +90,7 @@ public class InputConfigurator extends ConfiguratorBase {
    * @since 1.6.0
    */</comment>
   <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>ScanOpts</name> <block>{
    <decl><name>TABLE_NAME</name></decl>, <decl><name>AUTHORIZATIONS</name></decl>, <decl><name>RANGES</name></decl>, <decl><name>COLUMNS</name></decl>, <decl><name>ITERATORS</name></decl>, <decl><name>TABLE_CONFIGS</name>
    <name>TABLE_NAME</name></decl>, <decl><name>AUTHORIZATIONS</name></decl>, <decl><name>RANGES</name></decl>, <decl><name>COLUMNS</name></decl>, <decl><name>ITERATORS</name></decl>, <decl><name>TABLE_CONFIGS</name></decl>, <decl><name>SAMPLER_CONFIG</name></decl>
   }</block></enum>
 
   <comment type="block" format="javadoc">/**
@@ -805,6 +808,11 @@ public class InputConfigurator extends ConfiguratorBase {
       if (ranges != null)
         queryConfig.setRanges(ranges);
 
      SamplerConfiguration samplerConfig = getSamplerConfiguration(implementingClass, conf);
      if (samplerConfig != null) {
        queryConfig.setSamplerConfiguration(samplerConfig);
      }

       queryConfig.setAutoAdjustRanges(getAutoAdjustRanges(implementingClass, conf)).setUseIsolatedScanners(isIsolated(implementingClass, conf))
           .setUseLocalIterators(usesLocalIterators(implementingClass, conf)).setOfflineScan(isOfflineScan(implementingClass, conf));
       return Maps.immutableEntry(tableName, queryConfig);
@@ -901,4 +909,47 @@ public class InputConfigurator extends ConfiguratorBase {
     }
     return binnedRanges;
   }

  private static String toBase64(Writable writable) {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    try {
      writable.write(dos);
      dos.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    return Base64.encodeBase64String(baos.toByteArray());
  }

  private static &lt;T extends Writable&gt; T fromBase64(T writable, String enc) {
    ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decodeBase64(enc));
    DataInputStream dis = new DataInputStream(bais);
    try {
      writable.readFields(dis);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    return writable;
  }

  public static void setSamplerConfiguration(Class&lt;?&gt; implementingClass, Configuration conf, SamplerConfiguration samplerConfig) {
    Preconditions.checkNotNull(samplerConfig);

    String key = enumToConfKey(implementingClass, ScanOpts.SAMPLER_CONFIG);
    String val = toBase64(new SamplerConfigurationImpl(samplerConfig));

    conf.set(key, val);
  }

  public static SamplerConfiguration getSamplerConfiguration(Class&lt;?&gt; implementingClass, Configuration conf) {
    String key = enumToConfKey(implementingClass, ScanOpts.SAMPLER_CONFIG);

    String encodedSC = conf.get(key);
    if (encodedSC == null)
      return null;

    return fromBase64(new SamplerConfigurationImpl(), encodedSC).toSamplerConfiguration();
  }
 }
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockScannerBase.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockScannerBase.java
index f81e9dd33..45b65e90a 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockScannerBase.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockScannerBase.java
@@ -24,6 +24,7 @@ import java.util.Iterator;
 import java.util.Map.Entry;
 
 import org.apache.accumulo.core.client.ScannerBase;
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.client.impl.ScannerOptions;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.data.ArrayByteSequence;
@@ -112,6 +113,21 @@ public class MockScannerBase extends ScannerOptions implements ScannerBase {
       allIters.add(iter);
       return new MultiIterator(allIters, false);
     }

    @Override
    public boolean isSamplingEnabled() {
      throw new UnsupportedOperationException();
    }

    @Override
    public SamplerConfiguration getSamplerConfiguration() {
      throw new UnsupportedOperationException();
    }

    @Override
    public IteratorEnvironment cloneWithSamplingEnabled() {
      throw new UnsupportedOperationException();
    }
   }
 
   public SortedKeyValueIterator&lt;Key,Value&gt; createFilter(SortedKeyValueIterator&lt;Key,Value&gt; inner) throws IOException {
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
index 0712f2260..7ca5766a7 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
@@ -40,6 +40,7 @@ import org.apache.accumulo.core.client.admin.CompactionConfig;
 import org.apache.accumulo.core.client.admin.DiskUsage;
 import org.apache.accumulo.core.client.admin.FindMax;
 import org.apache.accumulo.core.client.admin.NewTableConfiguration;
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
 import org.apache.accumulo.core.client.admin.TimeType;
 import org.apache.accumulo.core.client.impl.TableOperationsHelper;
 import org.apache.accumulo.core.client.impl.Tables;
@@ -480,4 +481,20 @@ class MockTableOperations extends TableOperationsHelper {
     }
     return true;
   }

  @Override
  public void setSamplerConfiguration(String tableName, SamplerConfiguration samplerConfiguration) throws TableNotFoundException, AccumuloException,
      AccumuloSecurityException {
    throw new UnsupportedOperationException();
  }

  @Override
  public void clearSamplerConfiguration(String tableName) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
    throw new UnsupportedOperationException();
  }

  @Override
  public SamplerConfiguration getSamplerConfiguration(String tableName) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
    throw new UnsupportedOperationException();
  }
 }
diff --git a/core/src/main/java/org/apache/accumulo/core/compaction/CompactionSettings.java b/core/src/main/java/org/apache/accumulo/core/compaction/CompactionSettings.java
index 43f8c0fac..1c5369e61 100644
-- a/core/src/main/java/org/apache/accumulo/core/compaction/CompactionSettings.java
++ b/core/src/main/java/org/apache/accumulo/core/compaction/CompactionSettings.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 public enum CompactionSettings {
 
  SF_NO_SAMPLE(new NullType()),
   SF_GT_ESIZE_OPT(new SizeType()),
   SF_LT_ESIZE_OPT(new SizeType()),
   SF_NAME_RE_OPT(new PatternType()),
diff --git a/core/src/main/java/org/apache/accumulo/core/compaction/NullType.java b/core/src/main/java/org/apache/accumulo/core/compaction/NullType.java
new file mode 100644
index 000000000..fb4c452d9
-- /dev/null
++ b/core/src/main/java/org/apache/accumulo/core/compaction/NullType.java
@@ -0,0 +1,29 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>compaction</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<class><specifier>public</specifier> class <name>NullType</name> <super_list><implements>implements <super><name>Type</name></super></implements></super_list> <block>{
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>str</name> <operator>==</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5bd5c8acd</literal><operator>..</operator><literal type="number">400577c78</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> enum <name>Property</name> <block>{
   @<expr><name>Experimental</name>
   <call><name>TABLE_VOLUME_CHOOSER</name><argument_list>(<argument><expr><literal type="string">"table.volume.chooser"</literal></expr></argument>, <argument><expr><literal type="string">"org.apache.accumulo.server.fs.RandomVolumeChooser"</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>CLASSNAME</name></name></expr></argument>,
       <argument><expr><literal type="string">"The class that will be used to select which volume will be used to create new files for this table."</literal></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>TABLE_SAMPLER</name><argument_list>(
      <argument><expr><literal type="string">"table.sampler"</literal></expr></argument>,
      <argument><expr><literal type="string">""</literal></expr></argument>,
      <argument><expr><name><name>PropertyType</name><operator>.</operator><name>CLASSNAME</name></name></expr></argument>,
      <argument><expr><literal type="string">"The name of a class that implements org.apache.accumulo.core.Sampler.  Setting this option enables storing a sample of data which can be scanned."</literal>
          <operator>+</operator> <literal type="string">"  Always having a current sample can useful for query optimization and data comprehension.   After enabling sampling for an existing table, a compaction "</literal>
          <operator>+</operator> <literal type="string">"is needed to compute the sample for existing data.  The compact command in the shell has an option to only compact files without sample data."</literal></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>TABLE_SAMPLER_OPTS</name><argument_list>(<argument><expr><literal type="string">"table.sampler.opt."</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PREFIX</name></name></expr></argument>,
      <argument><expr><literal type="string">"The property is used to set options for a sampler.  If a sample had two options like hasher and modulous, then the two properties "</literal>
          <operator>+</operator> <literal type="string">"table.sampler.opt.hasher=${hash algorithm} and table.sampler.opt.modulous=${mod} would be set."</literal></expr></argument>)</argument_list></call></expr>,
 
   <comment type="line">// VFS ClassLoader properties</comment>
   <expr><call><name>VFS_CLASSLOADER_SYSTEM_CLASSPATH_PROPERTY</name><argument_list>(<argument><expr><name><name>AccumuloVFSClassLoader</name><operator>.</operator><name>VFS_CLASSLOADER_SYSTEM_CLASSPATH_PROPERTY</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">776</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">786</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> enum <name>Property</name> <block>{
     <return>return <expr><call><name><name>validTableProperties</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_CONSTRAINT_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
         <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_ITERATOR_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUP_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
         <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_COMPACTION_STRATEGY_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_REPLICATION_TARGET</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_ARBITRARY_PROP_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_ARBITRARY_PROP_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>TABLE_SAMPLER_OPTS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;
   }</argument_list></call>
 
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Property</name></argument>&gt;</argument_list></name> <name>fixedProperties</name> <operator>=</operator> <call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_CLIENTPORT</name></name></expr></argument>, <argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_NATIVEMAP_ENABLED</name></name></expr></argument>,
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>BloomFilterLayer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>BloomFilterLayer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a5bea83c1</name><operator>..</operator><literal type="number">758df129c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>BloomFilterLayer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>BloomFilterLayer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">50</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">50</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>keyfunctor</name><operator>.</operator><name>KeyFunctor</name></name>;</import></argument_list></call></expr></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>NamingThreadFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>util</name><operator>.</operator><name>LoggingRunnable</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">424</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">425</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>BloomFilterLayer</name> <block>{
       <expr><call><name><name>reader</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    @<name>Override</name>
    <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>BloomFilterLayer</name><operator>.</operator><name>Reader</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bfl</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

   }
 
   public <function><type><specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>FileSKVIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>FileSKVIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">60970e293</literal><operator>..</operator><literal type="number">3713453cf</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>FileSKVIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name><name>FileSKVIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>InterruptibleIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 
<interface><specifier>public</specifier> interface <name>FileSKVIterator</name> <super_list><extends>extends <super><name>InterruptibleIterator</name></super></extends></super_list> <block>{
<interface><specifier>public</specifier> interface <name>FileSKVIterator</name> <super_list><extends>extends <super><name>InterruptibleIterator</name></super>, <super><name>AutoCloseable</name></super></extends></super_list> <block>{
   <function_decl><type><name>Key</name></type> <name>getFirstKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
 
   <function_decl><type><name>Key</name></type> <name>getLastKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
 
   <decl_stmt><decl><type><name>DataInputStream</name></type> <name>getMetaStore</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>NoSuchMetaStoreException</name></expr></argument></throws></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></decl>;</decl_stmt>

   <function_decl><type><name>void</name></type> <name>closeDeepCopies</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
 
   <function_decl><type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>map</name><operator>/</operator><name><name>MapFileOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>map</name><operator>/</operator><name><name>MapFileOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fb2762fe3</name><operator>..</operator><literal type="number">75cfa7e00</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>map</name><operator>/</operator><name><name>MapFileOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>map</name><operator>/</operator><name><name>MapFileOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>MapFileIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SequenceFileIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>MapFileOperations</name> extends <name>FileOperations</name> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>AtomicBoolean</name> <name>flag</name></expr></argument>)</argument_list></call> <block>{
       <expr><operator>(</operator><operator>(</operator><name>FileSKVIterator</name><operator>)</operator> <name>reader</name><operator>)</operator><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;
     }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>FileSKVIterator</name><operator>)</operator> <name>reader</name><operator>)</operator><operator>.</operator><call><name>getSample</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
    }</block></expr></expr_stmt>
   }</block></interface>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiIndexIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiIndexIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f220a581b</name><operator>..</operator><literal type="number">01af1849a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiIndexIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiIndexIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>MultiLevelIndex</name><operator>.</operator><name>IndexEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>HeapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 
 <class>class <name>MultiIndexIterator</name> <super_list><extends>extends <super><name>HeapIterator</name></super></extends> <implements>implements <super><name>FileSKVIterator</name></super></implements></super_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>MultiIndexIterator</name> extends <name>HeapIterator</name> implements <name>FileSKVIterator</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  }</block></expr></expr_stmt>

 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">210947802..1a383e416</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">265</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">265</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiLevelIndex</name> <block>{
 
     <expr><specifier>public</specifier> <name>void</name> <call><name>readFields</name><argument_list>(<argument><expr><name>DataInput</name> <name>in</name></expr></argument>, <argument><expr><name>int</name> <name>version</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
 
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_6</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_7</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_6</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_7</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_8</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">736</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">736</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiLevelIndex</name> <block>{
 
       <expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_6</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_7</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_6</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_7</name></name> <operator>||</operator> <name>version</name> <operator>==</operator> <name><name>RFile</name><operator>.</operator><name>RINDEX_VER_8</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>PrintInfo</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>PrintInfo</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5a3e9114a</literal><operator>..</operator><literal type="number">4631a4dce</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>PrintInfo</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>PrintInfo</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>blockfile</name><operator>.</operator><name>impl</name><operator>.</operator><name>CachableBlockFile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFile</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>start</name><operator>.</operator><name>spi</name><operator>.</operator><name>KeywordExecutable</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrintInfo</name> implements <name>KeywordExecutable</name> <block>{
     <expr><name>boolean</name> <name>hash</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
     @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"--histogram"</literal></expr>}</block></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"print a histogram of the key-value sizes"</literal></expr></argument>)</argument_list></call>
     <name>boolean</name> <name>histogram</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
    @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"--useSample"</literal></expr>}</block></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"Use sample data for --dump, --vis, --histogram options"</literal></expr></argument>)</argument_list></call>
    <name>boolean</name> <name>useSample</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
     @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>description</name> <operator>=</operator> <literal type="string">" &lt;file&gt; { &lt;file&gt; ... }"</literal></expr></argument>)</argument_list></call>
     <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>files</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"--config"</literal></expr>}</block></expr></argument>, <argument><expr><name>variableArity</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"Comma-separated Hadoop configuration files"</literal></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">119</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">122</literal></expr>,<expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrintInfo</name> implements <name>KeywordExecutable</name> <block>{
       <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>histogram</name></name> <operator>||</operator> <name><name>opts</name><operator>.</operator><name>dump</name></name> <operator>||</operator> <name><name>opts</name><operator>.</operator><name>vis</name></name> <operator>||</operator> <name><name>opts</name><operator>.</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>localityGroupCF</name> <operator>=</operator> <call><name><name>iter</name><operator>.</operator><name>getLocalityGroupCF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>dataIter</name> <init>= <expr><name>iter</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>useSample</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>dataIter</name> <operator>=</operator> <call><name><name>iter</name><operator>.</operator><name>getSample</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>dataIter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR : This rfile has no sample data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
          <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>
        }</block></expr></expr_stmt>

         <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cf</name> <range>: <expr><call><name><name>localityGroupCF</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
 
          <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>(</operator><name>Key</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>Key</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cf</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Key</name></type> <name>key</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>dump</name></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>dataIter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>(</operator><name>Key</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><name>Key</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cf</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <while>while <condition>(<expr><call><name><name>dataIter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Key</name></type> <name>key</name> <init>= <expr><call><name><name>dataIter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>dataIter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>dump</name></name></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>checkError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
             <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>histogram</name></name></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PrintInfo</name> implements <name>KeywordExecutable</name> <block>{
               <expr><name><name>sizeBuckets</name><index>[<expr><name>bucket</name></expr>]</index></name> <operator>+=</operator> <name>size</name></expr>;
               <name>totalSize</name> <operator>+=</operator> <name>size</name></block></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></while>
         </block_content>}</block></while>
       </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFile</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFile</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">54b01b425</literal><operator>..</operator><literal type="number">9564f0bb6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFile</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFile</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ArrayByteSequence</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>HeapIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>InterruptibleIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>LocalityGroupIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>LocalityGroupIterator</name><operator>.</operator><name>LocalityGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>MutableByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>mutable</name><operator>.</operator><name>MutableLong</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

 <class><specifier>public</specifier> class <name>RFile</name> <block>{
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXTENSION</name> <init>= <expr><literal type="string">"rf"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
   <expr><specifier>private</specifier> <call><name>RFile</name><argument_list>()</argument_list></call> <block>{}</block>
 
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_MAGIC</name> <operator>=</operator> <literal type="number">0x20637474</literal></expr>;
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_7</name> <operator>=</operator> <literal type="number">7</literal></expr>;
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_6</name> <operator>=</operator> <literal type="number">6</literal></expr>;

  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_8</name> <operator>=</operator> <literal type="number">8</literal></expr>; <comment type="line">// Added sample storage. There is a sample locality group for each locality group. Sample are built using a Sampler and</comment>
                                     <comment type="line">// sampler configuration. The Sampler and its configuration are stored in RFile. Persisting the method of producing the</comment>
                                     <comment type="line">// sample allows a user of RFile to determine if the sample is useful.</comment>
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_7</name> <operator>=</operator> <literal type="number">7</literal></expr>; <comment type="line">// Added support for prefix encoding and encryption. Before this change only exact matches within a key field were deduped</comment>
                                     <comment type="line">// for consecutive keys. After this change, if consecutive key fields have the same prefix then the prefix is only stored</comment>
                                     <comment type="line">// once.</comment>
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_6</name> <operator>=</operator> <literal type="number">6</literal></expr>; <comment type="line">// Added support for multilevel indexes. Before this the index was one list with an entry for each data block. For large</comment>
                                     <comment type="line">// files, a large index needed to be read into memory before any seek could be done. After this change the index is a fat</comment>
                                     <comment type="line">// tree, and opening a large rfile is much faster. Like the previous version of Rfile, each index node in the tree is kept</comment>
                                     <comment type="line">// in memory serialized and used in its serialized form.</comment>
   <comment type="line">// static final int RINDEX_VER_5 = 5; // unreleased</comment>
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_4</name> <operator>=</operator> <literal type="number">4</literal></expr>;
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_3</name> <operator>=</operator> <literal type="number">3</literal></expr>;
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_4</name> <operator>=</operator> <literal type="number">4</literal></expr>; <comment type="line">// Added support for seeking using serialized indexes. After this change index is no longer deserialized when rfile opened.</comment>
                                     <comment type="line">// Entire serialized index is read into memory as single byte array. For seeks, serialized index is used to find blocks</comment>
                                     <comment type="line">// (the binary search deserializes the specific entries its needs). This resulted in less memory usage (no object overhead)</comment>
                                     <comment type="line">// and faster open times for RFiles.</comment>
  <expr><specifier>static</specifier> <name>final</name> <name>int</name> <name>RINDEX_VER_3</name> <operator>=</operator> <literal type="number">3</literal></expr>; <comment type="line">// Initial released version of RFile. R is for relative encoding. A keys is encoded relative to the previous key. The</comment>
                                     <comment type="line">// initial version deduped key fields that were the same for consecutive keys. For sorted data this is a common occurrence.</comment>
                                     <comment type="line">// This version supports locality groups. Each locality group has an index pointing to set of data blocks. Each data block</comment>
                                     <comment type="line">// contains relatively encoded keys and values.</comment>

  <comment type="line">// Buffer sample data so that many sample data blocks are stored contiguously.</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>int</name> <name>sampleBufferSize</name> <operator>=</operator> <literal type="number">10000000</literal></expr>;

  @<expr><name>VisibleForTesting</name>
  <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setSampleBufferSize</name><argument_list>(<argument><expr><name>int</name> <name>bufferSize</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>sampleBufferSize</name> <operator>=</operator> <name>bufferSize</name></expr>;
  }</block>
 
   <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>LocalityGroupMetadata</name> implements <name>Writable</name> <block>{
 
    <expr><specifier>private</specifier> <name>int</name> <name>startBlock</name></expr>;
    <expr><specifier>private</specifier> <name>int</name> <name>startBlock</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
     <expr><specifier>private</specifier> <name>Key</name> <name>firstKey</name></expr>;
     <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>,<argument><name>MutableLong</name></argument>&gt;</argument_list></name> <name>columnFamilies</name></expr>;
 
@@ <expr><operator>-</operator><literal type="number">95</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">125</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     <expr><specifier>private</specifier> <name><name>MultiLevelIndex</name><operator>.</operator><name>BufferedWriter</name></name> <name>indexWriter</name></expr>;
     <expr><specifier>private</specifier> <name><name>MultiLevelIndex</name><operator>.</operator><name>Reader</name></name> <name>indexReader</name></expr>;
    <expr><specifier>private</specifier> <name>int</name> <name>version</name></expr>;
 
     <expr><specifier>public</specifier> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>int</name> <name>version</name></expr></argument>, <argument><expr><name>BlockFileReader</name> <name>br</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>columnFamilies</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>,<argument><name>MutableLong</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><name>indexReader</name> <operator>=</operator> <operator>new</operator> <call><name><name>MultiLevelIndex</name><operator>.</operator><name>Reader</name></name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;
      <expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;
     }</block>
 
    <specifier>public</specifier> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>int</name> <name>nextBlock</name></expr></argument>, <argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>pcf</name></expr></argument>, <argument><expr><name>int</name> <name>indexBlockSize</name></expr></argument>, <argument><expr><name>BlockFileWriter</name> <name>bfw</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>startBlock</name></name> <operator>=</operator> <name>nextBlock</name></expr>;
    <expr><specifier>public</specifier> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>pcf</name></expr></argument>, <argument><expr><name>int</name> <name>indexBlockSize</name></expr></argument>, <argument><expr><name>BlockFileWriter</name> <name>bfw</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>isDefaultLG</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
       <expr><name>columnFamilies</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>,<argument><name>MutableLong</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><name>previousColumnFamilies</name> <operator>=</operator> <name>pcf</name></expr>;
@@ <expr><operator>-</operator><literal type="number">110</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">141</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <expr><name>indexWriter</name> <operator>=</operator> <operator>new</operator> <call><name><name>MultiLevelIndex</name><operator>.</operator><name>BufferedWriter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>MultiLevelIndex</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>bfw</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    <specifier>public</specifier> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>cfset</name></expr></argument>, <argument><expr><name>int</name> <name>nextBlock</name></expr></argument>, <argument><expr><name>int</name> <name>indexBlockSize</name></expr></argument>, <argument><expr><name>BlockFileWriter</name> <name>bfw</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>startBlock</name></name> <operator>=</operator> <name>nextBlock</name></expr>;
    <expr><specifier>public</specifier> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>cfset</name></expr></argument>, <argument><expr><name>int</name> <name>indexBlockSize</name></expr></argument>, <argument><expr><name>BlockFileWriter</name> <name>bfw</name></expr></argument>)</argument_list></call> <block>{
       <expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;
       <expr><name>isDefaultLG</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
       <expr><name>columnFamilies</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>,<argument><name>MutableLong</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">181</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">211</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <expr><name>name</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr>;
       }</block>
 
      <name>startBlock</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>RINDEX_VER_3</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_4</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_6</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_7</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startBlock</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block>
 
       <name>int</name> <name>size</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">224</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">256</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
       }</block>
 
      <call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>startBlock</name></expr></argument>)</argument_list></call></expr>;

       <if_stmt><if>if <condition>(<expr><name>isDefaultLG</name> <operator>&amp;&amp;</operator> <name>columnFamilies</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <comment type="line">// only expect null when default LG, otherwise let a NPE occur</comment>
         <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">276</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <expr><call><name><name>indexWriter</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></block_content></block></if></if_stmt>
     }</block>
 
    <specifier>public</specifier> <name>void</name> <call><name>printInfo</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>printInfo</name><argument_list>(<argument><expr><name>boolean</name> <name>isSample</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>PrintStream</name> <name>out</name> <operator>=</operator> <name><name>System</name><operator>.</operator><name>out</name></name></expr></block></expr></argument></throws></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Locality group         : "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isDefaultLG</name></expr> ?</condition><then> <expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tStart block          : "</literal> <operator>+</operator> <name>startBlock</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tNum   blocks         : "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%,d"</literal></expr></argument>, <argument><expr><call><name><name>indexReader</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%-24s : %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isSample</name></expr> ?</condition><then> <expr><literal type="string">"Sample "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"Locality group "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isDefaultLG</name></expr> ?</condition><then> <expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>RINDEX_VER_3</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_4</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_6</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>RINDEX_VER_7</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %d\n"</literal></expr></argument>, <argument><expr><literal type="string">"Start block"</literal></expr></argument>, <argument><expr><name>startBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block>
      <call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %,d\n"</literal></expr></argument>, <argument><expr><literal type="string">"Num   blocks"</literal></expr></argument>, <argument><expr><call><name><name>indexReader</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name> <name>sizesByLevel</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name> <name>countsByLevel</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><call><name><name>indexReader</name><operator>.</operator><name>getIndexInfo</name></name><argument_list>(<argument><expr><name>sizesByLevel</name></expr></argument>, <argument><expr><name>countsByLevel</name></expr></argument>)</argument_list></call></expr>;
       <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sizesByLevel</name><operator>.</operator><name>descendingMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tIndex level "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"        : "</literal>
            <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%,d bytes  %,d blocks"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>countsByLevel</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %,d bytes  %,d blocks\n"</literal></expr></argument>, <argument><expr><literal type="string">"Index level "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>countsByLevel</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></for>}</block>
      <call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tFirst key            : "</literal> <operator>+</operator> <name>firstKey</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"First key"</literal></expr></argument>, <argument><expr><name>firstKey</name></expr></argument>)</argument_list></call></expr>;
 
       <expr><name>Key</name> <name>lastKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;
       <if_stmt><if>if <condition>(<expr><call><name><name>indexReader</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>lastKey</name> <operator>=</operator> <call><name><name>indexReader</name><operator>.</operator><name>getLastKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>
 
      <call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tLast key             : "</literal> <operator>+</operator> <name>lastKey</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Last key"</literal></expr></argument>, <argument><expr><name>lastKey</name></expr></argument>)</argument_list></call></expr>;
 
       <expr><name>long</name> <name>numKeys</name> <operator>=</operator> <literal type="number">0</literal></expr>;
       <expr><name>IndexIterator</name> <name>countIter</name> <operator>=</operator> <call><name><name>indexReader</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">273</literal></expr>,<expr><literal type="number">48</literal> <operator>+</operator><literal type="number">304</literal></expr>,<expr><literal type="number">193</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <expr><name>numKeys</name> <operator>+=</operator> <call><name><name>countIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNumEntries</name><argument_list>()</argument_list></call></expr>;
       }</block>
 
      <call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tNum entries          : "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%,d"</literal></expr></argument>, <argument><expr><name>numKeys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\tColumn families      : "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isDefaultLG</name> <operator>&amp;&amp;</operator> <name>columnFamilies</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"&lt;UNKNOWN&gt;"</literal></expr> </then><else>: <expr><call><name><name>columnFamilies</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %,d\n"</literal></expr></argument>, <argument><expr><literal type="string">"Num entries"</literal></expr></argument>, <argument><expr><name>numKeys</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Column families"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isDefaultLG</name> <operator>&amp;&amp;</operator> <name>columnFamilies</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"&lt;UNKNOWN&gt;"</literal></expr> </then><else>: <expr><call><name><name>columnFamilies</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;
     }</block></expr>
 
   }</block>
 
  <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>Writer</name> implements <name>FileSKVWriter</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>SampleEntry</name> <block>{
    <expr><name>Key</name> <name>key</name></expr>;
    <expr><name>Value</name> <name>val</name></expr>;
 
    <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>MAX_CF_IN_DLG</name> <operator>=</operator> <literal type="number">1000</literal></expr>;
    <expr><call><name>SampleEntry</name><argument_list>(<argument><expr><name>Key</name> <name>key</name></expr></argument>, <argument><expr><name>Value</name> <name>val</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;
      <expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr>
  }</block>

  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>SampleLocalityGroupWriter</name> <block>{

    <expr><specifier>private</specifier> <name>Sampler</name> <name>sampler</name></expr>;

    <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SampleEntry</name></argument>&gt;</argument_list></name> <name>entries</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><specifier>private</specifier> <name>long</name> <name>dataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;

    <expr><specifier>private</specifier> <name>LocalityGroupWriter</name> <name>lgr</name></expr>;

    <expr><specifier>public</specifier> <call><name>SampleLocalityGroupWriter</name><argument_list>(<argument><expr><name>LocalityGroupWriter</name> <name>lgr</name></expr></argument>, <argument><expr><name>Sampler</name> <name>sampler</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>lgr</name></name> <operator>=</operator> <name>lgr</name></expr>;
      <expr><name><name>this</name><operator>.</operator><name>sampler</name></name> <operator>=</operator> <name>sampler</name></expr>;
    }</block>

    <specifier>public</specifier> <name>void</name> <call><name>append</name><argument_list>(<argument><expr><name>Key</name> <name>key</name></expr></argument>, <argument><expr><name>Value</name> <name>value</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleEntry</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataSize</name> <operator>+=</operator> <call><name><name>key</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
    }</block>

    <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <for>for <control>(<init><decl><type><name>SampleEntry</name></type> <name>se</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>se</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>se</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <constructor_decl><name><name>lgr</name><operator>.</operator><name>close</name></name><parameter_list>()</parameter_list>;</constructor_decl>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>flushIfNeeded</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>dataSize</name> <operator>&gt;</operator> <name>sampleBufferSize</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// the reason to write out all but one key is so that closeBlock() can always eventually be called with true</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SampleEntry</name></argument>&gt;</argument_list></name></type> <name>subList</name> <init>= <expr><call><name><name>entries</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>subList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>SampleEntry</name></type> <name>se</name> <range>: <expr><name>subList</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>se</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>se</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>

          <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>closeBlock</name></name><argument_list>(<argument><expr><call><name><name>subList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>subList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>subList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>LocalityGroupWriter</name> <block>{
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>BlockFileWriter</name></type> <name>fileWriter</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>ABlockWriter</name></type> <name>blockWriter</name></decl>;</decl_stmt>
 
     <comment type="line">// private BlockAppender blockAppender;</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>blockSize</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>indexBlockSize</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name></type> <name>localityGroups</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>LocalityGroupMetadata</name></type> <name>currentLocalityGroup</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>Key</name></type> <name>lastKeyInBlock</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <name>Key</name></type> <name>prevKey</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SampleLocalityGroupWriter</name></type> <name>sample</name></decl>;</decl_stmt>

    <constructor><name>LocalityGroupWriter</name><parameter_list>(<parameter><decl><type><name>BlockFileWriter</name></type> <name>fileWriter</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>LocalityGroupMetadata</name></type> <name>currentLocalityGroup</name></decl></parameter>, <parameter><decl><type><name>SampleLocalityGroupWriter</name></type> <name>sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileWriter</name></name> <operator>=</operator> <name>fileWriter</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentLocalityGroup</name></name> <operator>=</operator> <name>currentLocalityGroup</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sample</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>prevKey</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Keys appended out-of-order.  New key "</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">", previous key "</literal> <operator>+</operator> <name>prevKey</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>updateColumnCount</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>getFirstKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>setFirstKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>sample</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>blockWriter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>prepareDataBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeBlock</name><argument_list>(<argument><expr><name>prevKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>prepareDataBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>RelativeKey</name></type> <name>rk</name> <init>= <expr><operator>new</operator> <call><name>RelativeKey</name><argument_list>(<argument><expr><name>lastKeyInBlock</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>rk</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>blockWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>blockWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>prevKey</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastKeyInBlock</name> <operator>=</operator> <name>prevKey</name></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeBlock</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lastBlock</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>blockWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>lastBlock</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>indexWriter</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getStartPos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>indexWriter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getStartPos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>sample</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>flushIfNeeded</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastKeyInBlock</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>blockWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeBlock</name><argument_list>(<argument><expr><name>lastKeyInBlock</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>sample</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Writer</name> <super_list><implements>implements <super><name>FileSKVWriter</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CF_IN_DLG</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BlockFileWriter</name></type> <name>fileWriter</name></decl>;</decl_stmt>

    <comment type="line">// private BlockAppender blockAppender;</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>blockSize</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>indexBlockSize</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name></type> <name>localityGroups</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name></type> <name>sampleGroups</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LocalityGroupMetadata</name></type> <name>currentLocalityGroup</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LocalityGroupMetadata</name></type> <name>sampleLocalityGroup</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dataClosed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Key</name></type> <name>prevKey</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>startedDefaultLocalityGroup</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>previousColumnFamilies</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>length</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <name>LocalityGroupWriter</name></type> <name>lgWriter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Sampler</name></type> <name>sampler</name></decl>;</decl_stmt>

     <constructor><specifier>public</specifier> <name>Writer</name><parameter_list>(<parameter><decl><type><name>BlockFileWriter</name></type> <name>bfw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bfw</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMemoryInBytes</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bfw</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMemoryInBytes</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
    <constructor><specifier>public</specifier> <name>Writer</name><parameter_list>(<parameter><decl><type><name>BlockFileWriter</name></type> <name>bfw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexBlockSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>Writer</name><parameter_list>(<parameter><decl><type><name>BlockFileWriter</name></type> <name>bfw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexBlockSize</name></decl></parameter>, <parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name>Sampler</name></type> <name>sampler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockSize</name></name> <operator>=</operator> <name>blockSize</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexBlockSize</name></name> <operator>=</operator> <name>indexBlockSize</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileWriter</name></name> <operator>=</operator> <name>bfw</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockWriter</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>previousColumnFamilies</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampler</name></name> <operator>=</operator> <name>sampler</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">329</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">505</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <expr><name>ABlockWriter</name> <name>mba</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>prepareMetaBlock</name></name><argument_list>(<argument><expr><literal type="string">"RFile.index"</literal></expr></argument>)</argument_list></call></expr>;
 
       <expr><call><name><name>mba</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>RINDEX_MAGIC</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>mba</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>RINDEX_VER_7</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>mba</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>RINDEX_VER_8</name></expr></argument>)</argument_list></call></expr>;
 
      <if_stmt><if>if <condition>(<expr><name>currentLocalityGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name>currentLocalityGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>localityGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentLocalityGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sampleLocalityGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
 
       <call><name><name>mba</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>localityGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">518</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <expr><call><name><name>lc</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>mba</name></expr></argument>)</argument_list></call></expr>;
       }</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mba</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>mba</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>LocalityGroupMetadata</name></type> <name>lc</name> <range>: <expr><name>sampleGroups</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lc</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>mba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>mba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

       <expr_stmt><expr><call><name><name>mba</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>fileWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">355</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">545</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
       <expr><name>dataClosed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
 
      <if_stmt><if>if <condition>(<expr><name>blockWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeBlock</name><argument_list>(<argument><expr><name>lastKeyInBlock</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lgWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lgWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
     </block_content>}</block></constructor>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">367</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">557</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannont append, data closed"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
       }</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>prevKey</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Keys appended out-of-order.  New key "</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">", previous key "</literal> <operator>+</operator> <name>prevKey</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <constructor_decl><name><name>currentLocalityGroup</name><operator>.</operator><name>updateColumnCount</name></name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list>;</constructor_decl>

      <if_stmt><if>if <condition>(<expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>getFirstKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>setFirstKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>blockWriter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>prepareDataBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>blockSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeBlock</name><argument_list>(<argument><expr><name>prevKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <call><name><name>fileWriter</name><operator>.</operator><name>prepareDataBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>RelativeKey</name></type> <name>rk</name> <init>= <expr><operator>new</operator> <call><name>RelativeKey</name><argument_list>(<argument><expr><name>lastKeyInBlock</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <constructor_decl><name><name>rk</name><operator>.</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>blockWriter</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <constructor_decl><name><name>value</name><operator>.</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>blockWriter</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>prevKey</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastKeyInBlock</name> <operator>=</operator> <name>prevKey</name></expr>;</expr_stmt>

    }</block></class>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeBlock</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lastBlock</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>blockWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>lastBlock</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>indexWriter</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getStartPos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>currentLocalityGroup</name><operator>.</operator><name>indexWriter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getStartPos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blockWriter</name><operator>.</operator><name>getRawSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <expr_stmt><expr><name>blockWriter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastKeyInBlock</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nextBlock</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lgWriter</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">425</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">576</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
         <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Can not start anymore new locality groups after default locality group started"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
       }</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>blockWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeBlock</name><argument_list>(<argument><expr><name>lastKeyInBlock</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lgWriter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lgWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
       <if_stmt><if>if <condition>(<expr><name>currentLocalityGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>localityGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentLocalityGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sampleLocalityGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
       <if_stmt><if>if <condition>(<expr><name>columnFamilies</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>startedDefaultLocalityGroup</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>nextBlock</name></expr></argument>, <argument><expr><name>previousColumnFamilies</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>previousColumnFamilies</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sampleLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>previousColumnFamilies</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Collections</name><operator>.</operator><name>disjoint</name></name><argument_list>(<argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>previousColumnFamilies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>overlap</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>overlap</name><operator>.</operator><name>retainAll</name></name><argument_list>(<argument><expr><name>previousColumnFamilies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Column families over lap with previous locality group : "</literal> <operator>+</operator> <name>overlap</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>nextBlock</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sampleLocalityGroup</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>indexBlockSize</name></expr></argument>, <argument><expr><name>fileWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>previousColumnFamilies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
 
      <expr_stmt><expr><name>prevKey</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SampleLocalityGroupWriter</name></type> <name>sampleWriter</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sampler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sampleWriter</name> <operator>=</operator> <operator>new</operator> <call><name>SampleLocalityGroupWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalityGroupWriter</name><argument_list>(<argument><expr><name>fileWriter</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>sampleLocalityGroup</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lgWriter</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupWriter</name><argument_list>(<argument><expr><name>fileWriter</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>currentLocalityGroup</name></expr></argument>, <argument><expr><name>sampleWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">616</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">774</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <if_stmt><if>if <condition>(<expr><call><name><name>columnFamilies</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>inclusive</name></expr>)</condition><block type="pseudo"><block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"I do not know how to filter column families"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>interruptFlag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>interruptFlag</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name>interruptFlag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>interruptFlag</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IterationInterruptedException</name><argument_list>()</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
 
       <try>try <block>{<block_content>
         <expr_stmt><expr><call><name>_seek</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">830</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">989</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>registerMetrics</name><argument_list>(<argument><expr><name><name>MetricsGatherer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>vmg</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>metricsGatherer</name> <operator>=</operator> <name>vmg</name></expr>;
     }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
      <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
    }</block></expr>
   }</block>
 
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>Reader</name> extends <name>HeapIterator</name> implements <name>FileSKVIterator</name> <block>{
@@ <expr><operator>-</operator><literal type="number">837</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1001</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
     <expr><specifier>private</specifier> <name>BlockFileReader</name> <name>reader</name></expr>;
 
     <expr><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name> <name>localityGroups</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name> <name>sampleGroups</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LocalityGroupMetadata</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

    <expr><specifier>private</specifier> <name>LocalityGroupReader</name> <name><name>currentReaders</name><index>[]</index></name></expr>;
    <expr><specifier>private</specifier> <name>LocalityGroupReader</name> <name><name>readers</name><index>[]</index></name></expr>;
    <expr><specifier>private</specifier> <name>LocalityGroupReader</name> <name><name>sampleReaders</name><index>[]</index></name></expr>;
 
    <expr><specifier>private</specifier> <name>LocalityGroupReader</name> <name><name>lgReaders</name><index>[]</index></name></expr>;
     <expr><specifier>private</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>nonDefaultColumnFamilies</name></expr>;
 
     <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Reader</name></argument>&gt;</argument_list></name> <name>deepCopies</name></expr>;
@@ <expr><operator>-</operator><literal type="number">846</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1014</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     <expr><specifier>private</specifier> <name>AtomicBoolean</name> <name>interruptFlag</name></expr>;
 
    <expr><specifier>private</specifier> <name>SamplerConfigurationImpl</name> <name>samplerConfig</name> <operator>=</operator> <literal type="null">null</literal></expr>;

    <expr><specifier>private</specifier> <name>int</name> <name>rfileVersion</name></expr>;

     <expr><specifier>public</specifier> <call><name>Reader</name><argument_list>(<argument><expr><name>BlockFileReader</name> <name>rdr</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>rdr</name></expr></block></expr></argument></throws></expr>;
 
@@ <expr><operator>-</operator><literal type="number">853</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">1025</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <try>try <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><call><name><name>mb</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>int</name></type> <name>ver</name> <init>= <expr><call><name><name>mb</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rfileVersion</name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
 
         <if_stmt><if>if <condition>(<expr><name>magic</name> <operator>!=</operator> <name>RINDEX_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Did not see expected magic number, saw "</literal> <operator>+</operator> <name>magic</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>!=</operator> <name>RINDEX_VER_7</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_6</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_4</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_3</name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>!=</operator> <name>RINDEX_VER_8</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_7</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_6</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_4</name> <operator>&amp;&amp;</operator> <name>ver</name> <operator>!=</operator> <name>RINDEX_VER_3</name></expr>)</condition><block type="pseudo"><block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Did not see expected version, saw "</literal> <operator>+</operator> <name>ver</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
 
         <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>mb</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>lgReaders</name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentReaders</name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
 
         <expr_stmt><expr><name>deepCopies</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Reader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">869</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1042</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
           <expr><call><name><name>lgm</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;
           <expr><call><name><name>localityGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lgm</name></expr></argument>)</argument_list></call></expr>;
 
          <expr><name><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>lgm</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;
          <expr><name><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>lgm</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;
        }</block>

        <name>readers</name> <operator>=</operator> <name>currentReaders</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>==</operator> <name>RINDEX_VER_8</name> <operator>&amp;&amp;</operator> <call><name><name>mb</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>sampleReaders</name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>

          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>LocalityGroupMetadata</name></type> <name>lgm</name> <init>= <expr><operator>new</operator> <call><name>LocalityGroupMetadata</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>lgm</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sampleGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>sampleReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>lgm</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt></block_content></block></try>}</block>

          <name>samplerConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;
        }</block></expr> <if_stmt><else>else <block>{<block_content>
          <expr_stmt><expr><name>sampleReaders</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>

       }</block></expr></expr_stmt> <finally>finally <block>{<block_content>
         <expr_stmt><expr><call><name><name>mb</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></finally>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">881</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">1074</literal></expr><operator>,</operator><expr><literal type="number">53</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
           <expr><call><name><name>nonDefaultColumnFamilies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>lgm</name><operator>.</operator><name>columnFamilies</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       }</block>
 
      <call><name>createHeap</name><argument_list>(<argument><expr><name><name>lgReaders</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>createHeap</name><argument_list>(<argument><expr><name><name>currentReaders</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>

    <constructor><specifier>private</specifier> <name>Reader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>LocalityGroupReader</name></type> <name><name>sampleReaders</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>sampleReaders</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>reader</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nonDefaultColumnFamilies</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>nonDefaultColumnFamilies</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name></name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name><name>sampleReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deepCopies</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>deepCopies</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deepCopy</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readers</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>readers</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleReaders</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>sampleReaders</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>samplerConfig</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rfileVersion</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>rfileVersion</name></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sampleReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sampleReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
     </block_content>}</block></constructor>
 
    <constructor><specifier>private</specifier> <name>Reader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lgReaders</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <constructor><specifier>private</specifier> <name>Reader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useSample</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>currentReaders</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>reader</name></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nonDefaultColumnFamilies</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>nonDefaultColumnFamilies</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lgReaders</name></name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name><name>r</name><operator>.</operator><name>lgReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name></name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroupReader</name><index>[<expr><name><name>r</name><operator>.</operator><name>currentReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deepCopies</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>deepCopies</name></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deepCopy</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lgReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>samplerConfig</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rfileVersion</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>rfileVersion</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readers</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>readers</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleReaders</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>sampleReaders</name></name></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>readers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>useSample</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>sampleReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupReader</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

       </block_content>}</block></for>

     </block_content>}</block></for>
 
     <function><type><specifier>private</specifier> <name>void</name></type> <name>closeLocalityGroupReaders</name><parameter_list>()</parameter_list> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>lgReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>currentReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
         <try>try <block>{<block_content>
           <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">926</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1148</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
       <expr><call><name>closeDeepCopies</name><argument_list>()</argument_list></call></expr>;
       <expr><call><name>closeLocalityGroupReaders</name><argument_list>()</argument_list></call></expr>;
 
      <if_stmt><if>if <condition>(<expr><name>sampleReaders</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>sampleReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block_content></block></try></block_content></block></for></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Errored out attempting to close LocalityGroupReader."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>

       <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block> <finally>finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">937</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1169</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>Key</name> <call><name>getFirstKey</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><name><name>lgReaders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>currentReaders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
 
       <name>Key</name> <name>minKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
 
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lgReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>currentReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getFirstKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getFirstKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>Key</name></type> <name>firstKey</name> <init>= <expr><name><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getFirstKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>firstKey</name> <init>= <expr><name><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getFirstKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>firstKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>firstKey</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minKey</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
             <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>firstKey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
         </block_content>}</block></else></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">958</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1190</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>Key</name> <call><name>getLastKey</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><name><name>lgReaders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>currentReaders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
 
       <name>Key</name> <name>maxKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
 
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lgReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>currentReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>maxKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>maxKey</name> <operator>=</operator> <name><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getLastKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>maxKey</name> <operator>=</operator> <name><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getLastKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>Key</name></type> <name>lastKey</name> <init>= <expr><name><name>lgReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getLastKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>lastKey</name> <init>= <expr><name><name>currentReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getLastKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>lastKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>lastKey</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>maxKey</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
             <expr_stmt><expr><name>maxKey</name> <operator>=</operator> <name>lastKey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
         </block_content>}</block></else></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">988</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1220</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>deepCopy</name><argument_list>(<argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Reader</name> <name>copy</name> <operator>=</operator> <operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>copy</name><operator>.</operator><name>setInterruptFlagInternal</name></name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>deepCopies</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>copy</name></expr>;</return></block></expr>
      <if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>env</name><operator>.</operator><name>isSamplingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>sc</name> <init>= <expr><call><name><name>env</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>Reader</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>setInterruptFlagInternal</name></name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>deepCopies</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>copy</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for> <if_stmt><else>else <block>{<block_content>
        <decl_stmt><decl><type><name>Reader</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>setInterruptFlagInternal</name></name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>deepCopies</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>copy</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block></for>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1027</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">1275</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name>void</name> <call><name>registerMetrics</name><argument_list>(<argument><expr><name><name>MetricsGatherer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>vmg</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name><name>vmg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>getLocalityGroupCF</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>lgReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>currentReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>registerMetrics</name></name><argument_list>(<argument><expr><name>vmg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></for></block_content></block></for>}</block></expr>

      <if_stmt><if>if <condition>(<expr><name>sampleReaders</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>sampleReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>registerMetrics</name></name><argument_list>(<argument><expr><name>vmg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
      </block_content>}</block></for>
     </block_content>}</block></for>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><name>numLGSeeked</name> <operator>=</operator> <call><name><name>LocalityGroupIterator</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>lgReaders</name></expr></argument>, <argument><expr><name>nonDefaultColumnFamilies</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numLGSeeked</name> <operator>=</operator> <call><name><name>LocalityGroupIterator</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>currentReaders</name></expr></argument>, <argument><expr><name>nonDefaultColumnFamilies</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <function><type><name>int</name></type> <name>getNumLocalityGroupsSeeked</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1045</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">1299</literal></expr><operator>,</operator><expr><literal type="number">53</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
       <expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>IndexEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>indexes</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>IndexEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>lgReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>currentReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>lgr</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></for></block_content></block></for>}</block></expr></expr_stmt>
 
       <return>return <expr><operator>new</operator> <call><name>MultiIndexIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>FileSKVIterator</name></type> <name>getSample</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Reader</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>sampleReaders</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>setInterruptFlagInternal</name></name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>copy</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// only visible for printinfo</comment>
    <function><type><name>FileSKVIterator</name></type> <name>getSample</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><call><name>getSample</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>printInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%-24s : %d\n"</literal></expr></argument>, <argument><expr><literal type="string">"RFile Version"</literal></expr></argument>, <argument><expr><name>rfileVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

       <for>for <control>(<init><decl><type><name>LocalityGroupMetadata</name></type> <name>lgm</name> <range>: <expr><name>localityGroups</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lgm</name><operator>.</operator><name>printInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lgm</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><call><name><name>sampleGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%-24s :\n"</literal></expr></argument>, <argument><expr><literal type="string">"Sample Configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Sampler class "</literal></expr></argument>, <argument><expr><call><name><name>samplerConfig</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\t%-22s : %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Sampler options "</literal></expr></argument>, <argument><expr><call><name><name>samplerConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>LocalityGroupMetadata</name></type> <name>lgm</name> <range>: <expr><name>sampleGroups</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>lgm</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1071</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1362</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFile</name> <block>{
 
     <expr><specifier>private</specifier> <name>void</name> <call><name>setInterruptFlagInternal</name><argument_list>(<argument><expr><name>AtomicBoolean</name> <name>flag</name></expr></argument>)</argument_list></call> <block>{
       <expr><name><name>this</name><operator>.</operator><name>interruptFlag</name></name> <operator>=</operator> <name>flag</name></expr>;
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>lgReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>LocalityGroupReader</name></type> <name>lgr</name> <range>: <expr><name>currentReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>lgr</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></for></block_content></block></for>}</block></expr>
     }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">088abfe0e</literal><operator>..</operator><literal type="number">17e8e9697</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>blockfile</name><operator>.</operator><name>cache</name><operator>.</operator><name>BlockCache</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>blockfile</name><operator>.</operator><name>impl</name><operator>.</operator><name>CachableBlockFile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFile</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFile</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileOperations</name> extends <name>FileOperations</name> <block>{
     <expr><name>long</name> <name>blockSize</name> <operator>=</operator> <call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name>long</name> <name>indexBlockSize</name> <operator>=</operator> <call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name> <operator>=</operator> <call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Sampler</name> <name>sampler</name> <operator>=</operator> <literal type="null">null</literal></expr>;

    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sampler</name> <operator>=</operator> <call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>

     <name><name>CachableBlockFile</name><operator>.</operator><name>Writer</name></name> <name>_cbw</name> <operator>=</operator> <operator>new</operator> <call><name><name>CachableBlockFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>rep</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compression</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name><name>RFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>_cbw</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>blockSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>indexBlockSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name><name>RFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>_cbw</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>blockSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>indexBlockSize</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><name>writer</name></expr>;</return>
   </block_content>}</block></finally></try>
 </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>IteratorEnvironment</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>IteratorEnvironment</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5a53e9309</literal><operator>..</operator><literal type="number">5dbafa603</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>IteratorEnvironment</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>IteratorEnvironment</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">52</literal> @@ <specifier>public</specifier> interface <name>IteratorEnvironment</name> <block>{
   <expr><name>void</name> <call><name>registerSideChannel</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>iter</name></expr></argument>)</argument_list></call></expr>;
 
   <expr><name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * Returns a new iterator environment object that can be used to create deep copies over sample data. The new object created will use the current sampling
   * configuration for the table. The existing iterator environment object will not be modified.
   *
   * &lt;p&gt;
   * Since sample data could be created in many different ways, a good practice for an iterator is to verify the sampling configuration is as expected.
   *
   * &lt;p&gt;
   *
   * &lt;pre&gt;
   * &lt;code&gt;
   *   class MyIter implements SortedKeyValueIterator&amp;lt;Key,Value&amp;gt; {
   *     SortedKeyValueIterator&amp;lt;Key,Value&amp;gt; source;
   *     SortedKeyValueIterator&amp;lt;Key,Value&amp;gt; sampleIter;
   *     &amp;#64;Override
   *     void init(SortedKeyValueIterator&amp;lt;Key,Value&amp;gt; source, Map&amp;lt;String,String&amp;gt; options, IteratorEnvironment env) {
   *       IteratorEnvironment sampleEnv = env.cloneWithSamplingEnabled();
   *       //do some sanity checks on sampling config
   *       validateSamplingConfiguration(sampleEnv.getSamplerConfiguration());
   *       sampleIter = source.deepCopy(sampleEnv);
   *       this.source = source;
   *     }
   *   }
   * &lt;/code&gt;
   * &lt;/pre&gt;
   *
   * @throws SampleNotPresentException
   *           when sampling is not configured for table.
   * @since 1.8.0
   */</comment>
  <expr><name>IteratorEnvironment</name> <call><name>cloneWithSamplingEnabled</name><argument_list>()</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * There are at least two conditions under which sampling will be enabled for an environment. One condition is when sampling is enabled for the scan that
   * starts everything. Another possibility is for a deep copy created with an environment created by calling {@link #cloneWithSamplingEnabled()}
   *
   * @return true if sampling is enabled for this environment.
   * @since 1.8.0
   */</comment>
  <expr><name>boolean</name> <call><name>isSamplingEnabled</name><argument_list>()</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   *
   * @return sampling configuration is sampling is enabled for environment, otherwise returns null.
   * @since 1.8.0
   */</comment>
  <expr><name>SamplerConfiguration</name> <call><name>getSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3999b6fc7</literal><operator>..</operator><literal type="number">25c010da4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SortedMapIterator</name> implements <name>InterruptibleIterator</name> <block>{
 
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>SortedMapIterator</name> <call><name>deepCopy</name><argument_list>(<argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>env</name><operator>.</operator><name>isSamplingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
     <return>return <expr><operator>new</operator> <call><name>SortedMapIterator</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>WrappingIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>WrappingIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7723ef155</literal><operator>..</operator><literal type="number">5b37b302c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>WrappingIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>WrappingIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>WrappingIterator</name> implements <name>SortedKeyValueIterator</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Val</name>
 
   @<name>Override</name>
   <specifier>public</specifier> <name>Key</name> <call><name>getTopKey</name><argument_list>()</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"no source set"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>seenSeek</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"never been seeked"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <return>return <expr><call><name>getSource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTopKey</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>WrappingIterator</name> implements <name>SortedKeyValueIterator</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Val</name>
 
   @<name>Override</name>
   <specifier>public</specifier> <name>Value</name> <call><name>getTopValue</name><argument_list>()</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"no source set"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>seenSeek</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"never been seeked"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <return>return <expr><call><name>getSource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTopValue</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>WrappingIterator</name> implements <name>SortedKeyValueIterator</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Val</name>
 
   @<name>Override</name>
   <specifier>public</specifier> <name>boolean</name> <call><name>hasTop</name><argument_list>()</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"no source set"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>seenSeek</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"never been seeked"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <return>return <expr><call><name>getSource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTop</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>WrappingIterator</name> implements <name>SortedKeyValueIterator</name><operator>&lt;</operator><name>Key</name></expr><operator>,</operator><expr><name>Val</name>
 
   @<name>Override</name>
   <specifier>public</specifier> <name>void</name> <call><name>next</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"no source set"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><name>seenSeek</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"never been seeked"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     <expr_stmt><expr><call><name>getSource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>EmptyIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>EmptyIterator</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..b791eb1b3</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>EmptyIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">72</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>

<class><specifier>public</specifier> class <name>EmptyIterator</name> <super_list><implements>implements <super><name>InterruptibleIterator</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EmptyIterator</name></type> <name>EMPTY_ITERATOR</name> <init>= <expr><operator>new</operator> <call><name>EmptyIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>hasTop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>next</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// nothing should call this since hasTop always returns false</comment>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Key</name></type> <name>getTopKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// nothing should call this since hasTop always returns false</comment>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Value</name></type> <name>getTopValue</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// nothing should call this since hasTop always returns false</comment>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>deepCopy</name><parameter_list>(<parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>EMPTY_ITERATOR</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setInterruptFlag</name><parameter_list>(<parameter><decl><type><name>AtomicBoolean</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>MapFileIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>MapFileIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9d59570f1</literal><operator>..</operator><name>f9f0600c1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>MapFileIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>MapFileIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>map</name><operator>.</operator><name>MapFileUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IterationInterruptedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">155</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>MapFileIterator</name> implements <name>FileSKVIterator</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
   }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SampleIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SampleIterator</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..aedcdbaea</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SampleIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">46</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>

<class><specifier>public</specifier> class <name>SampleIterator</name> <super_list><extends>extends <super><name>Filter</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>Sampler</name></type> <name>sampler</name> <init>= <expr><operator>new</operator> <call><name>RowSampler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SampleIterator</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>Sampler</name></type> <name>sampler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setSource</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampler</name></name> <operator>=</operator> <name>sampler</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>deepCopy</name><parameter_list>(<parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>SampleIterator</name><argument_list>(<argument><expr><call><name>getSource</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deepCopy</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SequenceFileIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SequenceFileIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8710acd0c</literal><operator>..</operator><literal type="number">8ea380070</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SequenceFileIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>system</name><operator>/</operator><name><name>SequenceFileIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>SequenceFile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>SequenceFile</name><operator>.</operator><name>Reader</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SequenceFileIterator</name> implements <name>FileSKVIterator</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>AtomicBoolean</name> <name>flag</name></expr></argument>)</argument_list></call> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
   }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  }</block></expr>
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>AbstractHashSampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>AbstractHashSampler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ae2b951b4</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>AbstractHashSampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">106</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashCode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashFunction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hashing</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A base class that can be used to create Samplers based on hashing. This class offers consistent options for configuring the hash function. The subclass
 * decides which parts of the key to hash.
 *
 * &lt;p&gt;
 * This class support two options passed into {@link #init(SamplerConfiguration)}. One option is {@code hasher} which specifies a hashing algorithm. Valid
 * values for this option are {@code md5}, {@code sha1}, and {@code murmur3_32}. If you are not sure, then choose {@code murmur3_32}.
 *
 * &lt;p&gt;
 * The second option is {@code modulus} which can have any positive integer as a value.
 *
 * &lt;p&gt;
 * Any data where {@code hash(data) % modulus == 0} will be selected for the sample.
 *
 * @since 1.8.0
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractHashSampler</name> <super_list><implements>implements <super><name>Sampler</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>HashFunction</name></type> <name>hashFunction</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>modulus</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>VALID_OPTIONS</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Subclasses with options should override this method and return true if the option is valid for the subclass or if {@code super.isValidOption(opt)} returns
   * true.
   */</comment>

  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isValidOption</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>VALID_OPTIONS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Subclasses with options should override this method and call {@code super.init(config)}.
   */</comment>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>hasherOpt</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>modulusOpt</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>hasherOpt</name></expr></argument>, <argument><expr><literal type="string">"Hasher not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>modulusOpt</name></expr></argument>, <argument><expr><literal type="string">"Modulus not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>option</name> <range>: <expr><call><name><name>config</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name>isValidOption</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unknown option : %s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name>hasherOpt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="string">"murmur3_32"</literal></expr>:</case>
        <expr_stmt><expr><name>hashFunction</name> <operator>=</operator> <call><name><name>Hashing</name><operator>.</operator><name>murmur3_32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="string">"md5"</literal></expr>:</case>
        <expr_stmt><expr><name>hashFunction</name> <operator>=</operator> <call><name><name>Hashing</name><operator>.</operator><name>md5</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="string">"sha1"</literal></expr>:</case>
        <expr_stmt><expr><name>hashFunction</name> <operator>=</operator> <call><name><name>Hashing</name><operator>.</operator><name>sha1</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Uknown hahser "</literal> <operator>+</operator> <name>hasherOpt</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>modulus</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>modulusOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Subclass must override this method and hash some portion of the key.
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>HashCode</name></type> <name>hash</name><argument_list>(<argument><expr><name>HashFunction</name> <name>hashFunction</name></expr></argument>, <argument><expr><name>Key</name> <name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash</name><argument_list>(<argument><expr><name>hashFunction</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asInt</name><argument_list>()</argument_list></call> <operator>%</operator> <name>modulus</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowColumnSampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowColumnSampler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ad68cf60e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowColumnSampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">124</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashCode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashFunction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hasher</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This sampler can hash any subset of a Key's fields. The fields that hashed for the sample are determined by the configuration options passed in
 * {@link #init(SamplerConfiguration)}. The following key values are valid options.
 *
 * &lt;UL&gt;
 * &lt;li&gt;row=true|false
 * &lt;li&gt;family=true|false
 * &lt;li&gt;qualifier=true|false
 * &lt;li&gt;visibility=true|false
 * &lt;/UL&gt;
 *
 * &lt;p&gt;
 * If not specified in the options, fields default to false.
 *
 * &lt;p&gt;
 * To determine what options are valid for hashing see {@link AbstractHashSampler}
 *
 * &lt;p&gt;
 * To configure Accumulo to generate sample data on one thousandth of the column qualifiers, the following SamplerConfiguration could be created and used to
 * configure a table.
 *
 * &lt;p&gt;
 * {@code new SamplerConfiguration(RowColumnSampler.class.getName()).setOptions(ImmutableMap.of("hasher","murmur3_32","modulus","1009","qualifier","true"))}
 *
 * &lt;p&gt;
 * With this configuration, if a column qualifier is selected then all key values contains that column qualifier will end up in the sample data.
 *
 * @since 1.8.0
 */</comment>

<class><specifier>public</specifier> class <name>RowColumnSampler</name> <super_list><extends>extends <super><name>AbstractHashSampler</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>row</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>family</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>qualifier</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>visibility</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>VALID_OPTIONS</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"row"</literal></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><literal type="string">"qualifier"</literal></expr></argument>, <argument><expr><literal type="string">"visibility"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hashField</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>optValue</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>optValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>optValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>isValidOption</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>isValidOption</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>VALID_OPTIONS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>hashField</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>hashField</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <call><name>hashField</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"qualifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>visibility</name> <operator>=</operator> <call><name>hashField</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"visibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>row</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>family</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>qualifier</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>visibility</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Must hash at least one key field"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>putByteSquence</name><parameter_list>(<parameter><decl><type><name>ByteSequence</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Hasher</name></type> <name>hasher</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getBackingArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>offset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>HashCode</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>HashFunction</name></type> <name>hashFunction</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Hasher</name></type> <name>hasher</name> <init>= <expr><call><name><name>hashFunction</name><operator>.</operator><name>newHasher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>row</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>putByteSquence</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getRowData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hasher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>family</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>putByteSquence</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getColumnFamilyData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hasher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>qualifier</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>putByteSquence</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getColumnQualifierData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hasher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>visibility</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>putByteSquence</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getColumnVisibilityData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hasher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>hasher</name><operator>.</operator><name>hash</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowSampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowSampler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..8690a1c4e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>RowSampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">49</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashCode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashFunction</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Builds a sample based on entire rows. If a row is selected for the sample, then all of its columns will be included.
 *
 * &lt;p&gt;
 * To determine what options are valid for hashing see {@link AbstractHashSampler}. This class offers no addition options, it always hashes on the row.
 *
 * &lt;p&gt;
 * To configure Accumulo to generate sample data on one thousandth of the rows, the following SamplerConfiguration could be created and used to configure a
 * table.
 *
 * &lt;p&gt;
 * {@code new SamplerConfiguration(RowSampler.class.getName()).setOptions(ImmutableMap.of("hasher","murmur3_32","modulus","1009"))}
 *
 * @since 1.8.0
 */</comment>

<class><specifier>public</specifier> class <name>RowSampler</name> <super_list><extends>extends <super><name>AbstractHashSampler</name></super></extends></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>HashCode</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>HashFunction</name></type> <name>hashFunction</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteSequence</name></type> <name>row</name> <init>= <expr><call><name><name>k</name><operator>.</operator><name>getRowData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>hashFunction</name><operator>.</operator><name>hashBytes</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getBackingArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>offset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..64adeecb2</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name><name>Sampler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">57</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A function that decides which key values are stored in a tables sample. As Accumuo compacts data and creates rfiles it uses a Sampler to decided what to
 * store in the rfiles sample section. The class name of the Sampler and the Samplers configuration are stored in each rfile. A scan of a tables sample will
 * only succeed if all rfiles were created with the same sampler and sampler configuration.
 *
 * &lt;p&gt;
 * Since the decisions that Sampler makes are persisted, the behavior of a Sampler for a given configuration should always be the same. One way to offer a new
 * behavior is to offer new options, while still supporting old behavior with a Samplers existing options.
 *
 * &lt;p&gt;
 * Ideally a sampler that selects a Key k1 would also select updates for k1. For example if a Sampler selects :
 * {@code row='000989' family='name' qualifier='last' visibility='ADMIN' time=9 value='Doe'}, it would be nice if it also selected :
 * {@code row='000989' family='name' qualifier='last' visibility='ADMIN' time=20 value='Dough'}. Using hash and modulo on the key fields is a good way to
 * accomplish this and {@link AbstractHashSampler} provides a good basis for implementation.
 *
 * @since 1.8.0
 */</comment>

<interface><specifier>public</specifier> interface <name>Sampler</name> <block>{

  <comment type="block" format="javadoc">/**
   * An implementation of Sampler must have a noarg constructor. After construction this method is called once to initialize a sampler before it is used.
   *
   * @param config
   *          Configuration options for a sampler.
   */</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>init</name><argument_list>(<argument><expr><name>SamplerConfiguration</name> <name>config</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @param k
   *          A key that was written to a rfile.
   * @return True if the key (and its associtated value) should be stored in the rfile's sample. Return false if it should not be included.
   */</comment>
  <decl_stmt><decl><type><name>boolean</name></type> <name>accept</name><argument_list>(<argument><expr><name>Key</name> <name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..348def42e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">184</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>

<class><specifier>public</specifier> class <name>SamplerConfigurationImpl</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SamplerConfigurationImpl</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>readFields</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SamplerConfigurationImpl</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getSamplerClassName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sc</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SamplerConfigurationImpl</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SamplerConfigurationImpl</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>className</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">31</literal> <operator>*</operator> <call><name><name>className</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>options</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>SamplerConfigurationImpl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>osc</name> <init>= <expr><operator>(</operator><name>SamplerConfigurationImpl</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>osc</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>options</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>osc</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// The Writable serialization methods for this class are called by RFile and therefore must be very stable. An alternative way to serialize this class is to</comment>
    <comment type="line">// use Thrift. That was not used here inorder to avoid making RFile depend on Thrift.</comment>

    <comment type="line">// versioning info</comment>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unexpected version "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>className</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>toSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>sc</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>sc</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toTableProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// intentionally added last, so its set last</comment>
    <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>props</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toTablePropertiesMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propsMap</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name>toTableProperties</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>propsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>propsMap</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SamplerConfigurationImpl</name></type> <name>newSamplerConfig</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>acuconf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawOptions</name> <init>= <expr><call><name><name>acuconf</name><operator>.</operator><name>getAllPropertiesWithPrefix</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>rawOptions</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>className</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>options</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TSamplerConfiguration</name></type> <name>toThrift</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>samplerConfig</name><operator>.</operator><name>getSamplerClassName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>samplerConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SamplerConfiguration</name></type> <name>fromThrift</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>tsc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>tsc</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><call><name><name>tsc</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..3f11fbee7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>sample</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SamplerFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">48</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>start</name><operator>.</operator><name>classloader</name><operator>.</operator><name>vfs</name><operator>.</operator><name>AccumuloVFSClassLoader</name></name>;</import>

<class><specifier>public</specifier> class <name>SamplerFactory</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Sampler</name></type> <name>newSampler</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>acuconf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>context</name> <init>= <expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Sampler</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>context</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>AccumuloVFSClassLoader</name><operator>.</operator><name>getContextManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>loadClass</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>AccumuloVFSClassLoader</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Sampler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>sampler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>sampler</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> | <type><name>InstantiationException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSampleNotPresentException</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSampleNotPresentException</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c4ef7f361</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSampleNotPresentException</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">409</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TSampleNotPresentException</name> <super_list><extends>extends <super><name>TException</name></super></extends> <implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TSampleNotPresentException</name></argument>, <argument><name><name>TSampleNotPresentException</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TSampleNotPresentException</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TSampleNotPresentException"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>EXTENT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"extent"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TSampleNotPresentExceptionStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TSampleNotPresentExceptionTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl>;</decl_stmt> <comment type="line">// required</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>EXTENT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"extent"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// EXTENT</comment>
          <return>return <expr><name>EXTENT</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>EXTENT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"extent"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TSampleNotPresentException</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TSampleNotPresentException</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TSampleNotPresentException</name><parameter_list>(
    <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TSampleNotPresentException</name><parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>getExtent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>extent</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>setExtent</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetExtent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field extent is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetExtent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtentIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EXTENT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetExtent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setExtent</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EXTENT</name></expr>:</case>
      <return>return <expr><call><name>getExtent</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EXTENT</name></expr>:</case>
      <return>return <expr><call><name>isSetExtent</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TSampleNotPresentException</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_extent</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_extent</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_extent</name> <operator>||</operator> <name>that_present_extent</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_extent</name> <operator>&amp;&amp;</operator> <name>that_present_extent</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>extent</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetExtent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetExtent</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TSampleNotPresentException("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"extent:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>extent</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
    <if_stmt><if>if <condition>(<expr><name>extent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>extent</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSampleNotPresentExceptionStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TSampleNotPresentExceptionStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TSampleNotPresentExceptionStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSampleNotPresentExceptionStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TSampleNotPresentException</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TSampleNotPresentException</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// EXTENT</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>extent</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExtentIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TSampleNotPresentException</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>extent</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>EXTENT_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>extent</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSampleNotPresentExceptionTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TSampleNotPresentExceptionTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TSampleNotPresentExceptionTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSampleNotPresentExceptionTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TSampleNotPresentException</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TSampleNotPresentException</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExtent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>extent</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TSampleNotPresentException</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>extent</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExtentIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSamplerConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSamplerConfiguration</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2d2b2d525</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TSamplerConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">556</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TSamplerConfiguration</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TSamplerConfiguration</name></argument>, <argument><name><name>TSamplerConfiguration</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TSamplerConfiguration</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TSamplerConfiguration"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>CLASS_NAME_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>OPTIONS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TSamplerConfigurationStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TSamplerConfigurationTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt> <comment type="line">// required</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>CLASS_NAME</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"className"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>OPTIONS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// CLASS_NAME</comment>
          <return>return <expr><name>CLASS_NAME</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// OPTIONS</comment>
          <return>return <expr><name>OPTIONS</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>CLASS_NAME</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>OPTIONS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>MapMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TSamplerConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TSamplerConfiguration</name><parameter_list>(
    <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>,
    <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>className</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>__this__options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>__this__options</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TSamplerConfiguration</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>className</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TSamplerConfiguration</name></type> <name>setClassName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field className is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassNameIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getOptionsSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>putToOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>options</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TSamplerConfiguration</name></type> <name>setOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field options is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptionsIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetClassName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setClassName</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setOptions</name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <return>return <expr><call><name>getClassName</name><argument_list>()</argument_list></call></expr>;</return>

    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>getOptions</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <return>return <expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TSamplerConfiguration</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TSamplerConfiguration</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_className</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_className</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_className</name> <operator>||</operator> <name>that_present_className</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_className</name> <operator>&amp;&amp;</operator> <name>that_present_className</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_options</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_options</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_options</name> <operator>||</operator> <name>that_present_options</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_options</name> <operator>&amp;&amp;</operator> <name>that_present_options</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>options</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TSamplerConfiguration("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"className:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSamplerConfigurationStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TSamplerConfigurationStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TSamplerConfigurationStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSamplerConfigurationStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TSamplerConfiguration</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// CLASS_NAME</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setClassNameIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// OPTIONS</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
              <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map106</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map106</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i107</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i107</name> <operator>&lt;</operator> <name><name>_map106</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i107</name></expr></incr>)</control>
                <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key108</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val109</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key108</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val109</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key108</name></expr></argument>, <argument><expr><name>_val109</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setOptionsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CLASS_NAME_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>OPTIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter110</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter110</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter110</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSamplerConfigurationTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TSamplerConfigurationTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TSamplerConfigurationTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TSamplerConfigurationTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TSamplerConfiguration</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter111</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter111</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter111</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setClassNameIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map112</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map112</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>_i113</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i113</name> <operator>&lt;</operator> <name><name>_map112</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i113</name></expr></incr>)</control>
          <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>_key114</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>_val115</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>_key114</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>_val115</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key114</name></expr></argument>, <argument><expr><name>_val115</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setOptionsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TabletClientService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TabletClientService</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bd0f79cea</name><operator>..</operator><name>f453788c5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TabletClientService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>tabletserver</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TabletClientService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
   <interface><specifier>public</specifier> interface <name>Iface</name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ClientService</name><operator>.</operator><name>Iface</name></name></super></extends></super_list> <block>{
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>continueScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>continueScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>closeScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>continueMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>continueMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>closeMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
   <interface><specifier>public</specifier> interface <name>AsyncIface</name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ClientService</name> <operator>.</operator><name>AsyncIface</name></name></super></extends></super_list> <block>{
 
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>continueScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>closeScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>continueMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name> <name>resultHandler</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">202</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">202</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <constructor_decl><name>super</name><parameter_list>(<parameter><decl><type><name>iprot</name></type></decl></parameter>, <parameter><decl><type><name>oprot</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
     }</block></interface>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name> <call><name>startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
      <expr><call><name>send_startScan</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>batchSize</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>readaheadThreshold</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
      <constructor_decl><name>send_startScan</name><parameter_list>(<parameter><decl><type><name>tinfo</name></type></decl></parameter>, <parameter><decl><type><name>credentials</name></type></decl></parameter>, <parameter><decl><type><name>extent</name></type></decl></parameter>, <parameter><decl><type><name>range</name></type></decl></parameter>, <parameter><decl><type><name>columns</name></type></decl></parameter>, <parameter><decl><type><name>batchSize</name></type></decl></parameter>, <parameter><decl><type><name>ssiList</name></type></decl></parameter>, <parameter><decl><type><name>ssio</name></type></decl></parameter>, <parameter><decl><type><name>authorizations</name></type></decl></parameter>, <parameter><decl><type><name>waitForWrites</name></type></decl></parameter>, <parameter><decl><type><name>isolated</name></type></decl></parameter>, <parameter><decl><type><name>readaheadThreshold</name></type></decl></parameter>, <parameter><decl><type><name>samplerConfig</name></type></decl></parameter>, <parameter><decl><type><name>batchTimeOut</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
       <return>return <expr><call><name>recv_startScan</name><argument_list>()</argument_list></call></expr>;</return>
     }</block></interface>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>send_startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name>void</name> <call><name>send_startScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>startScan_args</name> <name>args</name> <operator>=</operator> <operator>new</operator> <call><name>startScan_args</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setTinfo</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWaitForWrites</name></name><argument_list>(<argument><expr><name>waitForWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setIsolated</name></name><argument_list>(<argument><expr><name>isolated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setReadaheadThreshold</name></name><argument_list>(<argument><expr><name>readaheadThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSamplerConfig</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setBatchTimeOut</name></name><argument_list>(<argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"startScan"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
    <expr_stmt><expr><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name> <call><name>recv_startScan</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name> <call><name>recv_startScan</name><argument_list>()</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>startScan_result</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>startScan_result</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>receiveBase</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"startScan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><name><name>result</name><operator>.</operator><name>tmfe</name></name></expr>;</throw>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"startScan failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></constructor>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>continueScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name> <call><name>continueScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><call><name>send_continueScan</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
       <return>return <expr><call><name>recv_continueScan</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">260</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">264</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"continueScan"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
    <expr_stmt><expr><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name> <call><name>recv_continueScan</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name> <call><name>recv_continueScan</name><argument_list>()</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>continueScan_result</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>continueScan_result</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>receiveBase</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"continueScan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">276</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><name><name>result</name><operator>.</operator><name>tmfe</name></name></expr>;</throw>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"continueScan failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">292</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"closeScan"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name> <call><name>startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
      <expr><call><name>send_startMultiScan</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>send_startMultiScan</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name>recv_startMultiScan</name><argument_list>()</argument_list></call></expr>;</return>
     }
 
    public <decl_stmt><decl><type><name>void</name></type> <name>send_startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name>void</name> <call><name>send_startMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>batch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>startMultiScan_args</name> <name>args</name> <operator>=</operator> <operator>new</operator> <call><name>startMultiScan_args</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setTinfo</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">309</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">316</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSsio</name></name><argument_list>(<argument><expr><name>ssio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setAuthorizations</name></name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWaitForWrites</name></name><argument_list>(<argument><expr><name>waitForWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSamplerConfig</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setBatchTimeOut</name></name><argument_list>(<argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"startMultiScan"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <expr_stmt><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name> <call><name>recv_startMultiScan</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name> <call><name>recv_startMultiScan</name><argument_list>()</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>startMultiScan_result</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>startMultiScan_result</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>receiveBase</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"startMultiScan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">323</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><name><name>result</name><operator>.</operator><name>sec</name></name></expr>;</throw>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"startMultiScan failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     }
 
    public <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>continueMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name> <call><name>continueMultiScan</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><call><name>send_continueMultiScan</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
       <return>return <expr><call><name>recv_continueMultiScan</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"continueMultiScan"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <expr_stmt><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name> <call><name>recv_continueMultiScan</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name> <call><name>recv_continueMultiScan</name><argument_list>()</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>continueMultiScan_result</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>continueMultiScan_result</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>receiveBase</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"continueMultiScan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">350</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">361</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>nssi</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><name><name>result</name><operator>.</operator><name>nssi</name></name></expr>;</throw>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"continueMultiScan failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">958</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">972</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>protocolFactory</name></expr></argument>, <argument><expr><name>clientManager</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <function><type><name>void</name></type> <name>startScan</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>batchSize</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isolated</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>readaheadThreshold</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startScan</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>batchSize</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isolated</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>readaheadThreshold</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>checkReady</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>startScan_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>startScan_call</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>batchSize</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>readaheadThreshold</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>startScan_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>startScan_call</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>batchSize</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>readaheadThreshold</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>___currentMethod</name></name> <operator>=</operator> <name>method_call</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>___manager</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>method_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">978</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">992</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>waitForWrites</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isolated</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>readaheadThreshold</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt>
      <constructor><specifier>public</specifier> <name>startScan_call</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>batchSize</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isolated</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>readaheadThreshold</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <constructor><specifier>public</specifier> <name>startScan_call</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>extent</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>batchSize</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isolated</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>readaheadThreshold</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>protocolFactory</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">993</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1008</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name> <operator>=</operator> <name>waitForWrites</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isolated</name></name> <operator>=</operator> <name>isolated</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <name>readaheadThreshold</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
       </block_content>}</block></constructor>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1011</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1027</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWaitForWrites</name></name><argument_list>(<argument><expr><name>waitForWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setIsolated</name></name><argument_list>(<argument><expr><name>isolated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setReadaheadThreshold</name></name><argument_list>(<argument><expr><name>readaheadThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSamplerConfig</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setBatchTimeOut</name></name><argument_list>(<argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></constructor>
 
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name>getState</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name><operator>.</operator><name>State</name><operator>.</operator><name>RESPONSE_READ</name></name></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Method call not finished!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1051</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1068</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
 
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>TooManyFilesException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name>getState</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name><operator>.</operator><name>State</name><operator>.</operator><name>RESPONSE_READ</name></name></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Method call not finished!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1095</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1112</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       </block_content>}</block></function>
     </block_content>}</block></function>
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startMultiScan</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startMultiScan</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>checkReady</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>startMultiScan_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>startMultiScan_call</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>startMultiScan_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>startMultiScan_call</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>waitForWrites</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>___currentMethod</name></name> <operator>=</operator> <name>method_call</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>___manager</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>method_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1111</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1128</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>waitForWrites</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt>
      <constructor><specifier>public</specifier> <name>startMultiScan_call</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <constructor><specifier>public</specifier> <name>startMultiScan_call</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl></parameter>, <parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>protocolFactory</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1140</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <name>ssio</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>authorizations</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name> <operator>=</operator> <name>waitForWrites</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
       </block_content>}</block></constructor>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1136</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1155</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSsio</name></name><argument_list>(<argument><expr><name>ssio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setAuthorizations</name></name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWaitForWrites</name></name><argument_list>(<argument><expr><name>waitForWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setSamplerConfig</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setBatchTimeOut</name></name><argument_list>(<argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></constructor>
 
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name>getState</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name><operator>.</operator><name>State</name><operator>.</operator><name>RESPONSE_READ</name></name></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Method call not finished!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1176</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1196</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
 
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name>getState</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name><operator>.</operator><name>State</name><operator>.</operator><name>RESPONSE_READ</name></name></expr>)</condition> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Method call not finished!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2260</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">2280</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <function><type><specifier>public</specifier> <name>startScan_result</name></type> <name>getResult</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>startScan_args</name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>startScan_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>startScan_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchSize</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchSize</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NotServingTabletException</name></type> <name>nste</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>nste</name></name> <operator>=</operator> <name>nste</name></expr>;</expr_stmt>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TooManyFilesException</name></type> <name>tmfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <name>tmfe</name></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
         </block_content>}</block></catch></try>
         <return>return <expr><name>result</name></expr>;</return>
       </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2295</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2317</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>nste</name></name> <operator>=</operator> <name>nste</name></expr>;</expr_stmt>
         </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>TooManyFilesException</name></type> <name>tmfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <name>tmfe</name></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
         </block_content>}</block></catch>
         <return>return <expr><name>result</name></expr>;</return>
       </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2335</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">2359</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <function><type><specifier>public</specifier> <name>startMultiScan_result</name></type> <name>getResult</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>startMultiScan_args</name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>startMultiScan_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>startMultiScan_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batch</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batch</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
         </block_content>}</block></catch></try>
         <return>return <expr><name>result</name></expr>;</return>
       </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2362</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2388</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>continueMultiScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>scanID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchScanIDException</name></type> <name>nssi</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>nssi</name></name> <operator>=</operator> <name>nssi</name></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
         </block_content>}</block></catch>
         <return>return <expr><name>result</name></expr>;</return>
       </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3028</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3056</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                         <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <operator>(</operator><name>TooManyFilesException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTmfeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <if_stmt><if type="elseif">else             if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>TSampleNotPresentException</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
             </block_content>}</block></if>
              <else>else 
             <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3050</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3083</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       </block_content>}</block></else></if_stmt>
 
       <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>startScan_args</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></argument>&gt;</argument_list></name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchSize</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>startScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchSize</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>isolated</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3095</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3128</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                         <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <operator>(</operator><name>TooManyFilesException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTmfeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            }
            else             <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>TSampleNotPresentException</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
             </block_content>}</block></if>
              <else>else 
             <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3180</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3218</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                         <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setSecIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if type="elseif">else             if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>TSampleNotPresentException</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
             </block_content>}</block></if>
              <else>else 
             <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3202</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       </block_content>}</block></else></if_stmt>
 
       <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>startMultiScan_args</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></argument>&gt;</argument_list></name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batch</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batch</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>authorizations</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">3237</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3280</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                         <expr_stmt><expr><name><name>result</name><operator>.</operator><name>nssi</name></name> <operator>=</operator> <operator>(</operator><name>NoSuchScanIDException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setNssiIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            }
            else             <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>TSampleNotPresentException</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
             </block_content>}</block></if>
              <else>else 
             <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4471</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">4519</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>WAIT_FOR_WRITES_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"waitForWrites"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>ISOLATED_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"isolated"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>READAHEAD_THRESHOLD_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"readaheadThreshold"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>BATCH_TIME_OUT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SAMPLER_CONFIG_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>BATCH_TIME_OUT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4491</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4540</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>waitForWrites</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isolated</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>readaheadThreshold</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4507</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">4557</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>WAIT_FOR_WRITES</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"waitForWrites"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
       <expr><call><name>ISOLATED</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"isolated"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
       <expr><call><name>READAHEAD_THRESHOLD</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"readaheadThreshold"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name>BATCH_TIME_OUT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SAMPLER_CONFIG</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name>BATCH_TIME_OUT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4546</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">4597</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>ISOLATED</name></expr>;</return>
           <case>case <expr><literal type="number">12</literal></expr>:</case> <comment type="line">// READAHEAD_THRESHOLD</comment>
             <return>return <expr><name>READAHEAD_THRESHOLD</name></expr>;</return>
          <case>case <expr><literal type="number">13</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
          <case>case <expr><literal type="number">13</literal></expr>:</case> <comment type="line">// SAMPLER_CONFIG</comment>
            <return>return <expr><name>SAMPLER_CONFIG</name></expr>;</return>
          <case>case <expr><literal type="number">14</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
             <return>return <expr><name>BATCH_TIME_OUT</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4628</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4681</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>READAHEAD_THRESHOLD</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"readaheadThreshold"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SAMPLER_CONFIG</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>TSamplerConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>BATCH_TIME_OUT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4650</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4705</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><name>boolean</name></type> <name>waitForWrites</name></decl>,
       <decl><type ref="prev"/><name>boolean</name> <name>isolated</name></decl>,
       <decl><type ref="prev"/><name>long</name> <name>readaheadThreshold</name></decl>,
      <decl><type ref="prev"/><name>TSamplerConfiguration</name> <name>samplerConfig</name></decl>,
       <decl><type ref="prev"/><name>long</name> <name>batchTimeOut</name></decl>)
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4669</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4725</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>setIsolatedIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <name>readaheadThreshold</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setReadaheadThresholdIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setBatchTimeOutIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4727</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4784</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>waitForWrites</name></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isolated</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>isolated</name></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>readaheadThreshold</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>batchTimeOut</name></name></expr>;</expr_stmt>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">4752</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">4812</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isolated</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setReadaheadThresholdIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setBatchTimeOutIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">5096</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5157</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__READAHEADTHRESHOLD_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <function><type><name>TSamplerConfiguration</name></type> <name>getSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>startScan_args</name></type> <name>setSamplerConfig</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field samplerConfig is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSamplerConfigIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>long</name></type> <name>getBatchTimeOut</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5217</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5302</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         }
         break<empty_stmt>;</empty_stmt>
 
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetSamplerConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setSamplerConfig</name><argument_list>(<argument><expr><operator>(</operator><name>TSamplerConfiguration</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name>unsetBatchTimeOut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5266</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5359</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>READAHEAD_THRESHOLD</name></expr>:</case>
         <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getReadaheadThreshold</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
 
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <return>return <expr><call><name>getSamplerConfig</name><argument_list>()</argument_list></call></expr>;</return>

       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getBatchTimeOut</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5304</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5400</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetIsolated</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>READAHEAD_THRESHOLD</name></expr>:</case>
         <return>return <expr><call><name>isSetReadaheadThreshold</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <return>return <expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <return>return <expr><call><name>isSetBatchTimeOut</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5431</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5529</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }
 
      boolean <expr_stmt><expr><name>this_present_samplerConfig</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_samplerConfig</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_samplerConfig</name> <operator>||</operator> <name>that_present_samplerConfig</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_samplerConfig</name> <operator>&amp;&amp;</operator> <name>that_present_samplerConfig</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_batchTimeOut</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_batchTimeOut</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>this_present_batchTimeOut</name> <operator>||</operator> <name>that_present_batchTimeOut</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5576</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5683</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
       }
      lastComparison <expr_stmt><expr><operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetBatchTimeOut</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>lastComparison</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5686</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5803</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5708</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">5833</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name>range</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>range</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
 
     <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5785</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">5913</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// COLUMNS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list106</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list106</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i107</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i107</name> <operator>&lt;</operator> <name><name>_list106</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i107</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list116</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list116</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i117</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i117</name> <operator>&lt;</operator> <name><name>_list116</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i117</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem108</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem108</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem108</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem108</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem118</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem118</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem118</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem118</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5812</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">5940</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="line">// SSI_LIST</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list109</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list109</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i110</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i110</name> <operator>&lt;</operator> <name><name>_list109</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i110</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list119</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list119</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i120</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i120</name> <operator>&lt;</operator> <name><name>_list119</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i120</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem111</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem111</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem111</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem111</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem121</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem121</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem121</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem121</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5831</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">5959</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">7</literal></expr>:</case> <comment type="line">// SSIO</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map112</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map112</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i113</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i113</name> <operator>&lt;</operator> <name><name>_map112</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i113</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map122</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map122</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i123</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i123</name> <operator>&lt;</operator> <name><name>_map122</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i123</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key114</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val115</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key114</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key124</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val125</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key124</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map116</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val115</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map116</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i117</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i117</name> <operator>&lt;</operator> <name><name>_map116</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i117</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map126</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val125</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map126</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i127</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i127</name> <operator>&lt;</operator> <name><name>_map126</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i127</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key118</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_val119</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key118</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val119</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val115</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key118</name></expr></argument>, <argument><expr><name>_val119</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key128</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_val129</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key128</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val129</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val125</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key128</name></expr></argument>, <argument><expr><name>_val129</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key114</name></expr></argument>, <argument><expr><name>_val115</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key124</name></expr></argument>, <argument><expr><name>_val125</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5863</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">5991</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="line">// AUTHORIZATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list120</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list120</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i121</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i121</name> <operator>&lt;</operator> <name><name>_list120</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i121</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list130</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list130</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i131</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i131</name> <operator>&lt;</operator> <name><name>_list130</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i131</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem122</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem122</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem122</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem132</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem132</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem132</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5902</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">6030</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <break>break;</break>
            <case>case <expr><literal type="number">13</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
            <case>case <expr><literal type="number">13</literal></expr>:</case> <comment type="line">// SAMPLER_CONFIG</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSamplerConfigIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">14</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setBatchTimeOutIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5944</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">6081</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>COLUMNS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter123</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter133</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter123</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter133</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5959</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">6096</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SSI_LIST_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter124</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter134</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter124</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter134</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5971</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">6108</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SSIO_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter125</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter135</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter125</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter135</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter125</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter126</name> <range>: <expr><call><name><name>_iter125</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter135</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter136</name> <range>: <expr><call><name><name>_iter135</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter126</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter126</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter136</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter136</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5992</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">6129</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>AUTHORIZATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter127</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter137</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter127</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter137</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6014</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6151</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>READAHEAD_THRESHOLD_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SAMPLER_CONFIG_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>BATCH_TIME_OUT_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6071</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">6213</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetReadaheadThreshold</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6090</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">6235</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetColumns</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter128</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter138</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter128</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter138</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6102</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">6247</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSsiList</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter129</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter139</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter129</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter139</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSsio</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter130</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter140</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter130</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter140</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter130</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter131</name> <range>: <expr><call><name><name>_iter130</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter140</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter141</name> <range>: <expr><call><name><name>_iter140</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter131</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter131</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter141</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter141</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6128</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">6273</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAuthorizations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter132</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter142</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter132</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter142</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6143</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6288</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetReadaheadThreshold</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>readaheadThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6151</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">6299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>startScan_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6174</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">6322</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list133</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list133</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i134</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i134</name> <operator>&lt;</operator> <name><name>_list133</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i134</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list143</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list143</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i144</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i144</name> <operator>&lt;</operator> <name><name>_list143</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i144</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem135</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem135</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem135</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem135</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem145</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem145</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem145</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem145</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setColumnsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6192</literal></expr><operator>,</operator><expr><literal type="number">53</literal> <operator>+</operator><literal type="number">6340</literal></expr><operator>,</operator><expr><literal type="number">53</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list136</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list136</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i137</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i137</name> <operator>&lt;</operator> <name><name>_list136</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i137</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list146</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list146</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i147</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i147</name> <operator>&lt;</operator> <name><name>_list146</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i147</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem138</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem138</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem138</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem138</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem148</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem148</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem148</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem148</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSsiListIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map139</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map139</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i140</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i140</name> <operator>&lt;</operator> <name><name>_map139</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i140</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map149</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map149</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i150</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i150</name> <operator>&lt;</operator> <name><name>_map149</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i150</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key141</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val142</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key141</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key151</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val152</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key151</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map143</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val142</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map143</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i144</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i144</name> <operator>&lt;</operator> <name><name>_map143</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i144</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map153</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val152</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map153</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i154</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i154</name> <operator>&lt;</operator> <name><name>_map153</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i154</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key145</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val146</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key145</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val146</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val142</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key145</name></expr></argument>, <argument><expr><name>_val146</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key155</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val156</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key155</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val156</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val152</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key155</name></expr></argument>, <argument><expr><name>_val156</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key141</name></expr></argument>, <argument><expr><name>_val142</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key151</name></expr></argument>, <argument><expr><name>_val152</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSsioIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list147</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list147</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i148</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i148</name> <operator>&lt;</operator> <name><name>_list147</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i148</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list157</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list157</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i158</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i158</name> <operator>&lt;</operator> <name><name>_list157</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i158</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem149</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem149</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem149</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem159</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem159</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem159</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAuthorizationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6256</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6404</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setReadaheadThresholdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSamplerConfigIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setBatchTimeOutIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6271</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6424</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SEC_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>NSTE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"nste"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TMFE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tmfe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TSNPE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6282</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">6436</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>NotServingTabletException</name></type> <name>nste</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>TooManyFilesException</name></type> <name>tmfe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
     <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
       <decl><name>SUCCESS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>SEC</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>NSTE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"nste"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TMFE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tmfe"</literal></expr></argument>)</argument_list></decl>;
      <decl><name>TMFE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tmfe"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TSNPE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"tsnpe"</literal></expr></argument>)</argument_list></decl>;
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">6311</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6467</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>NSTE</name></expr>;</return>
           <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// TMFE</comment>
             <return>return <expr><name>TMFE</name></expr>;</return>
          <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// TSNPE</comment>
            <return>return <expr><name>TSNPE</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6362</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6520</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)</block_content></block>;</function>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TMFE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tmfe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TSNPE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>startScan_result</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6373</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">6533</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name></type> <name>success</name></decl>,
       <decl><type ref="prev"/><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></decl>,
       <decl><type ref="prev"/><name>NotServingTabletException</name> <name>nste</name></decl>,
      <decl><type ref="prev"/><name>TooManyFilesException</name> <name>tmfe</name></decl>)
      TooManyFilesException tmfe<operator>,</operator>
      TSampleNotPresentException tsnpe</decl_stmt>)</block_content>
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nste</name></name> <operator>=</operator> <name>nste</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <name>tmfe</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
     </block_content>}</block></block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -6398,6 +6560,9 @@ import org.slf4j.LoggerFactory;
       if (other.isSetTmfe()) {
         this.tmfe = new TooManyFilesException(other.tmfe);
       }
      if (other.isSetTsnpe()) {
        this.tsnpe = new TSampleNotPresentException(other.tsnpe);
      }
     }
 
     public startScan_result deepCopy() {
@@ -6410,6 +6575,7 @@ import org.slf4j.LoggerFactory;
       this.sec = null;
       this.nste = null;
       this.tmfe = null;
      this.tsnpe = null;
     }
 
     public org.apache.accumulo.core.data.thrift.InitialScan getSuccess() {
@@ -6508,6 +6674,30 @@ import org.slf4j.LoggerFactory;
       }
     }
 
    public TSampleNotPresentException getTsnpe() {
      return this.tsnpe;
    }

    public startScan_result setTsnpe(TSampleNotPresentException tsnpe) {
      this.tsnpe = tsnpe;
      return this;
    }

    public void unsetTsnpe() {
      this.tsnpe = null;
    }

    /** Returns true if field tsnpe is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTsnpe</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTsnpeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>SUCCESS</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6542</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6732</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></switch>
         <break>break;</break>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetTsnpe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setTsnpe</name><argument_list>(<argument><expr><operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       </block_content>}</block></function>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6559</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6757</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>TMFE</name></expr>:</case>
         <return>return <expr><call><name>getTmfe</name><argument_list>()</argument_list></call></expr>;</return>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>getTsnpe</name><argument_list>()</argument_list></call></expr>;</return>

       </block_content>}</block></for></block_content></block></for>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6578</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6779</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetNste</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>TMFE</name></expr>:</case>
         <return>return <expr><call><name>isSetTmfe</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6631</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6834</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       </block_content>}</block></if></if_stmt>
 
      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_tsnpe</name> <operator>||</operator> <name>that_present_tsnpe</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_tsnpe</name> <operator>&amp;&amp;</operator> <name>that_present_tsnpe</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6687</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6899</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         </block_content>}</block></function>
       }
      lastComparison <expr_stmt><expr><operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">6738</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6960</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tmfe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }
       first <expr_stmt><expr><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">6820</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7050</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }
               break<empty_stmt>;</empty_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// TSNPE</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
             <default>default:</default>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">6855</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7094</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         }
        if <expr_stmt><expr><operator>(</operator><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TSNPE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
         <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">6885</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">7129</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTmfe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6898</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">7145</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTmfe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       }
 
       @<function><type><name>Override</name>
       <specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>startScan_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialScan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6924</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7174</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTmfeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7393</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7648</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>NSSI_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"nssi"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>NSTE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"nste"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TMFE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tmfe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TSNPE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7404</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">7660</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>public</specifier> <name>NoSuchScanIDException</name></type> <name>nssi</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>NotServingTabletException</name></type> <name>nste</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>TooManyFilesException</name></type> <name>tmfe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
     <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
       <decl><name>SUCCESS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>NSSI</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"nssi"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>NSTE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"nste"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TMFE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tmfe"</literal></expr></argument>)</argument_list></decl>;
      <decl><name>TMFE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tmfe"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TSNPE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"tsnpe"</literal></expr></argument>)</argument_list></decl>;
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">7433</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7691</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>NSTE</name></expr>;</return>
           <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// TMFE</comment>
             <return>return <expr><name>TMFE</name></expr>;</return>
          <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// TSNPE</comment>
            <return>return <expr><name>TSNPE</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7484</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7744</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TMFE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tmfe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TSNPE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>continueScan_result</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7495</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">7757</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name></type> <name>success</name></decl>,
       <decl><type ref="prev"/><name>NoSuchScanIDException</name> <name>nssi</name></decl>,
       <decl><type ref="prev"/><name>NotServingTabletException</name> <name>nste</name></decl>,
      <decl><type ref="prev"/><name>TooManyFilesException</name> <name>tmfe</name></decl>)
      TooManyFilesException tmfe<operator>,</operator>
      TSampleNotPresentException tsnpe</decl_stmt>)
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nssi</name></name> <operator>=</operator> <name>nssi</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nste</name></name> <operator>=</operator> <name>nste</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tmfe</name></name> <operator>=</operator> <name>tmfe</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
     </block_content>}</block>
 
     <comment type="block" format="javadoc">/**
@@ -7520,6 +7784,9 @@ import org.slf4j.LoggerFactory;
       if (other.isSetTmfe()) {
         this.tmfe = new TooManyFilesException(other.tmfe);
       }
      if (other.isSetTsnpe()) {
        this.tsnpe = new TSampleNotPresentException(other.tsnpe);
      }
     }
 
     public continueScan_result deepCopy() {
@@ -7532,6 +7799,7 @@ import org.slf4j.LoggerFactory;
       this.nssi = null;
       this.nste = null;
       this.tmfe = null;
      this.tsnpe = null;
     }
 
     public org.apache.accumulo.core.data.thrift.ScanResult getSuccess() {
@@ -7630,6 +7898,30 @@ import org.slf4j.LoggerFactory;
       }
     }
 
    public TSampleNotPresentException getTsnpe() {
      return this.tsnpe;
    }

    public continueScan_result setTsnpe(TSampleNotPresentException tsnpe) {
      this.tsnpe = tsnpe;
      return this;
    }

    public void unsetTsnpe() {
      this.tsnpe = null;
    }

    /** Returns true if field tsnpe is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTsnpe</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTsnpeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>SUCCESS</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7664</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7956</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></switch>
         <break>break;</break>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetTsnpe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setTsnpe</name><argument_list>(<argument><expr><operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7681</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7981</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>TMFE</name></expr>:</case>
         <return>return <expr><call><name>getTmfe</name><argument_list>()</argument_list></call></expr>;</return>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>getTsnpe</name><argument_list>()</argument_list></call></expr>;</return>

       }
       throw <expr_stmt><expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7700</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8003</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetNste</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>TMFE</name></expr>:</case>
         <return>return <expr><call><name>isSetTmfe</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>;</return>
       }
       throw <expr_stmt><expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7753</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8058</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }
 
      boolean <expr_stmt><expr><name>this_present_tsnpe</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_tsnpe</name> <operator>||</operator> <name>that_present_tsnpe</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_tsnpe</name> <operator>&amp;&amp;</operator> <name>that_present_tsnpe</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7809</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8123</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         }
       }
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7860</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8184</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tmfe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }
       first <expr_stmt><expr><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7942</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8274</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }
               break<empty_stmt>;</empty_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// TSNPE</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
             <default>default:</default>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">7977</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8318</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         }
        if <expr_stmt><expr><operator>(</operator><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TSNPE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
         <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">8007</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8353</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTmfe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8020</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">8369</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTmfe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       }
 
       @<function><type><name>Override</name>
       <specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>continueScan_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ScanResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8046</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8398</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tmfe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTmfeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">8519</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8876</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SSIO_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"ssio"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>AUTHORIZATIONS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"authorizations"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>WAIT_FOR_WRITES_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"waitForWrites"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>BATCH_TIME_OUT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SAMPLER_CONFIG_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>BATCH_TIME_OUT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8535</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">8893</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>authorizations</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>waitForWrites</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8547</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8906</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>SSIO</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"ssio"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
       <expr><call><name>AUTHORIZATIONS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"authorizations"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
       <expr><call><name>WAIT_FOR_WRITES</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"waitForWrites"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name>BATCH_TIME_OUT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SAMPLER_CONFIG</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name>BATCH_TIME_OUT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8578</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8938</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>AUTHORIZATIONS</name></expr>;</return>
           <case>case <expr><literal type="number">7</literal></expr>:</case> <comment type="line">// WAIT_FOR_WRITES</comment>
             <return>return <expr><name>WAIT_FOR_WRITES</name></expr>;</return>
          <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
          <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// SAMPLER_CONFIG</comment>
            <return>return <expr><name>SAMPLER_CONFIG</name></expr>;</return>
          <case>case <expr><literal type="number">10</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
             <return>return <expr><name>BATCH_TIME_OUT</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8649</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9011</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
               <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>              , <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>))<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>WAIT_FOR_WRITES</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"waitForWrites"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SAMPLER_CONFIG</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>TSamplerConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>BATCH_TIME_OUT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8667</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9031</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl>,
       <decl><type ref="prev"/><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></decl>,
       <decl><type ref="prev"/><name>boolean</name> <name>waitForWrites</name></decl>,
      <decl><type ref="prev"/><name>TSamplerConfiguration</name> <name>samplerConfig</name></decl>,
       <decl><type ref="prev"/><name>long</name> <name>batchTimeOut</name></decl>)
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8679</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9044</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>authorizations</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name> <operator>=</operator> <name>waitForWrites</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setWaitForWritesIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setBatchTimeOutIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8731</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9097</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>__this__authorizations</name></expr>;</expr_stmt>
       }
       this<expr_stmt><expr><operator>.</operator><name>waitForWrites</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>waitForWrites</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>batchTimeOut</name></name></expr>;</expr_stmt>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">8749</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9118</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setWaitForWritesIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setBatchTimeOutIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">9011</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9381</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__WAITFORWRITES_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
    public <function><type><name>TSamplerConfiguration</name></type> <name>getSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>startMultiScan_args</name></type> <name>setSamplerConfig</name><parameter_list>(<parameter><decl><type><name>TSamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field samplerConfig is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSamplerConfigIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>long</name></type> <name>getBatchTimeOut</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9100</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9494</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         }
         break<empty_stmt>;</empty_stmt>
 
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetSamplerConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setSamplerConfig</name><argument_list>(<argument><expr><operator>(</operator><name>TSamplerConfiguration</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name>unsetBatchTimeOut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9137</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9539</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>WAIT_FOR_WRITES</name></expr>:</case>
         <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isWaitForWrites</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
 
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <return>return <expr><call><name>getSamplerConfig</name><argument_list>()</argument_list></call></expr>;</return>

       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getBatchTimeOut</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9167</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9572</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetAuthorizations</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>WAIT_FOR_WRITES</name></expr>:</case>
         <return>return <expr><call><name>isSetWaitForWrites</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>SAMPLER_CONFIG</name></expr>:</case>
        <return>return <expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>BATCH_TIME_OUT</name></expr>:</case>
         <return>return <expr><call><name>isSetBatchTimeOut</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9258</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9665</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }
 
      boolean <expr_stmt><expr><name>this_present_samplerConfig</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_samplerConfig</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_samplerConfig</name> <operator>||</operator> <name>that_present_samplerConfig</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_samplerConfig</name> <operator>&amp;&amp;</operator> <name>that_present_samplerConfig</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_batchTimeOut</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_batchTimeOut</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>this_present_batchTimeOut</name> <operator>||</operator> <name>that_present_batchTimeOut</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9363</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9779</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
       }
      lastComparison <expr_stmt><expr><operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetSamplerConfig</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetBatchTimeOut</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>lastComparison</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9453</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9879</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"samplerConfig:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"batchTimeOut:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9469</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">9903</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <if_stmt><if>if <condition>(<expr><name>credentials</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>credentials</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
 
     <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9528</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">9965</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// BATCH</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map150</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batch</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map150</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i151</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i151</name> <operator>&lt;</operator> <name><name>_map150</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i151</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map160</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batch</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map160</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i161</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i161</name> <operator>&lt;</operator> <name><name>_map160</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i161</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key152</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></type> <name>_val153</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key152</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key152</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key162</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></type> <name>_val163</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key162</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key162</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list154</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val153</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list154</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i155</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i155</name> <operator>&lt;</operator> <name><name>_list154</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i155</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list164</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val163</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list164</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i165</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i165</name> <operator>&lt;</operator> <name><name>_list164</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i165</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_elem156</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem156</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem156</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val153</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem156</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_elem166</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem166</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem166</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val163</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem166</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key152</name></expr></argument>, <argument><expr><name>_val153</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key162</name></expr></argument>, <argument><expr><name>_val163</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9560</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">9997</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// COLUMNS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list157</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list157</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i158</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i158</name> <operator>&lt;</operator> <name><name>_list157</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i158</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list167</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list167</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i168</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i168</name> <operator>&lt;</operator> <name><name>_list167</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i168</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem159</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem159</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem159</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem159</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem169</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem169</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem169</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem169</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9579</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10016</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// SSI_LIST</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list160</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list160</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i161</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i161</name> <operator>&lt;</operator> <name><name>_list160</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i161</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list170</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list170</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i171</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i171</name> <operator>&lt;</operator> <name><name>_list170</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i171</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem162</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem162</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem162</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem162</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem172</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem172</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem172</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem172</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9598</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">10035</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// SSIO</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map163</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map163</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i164</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i164</name> <operator>&lt;</operator> <name><name>_map163</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i164</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map173</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map173</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i174</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i174</name> <operator>&lt;</operator> <name><name>_map173</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i174</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key165</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val166</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key165</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key175</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val176</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key175</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map167</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val166</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map167</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i168</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i168</name> <operator>&lt;</operator> <name><name>_map167</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i168</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map177</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val176</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map177</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i178</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i178</name> <operator>&lt;</operator> <name><name>_map177</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i178</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key169</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_val170</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key169</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val170</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val166</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key169</name></expr></argument>, <argument><expr><name>_val170</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key179</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_val180</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key179</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val180</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val176</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key179</name></expr></argument>, <argument><expr><name>_val180</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key165</name></expr></argument>, <argument><expr><name>_val166</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key175</name></expr></argument>, <argument><expr><name>_val176</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9630</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">10067</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="line">// AUTHORIZATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list171</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list171</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i172</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i172</name> <operator>&lt;</operator> <name><name>_list171</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i172</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list181</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list181</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i182</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i182</name> <operator>&lt;</operator> <name><name>_list181</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i182</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem173</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem173</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem173</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem183</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem183</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem183</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9653</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">10090</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <break>break;</break>
            <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
            <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="line">// SAMPLER_CONFIG</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSamplerConfigIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <comment type="line">// BATCH_TIME_OUT</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setBatchTimeOutIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9685</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10131</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>BATCH_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter174</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter184</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter174</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter184</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter174</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_iter175</name> <range>: <expr><call><name><name>_iter174</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter184</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_iter185</name> <range>: <expr><call><name><name>_iter184</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter175</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter185</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9705</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">10151</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>COLUMNS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter176</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter186</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter176</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter186</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9717</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">10163</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SSI_LIST_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter177</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter187</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter177</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter187</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9729</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">10175</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SSIO_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter178</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter188</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter178</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter188</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter178</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter179</name> <range>: <expr><call><name><name>_iter178</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter188</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter189</name> <range>: <expr><call><name><name>_iter188</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter179</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter179</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter189</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter189</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9750</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">10196</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>AUTHORIZATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter180</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter190</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter180</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter190</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9766</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10212</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SAMPLER_CONFIG_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>BATCH_TIME_OUT_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9811</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">10262</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetWaitForWrites</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9824</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10278</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter181</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter191</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter181</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter191</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter181</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_iter182</name> <range>: <expr><call><name><name>_iter181</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter191</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_iter192</name> <range>: <expr><call><name><name>_iter191</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter182</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter192</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9840</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">10294</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetColumns</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter183</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_iter193</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>columns</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter183</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter193</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSsiList</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter184</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_iter194</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter184</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter194</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSsio</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter185</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter195</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter185</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter195</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter185</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter186</name> <range>: <expr><call><name><name>_iter185</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter195</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter196</name> <range>: <expr><call><name><name>_iter195</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter186</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter186</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter196</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter196</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9875</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">10329</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAuthorizations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter187</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter197</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter187</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter197</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetWaitForWrites</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>waitForWrites</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSamplerConfig</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetBatchTimeOut</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9892</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">10349</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>startMultiScan_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9905</literal></expr><operator>,</operator><expr><literal type="number">93</literal> <operator>+</operator><literal type="number">10362</literal></expr><operator>,</operator><expr><literal type="number">93</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map188</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batch</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map188</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i189</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i189</name> <operator>&lt;</operator> <name><name>_map188</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i189</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map198</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batch</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map198</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i199</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i199</name> <operator>&lt;</operator> <name><name>_map198</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i199</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key190</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></type> <name>_val191</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key190</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key190</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key200</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name></type> <name>_val201</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key200</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key200</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list192</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val191</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list192</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i193</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i193</name> <operator>&lt;</operator> <name><name>_list192</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i193</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list202</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val201</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list202</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i203</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i203</name> <operator>&lt;</operator> <name><name>_list202</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i203</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_elem194</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem194</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem194</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val191</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem194</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name></type> <name>_elem204</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem204</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem204</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val201</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem204</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key190</name></expr></argument>, <argument><expr><name>_val191</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>batch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key200</name></expr></argument>, <argument><expr><name>_val201</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setBatchIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list195</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list195</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i196</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i196</name> <operator>&lt;</operator> <name><name>_list195</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i196</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list205</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list205</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i206</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i206</name> <operator>&lt;</operator> <name><name>_list205</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i206</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem197</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem197</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem197</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem197</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name></type> <name>_elem207</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem207</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TColumn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem207</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem207</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setColumnsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list198</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list198</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i199</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i199</name> <operator>&lt;</operator> <name><name>_list198</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i199</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list208</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list208</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i209</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i209</name> <operator>&lt;</operator> <name><name>_list208</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i209</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem200</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem200</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem200</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem200</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name></type> <name>_elem210</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem210</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem210</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssiList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem210</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSsiListIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map201</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map201</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i202</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i202</name> <operator>&lt;</operator> <name><name>_map201</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i202</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map211</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map211</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i212</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i212</name> <operator>&lt;</operator> <name><name>_map211</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i212</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key203</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val204</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key203</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key213</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val214</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key213</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map205</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val204</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map205</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i206</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i206</name> <operator>&lt;</operator> <name><name>_map205</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i206</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map215</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val214</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map215</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i216</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i216</name> <operator>&lt;</operator> <name><name>_map215</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i216</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key207</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val208</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key207</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val208</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val204</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key207</name></expr></argument>, <argument><expr><name>_val208</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key217</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val218</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key217</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val218</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val214</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key217</name></expr></argument>, <argument><expr><name>_val218</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key203</name></expr></argument>, <argument><expr><name>_val204</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>ssio</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key213</name></expr></argument>, <argument><expr><name>_val214</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSsioIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list209</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list209</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i210</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i210</name> <operator>&lt;</operator> <name><name>_list209</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i210</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list219</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list219</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i220</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i220</name> <operator>&lt;</operator> <name><name>_list219</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i220</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem211</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem211</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem211</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem221</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem221</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem221</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAuthorizationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10001</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10458</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setWaitForWritesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSamplerConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>samplerConfig</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSamplerConfigIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setBatchTimeOutIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10014</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10476</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SUCCESS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SEC_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TSNPE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10023</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">10486</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name></type> <name>success</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
     <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
       <decl><name>SUCCESS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>SEC</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></decl>;
      <decl><name>SEC</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TSNPE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"tsnpe"</literal></expr></argument>)</argument_list></decl>;
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">10046</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10511</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>SUCCESS</name></expr>;</return>
           <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// SEC</comment>
             <return>return <expr><name>SEC</name></expr>;</return>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// TSNPE</comment>
            <return>return <expr><name>TSNPE</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10093</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10560</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)</block_content></block>;</function>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SEC</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TSNPE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>startMultiScan_result</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10102</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">10571</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <expr_stmt><expr><specifier>public</specifier> <call><name>startMultiScan_result</name><argument_list>(
       <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name> <name>success</name></expr></argument>,
      <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></expr></argument>)</argument_list></call>
      <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></expr><operator>,</operator>
      <expr><name>TSampleNotPresentException</name> <name>tsnpe</name></expr></expr_stmt>)</block_content>
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
     </block_content>}</block></block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -10119,6 +10590,9 @@ import org.slf4j.LoggerFactory;
       if (other.isSetSec()) {
         this.sec = new org.apache.accumulo.core.client.impl.thrift.ThriftSecurityException(other.sec);
       }
      if (other.isSetTsnpe()) {
        this.tsnpe = new TSampleNotPresentException(other.tsnpe);
      }
     }
 
     public startMultiScan_result deepCopy() {
@@ -10129,6 +10603,7 @@ import org.slf4j.LoggerFactory;
     public void clear() {
       this.success = null;
       this.sec = null;
      this.tsnpe = null;
     }
 
     public org.apache.accumulo.core.data.thrift.InitialMultiScan getSuccess() {
@@ -10179,6 +10654,30 @@ import org.slf4j.LoggerFactory;
       }
     }
 
    public TSampleNotPresentException getTsnpe() {
      return this.tsnpe;
    }

    public startMultiScan_result setTsnpe(TSampleNotPresentException tsnpe) {
      this.tsnpe = tsnpe;
      return this;
    }

    public void unsetTsnpe() {
      this.tsnpe = null;
    }

    /** Returns true if field tsnpe is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTsnpe</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTsnpeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>SUCCESS</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10197</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10696</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></switch>
         <break>break;</break>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetTsnpe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setTsnpe</name><argument_list>(<argument><expr><operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       </block_content>}</block></function>
     </block_content>}</block>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10208</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10715</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>SEC</name></expr>:</case>
         <return>return <expr><call><name>getSec</name><argument_list>()</argument_list></call></expr>;</return>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>getTsnpe</name><argument_list>()</argument_list></call></expr>;</return>

       </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10223</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10733</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetSuccess</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>SEC</name></expr>:</case>
         <return>return <expr><call><name>isSetSec</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10258</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10770</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       </block_content>}</block>
 
      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_tsnpe</name> <operator>||</operator> <name>that_present_tsnpe</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_tsnpe</name> <operator>&amp;&amp;</operator> <name>that_present_tsnpe</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10294</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10815</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10329</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10860</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10393</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10932</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }
               break<empty_stmt>;</empty_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// TSNPE</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
             <default>default:</default>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">10418</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">10966</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         }
        if <expr_stmt><expr><operator>(</operator><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TSNPE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
         <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">10442</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">10995</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       }
 
       @<function><type><name>Override</name>
       <specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>startMultiScan_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>InitialMultiScan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10465</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11024</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSecIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">10932</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11496</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SUCCESS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>NSSI_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"nssi"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TSNPE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10941</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">11506</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>success</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>NoSuchScanIDException</name></type> <name>nssi</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TSampleNotPresentException</name></type> <name>tsnpe</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
     <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
       <decl><name>SUCCESS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>NSSI</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"nssi"</literal></expr></argument>)</argument_list></decl>;
      <decl><name>NSSI</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"nssi"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>TSNPE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"tsnpe"</literal></expr></argument>)</argument_list></decl>;
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">10964</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11531</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>SUCCESS</name></expr>;</return>
           <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// NSSI</comment>
             <return>return <expr><name>NSSI</name></expr>;</return>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// TSNPE</comment>
            <return>return <expr><name>TSNPE</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11011</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11580</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>NSSI</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"nssi"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TSNPE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>continueMultiScan_result</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11020</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">11591</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <expr_stmt><expr><specifier>public</specifier> <call><name>continueMultiScan_result</name><argument_list>(
       <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name> <name>success</name></expr></argument>,
      <argument><expr><name>NoSuchScanIDException</name> <name>nssi</name></expr></argument>)</argument_list></call>
      <name>NoSuchScanIDException</name> <name>nssi</name></expr><operator>,</operator>
      <expr><name>TSampleNotPresentException</name> <name>tsnpe</name></expr></expr_stmt>)
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nssi</name></name> <operator>=</operator> <name>nssi</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <name>tsnpe</name></expr>;</expr_stmt>
     </block_content>}</block>
 
     <comment type="block" format="javadoc">/**
@@ -11037,6 +11610,9 @@ import org.slf4j.LoggerFactory;
       if (other.isSetNssi()) {
         this.nssi = new NoSuchScanIDException(other.nssi);
       }
      if (other.isSetTsnpe()) {
        this.tsnpe = new TSampleNotPresentException(other.tsnpe);
      }
     }
 
     public continueMultiScan_result deepCopy() {
@@ -11047,6 +11623,7 @@ import org.slf4j.LoggerFactory;
     public void clear() {
       this.success = null;
       this.nssi = null;
      this.tsnpe = null;
     }
 
     public org.apache.accumulo.core.data.thrift.MultiScanResult getSuccess() {
@@ -11097,6 +11674,30 @@ import org.slf4j.LoggerFactory;
       }
     }
 
    public TSampleNotPresentException getTsnpe() {
      return this.tsnpe;
    }

    public continueMultiScan_result setTsnpe(TSampleNotPresentException tsnpe) {
      this.tsnpe = tsnpe;
      return this;
    }

    public void unsetTsnpe() {
      this.tsnpe = null;
    }

    /** Returns true if field tsnpe is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTsnpe</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTsnpeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>SUCCESS</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11115</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11716</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></switch>
         <break>break;</break>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetTsnpe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setTsnpe</name><argument_list>(<argument><expr><operator>(</operator><name>TSampleNotPresentException</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11126</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11735</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>NSSI</name></expr>:</case>
         <return>return <expr><call><name>getNssi</name><argument_list>()</argument_list></call></expr>;</return>
 
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>getTsnpe</name><argument_list>()</argument_list></call></expr>;</return>

       }
       throw <expr_stmt><expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11141</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11753</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetSuccess</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>NSSI</name></expr>:</case>
         <return>return <expr><call><name>isSetNssi</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>TSNPE</name></expr>:</case>
        <return>return <expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>;</return>
       }
       throw <expr_stmt><expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11176</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11790</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }
 
      boolean <expr_stmt><expr><name>this_present_tsnpe</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_tsnpe</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_tsnpe</name> <operator>||</operator> <name>that_present_tsnpe</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_tsnpe</name> <operator>&amp;&amp;</operator> <name>that_present_tsnpe</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11212</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11835</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         }
       }
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetTsnpe</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11247</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11880</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>nssi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }
       first <expr_stmt><expr><operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"tsnpe:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tsnpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11311</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11952</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }
               break<empty_stmt>;</empty_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// TSNPE</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
             <default>default:</default>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11336</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">11986</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>nssi</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         }
        if <expr_stmt><expr><operator>(</operator><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TSNPE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
         <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">11360</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">12015</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetNssi</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetNssi</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>nssi</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTsnpe</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       }
 
       @<function><type><name>Override</name>
       <specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>continueMultiScan_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MultiScanResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11383</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">12044</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>nssi</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setNssiIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tsnpe</name></name> <operator>=</operator> <operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tsnpe</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTsnpeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">13809</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">14475</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// MUTATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list212</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list212</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i213</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i213</name> <operator>&lt;</operator> <name><name>_list212</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i213</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list222</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list222</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i223</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i223</name> <operator>&lt;</operator> <name><name>_list222</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i223</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_elem214</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem214</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem214</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem214</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_elem224</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem224</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem224</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem224</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13857</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">14523</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>MUTATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_iter215</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>mutations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_iter225</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>mutations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter215</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter225</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13908</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">14574</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetMutations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_iter216</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>mutations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_iter226</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>mutations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter216</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter226</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13936</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">14602</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list217</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list217</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i218</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i218</name> <operator>&lt;</operator> <name><name>_list217</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i218</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list227</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list227</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i228</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i228</name> <operator>&lt;</operator> <name><name>_list227</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i228</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_elem219</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem219</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem219</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem219</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name></type> <name>_elem229</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem229</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem229</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem229</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setMutationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16875</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">17541</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// AUTHORIZATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list220</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list220</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i221</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i221</name> <operator>&lt;</operator> <name><name>_list220</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i221</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list230</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list230</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i231</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i231</name> <operator>&lt;</operator> <name><name>_list230</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i231</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem222</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem222</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem222</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem232</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem232</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem232</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16935</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17601</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>AUTHORIZATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter223</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter233</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter233</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16996</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17662</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAuthorizations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter224</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter234</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter224</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter234</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17026</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">17692</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list225</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list225</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i226</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i226</name> <operator>&lt;</operator> <name><name>_list225</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i226</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list235</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list235</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i236</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i236</name> <operator>&lt;</operator> <name><name>_list235</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i236</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem227</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem227</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem227</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem237</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem237</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem237</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAuthorizationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18079</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">18745</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// MUTATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map228</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map228</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i229</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i229</name> <operator>&lt;</operator> <name><name>_map228</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i229</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map238</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map238</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i239</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i239</name> <operator>&lt;</operator> <name><name>_map238</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i239</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key230</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></type> <name>_val231</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key230</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key230</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key240</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></type> <name>_val241</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key240</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key240</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list232</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val231</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list232</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i233</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i233</name> <operator>&lt;</operator> <name><name>_list232</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i233</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list242</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val241</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list242</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i243</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i243</name> <operator>&lt;</operator> <name><name>_list242</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i243</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_elem234</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem234</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem234</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val231</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem234</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_elem244</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem244</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem244</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val241</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem244</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key230</name></expr></argument>, <argument><expr><name>_val231</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key240</name></expr></argument>, <argument><expr><name>_val241</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18111</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">18777</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// SYMBOLS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list235</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>symbols</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list235</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i236</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i236</name> <operator>&lt;</operator> <name><name>_list235</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i236</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list245</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>symbols</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list245</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i246</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i246</name> <operator>&lt;</operator> <name><name>_list245</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i246</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem237</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem237</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem237</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem247</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem247</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem247</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18153</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">18819</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>MUTATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter238</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter248</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter238</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter248</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter238</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_iter239</name> <range>: <expr><call><name><name>_iter238</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter248</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_iter249</name> <range>: <expr><call><name><name>_iter248</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter239</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter249</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18173</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18839</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SYMBOLS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter240</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>symbols</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter250</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>symbols</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter240</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter250</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18221</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">18887</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetMutations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter241</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter251</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter241</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter251</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter241</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_iter242</name> <range>: <expr><call><name><name>_iter241</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter251</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_iter252</name> <range>: <expr><call><name><name>_iter251</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter242</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter252</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18237</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18903</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSymbols</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter243</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>symbols</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter253</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>symbols</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter243</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter253</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18260</literal></expr><operator>,</operator><expr><literal type="number">39</literal> <operator>+</operator><literal type="number">18926</literal></expr><operator>,</operator><expr><literal type="number">39</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map244</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map244</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i245</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i245</name> <operator>&lt;</operator> <name><name>_map244</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i245</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map254</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map254</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i255</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i255</name> <operator>&lt;</operator> <name><name>_map254</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i255</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key246</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></type> <name>_val247</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key246</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key246</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key256</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name></type> <name>_val257</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key256</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key256</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list248</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val247</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list248</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i249</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i249</name> <operator>&lt;</operator> <name><name>_list248</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i249</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list258</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val257</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list258</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i259</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i259</name> <operator>&lt;</operator> <name><name>_list258</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i259</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_elem250</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem250</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem250</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val247</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem250</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name></type> <name>_elem260</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem260</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TConditionalMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem260</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val257</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem260</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key246</name></expr></argument>, <argument><expr><name>_val247</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key256</name></expr></argument>, <argument><expr><name>_val257</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setMutationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list251</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>symbols</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list251</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i252</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i252</name> <operator>&lt;</operator> <name><name>_list251</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i252</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list261</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>symbols</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list261</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i262</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i262</name> <operator>&lt;</operator> <name><name>_list261</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i262</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem253</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem253</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem253</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem263</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem263</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>symbols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem263</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSymbolsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18688</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">19354</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list254</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list254</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i255</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i255</name> <operator>&lt;</operator> <name><name>_list254</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i255</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list264</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list264</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i265</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i265</name> <operator>&lt;</operator> <name><name>_list264</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i265</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_elem256</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem256</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem256</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_elem266</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem266</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem266</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem266</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18732</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">19398</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_iter257</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_iter267</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter257</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter267</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18773</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">19439</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_iter258</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_iter268</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter258</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter268</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18790</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">19456</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list259</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list259</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i260</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i260</name> <operator>&lt;</operator> <name><name>_list259</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i260</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list269</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list269</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i270</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i270</name> <operator>&lt;</operator> <name><name>_list269</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i270</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_elem261</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem261</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem261</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem261</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name></type> <name>_elem271</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem271</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCMResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem271</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem271</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20608</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">21274</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// FILES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map262</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>files</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map262</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i263</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i263</name> <operator>&lt;</operator> <name><name>_map262</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i263</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map272</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>files</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map272</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i273</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i273</name> <operator>&lt;</operator> <name><name>_map272</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i273</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key264</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></type> <name>_val265</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key264</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key264</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key274</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></type> <name>_val275</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key274</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_key274</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map266</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val265</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map266</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i267</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i267</name> <operator>&lt;</operator> <name><name>_map266</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i267</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map276</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val275</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map276</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i277</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i277</name> <operator>&lt;</operator> <name><name>_map276</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i277</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key268</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></type> <name>_val269</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key268</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val269</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val269</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val265</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key268</name></expr></argument>, <argument><expr><name>_val269</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_key278</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></type> <name>_val279</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_key278</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>_val279</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val279</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val275</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key278</name></expr></argument>, <argument><expr><name>_val279</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key264</name></expr></argument>, <argument><expr><name>_val265</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key274</name></expr></argument>, <argument><expr><name>_val275</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20671</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">21337</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>FILES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter270</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter280</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter270</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter280</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter270</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></name></type> <name>_iter271</name> <range>: <expr><call><name><name>_iter270</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter280</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></name></type> <name>_iter281</name> <range>: <expr><call><name><name>_iter280</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter271</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter271</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter281</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter281</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20745</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">21411</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetFiles</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter272</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter282</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter272</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter282</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter272</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></name></type> <name>_iter273</name> <range>: <expr><call><name><name>_iter272</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter282</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></name></type> <name>_iter283</name> <range>: <expr><call><name><name>_iter282</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter273</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter273</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter283</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter283</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20784</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">21450</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map274</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>files</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map274</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i275</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i275</name> <operator>&lt;</operator> <name><name>_map274</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i275</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map284</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>files</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map284</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i285</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i285</name> <operator>&lt;</operator> <name><name>_map284</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i285</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key276</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></type> <name>_val277</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key276</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key276</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_key286</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name></type> <name>_val287</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key286</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_key286</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map278</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val277</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map278</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i279</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i279</name> <operator>&lt;</operator> <name><name>_map278</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i279</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map288</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val287</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map288</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i289</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i289</name> <operator>&lt;</operator> <name><name>_map288</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i289</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key280</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></type> <name>_val281</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key280</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val281</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val281</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val277</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key280</name></expr></argument>, <argument><expr><name>_val281</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key290</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name></type> <name>_val291</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key290</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val291</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MapFileInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val291</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val287</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key290</name></expr></argument>, <argument><expr><name>_val291</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key276</name></expr></argument>, <argument><expr><name>_val277</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key286</name></expr></argument>, <argument><expr><name>_val287</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setFilesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21205</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">21871</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list282</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list282</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i283</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i283</name> <operator>&lt;</operator> <name><name>_list282</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i283</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list292</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list292</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i293</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i293</name> <operator>&lt;</operator> <name><name>_list292</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i293</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_elem284</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem284</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem284</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem284</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_elem294</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem294</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem294</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem294</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21249</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">21915</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_iter285</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_iter295</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter285</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter295</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21290</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">21956</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_iter286</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_iter296</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter286</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter296</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21307</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">21973</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list287</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list287</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i288</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i288</name> <operator>&lt;</operator> <name><name>_list287</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i288</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list297</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list297</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i298</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i298</name> <operator>&lt;</operator> <name><name>_list297</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i298</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_elem289</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem289</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem289</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem289</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name></type> <name>_elem299</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem299</name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TKeyExtent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem299</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem299</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28888</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">29554</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list290</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TabletStats</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list290</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i291</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i291</name> <operator>&lt;</operator> <name><name>_list290</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i291</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list300</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TabletStats</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list300</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i301</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i301</name> <operator>&lt;</operator> <name><name>_list300</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i301</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>TabletStats</name></type> <name>_elem292</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem292</name> <operator>=</operator> <operator>new</operator> <call><name>TabletStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem292</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem292</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>TabletStats</name></type> <name>_elem302</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem302</name> <operator>=</operator> <operator>new</operator> <call><name>TabletStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem302</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem302</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28932</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">29598</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>TabletStats</name></type> <name>_iter293</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>TabletStats</name></type> <name>_iter303</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter293</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter303</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28973</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">29639</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>TabletStats</name></type> <name>_iter294</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>TabletStats</name></type> <name>_iter304</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter294</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter304</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28990</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">29656</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list295</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TabletStats</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list295</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i296</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i296</name> <operator>&lt;</operator> <name><name>_list295</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i296</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list305</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TabletStats</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list305</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i306</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i306</name> <operator>&lt;</operator> <name><name>_list305</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i306</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>TabletStats</name></type> <name>_elem297</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem297</name> <operator>=</operator> <operator>new</operator> <call><name>TabletStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem297</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem297</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>TabletStats</name></type> <name>_elem307</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem307</name> <operator>=</operator> <operator>new</operator> <call><name>TabletStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem307</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem307</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32271</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">32937</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list298</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list298</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i299</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i299</name> <operator>&lt;</operator> <name><name>_list298</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i299</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list308</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list308</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i309</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i309</name> <operator>&lt;</operator> <name><name>_list308</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i309</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem300</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem300</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem300</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem310</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem310</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem310</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem310</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32315</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">32981</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter301</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter311</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter301</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter311</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32356</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">33022</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter302</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter312</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter302</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter312</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32373</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">33039</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list303</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list303</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i304</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i304</name> <operator>&lt;</operator> <name><name>_list303</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i304</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list313</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list313</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i314</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i314</name> <operator>&lt;</operator> <name><name>_list313</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i314</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem305</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem305</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem305</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem305</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem315</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem315</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem315</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem315</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33245</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">33911</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list306</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list306</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i307</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i307</name> <operator>&lt;</operator> <name><name>_list306</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i307</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list316</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list316</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i317</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i317</name> <operator>&lt;</operator> <name><name>_list316</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i317</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem308</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem308</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem308</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem308</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem318</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem318</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem318</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem318</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33289</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">33955</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter309</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter319</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter309</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter319</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33330</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">33996</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter310</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter320</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter310</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter320</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33347</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">34013</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list311</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list311</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i312</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i312</name> <operator>&lt;</operator> <name><name>_list311</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i312</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list321</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list321</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i322</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i322</name> <operator>&lt;</operator> <name><name>_list321</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i322</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem313</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem313</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem313</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem313</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem323</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem323</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem323</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem323</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33853</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">34519</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// FILENAMES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list314</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>filenames</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list314</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i315</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i315</name> <operator>&lt;</operator> <name><name>_list314</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i315</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list324</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>filenames</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list324</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i325</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i325</name> <operator>&lt;</operator> <name><name>_list324</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i325</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem316</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem316</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem316</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem326</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem326</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem326</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33897</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">34563</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>FILENAMES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter317</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>filenames</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter327</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>filenames</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter317</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter327</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33942</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">34608</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetFilenames</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter318</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>filenames</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter328</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>filenames</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter318</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter328</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33966</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">34632</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list319</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>filenames</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list319</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i320</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i320</name> <operator>&lt;</operator> <name><name>_list319</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i320</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list329</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>filenames</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list329</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i330</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i330</name> <operator>&lt;</operator> <name><name>_list329</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i330</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem321</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem321</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem321</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem331</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem331</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>filenames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem331</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setFilenamesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34752</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">35418</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list322</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list322</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i323</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i323</name> <operator>&lt;</operator> <name><name>_list322</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i323</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list332</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list332</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i333</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i333</name> <operator>&lt;</operator> <name><name>_list332</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i333</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem324</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem324</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem324</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem334</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem334</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem334</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34786</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">35452</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter325</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter335</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter325</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter335</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34819</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">35485</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter326</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter336</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter326</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34833</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">35499</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list327</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list327</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i328</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i328</name> <operator>&lt;</operator> <name><name>_list327</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i328</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list337</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list337</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i338</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i338</name> <operator>&lt;</operator> <name><name>_list337</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i338</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem329</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem329</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem329</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem339</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem339</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem339</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LocalityGroupUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LocalityGroupUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a4936cf3e</name><operator>..</operator><literal type="number">07757a6b0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LocalityGroupUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>LocalityGroupUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>LocalityGroupUtil</name> <block>{
     <return>return <expr><name>ecf</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PartitionedMutation</name> <super_list><extends>extends <super><name>Mutation</name></super></extends></super_list> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PartitionedMutation</name> <super_list><extends>extends <super><name>Mutation</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>row</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>updates</name></decl>;</decl_stmt>
 
    <constructor><name>PartitionedMutation</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>updates</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>PartitionedMutation</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>updates</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>updates</name></name> <operator>=</operator> <name>updates</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>tabletserver</name><operator>.</operator><name>thrift</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>tabletserver</name><operator>.</operator><name>thrift</name></name>
<name>index</name> <literal type="number">051daee58</literal><operator>..</operator><literal type="number">27b72f201</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>tabletserver</name><operator>.</operator><name>thrift</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>tabletserver</name><operator>.</operator><name>thrift</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>exception</name> <name>TooManyFilesException</name> <block>{
   <expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr>
 }</block>
 
<name>exception</name> <name>TSampleNotPresentException</name> <block>{
  <expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>TKeyExtent</name></name> <name>extent</name></expr>
}</block>

 <name>exception</name> <name>NoSuchScanIDException</name> <block>{
 }</block>
 
@@ <operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>struct</name> <name>IteratorConfig</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name><name>list</name><argument_list type="generic">&lt;<argument><name>TIteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr>;
 }</block></expr></expr_stmt>
 
<decl_stmt><decl><type><name>struct</name></type> <name>TSamplerConfiguration</name> <block>{<block_content>
   <expr_stmt><expr><literal type="number">1</literal><operator>:</operator><name>string</name> <name>className</name>
   <literal type="number">2</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>, <argument><name>string</name></argument>&gt;</argument_list></name> <name>options</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt>

 <expr_stmt><expr><name>service</name> <name>TabletClientService</name> extends <name><name>client</name><operator>.</operator><name>ClientService</name></name> <block>{
   <comment type="line">// scan a range of keys</comment>
   <expr><name><name>data</name><operator>.</operator><name>InitialScan</name></name> <call><name>startScan</name><argument_list>(<argument><expr><literal type="number">11</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">150</literal></expr></argument>,<argument><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">159</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <name>service</name> <name>TabletClientService</name> extends <name><name>client</name><operator>.</operator><name>ClientService</name></name> <block>{
                              <expr><literal type="number">9</literal><operator>:</operator><name>bool</name> <name>waitForWrites</name></expr>,
                              <expr><literal type="number">10</literal><operator>:</operator><name>bool</name> <name>isolated</name></expr>,
                              <expr><literal type="number">12</literal><operator>:</operator><name>i64</name> <name>readaheadThreshold</name></expr>,
                             <expr><literal type="number">13</literal><operator>:</operator><name>i64</name> <name>batchTimeOut</name></expr></block></expr></argument>)</argument_list></call>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><operator>:</operator><name><name>client</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></expr>, <expr><literal type="number">2</literal><operator>:</operator><name>NotServingTabletException</name> <name>nste</name></expr>, <expr><literal type="number">3</literal><operator>:</operator><name>TooManyFilesException</name> <name>tmfe</name></expr>)<operator>,</operator>
                             <literal type="number">13</literal><operator>:</operator><name>TSamplerConfiguration</name> <name>samplerConfig</name><operator>,</operator>
                             <literal type="number">14</literal><operator>:</operator><name>i64</name> <name>batchTimeOut</name>)</block>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><operator>:</operator><name><name>client</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></expr><operator>,</operator> <expr><literal type="number">2</literal><operator>:</operator><name>NotServingTabletException</name> <name>nste</name></expr><operator>,</operator> <expr><literal type="number">3</literal><operator>:</operator><name>TooManyFilesException</name> <name>tmfe</name></expr><operator>,</operator> <expr><literal type="number">4</literal><operator>:</operator><name>TSampleNotPresentException</name> <name>tsnpe</name></expr></expr_stmt>)</block_content></block><operator>,</operator>
                              
  data.ScanResult continueScan(2:trace.TInfo tinfo<operator>,</operator> 1:data.ScanID scanID</constructor>)</block>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws>:<decl_stmt><decl><type><name>NoSuchScanIDException</name></type> <name>nssi</name></decl>, 2<range>:<expr><name>NotServingTabletException</name> <name>nste</name></expr></range>, 3<range>:<expr><name>TooManyFilesException</name> <name>tmfe</name></expr>)</range>,
  <decl><type ref="prev"/><name><name>data</name><operator>.</operator><name>ScanResult</name></name> <name>continueScan</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>ScanID</name></name> <name>scanID</name></expr></argument>)</argument_list>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>NoSuchScanIDException</name> <name>nssi</name></expr></range></decl>, 2<range>:<expr><name>NotServingTabletException</name> <name>nste</name></expr></range>, 3<range>:<expr><name>TooManyFilesException</name> <name>tmfe</name></expr></range>, 4<range>:<expr><name>TSampleNotPresentException</name> <name>tsnpe</name></expr>)</range>,
   <decl><type ref="prev"/><name>oneway</name> <name>void</name> <name>closeScan</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>ScanID</name></name> <name>scanID</name></expr></argument>)</argument_list></decl>,
 
   <comment type="line">// scan over a series of ranges</comment>
@@ -164,8 +174,9 @@ <decl><type ref="prev"/><name>service</name> <name>TabletClientService</name> extends <name><name>client</name><operator>.</operator><name>ClientService</name></name> <block>{<block_content>
                                   <expr_stmt><expr><literal type="number">5</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>, <argument><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>, <argument><name>string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr><operator>,</operator>
                                   <expr><literal type="number">6</literal><operator>:</operator><name><name>list</name><argument_list type="generic">&lt;<argument><name>binary</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr><operator>,</operator>
                                   <expr><literal type="number">7</literal><operator>:</operator><name>bool</name> <name>waitForWrites</name></expr><operator>,</operator>
                                  <expr><literal type="number">9</literal><operator>:</operator><name>i64</name> <name>batchTimeOut</name></expr></expr_stmt>)</block_content>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws>:client.ThriftSecurityException sec</block></decl>)<operator>,</operator>
  data.MultiScanResult continueMultiScan(2:trace.TInfo tinfo<operator>,</operator> 1:data.ScanID scanID</decl_stmt></class>)</block> <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws>:<expr_stmt><expr><name>NoSuchScanIDException</name> <name>nssi</name></expr></expr_stmt></class>)</block_content></block><operator>,</operator>
                                  <expr_stmt><expr><literal type="number">9</literal><operator>:</operator><name>TSamplerConfiguration</name> <name>samplerConfig</name></expr><operator>,</operator>
                                  <expr><literal type="number">10</literal><operator>:</operator><name>i64</name> <name>batchTimeOut</name></expr></expr_stmt></if></if_stmt>)</block_content>  <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws>:client.ThriftSecurityException sec</block><operator>,</operator> <expr_stmt><expr><literal type="number">2</literal><operator>:</operator><name>TSampleNotPresentException</name> <name>tsnpe</name></expr></expr_stmt></if></if_stmt>)</block_content></block><operator>,</operator>
  <decl_stmt><decl><type><name><name>data</name><operator>.</operator><name>MultiScanResult</name></name></type> <name>continueMultiScan</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>ScanID</name></name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>NoSuchScanIDException</name> <name>nssi</name></expr></range></decl>, 2<range>:<expr><name>TSampleNotPresentException</name> <name>tsnpe</name></expr>)</range>,
   <decl><type ref="prev"/><name>void</name> <name>closeMultiScan</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>ScanID</name></name> <name>scanID</name></expr></argument>)</argument_list> <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>NoSuchScanIDException</name> <name>nssi</name></expr>)</range></decl>,
   
   <comment type="line">//the following calls support a batch update to multiple tablets on a tablet server</comment>
<decl><type ref="prev"/><name>diff</name> --<name>git</name> <name>a</name>/<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name> <name>b</name>/<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
<name>index</name> 7a56d1dba..7bf9eb17b 100644
-- <name>a</name>/<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
++ <name>b</name>/<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
@@ -36</decl>,6 +36,7 @@ <decl><type ref="prev"/><name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name></decl>;</decl_stmt></if></if_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DiskUsage</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>NewTableConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>TimeType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">226</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>TableOperationsHelperTest</name> <block>{
         <expr><name>TableNotFoundException</name> <block>{
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block></expr>
     }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>SamplerConfiguration</name> <name>samplerConfiguration</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>,
        <argument><expr><name>AccumuloSecurityException</name> <block>{</block></expr></argument></throws>
      <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>clearSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
   </block_content>}</block></if></if_stmt>
 
   <function><type><specifier>protected</specifier> <name>TableOperationsHelper</name></type> <name>getHelper</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bcf8a24bf</name><operator>..</operator><name>d88453ee5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>FileOutputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>JobConf</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><name>long</name> <name>c</name> <operator>=</operator> <literal type="number">50l</literal></expr>;
     <name>long</name> <name>d</name> <operator>=</operator> <literal type="number">10l</literal></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>e</name> <init>= <expr><literal type="string">"snappy"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"109"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>JobConf</name></type> <name>job</name> <init>= <expr><operator>new</operator> <call><name>JobConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setDataBlockSize</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setIndexBlockSize</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setCompressionType</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>acuconf</name> <init>= <expr><call><name><name>FileOutputConfigurator</name><operator>.</operator><name>getAccumuloConfiguration</name></name><argument_list>(<argument><expr><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">50l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"snappy"</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSION_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1300l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">150l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">110l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="string">"lzo"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"100003"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>job</name> <operator>=</operator> <operator>new</operator> <call><name>JobConf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setDataBlockSize</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setIndexBlockSize</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setCompressionType</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>acuconf</name> <operator>=</operator> <call><name><name>FileOutputConfigurator</name><operator>.</operator><name>getAccumuloConfiguration</name></name><argument_list>(<argument><expr><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">150l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"lzo"</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSION_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">39235666c</literal><operator>..</operator><name>cf0c8d652</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>FileOutputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Job</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><name>long</name> <name>c</name> <operator>=</operator> <literal type="number">50l</literal></expr>;
     <name>long</name> <name>d</name> <operator>=</operator> <literal type="number">10l</literal></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>e</name> <init>= <expr><literal type="string">"snappy"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"109"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Job</name></type> <name>job1</name> <init>= <expr><call><name><name>Job</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>job1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setDataBlockSize</name></name><argument_list>(<argument><expr><name>job1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setIndexBlockSize</name></name><argument_list>(<argument><expr><name>job1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setCompressionType</name></name><argument_list>(<argument><expr><name>job1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job1</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>acuconf</name> <init>= <expr><call><name><name>FileOutputConfigurator</name><operator>.</operator><name>getAccumuloConfiguration</name></name><argument_list>(<argument><expr><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>job1</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">50l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"snappy"</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSION_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1300l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">150l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">110l</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="string">"lzo"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>samplerConfig</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"100003"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Job</name></type> <name>job2</name> <init>= <expr><call><name><name>Job</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>job2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setDataBlockSize</name></name><argument_list>(<argument><expr><name>job2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setIndexBlockSize</name></name><argument_list>(<argument><expr><name>job2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setCompressionType</name></name><argument_list>(<argument><expr><name>job2</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job2</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><name>acuconf</name> <operator>=</operator> <call><name><name>FileOutputConfigurator</name><operator>.</operator><name>getAccumuloConfiguration</name></name><argument_list>(<argument><expr><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>job2</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">150l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">110l</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>getMemoryInBytes</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"lzo"</literal></expr></argument>, <argument><expr><call><name><name>acuconf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_FILE_COMPRESSION_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>acuconf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   </block_content>}</block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndexTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndexTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6f89454e2</literal><operator>..</operator><literal type="number">66978ddfc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndexTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>MultiLevelIndexTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
 <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>blockfile</name><operator>.</operator><name>ABlockWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiLevelIndexTest</name> extends <name>TestCase</name> <block>{
     <expr><name>FSDataInputStream</name> <name>in</name> <operator>=</operator> <operator>new</operator> <call><name>FSDataInputStream</name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr>;
     <name><name>CachableBlockFile</name><operator>.</operator><name>Reader</name></name> <name>_cbr</name> <operator>=</operator> <operator>new</operator> <call><name><name>CachableBlockFile</name><operator>.</operator><name>Reader</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aconf</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>Reader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>_cbr</name></expr></argument>, <argument><expr><name><name>RFile</name><operator>.</operator><name>RINDEX_VER_7</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Reader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>_cbr</name></expr></argument>, <argument><expr><name><name>RFile</name><operator>.</operator><name>RINDEX_VER_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>BlockRead</name></type> <name>rootIn</name> <init>= <expr><call><name><name>_cbr</name><operator>.</operator><name>getMetaBlock</name></name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>rootIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>rootIn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2e2b34683</literal><operator>..</operator><name>ab98f4927</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>RFileTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>ConfigurationCopy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>ColumnFamilySkippingIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CryptoTest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Seekable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>TemporaryFolder</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashCode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hasher</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hashing</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Bytes</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>RFileTest</name> <block>{
 
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SampleIE</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>

    <constructor><name>SampleIE</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>samplerConfig</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>EMPTY_COL_FAMS</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <annotation>@<name>Rule</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileTest</name> <block>{
       <expr><name>baos</name> <operator>=</operator> <operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;
       <name>dos</name> <operator>=</operator> <operator>new</operator> <call><name>FSDataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FileSystem</name><operator>.</operator><name>Statistics</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>CachableBlockFile</name><operator>.</operator><name>Writer</name></name></type> <name>_cbw</name> <init>= <expr><operator>new</operator> <call><name><name>CachableBlockFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>dos</name></expr></argument>, <argument><expr><literal type="string">"gz"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>accumuloConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name><name>RFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>_cbw</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>accumuloConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sampler</name> <operator>=</operator> <call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>accumuloConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name><name>RFile</name><operator>.</operator><name>Writer</name></name><argument_list>(<argument><expr><name>_cbw</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <if_stmt><if>if <condition>(<expr><name>startDLG</name></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>startDefaultLocalityGroup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">221</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileTest</name> <block>{
     }</block>
 
     <specifier>public</specifier> <name>void</name> <call><name>openReader</name><argument_list>(<argument><expr><name>boolean</name> <name>cfsi</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{

       <expr><name>int</name> <name>fileLength</name> <operator>=</operator> <literal type="number">0</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1206</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1245</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileTest</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>test14</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// test starting locality group after default locality group was started</comment>

     <expr><name>TestRFile</name> <name>trf</name> <operator>=</operator> <operator>new</operator> <call><name>TestRFile</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
 
     <call><name><name>trf</name><operator>.</operator><name>openWriter</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1558</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1596</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileTest</name> <block>{
     <expr><call><name>runVersionTest</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;
     <call><name>runVersionTest</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>runVersionTest</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runVersionTest</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>runVersionTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1762</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1801</literal></expr><operator>,</operator><expr><literal type="number">294</literal> @@ <specifier>public</specifier> <name>class</name> <name>RFileTest</name> <block>{
     <expr><name>conf</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><specifier>private</specifier> <name>Key</name></type> <name>nk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r%06d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <return>return <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <return>return <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Value</name></type> <name>nv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <return>return <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"123"</literal> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="string">" west st"</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <return>return <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"bob"</literal> <operator>+</operator> <name>r</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>Hasher</name></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getRowData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getColumnFamilyData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getColumnQualifierData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getColumnVisibilityData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>isDeleted</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>TestRFile</name></type> <name>trf</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>Hasher</name></type> <name>dataHasher</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>Sampler</name></type> <name>sampler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>dataHasher</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toList</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sample</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>sample</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><call><name><name>sample</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>sample</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkSample</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sampleData</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><name>EMPTY_COL_FAMS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>checkSample</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sampleData</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>sampleData</name></expr></argument>, <argument><expr><call><name>toList</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>seed</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rand</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// randomly seek sample iterator and verify</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Key</name></type> <name>startKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>startInclusive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>startIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Key</name></type> <name>endKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>endInclusive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> <init>= <expr><call><name><name>sampleData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>sampleData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>startKey</name> <operator>=</operator> <call><name><name>sampleData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>startIndex</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>startInclusive</name> <operator>=</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>startInclusive</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>startIndex</name> <operator>&lt;</operator> <name>endIndex</name> <operator>&amp;&amp;</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>endIndex</name> <operator>-=</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>endIndex</name> <operator>-</operator> <name>startIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endKey</name> <operator>=</operator> <call><name><name>sampleData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endIndex</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>endInclusive</name> <operator>=</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>endInclusive</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>endIndex</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startIndex</name> <operator>==</operator> <name>endIndex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>endInclusive</name> <operator>=</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>startKey</name></expr></argument>, <argument><expr><name>startInclusive</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>, <argument><expr><name>endInclusive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"seed: "</literal> <operator>+</operator> <name>seed</name></expr></argument>, <argument><expr><call><name><name>sampleData</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>startIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toList</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>sampleBufferSize</name> <range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// force sample buffer to flush for smaller data</comment>
      <expr_stmt><expr><call><name><name>RFile</name><operator>.</operator><name>setSampleBufferSize</name></name><argument_list>(<argument><expr><name>sampleBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>modulus</name> <range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">19</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">1019</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Hasher</name></type> <name>dataHasher</name> <init>= <expr><call><name><name>Hashing</name><operator>.</operator><name>md5</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newHasher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sampleData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>sampleConf</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><ternary><condition><expr><name>conf</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>conf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name></name></expr></argument>, <argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name></name> <operator>+</operator> <literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name></name> <operator>+</operator> <literal type="string">"modulus"</literal></expr></argument>, <argument><expr><name>modulus</name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TestRFile</name></type> <name>trf</name> <init>= <expr><operator>new</operator> <call><name>TestRFile</name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>openWriter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>trf</name></expr></argument>, <argument><expr><call><name>nk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nv</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataHasher</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>trf</name></expr></argument>, <argument><expr><call><name>nk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nv</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataHasher</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>HashCode</name></type> <name>expectedDataHash</name> <init>= <expr><call><name><name>dataHasher</name><operator>.</operator><name>hash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>closeWriter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>openReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>sample</name> <init>= <expr><call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedDataHash</name></expr></argument>, <argument><expr><call><name>hash</name><argument_list>(<argument><expr><name><name>trf</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SampleIE</name></type> <name>ie</name> <init>= <expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toSamplerConfiguration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <comment type="line">// test opening and closing deep copies a few times.</comment>
          <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>closeDeepCopies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sampleDC1</name> <init>= <expr><call><name><name>sample</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sampleDC2</name> <init>= <expr><call><name><name>sample</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sampleDC3</name> <init>= <expr><call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>allDC1</name> <init>= <expr><call><name><name>sampleDC1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>allDC2</name> <init>= <expr><call><name><name>sample</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedDataHash</name></expr></argument>, <argument><expr><call><name>hash</name><argument_list>(<argument><expr><name>allDC1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedDataHash</name></expr></argument>, <argument><expr><call><name>hash</name><argument_list>(<argument><expr><name>allDC2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sampleDC1</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sampleDC2</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sampleDC3</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>closeDeepCopies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>closeReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>HashCode</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Hasher</name></type> <name>dataHasher</name> <init>= <expr><call><name><name>Hashing</name><operator>.</operator><name>md5</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newHasher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EMPTY_COL_FAMS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>dataHasher</name></expr></argument>, <argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><call><name><name>dataHasher</name><operator>.</operator><name>hash</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSampleLG</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>sampleBufferSize</name> <range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// force sample buffer to flush for smaller data</comment>
      <expr_stmt><expr><call><name><name>RFile</name><operator>.</operator><name>setSampleBufferSize</name></name><argument_list>(<argument><expr><name>sampleBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>modulus</name> <range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">19</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">1019</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sampleDataLG1</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sampleDataLG2</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>sampleConf</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><ternary><condition><expr><name>conf</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>conf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name></name></expr></argument>, <argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name></name> <operator>+</operator> <literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleConf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER_OPTS</name></name> <operator>+</operator> <literal type="string">"modulus"</literal></expr></argument>, <argument><expr><name>modulus</name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TestRFile</name></type> <name>trf</name> <init>= <expr><operator>new</operator> <call><name>TestRFile</name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>openWriter</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>startNewLocalityGroup</name></name><argument_list>(<argument><expr><literal type="string">"meta-lg"</literal></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"metaA"</literal></expr></argument>, <argument><expr><literal type="string">"metaB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r%06d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>k1</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"metaA"</literal></expr></argument>, <argument><expr><literal type="string">"q9"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>k2</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"metaB"</literal></expr></argument>, <argument><expr><literal type="string">"q8"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>k3</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"metaB"</literal></expr></argument>, <argument><expr><literal type="string">"qA"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>r</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>r</name> <operator>*</operator> <literal type="number">93</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Value</name></type> <name>v3</name> <init>= <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>r</name> <operator>*</operator> <literal type="number">113</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sampleDataLG1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sampleDataLG1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sampleDataLG1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>startDefaultLocalityGroup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r%06d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Key</name></type> <name>k1</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"dataA"</literal></expr></argument>, <argument><expr><literal type="string">"q9"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>r</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sampleDataLG2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AbstractMap</name><operator>.</operator><name><name>SimpleImmutableEntry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>closeWriter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>sampleDataLG1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>sampleDataLG2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>openReader</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>sample</name> <init>= <expr><call><name><name>trf</name><operator>.</operator><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>sampleConf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG1</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"metaA"</literal></expr></argument>, <argument><expr><literal type="string">"metaB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG1</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"metaA"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG1</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"metaB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG1</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"dataA"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG2</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"metaA"</literal></expr></argument>, <argument><expr><literal type="string">"metaB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>sampleDataLG2</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"dataA"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>allSampleData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>allSampleData</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>sampleDataLG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>allSampleData</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>sampleDataLG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>allSampleData</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
          <function><annotation>@<name>Override</name></annotation>
          <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>o1</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>allSampleData</name></expr></argument>, <argument><expr><call><name>ncfs</name><argument_list>(<argument><expr><literal type="string">"dataA"</literal></expr></argument>, <argument><expr><literal type="string">"metaA"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSample</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>allSampleData</name></expr></argument>, <argument><expr><name>EMPTY_COL_FAMS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>trf</name><operator>.</operator><name>closeReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEncSample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>conf</name> <operator>=</operator> <call><name>setAndGetAccumuloConfig</name><argument_list>(<argument><expr><name><name>CryptoTest</name><operator>.</operator><name>CRYPTO_ON_CONF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testSample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testSampleLG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>conf</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testCryptoDoesntLeakSensitive</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><name>conf</name> <operator>=</operator> <call><name>setAndGetAccumuloConfig</name><argument_list>(<argument><expr><name><name>CryptoTest</name><operator>.</operator><name>CRYPTO_ON_CONF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>DefaultIteratorEnvironment</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>DefaultIteratorEnvironment</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">316823c01</literal><operator>..</operator><literal type="number">3c68196e9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>DefaultIteratorEnvironment</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>DefaultIteratorEnvironment</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>MapFileIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 
<class><specifier>public</specifier> class <name>DefaultIteratorEnvironment</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{
<class><specifier>public</specifier> class <name>DefaultIteratorEnvironment</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>IteratorScope</name> <call><name>getIteratorScope</name><argument_list>()</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  <specifier>public</specifier> <name>boolean</name> <call><name>isSamplingEnabled</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
   }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>boolean</name> <call><name>isFullMajorCompaction</name><argument_list>()</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>void</name> <call><name>registerSideChannel</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>iter</name></expr></argument>)</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call> <block>{
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr></argument></argument_list></throw>;
  }</block>

 }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>FirstEntryInRowIteratorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>FirstEntryInRowIteratorTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">74f74626f</literal><operator>..</operator><literal type="number">5455aa621</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>FirstEntryInRowIteratorTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>FirstEntryInRowIteratorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>PartialKey</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>CountingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>FirstEntryInRowIteratorTest</name> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">38</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>FirstEntryInRowIteratorTest</name> <block>{
     <expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name> <name>source</name> <operator>=</operator> <operator>new</operator> <call><name>SortedMapIterator</name><argument_list>(<argument><expr><name>sourceMap</name></expr></argument>)</argument_list></call></expr>;
     <name>CountingIterator</name> <name>counter</name> <operator>=</operator> <operator>new</operator> <call><name>CountingIterator</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>FirstEntryInRowIterator</name></type> <name>feiri</name> <init>= <expr><operator>new</operator> <call><name>FirstEntryInRowIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IteratorEnvironment</name></type> <name>env</name> <init>= <expr><operator>new</operator> <class><super><name>IteratorEnvironment</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>

      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IteratorEnvironment</name></type> <name>env</name> <init>= <expr><operator>new</operator> <call><name>BaseIteratorEnvironment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>feiri</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name><name>FirstEntryInRowIterator</name><operator>.</operator><name>NUM_SCANS_STRING_NAME</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>numScans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIteratorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIteratorTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..7557b9a15</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>SortedMapIteratorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">46</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>SortedMapIteratorTest</name> <block>{

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>SampleNotPresentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSampleNotPresent</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SortedMapIterator</name></type> <name>smi</name> <init>= <expr><operator>new</operator> <call><name>SortedMapIterator</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>smi</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>BaseIteratorEnvironment</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowDeletingIteratorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowDeletingIteratorTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a3c1ccac5</name><operator>..</operator><name>bdaf112ac</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowDeletingIteratorTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowDeletingIteratorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>user</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ArrayByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>ColumnFamilySkippingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

 <class><specifier>public</specifier> class <name>RowDeletingIteratorTest</name> <super_list><extends>extends <super><name>TestCase</name></super></extends></super_list> <block>{
 
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestIE</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestIE</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>IteratorScope</name></type> <name>scope</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fmc</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RowDeletingIteratorTest</name> extends <name>TestCase</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>fmc</name></name> <operator>=</operator> <name>fmc</name></expr>;
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name>scope</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RowDeletingIteratorTest</name> extends <name>TestCase</name> <block>{
     <expr><specifier>public</specifier> <name>boolean</name> <call><name>isFullMajorCompaction</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><name>fmc</name></expr>;</return></block></expr>
     }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>reserveMapFileReader</name><argument_list>(<argument><expr><name>String</name> <name>mapFileName</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
   }</block></class>
 
   <function><type><name>Key</name></type> <name>nk</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cq</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowEncodingIteratorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowEncodingIteratorTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8f228f537</literal><operator>..</operator><name>d9aa174ae</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowEncodingIteratorTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>RowEncodingIteratorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>user</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>BufferOverflowException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>BufferOverflowException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>RowEncodingIteratorTest</name> <block>{
 
  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DummyIteratorEnv</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mapFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DummyIteratorEnv</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name><operator>.</operator><name>scan</name></name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>RowEncodingIteratorTest</name> <block>{
     <expr><specifier>public</specifier> <name>boolean</name> <call><name>isFullMajorCompaction</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block></expr>
     }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>void</name> <call><name>registerSideChannel</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>iter</name></expr></argument>)</argument_list></call> <block>{

    }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>Authorizations</name> <call><name>getAuthorizations</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
   <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>RowEncodingIteratorImpl</name> <super_list><extends>extends <super><name>RowEncodingIterator</name></super></extends></super_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>TransformingIteratorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>TransformingIteratorTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1f4d6e763</literal><operator>..</operator><literal type="number">97ebe5c7d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>TransformingIteratorTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>iterators</name><operator>/</operator><name>user</name><operator>/</operator><name><name>TransformingIteratorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ArrayByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">599</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">599</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TransformingIteratorTest</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>ColFamReversingCompactionKeyTransformingIterator</name> extends <name>ColFamReversingKeyTransformingIterator</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>source</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>options</name></expr></argument>, <argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>()</argument_list></call></block></expr>;
       <call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     }</block></class>
   }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">639</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">639</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TransformingIteratorTest</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>IllegalVisCompactionKeyTransformingIterator</name> extends <name>IllegalVisKeyTransformingIterator</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>source</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>options</name></expr></argument>, <argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>()</argument_list></call></block></expr>;
       <call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     }</block></class>
   }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">665</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">665</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TransformingIteratorTest</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>BadVisCompactionKeyTransformingIterator</name> extends <name>BadVisKeyTransformingIterator</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>init</name><argument_list>(<argument><expr><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <name>source</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>options</name></expr></argument>, <argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
      <name>env</name> <operator>=</operator> <operator>new</operator> <call><name>MajCIteratorEnvironmentAdapter</name><argument_list>()</argument_list></call></block></expr>;
       <call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     </block_content>}</block></function>
   }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">711</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">711</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TransformingIteratorTest</name> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MajCIteratorEnvironmentAdapter</name> <super_list><implements>implements <super><name>IteratorEnvironment</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>IteratorEnvironment</name></type> <name>delegate</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MajCIteratorEnvironmentAdapter</name><parameter_list>(<parameter><decl><type><name>IteratorEnvironment</name></type> <name>delegate</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>delegate</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mapFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>reserveMapFileReader</name></name><argument_list>(<argument><expr><name>mapFileName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MajCIteratorEnvironmentAdapter</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name><name>IteratorScope</name><operator>.</operator><name>majc</name></name></expr>;</return>
     </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>isFullMajorCompaction</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>delegate</name><operator>.</operator><name>registerSideChannel</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
   }</block></class>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>ver_7</name><operator>.</operator><name>rf</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>file</name><operator>/</operator><name>rfile</name><operator>/</operator><name><name>ver_7</name><operator>.</operator><name>rf</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000000000000000000000000000000000..7d2c9f760a09fca78b6abceba30759480136f2f0</literal>
<name>GIT</name> <name>binary</name> <name>patch</name>
<name>literal</name> <literal type="number">14557</literal>
<name>zcmdse2</name><block>{<expr><name>e</name>@<name>b</name><operator>+</operator><name>rNFOAxrg</name></expr>)<name>eT</name><operator>|</operator><name>ATWGDL</name></block></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><operator>*</operator><operator>(</operator><name>$OmWM9T4</name><operator>`</operator>@<name>V</name><operator>)</operator><name>smK3sPeT2z2hO</name><operator>!</operator><name>PqjV0Sy</name>
<name>z</name><operator>#</operator><operator>*</operator><operator>#</operator><operator>&lt;</operator><literal type="number">2m</literal></expr>?</condition><then><expr><ternary><condition><expr><name>R</name><operator>-</operator><literal type="number">4y</literal><operator>!</operator><name>WW2</name></expr>?</condition><then><expr><name>e</name><block>{<expr><ternary><condition><expr><operator>+</operator><name>KIsfxN</name><operator>|</operator><name>M</name><operator>%</operator><name>aV</name><operator>`</operator><operator>+</operator><name>UFm</name><operator>+</operator><operator>|</operator><name>KE</name><operator>~</operator></expr>?</condition><then><expr><operator>(</operator><literal type="number">4cf</literal><operator>%</operator><name>XQO3</name><operator>-</operator><operator>)</operator><name>A3RIf</name><operator>#</operator><operator>^</operator><operator>+</operator><name>P</name><operator>*</operator><name>k</name></expr></then></ternary></expr>}</block><literal type="number">0</literal>
<name>zY</name><operator>*</operator><name>NoV</name><operator>&amp;</operator><name>EOSUzgdAU</name><operator>+</operator><operator>|</operator><name>uDO$</name></expr></then></ternary></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><name>P6J</name><operator>=</operator><name>$NlsGs</name><operator>&gt;</operator><name>VoRq</name><operator>~</operator><literal type="number">3pLZCJA</literal></expr></expr_stmt>)</block><expr_stmt><expr><name>yedH50kBcloA</name><operator>%</operator><name>X</name>@<name>wO</name><operator>=</operator><name>$</name>
<name>zvnN3</name><operator>%</operator><name>l4dU5n1FhJFSEf</name><operator>|</operator><name>bDKHW</name><operator>+</operator><name>IO</name><operator>&gt;</operator><literal type="number">6auITYZ_TY</literal><operator>^</operator><name>M</name><operator>|</operator><name>z</name><operator>~</operator><name>ob3Bn</name><operator>&lt;</operator><name>i</name><operator>^</operator><name>Tzs0WakS</name><operator>&lt;</operator><name>f</name><operator>`</operator><name>QC</name>
<name>zGM</name><operator>&amp;</operator><name>s</name><operator>#</operator><operator>%</operator><operator>*</operator><operator>%</operator><name>x</name></expr>;</expr_stmt></class><expr_stmt><expr><name>OW</name><operator>-</operator><name>BLgCkX</name><operator>#</operator><name>szp</name><operator>&lt;</operator><name>r</name><operator>--</operator><literal type="number">6</literal><operator>%</operator><name>TR$$</name></expr>;</expr_stmt><expr_stmt><expr><name>MVY$e</name><operator>*</operator><name>qEoT6I</name><operator>|</operator><operator>*</operator><literal type="number">9hM</literal><operator>`</operator><name>fOoA</name><operator>%=</operator><operator>#</operator><name>J6</name><operator>+</operator><name>EXE</name>
<name>z5_Tx</name><operator>-</operator></expr></expr_stmt>)</block><expr_stmt><expr><literal type="number">9Nr</literal></expr>;</expr_stmt></class><block>{<block_content><expr_stmt><expr><name>KRnQs7ymk</name></expr>;</expr_stmt><expr_stmt><expr><name>d3HQXOrkhEl</name></expr>;</expr_stmt><expr><ternary><condition><expr><name>Ku6u1</name></expr>?</condition><then><expr><name>ru9Hy_</name><operator>#</operator></expr></then></ternary></expr></block_content>}</block><expr><call><name>IKf</name><argument_list>(<argument><expr><ternary><condition><expr><name>sPnYl7thf2h</name><operator>+</operator><name>W</name><operator>#</operator>
<name>zq9b7</name></expr>?</condition><then><expr><name>Rto0</name><operator>%</operator><name>a</name><operator>*</operator><operator>&gt;</operator><name>jRF</name><operator>+</operator></expr></then></ternary></expr></argument></argument_list></call></expr>}</block></class><expr_stmt><expr><name>MRj</name><operator>~</operator><operator>&lt;</operator><name>mf</name><operator>*</operator>@<literal type="number">2K41</literal><operator>+</operator><name>G</name><block>{<expr><literal type="number">0$H</literal></expr>}</block><name>BgZYrohqMM</name><operator>^</operator><name>SOu</name><operator>`</operator><name>m</name><operator>|</operator><literal type="number">73zDJ5JHGw</literal>
<name>zQKuPlIDC</name><operator>&gt;</operator><operator>&lt;</operator><call><name>BkqYGecN</name><argument_list>(}</argument_list></call><name>mTsSF</name><operator>-</operator><name>n</name><operator>&amp;</operator><name>WGBNDGgu7FAf</name><operator>#</operator><name>_emF7Y4EZeVeYQf</name><operator>?</operator></expr></expr_stmt>)</block_content>DGRd</block></function></block_content>}</block></function><expr><name>Pk</name>
<name>z440</name><operator>*</operator><name>DgZ</name><operator>%</operator><name>EKC5M</name><operator>#</operator><literal type="number">6E$_668MHJ</literal><operator>^</operator><name>e</name><operator>#</operator><operator>&amp;</operator><name>pd1oKpGcIxvp</name><operator>#</operator><name>D</name><operator>`</operator><literal type="complex">3i</literal><literal type="number">7yX</literal><operator>*</operator>@<name>BjwH</name><operator>~</operator><name>O</name>@<operator>+</operator><name>j</name><operator>?</operator><literal type="number">3</literal><operator>?</operator><name>A1l</name>
<name>z8hbvdOG</name><operator>?</operator><name>apjJO</name><operator>&amp;</operator><block>{<expr><name>esb</name><operator>=</operator><name>naY55nZmj</name><operator>|</operator><name>pA</name>@<name>xM</name><operator>%=</operator><call><name>kzIbBmXWi</name><argument_list>(<argument><expr><name>vVxfiRR</name></expr></argument>}</argument_list></call></expr>}</block><name>X</name><operator>~</operator><name>Q</name><operator>+</operator><name>b</name><operator>&gt;</operator><literal type="number">69du</literal>
<name>zsJK</name><operator>|</operator><name>U</name><operator>!</operator><name>s</name><operator>%</operator><name>k</name>@<name>l</name><operator>&amp;</operator><name>I9HxWakD</name><operator>=</operator><operator>|</operator><operator>~</operator><operator>!</operator><name>GD</name><operator>&amp;</operator><call><name>Oz</name><argument_list>(<argument><expr><call><name>PBZJ</name><argument_list>(<argument><expr><name>a</name><operator>%</operator><name>qNu</name><operator>!</operator><name>YzjtP3</name><operator>+</operator><name>R</name><operator>|</operator><name>M14</name><operator>?</operator><name>B</name><operator>&gt;</operator><name>vN</name></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></block_content>}</block></if></if_stmt><expr_stmt><expr><name>ng</name><operator>#</operator><name>XB</name>@
<name>zsQW6TGLO</name><operator>|</operator><call><name>rxmAER</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>&amp;</operator><call><name>Ewu</name><argument_list>(<argument><expr><block>{<expr><name>d3Hh</name><block>{<expr><name>Z</name><operator>&lt;</operator><name>A1x6</name><operator>~</operator><operator>!</operator><name>fyFYe</name><operator>+</operator><operator>&lt;</operator><operator>|</operator><operator>&gt;</operator><name>cjB</name><operator>%</operator><name>Gp6</name><operator>%</operator></expr>}</block></expr>}</block><operator>+</operator><literal type="number">3vR0fPy</literal><operator>~</operator><name>G</name>
<name>zAbhc4</name><operator>&lt;</operator><name>q</name>@<literal type="number">2</literal><operator>!</operator><name>G2</name><operator>+</operator><name>NalB2RuU</name><operator>^</operator><name>z294</name></expr></argument>)</argument_list></call><literal type="number">4yn</literal><operator>`</operator><name>SI3K</name><operator>-</operator><literal type="number">9cRNJt3I</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><name>AzrB8yA</name><operator>~</operator><operator>-</operator><literal type="number">8</literal><operator>%</operator><name>tvoV</name></expr>?</condition><then><expr><name>SeK</name>
<name>zj3M</name><operator>%</operator><name>B</name></expr></then></ternary></expr></expr_stmt>)</block_content>FXPuTYHBLi8M</block></if></if_stmt>)</block_content>6a1</block><empty_stmt>;</empty_stmt></if></if_stmt><expr_stmt><expr><operator>?</operator><name>YCwDMa6cr</name><operator>~</operator><literal type="complex">4_is</literal><operator>-</operator><name>d</name><operator>&gt;</operator><name>ALt</name><operator>|</operator><name>L</name>@<name>LR</name><operator>|</operator><literal type="number">4</literal><operator>!</operator><name>JB</name>@<name>m</name><operator>|</operator><name>i</name></expr></expr_stmt>)</block_content>^fV<operator>|</operator>^`
zYFb+~c~x3heN@</block></if></if_stmt>)</block_content>D&lt;Ow-FHq<block>{<block_content><expr_stmt><expr><name>B$</name></expr>;</expr_stmt><expr><operator>^</operator></expr></block_content>}</block></block></if></if_stmt><expr><name>d</name><operator>!</operator><name>V90PV</name><operator>^</operator><name>bWKdxx</name><operator>=</operator><name>mmc7</name><operator>=</operator><ternary><condition><expr><call><name>Q</name><argument_list>(;<argument><expr><name>h</name><operator>|</operator><name>N</name><operator>#</operator><name>YLWYyRPA</name><operator>*</operator><name>l</name>
<name>zH</name></expr></argument></argument_list></call></expr></condition></ternary></expr></block_content>}</block></for></block_content></block></for><expr_stmt><expr><name>DW</name><operator>%</operator><name>$</name><operator>+</operator><operator>(</operator><call><name>ax</name><argument_list>(<argument><expr><name>uGeN$8</name><operator>|</operator><block>{<expr><literal type="number">0aGx</literal><operator>=</operator><ternary><condition><expr><operator>#</operator><name>E9s</name><operator>--</operator><name>jGt</name><operator>&lt;</operator><name>cRH</name><operator>!</operator><name>Gmt7KAmcfn</name></expr>?</condition><then><expr><literal type="number">0bKu40</literal></expr></then></ternary></expr></block></expr></argument>)</argument_list></call><block>{<expr><operator>=</operator><operator>|</operator><name>xN</name><operator>-</operator><name>_To</name>
<name>zp</name>@<literal type="number">4x</literal><operator>+</operator><call><name>qrt</name><argument_list>(<argument><expr><operator>#</operator><name>X</name></expr></argument>}</argument_list></call><name>cXW</name><operator>&amp;</operator><literal type="number">0</literal><operator>+</operator><name>ZuIB</name><operator>&amp;</operator><literal type="number">2dEpFXorJjYd</literal></expr></block><operator>)</operator><operator>(</operator><name>aMYDpwVD5qWN</name>;</expr></expr_stmt><expr_stmt><expr><ternary><condition><expr><name>ADaeE6kkVLo93RX</name>
<name>zgAW</name>@<name>zIKfPj</name><operator>+</operator><literal type="number">9RGafs1</literal><operator>-</operator><name>OJdSGp</name><operator>+</operator><call><name>e77I4sZ$UFwwA</name><argument_list>(<argument><expr><ternary><condition><expr><operator>#</operator><name>zqTH2n0</name><operator>+</operator><literal type="number">80</literal><operator>#</operator><name>T5V</name></expr>?</condition><then><expr><name>mNwZoChBO</name>
<call><name>z</name><argument_list>(<argument><expr><name>L</name><operator>|</operator><literal type="number">6ahh</literal></expr></argument>;</argument_list></call></expr></then></ternary></expr></argument></argument_list></call></expr></condition></ternary></expr></expr_stmt><expr_stmt><expr><name>UsvN</name><operator>#</operator><name>SA</name><block>{<expr><name>q1Qp</name><operator>|</operator><literal type="number">9Rf</literal><operator>?</operator><name>ROi8eJOqP</name><operator>?</operator><name>J</name><operator>|</operator></expr>}</block><name>w</name><operator>+</operator><name>q6I2lflftVCce</name><operator>&gt;</operator><name>lmivsA</name><operator>*</operator><name>T5</name><operator>&amp;</operator><name>v</name>
<name>zVq</name><operator>=</operator><name>wShi0RyiS5W</name><operator>+</operator><literal type="number">72O</literal><operator>|</operator><name>u4s5</name><operator>&gt;</operator><call><name>dOihd</name><argument_list>(<argument><expr><name>yr4Pe</name><block>{<expr><name>j</name><operator>~</operator><literal type="number">0</literal><operator>`</operator><name><name>fo9F</name><argument_list type="generic">&lt;<argument><name>I7iX</name></argument>&gt;</argument_list></name><operator>%</operator><operator>-</operator><name>JM</name><operator>|</operator><name>l</name><operator>&amp;</operator><operator>*</operator><operator>%</operator><literal type="number">2z</literal><operator>&lt;</operator><operator>&gt;</operator><operator>&lt;</operator><name>A</name>
<name>z$ly</name></expr>}</block><name>jSc49FbbHO</name><operator>-</operator><literal type="number">4</literal><block>{<expr><literal type="number">0_M</literal><operator>*</operator><name>dUjl</name><block>{<expr><name>kiQpQ</name><operator>%</operator><operator>-</operator><name>bS3S6</name>@<operator>&amp;</operator><name>r_x</name><operator>#</operator><literal type="number">5gaz7</literal><operator>(</operator><operator>)</operator><name>HGGcmP31yJ</name><operator>=</operator><operator>~</operator>@<name>m</name>
<name>zcY5MzdLhge</name><operator>`</operator><name>YEXJ</name><operator>#</operator><operator>&amp;</operator><name><name>F</name><argument_list type="generic">&lt;<argument><name>hAr1</name><annotation>@<name>wW9a</name></annotation><operator>*</operator><name>ygrr3</name></argument>&gt;</argument_list></name><operator>&lt;</operator><name>S</name><operator>&gt;</operator><block>{<expr><name>SL</name><operator>&gt;</operator>@<name>t</name><operator>*</operator><literal type="number">9Fm37v</literal><operator>#</operator><operator>|</operator><name>gDDdl</name><operator>&lt;</operator><name>H</name><operator>&lt;</operator><name>kOHb</name>
<name>zi</name></expr></block></expr></block></expr></block></expr></argument>)</argument_list></call><name>W4QVe</name><operator>&gt;</operator><name>djai52GcB</name>@<operator>&gt;</operator><literal type="number">6R2Tp</literal><operator>^</operator><name>UA4y2F4bqg</name><operator>?</operator><literal type="number">4Icn</literal><operator>&lt;</operator><name>P3h2</name><operator>&gt;</operator><name>Mb</name></expr>;</expr_stmt><expr><name>q0z</name><operator>=</operator><call><name>fyNq</name><argument_list>(<argument><expr><literal type="number">0xCFA</literal></expr></argument></argument_list></call></expr></block_content>}</block><expr_stmt><expr><operator>#</operator>
<name>zOzOuwK</name><operator>+</operator><name>nx5</name><operator>&lt;</operator><name>VQq</name><operator>`</operator><literal type="number">7FNmx1G</literal><operator>+</operator><name>OVq</name><operator>&amp;</operator><name>U</name>@<operator>^</operator><name>ndf</name><operator>^</operator><name>ve2</name>@<literal type="number">1okx</literal><operator>#</operator><name>POggH5x</name><operator>!</operator><name>cr0N</name><operator>%</operator><name>DO7Ek</name>@<literal type="number">1lp</literal>
<name>zEEmrH</name></expr></expr_stmt>)</block_content>OupxG</block></if></if_stmt>)</block_content>5DqYT<operator>|</operator>IWPM</block><empty_stmt>;</empty_stmt></if></if_stmt><expr><name>YzIC</name><operator>~</operator><name>HmjbL</name></expr></block_content>}</block></if></if_stmt><expr><call><name>c</name><argument_list>(<argument><expr><name>bXw3o2</name><operator>-</operator><name>mqF$vCUgf</name><operator>!</operator><operator>||</operator><name>fPwshfIFuE</name>
<name>za</name><operator>!</operator><literal type="number">3jULmWZUd</literal><operator>|</operator><operator>*</operator><name>YiCSAlMqw</name><operator>&lt;</operator><operator>|</operator><operator>%</operator><name>D</name><operator>^</operator><literal type="number">0H</literal><operator>&amp;</operator><name>lSGpE</name><operator>%</operator><name>W62VsnQ</name><operator>-</operator><name>fK84g</name><operator>`</operator><name>u</name><operator>^</operator><name>FXx$cZ</name><operator>*</operator><name>h1in53</name>
<name>zY</name><operator>*</operator><name>_Nf8bHz</name>@<name>G74e</name></expr></argument></argument_list></call></expr></block_content>}</block></if></if_stmt><expr><name>k</name></expr></block_content>}</block></if></if_stmt><expr_stmt><expr><name>x9D5XIn</name><operator>-</operator><name>M$SeB3p$</name><block>{<expr><name>Fs33G</name></expr>;<name>GVmMub6XF</name><operator>=</operator><name>gj5UbkSfxt</name><operator>^</operator><name>cb6l</name>
<name>zdZ</name>@<name>g</name><operator>&lt;</operator>)</block><literal type="number">8Rg_</literal><operator>=</operator><operator>&amp;</operator><name>P</name><operator>%</operator><literal type="number">2af</literal><operator>`</operator><call><name>Lf</name><argument_list>(<argument><expr><name>v</name><operator>`</operator><name>I9Kt</name><operator>`</operator><name>o</name><operator>%</operator><operator>(</operator><operator>#</operator><name>aysW</name><operator>&amp;</operator><name>V</name>;</expr></argument></argument_list></call></expr></expr_stmt><expr_stmt><expr><literal type="number">5</literal><operator>^</operator><name>QB6R</name><block>{<expr><name>lfgFFeV</name><operator>`</operator><name>LNoK48dVLvw</name>
<name>z</name><operator>|</operator><literal type="number">3</literal><operator>&gt;</operator><name>XBcEjUY$3</name><operator>=</operator><name>X</name><operator>=</operator><name>Xi</name><block>{<expr><name>dg</name><operator>&gt;</operator><operator>~</operator><name>ptRqzyI</name><operator>~</operator><name>TD5</name></expr>}</block><call><name>adK</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>BK</name><operator>+</operator><literal type="number">3dc</literal><block>{<expr><name>l</name><operator>|</operator><name>jZeo4VL72H</name><operator>*</operator><name>ky</name><operator>*</operator><operator>`</operator><literal type="number">3</literal>
<name>zTyx6</name></expr></block></expr></argument>)</argument_list></call><name>tZ5QP</name><operator>-</operator><call><name>L</name><argument_list>(<argument><expr><literal type="number">8vZ</literal><operator>(</operator><operator>&lt;</operator><name>L</name><operator>|</operator><name>xkxmOI</name><operator>)</operator><name>oZHZn05NlZJ$</name><operator>#</operator><literal type="number">6f7</literal></expr></argument>)</argument_list></call><operator>&amp;</operator><name>n</name><operator>*</operator></expr>;</block></expr>;</expr_stmt><expr><ternary><condition><expr><operator>*</operator><name>Px0H</name><operator>+</operator><operator>(</operator><name>q</name>@<name>R</name><operator>|</operator><name>pNf2c</name>
<name>z3wR</name></expr></condition></ternary></expr></block_content>}</block></for></block_content></block></for><expr_stmt><expr><name>GK</name><operator>+</operator><call><name>G</name><argument_list>(<argument><expr><name>jq1</name></expr></argument>;</argument_list></call></expr></expr_stmt><expr><literal type="number">2</literal></expr></block_content>}</block><expr_stmt><expr><name>Df</name><operator>*</operator>@<call><name>k5q</name><argument_list>(<argument><expr><name>H5</name><operator>+</operator><name>AVIECZM</name><operator>=</operator><operator>`</operator><operator>%</operator><literal type="number">6P</literal><operator>~</operator><call><name>tX1J$NPaHG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><call><name>U</name><argument_list>(<argument><expr><name>OVLdL</name><operator>&lt;</operator><name>PV</name><operator>-</operator><name>c</name><operator>`</operator>
<name>zi6</name><operator>~</operator><name>pE5</name><block>{<expr><ternary><condition><expr><name>MXf</name><operator>^</operator><operator>&lt;</operator><name>jO3BOD6F_dPAak7u6lHb8fK3</name><operator>*</operator><operator>`</operator><name>BauB</name></expr>?</condition><then><expr><operator>`</operator><name>_</name><operator>#</operator><name>PmUS</name><operator>&amp;</operator><name>Mr</name><operator>+</operator><name>YNz</name><operator>&amp;</operator><name>jd</name><block>{<expr><name>dNNx</name>
<name>z2LeG</name><operator>&lt;</operator><literal type="number">5</literal><operator>*</operator><name>qbmtMmQVaY8ANBb</name><operator>`</operator><name>$bINwjK</name><operator>`</operator><name>V</name></expr>;<name>hGJdQzW6</name><operator>`</operator><name>j2</name><operator>^</operator><operator>&lt;</operator><literal type="number">0eSH</literal><operator>&amp;</operator><name>fhmOP</name><operator>|</operator><name>abKAjbc$</name>
<name>zkqI</name><operator>%</operator><call><name>rCuXE</name><argument_list>(<argument><expr><ternary><condition><expr><name>Bw</name></expr>?</condition><then><expr><ternary><condition><expr><name>iZ</name><operator>&lt;</operator><name>MEj</name></expr>?</condition><then>@<expr><name>Jh</name></expr></then></ternary></expr></then></ternary></expr></argument>;</argument_list></call><name>MLS</name><operator>&gt;</operator><name>_</name><operator>&amp;</operator><name>q</name><block>{<expr><ternary><condition><expr><literal type="number">0Ax</literal><operator>&lt;</operator><name>CxE3</name><operator>&gt;</operator></expr>?</condition><then><expr><name>E4F</name></expr></then></ternary></expr></block></block></expr></then></ternary></expr></block></expr></argument>)</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt></block_content>}</block></if></if_stmt><expr_stmt><expr><name>K4xfW</name><operator>-</operator><name>M</name><operator>-</operator><name>h</name><operator>&gt;</operator><name>WMbpjW8L</name>
<name>zi</name><operator>#</operator><literal type="number">3YzW</literal><operator>|</operator><operator>^</operator><name>cE</name></expr>;</expr_stmt><expr_stmt><expr><operator>&lt;</operator><operator>%</operator><name>Jw</name></expr>;</expr_stmt><expr><name>zi</name><operator>#</operator><call><name>RAY</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>+</operator><name>Qi</name><operator>%</operator><literal type="number">88</literal>@</expr></argument>)</argument_list></call><name>tZYF$Fs</name>@<name>eQ5</name><operator>&gt;</operator><name>vL42_</name><operator>&lt;</operator><name>xS</name><operator>`</operator><name>E</name><operator>&amp;</operator><name>hv</name><block>{<expr><operator>#</operator><block>{<expr><operator>%</operator><name>o</name><operator>?</operator><operator>%</operator><name>S</name>
<name>znf</name></expr>}</block><name>k7K5S</name><operator>+</operator><operator>&amp;</operator><name>a</name><operator>|</operator></expr>}</block><name>IsY</name><operator>~</operator><literal type="number">0KRSz</literal><operator>&gt;</operator><name>qd</name><operator>`</operator><name>w</name><operator>?</operator><name>PyZ2OBVrAE</name><operator>#</operator></expr></block_content>}</block></if></if_stmt><expr_stmt><expr><name>U7</name></expr></expr_stmt>)</block_content>v+dZs3(Iq-fA25HYyNj60`
zMcqo&gt;D$s#`@h0x^N`Z%$2</block><empty_stmt>;</empty_stmt></if></if_stmt><expr_stmt><expr><name>U</name><operator>&lt;</operator><name>NI</name><block>{<expr><name>A3z</name></expr>)<name>z</name><operator>+</operator><literal type="number">4RRS</literal><operator>~</operator><block>{<expr><literal type="number">3z</literal><block>{<expr><name>WZY_</name>@<operator>=</operator><name>numnq</name><operator>?</operator><block>{<expr><name>iI7$K</name><operator>#</operator><name>RZ</name><operator>%</operator><literal type="number">5</literal>
<call><name>zX</name><argument_list>(<argument><expr><name>L</name><operator>-</operator><operator>`</operator><name>P74Ky280vL3</name><operator>#</operator><name>J1xfT$</name><operator>&gt;</operator><name>_DagXeNJAAviBX</name></expr></argument>)</argument_list></call><name>WV2ik</name><operator>~</operator><name>mq</name><operator>#</operator><name>r</name><block>{<expr><name>E$</name><operator>&amp;</operator></expr>;<literal type="number">0qK</literal><operator>&gt;</operator><literal type="number">2NL</literal><operator>-</operator><name>n</name><operator>^</operator><name>P</name>
<name>z</name><operator>%</operator></block></expr>}</block><name>XCH6SDmkxQ8pPF</name><operator>~</operator><name>Wa6OfMX7bD</name></expr>)<name>ZAUzUo4y</name></block></expr>}</block></block><name>s</name><operator>`</operator><operator>&gt;</operator><literal type="number">0y6rB</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><operator>%</operator><name>X</name></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><name>YZ</name><operator>*</operator><name>BX</name></expr>?</condition><then><expr><name>w</name><operator>`</operator><operator>+</operator><name>RGV</name><operator>~</operator><name>R</name>
<name>zoPEPn7L</name><operator>*</operator><operator>*</operator><name>ZG3znqmlm</name></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><name>B</name><operator>&lt;</operator><name>p</name><operator>-</operator><literal type="number">3n</literal></expr></expr_stmt>)</block_content>ff2ILaL7RVpE_GkZZdoUxyp^bim_2$z^Y=_eU3O
zxps+brTRGyr~F?</block></if></if_stmt>)<expr_stmt><expr><operator>?</operator><operator>&amp;</operator><literal type="number">1br</literal><block>{)<name>fK1</name><operator>#</operator><name>r</name><operator>*</operator>}</block></expr></expr_stmt><expr_stmt><expr><name>ju</name><operator>^</operator><name>O</name><operator>+</operator><literal type="number">7</literal><operator>-</operator><name>Qt</name><operator>&amp;</operator><name>r</name><operator>-</operator><name>W5t</name><operator>|</operator><name>AB</name><operator>`</operator><operator>`</operator><name>M6ezvBi</name><operator>`</operator><operator>=</operator><ternary><condition><expr><operator>*</operator><literal type="number">7F5n7R</literal>
<name>z2T</name><operator>~</operator><operator>&lt;</operator><name>EIFc</name><operator>^</operator><name>Bd</name><operator>^</operator><name>Y7</name></expr>?</condition><then><expr><name>w</name><operator>`</operator><operator>!</operator><name>ny</name></expr></then></ternary></expr></expr_stmt>)<annotation>@</annotation>*<block>{<block_content><expr_stmt><expr><call><name>K2xQ</name><argument_list>(<argument><expr><name>j3jqlQZ3G6gNX4SNr</name></expr></argument>)</argument_list></call><name>JhgV</name><operator>^</operator><operator>^</operator><name>ON0zi1mH</name><operator>|</operator><name>XeZ</name>
<name>zTiuV</name><operator>=</operator><operator>-</operator><operator>&lt;</operator><operator>-</operator><name>M</name><operator>!</operator><name>jYobotT1q</name><operator>&gt;</operator><name>tP</name></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><name>bXgyNuR</name><operator>&lt;</operator><name>T</name><operator>&lt;</operator><name>P_wgT6</name></expr>?</condition><then><expr><ternary><condition><expr><name>_NC</name></expr>?</condition><then><expr><ternary><condition><expr><name>l_y</name><operator>+</operator><name>Nj</name>@<name>evMMFz</name><operator>+</operator><literal type="number">9mcwdX7</literal>
<name>zh</name></expr>?</condition><then><expr><operator>~</operator><call><name>Rz6LEd</name><argument_list>(<argument><expr><name>X</name></expr></argument>;</argument_list></call></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr></expr_stmt></block_content>}</block><expr_stmt><expr><ternary><condition><expr><operator>-</operator><name>CCeaWFiaxS</name>@<name>rt</name></expr>?</condition><then><expr><name>J</name><operator>&amp;</operator><call><name>ktb5</name><argument_list>(<argument><expr><name>zl7WZ0mzD</name><operator>&lt;</operator><name>hqHK</name><operator>=</operator><operator>+</operator><name>w6f3Yi2</name><operator>~</operator><name>e8o</name><operator>*</operator><name>Ux</name>
<name>z0</name></expr></argument>)</argument_list></call><name>UB</name><operator>=</operator><name>R</name><operator>*</operator><operator>%</operator><operator>*=</operator><literal type="number">2CUBHO</literal><operator>&gt;</operator><name>aH</name><operator>#</operator><name>z</name><operator>%</operator><operator>&lt;</operator><name>P</name><operator>+</operator><name>IGNgd</name></expr></then></ternary></expr></expr_stmt>)<expr_stmt><expr><call><name>Qu</name><argument_list>(<argument><expr><name>O</name><operator>#</operator><name>ctfYAU</name></expr></argument>)</argument_list></call><name>tOBd</name>@<operator>(</operator><literal type="number">6GPw</literal><block>{<expr><operator>~</operator><call><name>lDQ</name><argument_list>(<argument><expr><name>X</name><operator>&gt;</operator><block>{<expr><name>T</name><operator>^</operator><name>W</name>
<name>z_f</name><operator>!</operator><operator>-</operator><name>HU4SMaE0OC</name><operator>+</operator><name>EvzZJ</name><operator>&amp;</operator><name>c</name>@<operator>+</operator><name>sWlojyNRP</name><operator>=</operator><name>pTtlF0rTInYwqyEE</name><operator>&lt;</operator><operator>-</operator><literal type="number">4_8</literal><operator>&lt;</operator><name>D4</name><operator>|</operator><operator>`</operator><name>G6_up</name>
<name>ze</name><operator>+</operator><operator>&gt;</operator><call><name>cHO</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><name>aIIzK</name><operator>&lt;</operator><name>hTeBY6YyCXz</name><operator>-</operator><name>Pl</name></expr>;<expr><name>gNJQQY</name><operator>=</operator><literal type="number">44cDiFzcq</literal><operator>(</operator><operator>&amp;</operator><name>VA$$SNUBIOXvUpQd</name><operator>~</operator>
<name>z</name><operator>)</operator></expr></block></expr></argument>)</argument_list></call></expr></block><operator>)</operator><name>KG</name>@<name>_V9t</name><operator>%</operator><literal type="number">62JwYQE65_O</literal><operator>+</operator><name>lOcUh</name><operator>#</operator><name>H</name><operator>%</operator><literal type="number">4l</literal><operator>!</operator></expr></expr_stmt>}$<expr><operator>&amp;</operator><operator>|</operator><operator>`</operator><name>hiWWf6n</name><operator>!=</operator><name>AjWy</name><operator>~</operator><name>hp3M</name><operator>&lt;</operator><name>o</name></expr>}aI71k
<expr_stmt><expr><name>z2S1x</name><operator>=</operator><operator>`</operator><name>fQ</name><operator>&gt;</operator><name>Bh</name></expr>;</expr_stmt>}#<expr_stmt><expr><literal type="number">5U</literal><operator>!</operator><literal type="number">4s</literal><operator>!</operator><name>ub</name></expr>;</expr_stmt><expr_stmt><expr><ternary><condition><expr><name>JXj6FM</name><operator>&amp;</operator><literal type="number">0Zl</literal></expr>?</condition><then><expr><ternary><condition><expr><name>qbalJ</name><operator>+</operator></expr>?</condition><then><operator>|</operator><expr><block>{<expr><name>Xu</name><operator>`</operator><name>j</name>@<name>M1P4nPiDEd_SO$3</name><operator>-</operator><operator>`</operator>
<name>zn3E</name><operator>&lt;</operator></expr>)<ternary><condition><expr><name>m</name></expr>?</condition><then><expr><name>h5</name>@<name>kpb6Q$bk</name><operator>-</operator><name>vJA6YQN</name></expr></then></ternary>)</block><name>W</name>@<literal type="complex">3iew</literal></expr></then></ternary></expr></then></ternary></expr></expr_stmt>)<expr_stmt><expr><name>x</name>@<literal type="number">6</literal><operator>#</operator></expr></expr_stmt>)<expr_stmt><expr><ternary><condition><expr><operator>&lt;</operator><name>gDso</name><operator>&gt;</operator><name>NXz</name></expr>?</condition><then><expr><literal type="number">3n</literal></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><name>ml2a</name><operator>+</operator><name>jS</name><operator>+</operator><operator>`</operator><name>e</name><operator>^</operator><name>d2</name>
<name>z</name><operator>%=</operator><name>NP$mVJ</name><operator>#</operator><name>_k1h</name><operator>&lt;</operator><literal type="number">5</literal><operator>-</operator><operator>*</operator><name>lKU</name><operator>*</operator><name>V</name><block>{<expr><operator>&gt;=</operator><name>w</name><block>{<expr><name>U</name><operator>%</operator><operator>&gt;</operator><literal type="number">3P7F</literal><operator>&lt;</operator><name>fXcpEe</name><operator>^</operator><name>fZpi</name><operator>+</operator><name>wAlQ</name><operator>=</operator><operator>%</operator><name>iY1YU_V</name><operator>%</operator><name>A6R</name><operator>-</operator>
<name>zJK</name><operator>~</operator><operator>&lt;</operator><call><name>ny</name><argument_list>(<argument><expr><operator>^</operator><operator>+</operator><name>I</name><operator>??</operator><call><name>XdChX</name><argument_list>(<argument><expr><name>zn</name><operator>&amp;</operator><name>fcB</name><operator>%</operator><name>xf1wpeZw</name><operator>!</operator><name>MZ56hTG</name><block>{<expr><literal type="number">6</literal><operator>=</operator><operator>^</operator><operator>&gt;</operator><name>u</name><operator>&gt;</operator><block>{}</block><name>PJS</name>@</expr>;<expr><operator>%</operator><name>I1</name><operator>+</operator><name>CmO</name><operator>&gt;</operator><name>P</name><operator>&gt;</operator>
<name>zua</name><operator>%</operator><name>gI6</name><operator>|</operator><literal type="complex">9iY</literal><operator>=</operator><operator>~</operator></expr></block></expr></argument>)</argument_list></call><operator>^</operator><operator>(</operator><name>KVm1</name><operator>!</operator><name>kRC37df</name><operator>=</operator><operator>#</operator><operator>&amp;</operator><literal type="number">7R</literal>;<name>$</name><operator>~</operator><name>zyy$BbbtgS10</name><operator>)</operator><call><name>zRX_</name><argument_list>(<argument>@<expr><operator>^</operator><name>Qwi</name><operator>`</operator><operator>&lt;</operator><name>K</name><operator>!</operator><name>On</name><operator>~</operator>
<name>zhgkv</name><operator>=</operator><literal type="number">3</literal><operator>=</operator><name>Bvxir</name><operator>=</operator><literal type="number">12</literal><operator>(</operator><name>x</name><block>{<expr><name>R1gy</name></expr>}</block><name>c7TO5XnfXSmlYQ</name><operator>+</operator><literal type="number">0b</literal><operator>-</operator><name>yhuKNHHTsD</name><operator>|</operator><operator>~</operator>@<name>qHY</name>}<name>x</name><operator>&gt;</operator><literal type="number">8XvpS</literal>
<name>z</name><operator>&lt;</operator><literal type="number">6f4</literal><operator>-</operator><operator>`</operator><operator>*</operator><name>PdQ</name><operator>`</operator><operator>%</operator><literal type="number">0</literal><operator>=</operator><name>uuw2</name><operator>*</operator><name>CEWOu</name><operator>=</operator><ternary><condition><expr><name>b</name><operator>*</operator><name>_SK</name><operator>`</operator><operator>*</operator><name>bF</name></expr>?</condition><then><expr><operator>#</operator><name>$N35aYRr0</name><operator>&amp;</operator><name>kNYGcP</name><operator>*</operator><name>_y</name><operator>=</operator><ternary><condition><expr><name>$n0</name></expr>?</condition><then><expr><name>eqjW</name><operator>*</operator>
<name>z</name></expr></then></ternary></expr></then></ternary>;<name>p</name>@<operator>+</operator><name>Wac</name><operator>%</operator><literal type="number">70y4v75</literal><operator>)</operator><operator>!</operator><literal type="number">6n9uIkh</literal><operator>~</operator><name>vihmKL</name><operator>~</operator><literal type="number">3UMx</literal></expr></argument>;<argument><expr><operator>+</operator><name>S8</name><operator>*</operator><name>Hs</name></expr></argument>}</argument_list></call><operator>&lt;</operator><name>l</name><operator>|</operator><literal type="number">4XJnh0</literal><operator>+</operator><name>AM</name><block>{<expr><operator>(</operator><literal type="number">8ET</literal><operator>&lt;</operator><name>y96</name>
<name>zdjk_3G</name><operator>=</operator><name>_j</name><operator>&amp;</operator><name>rrD</name><operator>=</operator>@<name>Gi</name><operator>)</operator><literal type="number">5M</literal><operator>=</operator><name>AA</name><operator>|</operator><name>NkLE</name><operator>%</operator></expr>}</block><name>N</name>@<name>U3XRWlPF</name><operator>!</operator><name>hh0VUlZ</name><operator>*</operator><name>ec7pgKSw8qYeeyNP</name>
<name>z</name><operator>&amp;</operator><literal type="number">4</literal><operator>!</operator><operator>!</operator><call><name>YDKh</name><argument_list>(<argument><expr><ternary><condition><expr><operator>#</operator><name>oC_qmu3hVz</name><operator>%</operator><name>nJu2PN1kSjRu</name><operator>&gt;</operator><operator>#</operator><name>a</name></expr>?</condition><then><expr><name>Cl</name><operator>=</operator><name>TlviPlnnbfe_ZZ0nR</name><operator>+</operator><name>JMP</name><operator>`</operator><operator>^</operator><literal type="number">4b</literal>
<name>z</name></expr></then></ternary></expr></argument>;<argument><expr><operator>!</operator><operator>!</operator><name>tonMJN</name><operator>`</operator><name>$r8</name><operator>-</operator><operator>|</operator><name>WaCC4</name><operator>^</operator><call><name>Podo</name><argument_list>(<argument><expr><literal type="number">7W</literal><operator>|</operator><name>bkCfJF</name><operator>*</operator><name>m</name><block>{<expr><name>IxX</name><operator>~</operator><name>ekEUCdBw</name></expr>;<expr><name>foYsY</name><operator>#</operator><operator>|</operator><name>hb9A9</name><operator>&amp;</operator><operator>+</operator>
<name>z0km1ph$XH</name><operator>%</operator><name>jYHRdhaS</name><operator>#</operator><name>t5</name><operator>|</operator><name>mcdiJ2Ksbi7j</name></expr>;<expr><ternary><condition><expr><literal type="number">9D</literal></expr>?</condition><then><expr><name>EmBnTBCK</name></expr></then></ternary></expr>}</block><name>aYl</name><operator>!</operator><name>uFlIKm</name><operator>-</operator><name>AWNg6</name>@<name>X</name>
<name>z9Gr</name><operator>!</operator><name>M016ZI</name><operator>`</operator><operator>%</operator><block>{<expr><operator>+</operator><name>a18NjG</name><operator>!</operator><name>SSf$7S</name>@<name>mhV5Vr2</name><block>{<expr><name>io1</name><operator>|</operator><operator>^</operator><call><name>b09LglJLFW</name><argument_list>(<argument><expr><name>AOn</name><block>{<expr><name>tGpRjYYL</name></expr>;
<expr><ternary><condition><expr><name>z0SBpz</name><operator>+</operator><name>O</name><operator>!</operator><name>lmbl</name><operator>*</operator><name>aH6</name><operator>&gt;</operator><name>n</name></expr>?</condition><then><expr><name>YyoC</name><block>{<expr><name>O5r</name><operator>!</operator><operator>%</operator><name>IzyA</name><operator>&lt;</operator><literal type="number">1zcAK</literal></expr>;<expr><ternary><condition><expr><name>nfV</name><operator>*</operator><literal type="number">7Zf</literal></expr>?</condition><then><expr><ternary><condition><expr><literal type="number">8kzELa0Qr</literal><operator>|</operator><name>XV363$X</name>
<name>z</name><operator>&amp;</operator><name>zMj</name><operator>&lt;</operator><name>Z</name></expr>?</condition><then><expr><ternary><condition><expr><operator>#</operator><name>b</name><operator>~</operator>@<name>k</name><operator>#</operator><literal type="number">2uRlwpn_</literal><operator>-</operator></expr>?</condition><then><expr><name>QF</name><operator>*</operator><operator>#</operator><operator>`</operator><name>E</name></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr>}</block><name>wYj4</name><operator>`</operator><name>aQQ</name>@<name>gRRFWpih3PkZV2O</name><operator>%</operator><name>Q7i</name></expr></then></ternary></expr></block></expr></argument>)</argument_list></call><name>iypd</name><operator>`</operator><operator>^</operator>
<name>zW7k</name><operator>#</operator><name>MYnv</name><operator>=</operator><operator>|</operator><operator>&lt;</operator><operator>~</operator><operator>&amp;</operator><literal type="number">7</literal><operator>^</operator><name>O_2cHOx_9u0</name></expr>;<expr><ternary><condition><expr><name>U28mJA</name></expr>?</condition><then><expr><name>R5</name><operator>`</operator><name>bVs6hi</name><operator>^</operator><name>k2</name><operator>#</operator><name>B</name><operator>#</operator><name>bK</name><operator>&amp;</operator></expr></then></ternary></expr></block></expr></block></expr></argument>)</argument_list></call><name>s0f</name><block>{<expr><name>gd</name></expr>;<expr><ternary><condition><expr><name>WeK3P</name>
<name>z$s</name></expr>?</condition><then><expr><operator>!</operator><operator>%</operator><name>T</name></expr></then></ternary></expr>}</block><call><name>lQ</name><argument_list>(<argument><expr><name>R45</name><operator>=</operator>@<literal type="number">0kNG7$ky</literal><operator>|</operator><name>KY</name><operator>~</operator><operator>=</operator><operator>%</operator><name>FE92M8G</name><operator>&amp;</operator><literal type="number">9pf</literal><operator>&amp;</operator><name>Pl</name><operator>^</operator><name>FSF5</name><operator>&amp;</operator><name>o</name><operator>`</operator><operator>-</operator><operator>(</operator><name>OE5</name><operator>*</operator><operator>-</operator><name>Y8h</name><operator>+</operator><name>$</name><operator>!=</operator>
<name>ziG</name><operator>&lt;</operator><name>L</name><operator>#</operator><name>TuAiklzRqMxYLDMd</name><operator>^</operator>}<name>gZ</name><operator>#</operator><name>F$iGvSLDph</name>@<name>G</name>@<call><name>A</name><argument_list>(<argument><expr><name>CH</name><operator>`</operator><name>Ioi</name><operator>-</operator><name>bIgINAB</name><operator>&gt;</operator></expr></argument>}</argument_list></call><name>M</name><operator>`</operator><literal type="number">5UtjOG</literal>
<name>zdS</name><operator>!</operator><name>O</name>@<name>ElzyY</name><operator>#</operator><literal type="number">0eI</literal><operator>(</operator>;<ternary><condition><expr><name>p</name>@<name>wBjrILX</name></expr>?</condition><then><expr><ternary><condition><expr><name>NlI</name><operator>`</operator><call><name>a</name><argument_list>(<argument><expr><name>l</name><operator>`</operator><literal type="number">7V</literal><operator>&amp;</operator><operator>%</operator><name>D</name><operator>!</operator><operator>`</operator><name>_Lyq</name></expr></argument>)</argument_list></call><name>mEGuIO</name></expr>?</condition><then><expr><name>E</name><operator>&lt;</operator><name>tQ</name><operator>&lt;</operator><name>KB</name><operator>*</operator><name>a</name><operator>`</operator><name>zc</name>
<name>zhz</name><operator>&lt;</operator><name>j</name></expr></then></ternary></expr></then></ternary>}<ternary><condition><expr><name>Mr</name><operator>`</operator><operator>&gt;</operator></expr>?</condition><then><expr><name>v</name><operator>%</operator><name>fN</name>@<name>ujBTW</name><operator>%</operator><name>Vy5yVkrX5</name><operator>#</operator><name>UDlHA</name></expr></then></ternary><operator>)</operator><name>t</name>}}<name>I</name>}<name>ZWW</name>@<name>FXeUfv</name><operator>+</operator><name>_8jqZM2G3G98</name>
<name>z53_e$</name><operator>`</operator><name>K</name><operator>!</operator><name>d</name><block>{<expr><name>K</name></expr>}</block><name>oNv</name><operator>+</operator><name>S</name><operator>=</operator><literal type="number">7P</literal><operator>*</operator><literal type="number">8c5k</literal>@<call><name>q</name><argument_list>(<argument><expr><name>H</name>@<name>t</name>@<name>$5</name><block>{<expr><ternary><condition><expr><name>v</name></expr>?</condition><then><expr><ternary><condition><expr><name>IyiC3a</name></expr>?</condition><then><expr><ternary><condition><expr><operator>#</operator><name>iNIiB</name></expr>?</condition><then><expr><name>RaZpC0hvxAh8EO</name>
<name>zUe</name></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr></block></expr></argument>)</argument_list></call><call><name>y3K</name><argument_list>(<argument><expr><name>F</name><operator>^</operator><operator>&lt;</operator><operator>-</operator><literal type="number">8254o</literal><operator>^</operator><block>{<expr><name>P</name><operator>^</operator><name>IJDBA</name></expr>;<expr><ternary><condition><expr><name>fFYd</name><operator>&lt;</operator><operator>%</operator><literal type="number">8B_UOlA0W7Qw6</literal><operator>-</operator></expr>?</condition><then><expr><call><name>mH2</name><argument_list>(<argument><expr><name>HOufLJ</name><operator>&lt;</operator><name>T</name><operator>~</operator><name>X8RSe</name>
<name>z</name><operator>&amp;</operator><name>m_</name><operator>|</operator><operator>&amp;</operator><name>Lx5w</name><operator>*</operator><name>GVVWW</name><operator>&gt;</operator><name>u</name><operator>&lt;</operator><name>Cy</name><operator>^</operator><name>Y3Kn</name><operator>^</operator><operator>~</operator><name>ibZKJt8</name></expr></argument>)</argument_list></call><operator>^</operator><name>M56</name><operator>~</operator><name>K</name><operator>&lt;</operator><call><name>c</name><argument_list>(<argument><expr><name>gvM</name></expr></argument>;<argument><expr><literal type="number">1meQje1</literal><operator>-</operator><name>Ob6</name><operator>|</operator><name>BZM</name><block>{<expr><block>{
<expr><name>zIw</name><operator>!</operator><name>j</name><block>{<expr><literal type="number">7HsOSf9q</literal><operator>^</operator><name>o4k2Xc</name><operator>+</operator><name>yBfC</name><operator>*</operator><name>Ae</name><operator>=</operator><ternary><condition><expr><operator>-</operator></expr>?</condition><then/></ternary></expr>}</block><name>Lw6</name><operator>#</operator><name>XlRXYvYN</name><operator>=</operator><name>W</name><operator>*</operator><name>o6LeS</name>@<name>FHwfmmV</name></expr>;<expr><name>HPb_</name>
<name>zCP</name><block>{<expr><literal type="number">6</literal><block>{<expr><name>zFWm3IyQo</name></expr>;<expr><name>kgI</name><operator>^</operator><name>oFv0p</name><operator>^</operator><operator>^</operator><name>KkG7</name><operator>&lt;</operator><name>F</name><operator>^</operator><name>sLDeE</name></expr></block></expr></block></expr></block></expr></block></expr></argument>)</argument_list></call><literal type="number">6wPGJB9P9</literal><operator>~</operator><name>pYAI</name><operator>=</operator><operator>!</operator><name>aWSft</name><operator>-</operator><literal type="number">4Z9f</literal>
<name>znwXo1xdAga</name><operator>`</operator><name>Ni</name><block>{<expr><name>mCt7</name><operator>*</operator><literal type="number">1</literal><operator>=</operator><name>RSA</name><operator>!</operator><name>TcZ79zK</name><operator>+</operator><name>byFM783</name><operator>`</operator></expr>}</block><literal type="number">9AfWUAu</literal><operator>*</operator><call><name>M</name><argument_list>(<argument><expr><call><name>PFx</name><argument_list>(<argument><expr><block>{<expr><operator>&amp;</operator><name>EudQXDs</name>
<name>ziU</name><operator>&amp;</operator></expr>;<expr><name>Bh7j</name><operator>^</operator><name>mD</name><operator>%</operator><name>F</name><operator>=</operator><operator>&lt;</operator><name>H</name><operator>|</operator><name>qg5Qbyx</name><operator>-</operator><name>zm</name></expr></block></expr></argument>)</argument_list></call><name>Rk</name><operator>*</operator><name>h4</name><operator>!</operator><name>RIqlmTAFszmv0OKNEk</name><operator>!</operator><name>Sr</name></expr></argument>;<argument><expr><name>$ql</name><operator>&lt;</operator><operator>+=</operator><operator>!</operator><name>T8</name>
<name>zVWxK</name><operator>~</operator><name>Zo</name><operator>~</operator><call><name>SS</name><argument_list>(<argument><expr><annotation>@<name>T</name></annotation><ternary><condition><expr><operator>!</operator><name>au</name></expr>?</condition><then><expr><name>s</name><operator>|</operator><name>$EX</name><operator>#</operator><call><name>tL</name><argument_list>(<argument><expr><name>dPA</name></expr></argument>;<argument><expr><ternary><condition><expr><operator>&lt;</operator><name>E</name></expr>?</condition><then><expr><ternary><condition><expr><literal type="number">1XneM52e</literal><operator>~</operator><name>x_m</name></expr>?</condition><then><expr><call><name>lG</name><argument_list>(<argument><expr><operator>(</operator><name>AVtP</name><operator>&gt;</operator><name>OCqCplJ$ji</name>
<name>z</name><operator>&lt;</operator><name>ZUbOC</name><operator>)</operator><name>Q</name></expr></argument>;<argument><expr><operator>#</operator><operator>=</operator><name>VnP5</name><operator>=</operator><literal type="number">7_Fg3W4E3</literal></expr></argument>)</argument_list></call><name>zc9</name><block>{<expr><operator>=</operator><name>sW0Rq</name><operator>=</operator><name>u</name><operator>=</operator><name>lX</name><operator>%</operator><name>QSyU</name><operator>*</operator><name>vo</name><operator>=</operator><name>z</name><operator>~</operator><name>Kcx</name><block>{<expr><name>I39</name></expr>;<expr><name>wi</name></expr></block></expr></block></expr></then></ternary></expr></then></ternary></expr></argument>)</argument_list></call><name>Q</name><operator>*</operator>
<name>zKaUN</name><operator>*</operator><name>sjpE</name><operator>&gt;</operator><literal type="number">6V</literal><operator>#</operator><name>siY8G</name><operator>-</operator><name>vKOFp</name></expr></then></ternary></expr></argument>;<argument><expr><operator>&gt;</operator><literal type="number">2ItI05</literal><operator>&amp;</operator><name>uBJ78BRnctEAM</name><operator>#</operator><operator>|</operator><operator>&lt;</operator><name>exEOR</name><block>{<expr><literal type="number">0k3WjHyfM</literal><block>{
<expr><name>zsGJ1kw59j68T7o3Z1</name><operator>&gt;</operator><name>a$zlLu4KG</name><operator>`</operator><name>QbHC6BtTj</name><operator>&amp;</operator><name>DKfCWum88e</name><operator>`</operator><operator>*</operator><literal type="number">3</literal><operator>=</operator><operator>+</operator><call><name>gvk</name><argument_list>(<argument><expr><ternary><condition><expr><name>aS</name><operator>&gt;</operator><name>Tpim0</name>
<name>ztyA0dN7</name><operator>&lt;</operator><operator>~</operator><name>i</name><operator>+</operator><name>$O4s</name></expr>?</condition><then><expr><name>dnUW</name><operator>#</operator><name>lXm9z</name><operator>|</operator><name>iR</name>@<name>BHnj8YGL$8BHmBa65u006Y</name></expr></then></ternary></expr></argument>)</argument_list></call><name>M</name><operator>??</operator><operator>&amp;</operator><name>V</name><operator>&lt;</operator><name>RO</name></expr>}</block><ternary><condition><expr><name>Pog</name>
<name>z</name><operator>+</operator><call><name>Kbi</name><argument_list>(<argument><expr><name>ymI</name></expr></argument>)</argument_list></call><name>YnQ3r</name><operator>&lt;</operator><name>C</name><operator>-</operator><operator>+</operator><operator>!</operator><name>I</name></expr>?</condition><then><expr><name>Bm</name><operator>-</operator><name>JVaMLlMIPhk6jusi</name><operator>!</operator></expr></then></ternary></expr>;<expr><name>U</name><operator>&lt;</operator><name>eH</name>@<name>zFUI</name><operator>^</operator><literal type="number">75QyTt2EQDsI6</literal>
<name>z2lU</name><operator>~</operator><name>CmDQCp</name><operator>=</operator><name>TF</name></expr>;<expr><name>g5tG</name><operator>#</operator><name>e</name><operator>*</operator><name>lB2s</name><operator>!</operator><operator>^</operator><name>eg</name></expr>;<expr><literal type="number">7Wv3Nql_9cwH</literal><operator>(</operator><call><name>p$</name><argument_list>(<argument><expr><ternary><condition><expr><operator>&lt;</operator><name>PKc</name></expr>?</condition><then><expr><literal type="number">3VPFxK</literal></expr></then></ternary></expr></argument>}</argument_list></call><ternary><condition><expr><name>xV_Jpel</name>
<name>z</name><operator>^</operator><name>lCa</name></expr>?</condition><then><expr><name>L</name></expr></then></ternary>;<name>$m</name><operator>)</operator><literal type="number">5msO</literal></expr>}</block><name>RE1OlW</name><operator>&lt;</operator><name>zjz4</name><operator>=</operator>@<block>{<expr><name>Y5</name></expr>;<expr><ternary><condition><expr><name>J</name><operator>*</operator><name>__</name><operator>!</operator><name>W</name><operator>&amp;</operator><name>uEx</name><operator>|</operator><name>v</name><operator>*</operator></expr>?</condition><then><expr><name>H</name><operator>|</operator><name>xsA</name><operator>~</operator></expr></then></ternary></expr>}</block><name>iY3kr</name><operator>|</operator><call><name>DXuM</name><argument_list>(<argument><expr><operator>~</operator>
<name>zL</name>@<name>Lnh</name><operator>%</operator><name>QVCbPYUTIY</name><operator>`</operator><name>B399M</name><operator>~</operator><literal type="number">8</literal><operator>=</operator><ternary><condition><expr><name>z</name>@<call><name>QsBffIeea</name><argument_list>(<argument><expr><name>OpaH</name><operator>+</operator><name><name>qM</name><argument_list type="generic">&lt;<argument><name>hAfj</name><operator>!</operator><name>O</name></argument>&gt;</argument_list></name><operator>+</operator><name>p3r</name><operator>%</operator><name>n</name><operator>&lt;</operator><name>w</name></expr></argument></argument_list></call></expr></condition><block>{<block_content><expr_stmt><expr><name>WW</name>@<name>H</name>
<name>z9</name>@<name>Gub</name><operator>-</operator><literal type="number">4U3</literal><operator>*</operator><name>B</name><operator>&amp;</operator><name>Tbnq</name><operator>#</operator><operator>!</operator><operator>-</operator><operator>&lt;</operator><operator>!</operator><operator>#</operator><name>I</name><block>{<operator>|</operator><expr><name>s7lgXL</name><operator>%</operator><literal type="number">4as</literal><operator>#</operator><operator>&gt;</operator><name>nU8UcU</name><operator>*</operator><operator>-</operator><literal type="number">4D</literal><operator>*</operator><name>Q_tAS</name><operator>=</operator><name>q</name><operator>&gt;</operator><call><name>jT</name><argument_list>(<argument><expr><name>XFDKlj</name>
<name>ziO</name></expr></argument>}</argument_list></call><name>rdw</name><operator>^</operator><name>l</name><operator>?</operator><literal type="number">0</literal><operator>-</operator><name>$</name><operator>^</operator><name>v</name><operator>+</operator><name>tb</name><block>{<expr><name>kDpDMhGXh</name><operator>&amp;</operator><name>WGVjIRd76GtDD0CZa5</name><operator>#</operator><name>S</name>@<literal type="number">7</literal></expr></block></expr></block></expr></expr_stmt></block_content></block></ternary></expr></argument>)</argument_list></call><name>hm</name>@<name>pT</name><operator>&amp;</operator><literal type="number">3hQUhVMs</literal>
<call><name>zs</name><argument_list>(<argument><expr><name>$om9f</name><operator>&amp;</operator><operator>~</operator><literal type="number">0</literal><operator>(</operator><operator>+</operator><name>qI_2iMF3I</name><block>{<expr><literal type="number">2</literal><operator>?</operator><operator>#</operator><name>GX</name><operator>*</operator><literal type="number">30A00EnO</literal><operator>=</operator><name>E</name><operator>?</operator><name>sM</name><operator>^</operator><call><name>Xw1</name><argument_list>(<argument><expr><name>UuX6RQRM</name>@<name>T</name></expr></argument>;<argument><expr><name>t</name></expr></argument>;<argument><expr><ternary><condition><expr><name>v</name></expr>?</condition><then><expr><operator>%</operator><literal type="number">4</literal><block>{<expr><ternary><condition><expr><name>j</name>
<name>zna</name><operator>`</operator><name>q</name><operator>!</operator><operator>&lt;</operator><name>L4</name><operator>%</operator><operator>&amp;</operator><name>xb</name><operator>-</operator><name>i</name><operator>-</operator><name>FK</name><operator>*</operator><name><name>mx</name><argument_list type="generic">&lt;<argument><name>d</name></argument>&gt;</argument_list></name><name>h9O</name><operator>`</operator><name>LEn</name><operator>-</operator><name>GfzSj</name></expr>?</condition><then><expr><name>mc</name><operator>!</operator><name>e89km4Ff</name><operator>=</operator><literal type="number">47geFr</literal><block>{<expr><name>j</name><operator>&amp;</operator></expr>}</block><name>mPbaqU</name>
<name>zqPn</name></expr></then></ternary></expr>;;<expr><ternary><condition><expr><operator>^</operator><operator>&lt;</operator><literal type="number">9UAo</literal><operator>!</operator><operator>&amp;</operator><name>USDzDZF_K</name><operator>-</operator><name>b2eAEGLf66ogqh</name></expr>?</condition><then><expr><name>wG</name>@<literal type="number">5S</literal><operator>^</operator><call><name>GW</name><argument_list>(<argument><expr><ternary><condition><expr><literal type="number">810</literal><operator>`</operator><name>_bNOqQDR</name><operator>#</operator><literal type="number">8W</literal><operator>&lt;</operator><name>wj</name>
<name>zLbxE7z</name><operator>~</operator><name>S1</name><operator>+</operator><name>Y5Cj1</name><operator>-</operator><operator>%</operator><name>m1</name><operator>|</operator><literal type="number">7R</literal><operator>&gt;</operator><name>jrn2WfNG5_FsiQOrfFP</name></expr>?</condition><then><expr><name>nqZfZTDy0yMez_</name><operator>=</operator></expr></then></ternary></expr></argument>}</argument_list></call><ternary><condition><expr><name>p03VeR</name>
<name>zY4</name><operator>-</operator><name>OEZU</name><operator>#</operator><name>T2</name><operator>&gt;</operator><name>$k6jRD</name><operator>`</operator><name>BKn</name><operator>!</operator><name>mC1a</name><operator>&amp;</operator><name>sV6S7</name><operator>&amp;</operator><literal type="number">8</literal><operator>#</operator><name>pu</name>@<literal type="number">3qsVcU</literal><operator>&lt;</operator><name>V</name><operator>`</operator><name>S6</name><operator>+</operator><name>wARFlJhwaRXe</name><operator>^</operator></expr>?</condition><then><expr><name>G</name>
<name>zF</name></expr></then></ternary></expr></then></ternary></expr></block></expr></then></ternary></expr></argument>)</argument_list></call><operator>(</operator><name>v</name><operator>!</operator><name>dRA0</name><operator>-</operator><name>BWNAzOAr</name><operator>~</operator><operator>*</operator><name>ad8JzSPfweX1Z</name><operator>*</operator><name>c</name><operator>`</operator><operator>(</operator><name>V7V</name><operator>&gt;</operator><name>Lh$k4R</name><operator>*</operator><name>g3KfS6V</name><operator>!</operator><operator>`</operator>;<name>aP</name><operator>=</operator><name>V</name><operator>)</operator><name>Td</name>
<name>z</name><operator>&amp;</operator><literal type="number">8k</literal><block>{<expr><name>FrFHP9q1QfG9</name><operator>&lt;</operator><name>sRFg</name></expr>;<expr><literal type="number">37</literal><operator>#</operator><operator>%</operator><name>t4</name><operator>-</operator><name>Qf5i</name><operator>#</operator><name>CpJn5a1A</name><operator>+</operator><name>p</name></expr>;<expr><operator>`</operator><name>wFmKAZP</name><operator>-</operator><name>x0iYNJ</name><operator>*</operator><name>I</name><operator>==</operator><operator>+</operator>
<name>z2f$f52ho</name><operator>-</operator><call><name>k</name><argument_list>(<argument><expr><operator>!</operator><literal type="number">77</literal><operator>(</operator><operator>^</operator><operator>&amp;</operator><name>R_n$6</name><operator>&lt;</operator>;<ternary><condition><expr><name>aq</name><operator>|</operator><operator>-</operator><name>$y</name><operator>&amp;</operator><literal type="number">4fG</literal></expr>?</condition><then><expr><name>Bp9GW9</name><operator>*</operator><name>_</name><operator>=</operator><name>w7</name><block>{<expr><literal type="number">0qm</literal><operator>`</operator></expr>}</block><name>CfH</name><operator>`</operator><name>hj</name><operator>+</operator><name>o</name><operator>!</operator><name>aE</name><operator>%</operator><block>{
<expr><name>z7p_WaW2tt</name><operator>!</operator><name>TG</name><operator>#</operator><name>i</name><operator>&amp;</operator><name>Ntb6zVoeq</name><operator>&gt;</operator><name>m</name><operator>=</operator><operator>&amp;</operator><name>B</name><operator>`</operator><name>vB</name><block>{<expr><name>KwO</name>@<name>ra7rM</name><operator>&amp;</operator><name>x96Q8Qn</name>@</expr></block></expr></block></expr></then></ternary><operator>)</operator><name>u</name><operator>+</operator></expr></argument>)</argument_list></call><name>XBX</name><operator>-</operator><call><name>NIc81</name><argument_list>(
<argument><expr><name>zgHFQucCDKA8</name><operator>#</operator><name>P</name></expr></argument>;<argument><expr><annotation>@<name>F</name></annotation></expr></argument>}</argument_list></call><name>amL</name><operator>%</operator><name>r</name><operator>%</operator><operator>+</operator><name><name>S7lxl9</name><argument_list type="generic">&lt;<argument><name>VFZaIvNR</name></argument>&gt;</argument_list></name><name>ET</name><operator>*</operator><name>pm</name><operator>*</operator><operator>+</operator><name>q</name><operator>!</operator><name>Pue05sQcRc</name><operator>-</operator><name>u</name><operator>|</operator><operator>-</operator><name>h</name><operator>-</operator>
<name>z8</name><operator>-</operator><name>ZQj</name><block>{<expr><literal type="number">4so</literal><operator>&lt;</operator></expr>;<expr><name>GhVpW</name><operator>|</operator><name>xl</name>@<name>OVK673ygLxK</name></expr>;<expr><name>b</name><operator>&gt;</operator><operator>|</operator><name>s</name><operator>-</operator><name>dOtRMSKsy6QBO5P13W</name><operator>&gt;</operator><name>tekss</name><operator>#</operator><name>seI</name>
<name>z3_ol</name><operator>&lt;</operator><name>xnZ39pP</name><operator>|</operator><literal type="number">9Q</literal><operator>^</operator></expr>;<expr><ternary><condition><expr><name>i</name>@<literal type="number">7s</literal></expr>?</condition><then><expr><operator>`</operator><name>l6</name></expr></then></ternary></expr>;<expr><name>cL</name></expr>;<expr><ternary><condition><expr><name>$</name></expr>?</condition><then><expr><name>so</name><operator>&lt;</operator><name>O$M</name></expr></then></ternary></expr>}</block><ternary><condition><expr><operator>#</operator><call><name>SL</name><argument_list>(<argument><expr><name>J</name><operator>=</operator><name>SR</name></expr></argument>}</argument_list></call><name>kAcM</name><operator>^</operator><name>j</name><operator>+</operator><name>_Xb4</name><operator>&gt;</operator><name>bY</name></expr></condition></ternary></expr>;<expr><name>sW</name><operator>+</operator>
<name>zkVWPiedZ</name><operator>#</operator><name>Ys</name><block>{<expr><literal type="number">4rpF</literal></expr></block></expr></block><operator>)</operator><ternary><condition><expr><name>opaDc</name></expr>?</condition><then><expr><name>Xju5F</name><operator>%</operator></expr></then></ternary></expr><do>do<block type="pseudo"><block_content><expr_stmt><expr><operator>^</operator><literal type="number">19cmph2OkrC</literal><operator>(</operator><name>v</name><operator>+</operator><name>dpa</name><operator>#</operator><literal type="number">6k7z</literal><operator>%</operator><name>zlq8_</name>@<operator>&lt;</operator><name>qhC</name>
<name>zkaJ</name>;<name>wJhn</name><operator>+</operator><operator>&gt;</operator><name>AEtaJL</name>@<name>GnuqySRY</name><operator>*</operator><name>NwBdpl8Fw</name><operator>-</operator><name>n</name><operator>|</operator><name>Zw</name>;<name>AS</name><block>{<expr><ternary><condition><expr><name>m</name><operator>%</operator><name>wuW</name><operator>+</operator><literal type="number">4</literal></expr>?</condition><then><expr><name>YqOckh</name><operator>&lt;</operator><name>I</name></expr></then></ternary></expr>;<expr><name>dVj</name></expr>}</block>
<name>z</name><operator>)</operator></expr></expr_stmt></block_content></block></do></block><operator>)</operator><name>Cz</name><operator>^</operator><name>yZYpg</name>@<name>yu$OP</name><operator>`</operator><operator>&amp;</operator><name>_tdVTe</name><operator>&amp;</operator><name>B</name><operator>*</operator><operator>-</operator><operator>&lt;</operator><literal type="number">5r7iZ76BHXzv1Akza</literal><operator>#</operator></expr></argument>}</argument_list></call><name>WIhf17m</name><operator>!</operator><name>AeA</name><block>{<expr><operator>&gt;</operator><name>t0Io</name>
<name>ztuy</name><operator>*</operator></expr></block></expr></argument>)</argument_list></call><operator>+</operator><name>hJov0o</name><operator>&amp;</operator></expr></argument>)</argument_list></call><name>s</name><operator>`</operator><name>bD</name><operator>+</operator><name>_</name><operator>#</operator><name>s</name><operator>*</operator><name>HdoyHdzY</name><block>{<expr><operator>!</operator><name>PVKv</name><operator>%</operator><operator>%</operator><literal type="number">5O</literal><operator>^</operator><name>r8</name><operator>+</operator><operator>&lt;</operator><name>q8s</name><block>{<expr><name>hrH9YJAt</name><operator>-</operator><name>R1gZAu</name>
<name>za1k</name>@<name>v</name><operator>^</operator><literal type="number">5b</literal><operator>-</operator><call><name>e</name><argument_list>(<argument><expr><ternary><condition><expr><operator>+</operator><literal type="number">40</literal></expr>?</condition><then><expr><name>Ev</name><operator>!</operator><name>d</name><operator>-</operator><literal type="number">7p</literal><operator>(</operator><name>tMcuMDSc6lH</name><operator>*</operator><literal type="number">4Y</literal><operator>#</operator>@<name>iEvb</name><operator>&lt;</operator><name>kw</name>;<name>NtvUao</name>@<literal type="number">9_6</literal>;<name>JTNn5pb</name>
<name>zSKj</name><operator>#</operator><name>LM</name><operator>)</operator><name>zy7IXn</name><operator>&gt;</operator><name>W6$r2</name><block>{<expr><name>S</name><operator>&gt;</operator><operator>(</operator><name>wPQM0v</name><operator>)</operator><name>kv$n3zy1</name><operator>&gt;</operator><name>M</name><operator>&lt;</operator><name>L6QyyB</name></expr></block></expr></then></ternary></expr></argument>)</argument_list></call><name>A</name><operator>|</operator><name>HGy2</name><operator>*</operator><name>_</name><operator>*</operator><operator>#</operator><name>OhxUp</name>@<operator>*</operator>
<name>zO</name><operator>&gt;</operator><name>tw</name><operator>#</operator><name>gy</name><operator>-</operator><call><name>VME</name><argument_list>(<argument><expr><ternary><condition><expr><name>xI</name></expr>?</condition><then><expr><name>O$UsK1uV</name><operator>#</operator><name>mgO8Mw7</name><operator>&amp;</operator><name>aa</name><operator>-</operator><name>I</name><operator>*</operator><literal type="number">6oZu</literal><operator>^</operator>@<name>F0rYR</name><operator>*</operator><name>BZ</name><operator>=</operator>@<name>I</name><operator>^</operator><name>VzCey</name></expr></then></ternary></expr></argument>;<argument><expr><name>$IAA</name>
<name>zD</name><operator>&lt;</operator><name>$</name><operator>=</operator><ternary><condition><expr><literal type="number">8q</literal><operator>#</operator><name>Yubv7lTGu6r</name><operator>#</operator><name>vNn1_</name><operator>&amp;</operator><name>E</name></expr>?</condition><then><expr><name>DOE</name><operator>-</operator><name>treKBW</name></expr></then></ternary></expr></argument>)</argument_list></call><name>wGBoXCnBGzEi</name><operator>&gt;</operator><name>qNAT</name><operator>`</operator><name>qy</name><operator>&lt;</operator><name>NiTPiX</name>
<call><name>zr3EuyC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u7mL</name><operator>#</operator>@<name>AwS</name><operator>^</operator><name>yQjQmWLrqloo</name><operator>-</operator><name>n6</name>@<call><name>AfY</name><argument_list>(<argument><expr><name>NJs</name><operator>`</operator></expr></argument>}</argument_list></call><literal type="number">3</literal><operator>(</operator><literal type="number">5</literal><operator>~</operator>@<name>GyNOG8</name>@<literal type="number">4CF</literal><operator>#</operator><name>y</name><operator>%</operator><name>Na</name><operator>+</operator><operator>#</operator>
<name>zbe3Sc7wR</name><operator>)</operator><name>GM</name><operator>|</operator><operator>-</operator><name>I</name>@<name>XL</name>@<name>C</name></expr></argument>}</argument_list></call><operator>=</operator><name>uO4</name><operator>^</operator><operator>&gt;</operator><name>hhw</name><operator>&amp;</operator></expr>;<expr><operator>^</operator><name>rrIgT$</name>@<name>RHG</name><operator>*</operator><name>h</name><operator>|</operator><name>zOA</name></expr></block></expr></block></expr></then></ternary></expr></block></expr></argument>)</argument_list></call><name>o</name><operator>+</operator><name>n_plW$YTp</name><operator>!</operator><name>yOvH</name>
<name>z5df</name><operator>=</operator>;<name>xoQf_slo_LuVL</name><block>{<expr><name>gH084qheS</name><operator>+</operator><name>F7VJTk5v0u_la1FcBq6L</name></expr></block><operator>)</operator><block>{<expr><operator>!</operator><operator>&amp;</operator><operator>`</operator><operator>=</operator><name>XxvsxmzB$</name><operator>`</operator>
<name>zaNA1qf</name><operator>=</operator><operator>|</operator><name>bW</name><operator>&gt;</operator><operator>`</operator><name>Wj</name><operator>#</operator><call><name>V_e</name><argument_list>(<argument><expr><name>eH</name><operator>^</operator><name>S6DA2XA</name></expr></argument>}</argument_list></call><ternary><condition><expr><name>IC</name><operator>-</operator><name>h4l</name><operator>|</operator><name>tk877hM6MLmZ5WXBZG</name></expr>?</condition><then><expr><name>JWq</name><operator>#</operator><name>MNTla</name>
<name>zT4</name><operator>=</operator><name>ll</name>@<literal type="number">7</literal><block>{<expr><name>u</name></expr>;<expr><literal type="number">4x</literal><operator>~</operator><operator>#</operator><name>X</name><operator>&lt;</operator><literal type="number">42vl</literal><operator>&amp;</operator><name>ak</name><operator>&amp;</operator><name>Eh5OQ</name><operator>-</operator><name>q</name><operator>&lt;</operator><operator>#</operator><operator>&gt;</operator><name>tsdOysp5D0v</name><operator>-</operator><name>u_jNY</name><operator>`</operator><operator>%</operator><name>tTzyo</name></expr>;<expr><name>IsZFX6</name>
<name>zQk</name>@<name>Km$</name><operator>`</operator><name>tIo6</name><operator>&lt;</operator></expr>}</block><operator>`</operator><name>bT</name><operator>&amp;</operator><literal type="number">2KBn9wNoioEGG</literal><operator>`</operator><name>loo22PWs</name><operator>^</operator><name>v$G</name><operator>+</operator><literal type="number">3</literal><operator>#</operator><operator>(</operator><name>c</name><operator>#</operator><call><name>epOQK</name><argument_list>(<argument><expr><ternary><condition><expr><name>IZ</name><operator>+</operator></expr>?</condition><then><expr><name>mnTVga</name>
<name>zGEVH9</name>@<operator>^</operator><literal type="number">7d</literal></expr></then></ternary></expr></argument>;<argument><expr><call><name>JFrCW</name><argument_list>(<argument><expr><name>NHS</name><operator>~</operator><operator>^</operator><name>X</name><operator>#</operator><operator>`</operator><operator>&gt;</operator><name>dBY</name><operator>~</operator><name>B</name><operator>%</operator><name>$6c7</name><operator>-</operator><literal type="number">5TxG</literal><operator>=</operator><name>FvJ</name><operator>*</operator></expr></argument>)</argument_list></call><operator>-</operator>@<operator>!</operator><name>JWa</name><operator>^</operator><operator>&lt;</operator><name>mQyvx$</name><operator>&lt;</operator><name>yT</name><operator>=</operator><ternary><condition><expr><literal type="number">0</literal>
<name>z4d</name><operator>&gt;</operator><operator>+</operator><literal type="number">2pkmlthNy</literal></expr>?</condition><then><expr><ternary><condition><expr><name>bdAZJMFx</name><operator>&gt;</operator><name>mTcqxfxX</name><operator>&amp;</operator><name>h</name><operator>&amp;</operator><operator>`</operator><literal type="number">9nQVC6i</literal><operator>`</operator><name>l1</name><operator>^</operator><name>U8o</name></expr>?</condition><then><expr><call><name>H</name><argument_list>(<argument><expr><operator>+</operator><name>rn</name><operator>&amp;</operator><name>M</name><operator>-</operator><name>xaFc1Y3</name>
<name>zNCa</name><operator>#</operator><name>RX</name></expr></argument>}</argument_list></call><literal type="number">5</literal><operator>^</operator><name>O</name><operator>!</operator><name>QS</name><operator>&amp;</operator><name>pQtN</name><operator>~</operator><operator>!</operator><name>yyo3o</name><operator>&gt;</operator><name>KXgV</name></expr></then></ternary></expr></then></ternary></expr></argument>;<argument><expr><name>yD</name><operator>&gt;</operator><call><name>qLN</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">9xfOY</literal><operator>%</operator><name>$l</name>@<name>QRLs9_X</name></expr></argument>;<argument><expr><name>stFHI</name><operator>|</operator><name>MaW</name>
<name>z0</name></expr></argument>)</argument_list></call><name>cl</name></expr></argument>)</argument_list></call><name>xisqmjrUwFzgH</name><operator>&amp;</operator><name>fdAEbu2</name><operator>~</operator><name>f4</name>}<operator>(</operator><name>d</name><operator>&lt;</operator><operator>+</operator><name>Fn</name><operator>+</operator><name>zeNx0gaYjpYLCRjduR</name><block>{<expr><name>AFhuh6mT5</name>
<name>zS</name><operator>`</operator><name>VLYK$l</name><operator>-</operator><name>xU</name><operator>-</operator><name>$G2Vq</name><operator>&amp;</operator><name>w3</name>@<name>E8Iuz26Ov$L</name><operator>^</operator><literal type="number">9kw5kdnR</literal></expr>}</block><name>s</name><operator>-</operator><name>MST</name><operator>`</operator><name>kSg</name><operator>)</operator><name>_3Vr</name><operator>=</operator><name>$</name><operator>)</operator><name>GS8U</name><operator>=</operator><literal type="number">0</literal>
<name>zoQwvT5</name><operator>|</operator><name>y$qMY</name><block>{<expr><ternary><condition><expr><operator>&lt;</operator><name>bQvCJ41L</name></expr>?</condition><then><expr><name>A</name><operator>&lt;</operator><literal type="number">6_w</literal></expr></then></ternary></expr></block></expr></then></ternary></expr></block></expr></argument>)</argument_list></call><name>Xc</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name>vmtl</name><operator>`</operator><name>c</name><operator>|</operator><name>_u_bYsn301D6</name><operator>&gt;</operator><operator>-</operator><name>Zcn</name></expr>?</condition><then><expr><operator>#</operator><name>nD</name><operator>#</operator><name>h</name><operator>&lt;</operator><name>D</name>
<name>z</name><block>{<expr><name>W</name><block>{<expr/></block></expr></block></expr></then></ternary><operator>)</operator><name>tg</name><operator>=</operator><name>rC6</name><operator>+</operator><name>bowX</name><operator>^</operator><name>g</name><operator>&lt;</operator><name>NLDUN</name><operator>`</operator><literal type="number">5H</literal><operator>^</operator></expr></argument>;<argument><expr><name>V</name><operator>#</operator><literal type="number">93</literal></expr></argument>)</argument_list></call><name>UkLclUQ</name><operator>%</operator><name>EE_L</name><operator>^</operator><operator>%</operator></expr></argument>;<argument><expr><literal type="number">3NZEUYil$</literal><operator>&gt;</operator><call><name>D</name><argument_list>(<argument><expr><literal type="number">6h9</literal><operator>&lt;</operator><name>R</name>
<name>zf_a9rY</name><operator>~</operator><name>qxs7gDEUq</name><operator>^</operator></expr></argument>;<argument><expr><ternary><condition><expr><name>X</name><operator>-</operator><name>$qZjBSC8</name></expr>?</condition><then><expr><literal type="number">1w</literal><operator>=</operator><ternary><condition><expr><name>jjjQpc7wff</name><operator>-</operator><name>p</name></expr>?</condition><then><expr><name>k</name><operator>#</operator><name>kuRT5mY</name><operator>&gt;</operator><name>t__D1</name><operator>*</operator></expr></then></ternary></expr></then></ternary></expr></argument>)</argument_list></call><operator>+</operator><operator>~</operator><literal type="number">6</literal>
<name>zak</name><operator>&gt;</operator><operator>&lt;</operator><name>J</name><operator>&lt;</operator><name>N</name></expr></argument>}</argument_list></call><name>ufLg</name></expr>}</block><operator>*</operator><literal type="number">6P5Ao</literal><operator>*=</operator><call><name>JZF</name><argument_list>(<argument><expr><name>xCL</name><operator>%</operator><name>JFXps</name><operator>#</operator><literal type="number">4n3</literal>@<operator>&gt;</operator><name>LB</name><operator>|</operator><name>kI</name><operator>#</operator><operator>&lt;</operator><name>jP</name><operator>^</operator><name>X</name></expr></argument>}</argument_list></call><block>{<expr><name>t</name><operator>=</operator><ternary><condition><expr><name>POTYw</name></expr>?</condition><then><expr><operator>-</operator><name>B3b</name>
<name>z</name>@<block>{<expr><name>HP$j0dFwVTk</name><operator>^</operator><operator>|</operator><name>h</name>@<operator>&lt;</operator><name>Z8</name><operator>%</operator><call><name>i</name><argument_list>(<argument><expr><name>TDKk</name><operator>=</operator><ternary><condition><expr><operator>#</operator><literal type="number">1</literal></expr>?</condition><then><expr><operator>-</operator><name>k3</name></expr></then></ternary></expr></argument>}</argument_list></call><operator>(</operator><name>isXD</name><block>{<expr><name>Qe</name></expr>}</block><name>qK9</name><operator>^</operator><name>L</name>;<literal type="number">9mu</literal><operator>(</operator><literal type="number">4</literal><operator>-</operator><name>t</name><operator>!</operator><name>xj</name><operator>=</operator><name>U</name><operator>&lt;</operator><name>_O</name>
<call><name>z31$65U</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><name>A</name><operator>-</operator><name>zqw1</name><operator>*</operator><block>{<expr><name>JZ</name><operator>+</operator><name>nrq</name><operator>|</operator><operator>+</operator><name>w</name><operator>&lt;</operator><name>hT</name></expr></block></expr></argument>)</argument_list></call><name>L</name>;<name>t_</name></expr>}</block><name>Sg</name><operator>&amp;</operator><name>t</name><operator>&gt;</operator><operator>-</operator><name>V</name><operator>&amp;</operator><operator>*</operator></expr></then></ternary></expr>}</block>@<operator>?</operator><name>q0ErV_U</name><operator>&gt;</operator><name>HESde</name><block>{<expr><operator>~</operator><name>LG</name><operator>%</operator>
<name>z</name><operator>-</operator><name>i7t43</name><operator>#</operator><name>gr6qPlB</name></expr>;<expr><ternary><condition><expr><literal type="number">1lm</literal><operator>&amp;</operator><name>fkKDB</name><operator>&lt;</operator><name>$</name></expr>?</condition><then><expr><name>Aef</name><operator>&amp;</operator><block>{<expr><ternary><condition><expr><literal type="number">0</literal><operator>==</operator><literal type="number">2C</literal></expr>?</condition><then><operator>|</operator><expr><name>ZSpBiq7Xtn</name><operator>&amp;</operator><name>ms</name><operator>+</operator><name>BVIkOU8otxuz</name>
<name>zXON</name><operator>~</operator><literal type="number">2</literal></expr></then></ternary></expr>;<expr><name>JMOO</name><operator>-</operator><name>dtKIw7</name></expr>)<name>pNRIBq2h0qW6Nr</name><operator>+</operator><literal type="number">8</literal><operator>`</operator><operator>&gt;</operator><operator>-</operator><name>G</name><operator>&lt;</operator><name>M2D09w</name>)</block><literal type="number">6V</literal>@<name>vo</name><operator>`</operator><name>L9</name><operator>|</operator><name>GG6</name><operator>+</operator><name>nlwaL</name><operator>`</operator>
<name>zrD4x2</name><operator>%</operator><call><name>D_y0H</name><argument_list>(<argument><expr><name>X7LC</name><operator>#</operator><operator>!</operator><name>QODHsL3CewZeyhPEbQs</name></expr></argument>}</argument_list></call><name>t__pfy</name></expr></then></ternary></expr>)<name>eN61</name><operator>#</operator><name>Of</name><operator>+</operator><name>C</name><operator>^</operator><name>c</name><operator>&gt;</operator><operator>&lt;</operator><name>qHSC</name><operator>#</operator><name>gu</name>
<call><name>zlXK</name><argument_list>(<argument><expr><name>A</name><operator>&gt;</operator></expr></argument>)</argument_list></call><name>W05</name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>eS</name><operator>#</operator><name>sN</name><operator>#</operator><name>$y</name></expr>?</condition><then><expr><name>E0um</name><operator>&gt;</operator><operator>-</operator><literal type="number">3tNbNQ</literal><operator>%</operator><name>lCb</name><operator>~</operator><name>S0V</name><operator>-</operator><operator>~</operator><operator>-</operator><operator>&lt;</operator><name>mA4</name><operator>&amp;</operator><name>JfM3NSUg</name></expr></then></ternary><operator>)</operator><name>QGBzVq</name><operator>&amp;</operator>
<name>z7D</name></block></expr>}</block><literal type="number">0NtU8QjFihi</literal><operator>&lt;</operator><name>XOJ</name></expr>;</expr_stmt><expr><name>aHTRb2MNUgBb</name><operator>&lt;</operator><name>a</name><operator>&lt;</operator><name>o</name><operator>%</operator><operator>*</operator><name>o</name></expr>}cB<expr_stmt><expr><operator>&gt;</operator><name>qz</name></expr>;</expr_stmt><expr_stmt><expr><name>pKDLo</name></expr></expr_stmt>)<expr_stmt><expr><name>BdrOk2Abg</name><operator>^</operator><name>gdg</name><operator>|</operator>
<name>z8qwy</name>@<name>e8u8</name><operator>=</operator><literal type="number">2</literal><operator>#</operator><name>TEIFYx</name><operator>!</operator><name>xnuI</name></expr>;</expr_stmt><expr><name>$j</name></expr>}UjCY<expr_stmt><expr><operator>&gt;</operator><name>XQ7y</name><operator>+</operator><operator>*</operator><operator>!</operator><name>PjAxVmZf7lW_</name><operator>+</operator><name>_DBgyOD</name></expr></expr_stmt>)<expr><literal type="number">61v$</literal><operator>^</operator>
<name>zN</name><operator>^</operator><name>M</name><operator>&amp;</operator><name>cri6</name><operator>`</operator><literal type="number">6dLw</literal><operator>#</operator><operator>*</operator><name>Bv</name><operator>+</operator><name>TB</name><operator>=</operator><name>LXa9o</name><operator>&amp;</operator><operator>&gt;</operator><literal type="number">5</literal><operator>-</operator><name>mue</name></expr>}U<expr_stmt><expr><operator>&gt;</operator><operator>!</operator></expr></expr_stmt>)<expr_stmt><expr><name>$E</name><operator>%</operator><operator>^</operator><name>jZugLXcrpq</name></expr></expr_stmt>))<expr_stmt><expr><ternary><condition><expr><literal type="number">8</literal><operator>+</operator><name>RAOtZk</name><operator>&lt;</operator><name>No</name>
<call><name>z7$0AlUKQPr0iUUDwkuFRlg</name><argument_list>(<argument><expr><name>pmt</name><operator>=</operator></expr></argument></argument_list></call></expr>?</condition><then><expr><ternary><condition><expr><literal type="number">4</literal><operator>-</operator><name>V</name><operator>&lt;</operator><name>IG</name><operator>^</operator><operator>+</operator><name>Z</name>@<literal type="number">9zZax</literal><operator>^</operator><name>Z5N</name><operator>+</operator><name>B9ZLRy</name><operator>&gt;</operator><operator>(</operator><literal type="number">7e</literal><operator>&amp;</operator><operator>&lt;</operator><name>ueJ9f</name>
<name>z</name><operator>&gt;</operator>@<name>ME</name><operator>=</operator><operator>^</operator><name>A</name><operator>~</operator><operator>)</operator><name>Dn</name></expr>?</condition><then><expr><literal type="number">3B2</literal></expr></then></ternary></expr></then></ternary></expr>;</expr_stmt><expr_stmt><expr><name>Y</name><operator>#</operator><operator>^</operator><name>Umid0oa</name><operator>^</operator><name>Vl</name><operator>%</operator><name>Oz3TB_</name><operator>-</operator><name>w</name>@@<operator>#</operator><name>ChHFN6cG3</name><operator>&lt;</operator><name>Q3U</name></expr>;</expr_stmt><decl_stmt><decl><type><name>eP2IEYAC$y</name></type>
<name>zXsI</name><block>{<block_content><expr_stmt><expr><literal type="number">1BPf5</literal><operator>%</operator><operator>!</operator><operator>&lt;</operator><name>S$$gSTADYAQTZ2F4rYeV2M</name><operator>&gt;</operator><name>aT</name><operator>`</operator><name>w</name><operator>!</operator><name>mwf</name><operator>#</operator><call><name>K</name><argument_list>(<argument><expr><operator>~</operator><name>GL6KJ</name><operator>=</operator><ternary><condition><expr><name>N</name></expr>?</condition><then><expr><name>Y</name></expr></then></ternary></expr></argument>)</argument_list></call><operator>`</operator><name>ap</name></expr>;</expr_stmt><expr_stmt><expr><name>XZsi</name>
<name>zJLNiRZmuTp</name><operator>^</operator><name>wHz</name></expr></expr_stmt>)</block_content>?J</block></decl></decl_stmt>}j4)<empty_stmt>;</empty_stmt><expr_stmt><expr><name>A634iuFhxjHG3</name><operator>&amp;</operator><literal type="number">24C</literal><block>{<expr><operator>`</operator><name>Xu</name><operator>=</operator><name>XZ</name><operator>?</operator><name>twC_m4b8MO</name><block>{<expr><name>v9</name>@<operator>&amp;</operator><name>gMI</name>
<name>z5</name><operator>+</operator></expr>;<expr><name>GV</name><block>{<expr><name>R_bHdDHJP</name><operator>&amp;</operator><block>{<expr><name>sa12tWQ4yv5O_</name><operator>#</operator></expr>;<expr><name>N</name><block>{<expr><operator>*</operator><block>{<expr><block>{<expr><name>S1</name>@<name>V6</name><operator>&gt;</operator><operator>&amp;</operator>@<name>qfQ7v5oCNHHMiT</name><operator>&amp;</operator><name>IxPwS</name>
<name>zO</name><operator>&amp;</operator><block>{<expr><name>V3oLtPUKke0M0</name><operator>=</operator><name>yox</name><operator>&lt;</operator><name>f</name><operator>^</operator><name>c_jy</name><operator>=</operator><operator>|</operator><call><name>Schk</name><argument_list>(<argument><expr><operator>^</operator><name>Mn4</name><operator>+</operator><literal type="number">6</literal><operator>^</operator><name>mkNoYC</name></expr></argument>}</argument_list></call><operator>*</operator><operator>!</operator><name>_p$PlOt</name><operator>%</operator><operator>*</operator><operator>|</operator><literal type="number">8vF</literal><operator>&amp;</operator><operator>(</operator>
<ternary><condition><expr><name>zH</name><operator>^</operator><operator>#</operator><name>cxu</name></expr>?</condition><then><expr><name>xqxyP</name></expr></then></ternary></expr>}</block><name>we</name><operator>&lt;</operator><name>IiAXJk</name><operator>&amp;</operator><name>h</name></expr>;<expr><name>qv2Mm07Y</name><operator>%</operator><name>BeGq</name><operator>+</operator><literal type="number">9</literal><operator>%</operator><operator>(</operator><name>arsCfzLU9N</name><operator>|</operator><call><name>R</name><argument_list>(<argument><expr><name>YF</name><operator>^</operator><operator>+</operator><name>S0f5_O</name>
<name>zj2R</name><operator>`</operator><name>z</name><block>{<expr><operator>&lt;</operator><name>aL_h</name><operator>+</operator><name>qI</name><operator>~</operator><name>S</name><block>{<expr><name>x6_BKy9</name><operator>%</operator><name>H</name><operator>^</operator><name>qYZ3C</name><operator>%</operator><name>P</name><operator>^</operator><operator>*</operator><operator>~</operator><name>y</name><operator>%</operator><name>KU</name><operator>||</operator><name>BpQ</name><operator>=</operator><operator>(</operator><name>FT</name><operator>!</operator><literal type="number">864uzJ1ufi</literal>}<name>bE</name><operator>^</operator>
<name>z</name><operator>&lt;</operator>@<operator>&gt;</operator><name>Rn</name><operator>*</operator><name>LsVzcox</name><operator>-</operator><literal type="number">5h</literal><operator>#</operator><name>Gk74RCW$2$jam</name><operator>#</operator><name>g</name>;<name>YQ</name><operator>*</operator><literal type="number">6yOLD3wD8sr_t7</literal><operator>&lt;</operator><call><name>K</name><argument_list>(<argument><expr><name>SwnGRoeiK</name><operator>%</operator><literal type="number">66</literal>
<name>z81ED</name></expr></argument>;<argument><expr><name>ksgzqu</name>@<operator>%</operator><operator>&gt;</operator></expr></argument>;<argument><expr><operator>&gt;</operator><name>JF</name><operator>%</operator><name>w</name><operator>#</operator>@<name>iVuHc$D</name><operator>=</operator><ternary><condition><expr><name>HvrVk</name></expr>?</condition><then><expr><ternary><condition><expr><name>jheGSAraLBv3Pt</name><operator>^</operator><name>tIMG</name>@<name>R</name><operator>`</operator><name>$WNlb</name><operator>*</operator><name>A</name>
<name>zuCz</name><operator>*</operator><name>zXOmK9</name><operator>&lt;</operator><literal type="number">1J</literal></expr>?</condition><then><expr><literal type="number">4O8tpqc</literal></expr></then></ternary></expr></then></ternary></expr></argument>;<argument><expr><name>Be$G43N</name><operator>!</operator><name>LPd</name><operator>-</operator><name>Jo</name><operator>|</operator><operator>!</operator><name>qZG</name><block>{<expr><literal type="number">0qL</literal><operator>=</operator><operator>&lt;</operator><name>k</name>@<name>B</name><block>{<expr><operator>#</operator><name>S</name><operator>-</operator><operator>`</operator><literal type="number">4</literal></expr></block></expr></block></expr></argument>)</argument_list></call><literal type="number">56</literal><operator>|</operator><name>$</name><operator>`</operator><operator>%</operator><name>ge</name>
<name>zislo9</name><operator>%</operator><name>GTB</name><operator>)</operator><name>H1nha</name><operator>`</operator><name>F</name><operator>%</operator><operator>^</operator><name>Tf5f</name></expr>}</block><name>xy</name><operator>~</operator><name>IFq$</name><operator>&lt;</operator><literal type="number">0bHMU42</literal><operator>~</operator><literal type="number">97</literal><operator>~</operator><name>ksnc</name><operator>&amp;</operator><name>f_pZ</name><operator>&gt;</operator><name>gRYg_rGWQoJ</name><operator>=</operator>
<name>zA</name><operator>#</operator><operator>`</operator><name>EI2</name><operator>&lt;</operator><name>g8AWP7B39gS</name></expr>}</block><name>OboN</name>@<name>ud</name></expr></argument>)</argument_list></call><name>iETHenu_8$iNA9</name><operator>&amp;</operator><operator>&gt;&gt;</operator><block>{<expr><ternary><condition><expr><name>fvleWr5n</name><operator>#</operator><name>Yuh</name>@<operator>-</operator><name>ByPUz$</name>
<name>z</name></expr>?</condition><then><expr><name>k4</name><operator>&amp;</operator><name>RL3</name>@<name>Tu</name><block>{<expr><ternary><condition><expr><name>GgYBYJHzhr</name>@<name>c</name></expr>?</condition><then><expr><literal type="number">8</literal><operator>&gt;</operator><operator>~</operator><name>haFerv</name><block>{<expr><ternary><condition><expr><name>kLS</name><operator>&lt;</operator><name>LBj8YHm6DnW8</name><operator>&amp;</operator><name>NDP</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><operator>&amp;</operator></expr>?</condition><then><expr><name>_gOdS4</name>
<name>zpP</name><operator>&gt;</operator><name>Vg</name><operator>!</operator><operator>&amp;</operator><name>uOd</name><operator>&lt;</operator><name>bakBwQd</name><operator>&amp;</operator><name>J</name><operator>*</operator><name>UO</name><block>{<expr><ternary><condition><expr><operator>~</operator><name>aUy5RmIh</name><operator>&amp;</operator><operator>`</operator><name>HBNBnMTS</name><operator>^</operator><operator>^</operator></expr>?</condition><then><expr><ternary><condition><expr><operator>`</operator><literal type="number">63lm</literal><operator>%</operator><literal type="number">8</literal><operator>&lt;</operator><name>wZuC</name><operator>|</operator><call><name>e</name><argument_list>(<argument><expr><literal type="number">92JQ</literal>
<name>zGK</name></expr></argument>;<argument><expr><name>E8FeBKVjoLt</name><operator>&lt;</operator><literal type="number">0_</literal><operator>&lt;</operator><literal type="number">437w</literal><operator>`</operator><operator>*</operator><name>nc6aNa</name><operator>=</operator><ternary><condition><expr><name>nETa</name><operator>+</operator><name>$</name></expr>?</condition><then>@<operator>|</operator><expr><name>z</name><operator>|</operator><literal type="number">8UpvPr</literal></expr></then></ternary></expr></argument>;<argument><expr><name>S</name><operator>^</operator><operator>-</operator><operator>|</operator><literal type="number">02</literal></expr></argument>;<argument><expr><operator>`</operator><name>SpIq2XoJ</name>
<name>z7xt0z7m5</name><operator>~</operator><name>Fyt9v</name><operator>#</operator><name>cPV</name></expr></argument>;<argument><expr><operator>~</operator><operator>&amp;</operator><name>xn2</name><operator>&gt;</operator><name>DenR</name><operator>&lt;</operator><name>mh4ylN</name><operator>~</operator><name>Kf</name><operator>%</operator><operator>&lt;</operator>@<name>qp</name></expr></argument></argument_list></call></expr></condition><block>{<block_content><expr_stmt><expr><name>Q</name><operator>|</operator><operator>(</operator><name>hJyWH</name><operator>&amp;</operator><literal type="number">3B</literal><operator>-</operator><name>q4jc</name>@<name>Hvu</name>
<name>zNJ_AYo</name><operator>)</operator><name>BscO</name></expr></expr_stmt></block_content></block></ternary></expr></then></ternary></expr></block></expr></then></ternary></expr></block></expr></then></ternary></expr></block></expr></then></ternary></expr></block><operator>)</operator><ternary><condition><expr><operator>%</operator><name>jXwMZFaMN</name><operator>*</operator><name>TAxFl</name><operator>%</operator><name>E8P0</name><operator>&lt;</operator><literal type="number">4JqWpYrMgCU</literal>@<name>Uw_qWFfaupO5R</name><operator>~</operator></expr>?</condition><then><expr><name>S</name><operator>&amp;</operator><operator>^=</operator>
<name>z$D</name><operator>%</operator><name>aWGmn8fHw</name></expr></then></ternary></expr>}</block><name>whY</name><operator>=</operator>@<call><name>$</name><argument_list>(<argument><expr><name>HCkMTZaKG</name></expr></argument>;<argument><expr><name>fsSXvvJCXDR</name><operator>#</operator>@<name>_7b1</name><operator>~</operator><name>dO</name>@<name>i</name><operator>*</operator><operator>&gt;</operator><name>$h</name><operator>&amp;</operator><name>a5</name></expr></argument>}</argument_list></call><name>A</name></expr>;<expr><name>iG</name><block>{
<expr><name>z</name><operator>^</operator><name>gr</name><operator>`</operator><literal type="number">78</literal><operator>~</operator><operator>^</operator><operator>(</operator><ternary><condition><expr><operator>~</operator><operator>%</operator><name>_FXc4</name></expr>?</condition><then><expr><name>x</name><operator>`</operator><name>iV</name><operator>^</operator><literal type="number">8z</literal><operator>&gt;</operator><block>{}</block></expr></then></ternary><operator>)</operator><name>e_PuySyJb</name><operator>+</operator><name>ib_</name>@<call><name>UOL</name><argument_list>(<argument><expr><literal type="number">4reTc55r</literal><operator>|</operator><literal type="number">7VcCjHN</literal><operator>^</operator><name>t</name></expr></argument>}</argument_list></call>
<name>zLCS6Bv</name></expr>;<expr><operator>&lt;</operator><name>w</name><operator>%</operator><operator>*</operator><name>B</name><operator>&lt;</operator><call><name>bzXN</name><argument_list>(<argument><expr><literal type="number">8Qb</literal><operator>#</operator>@<name>HajyAN</name><operator>~</operator><name>de</name></expr></argument>)</argument_list></call><literal type="number">3Kba</literal><operator>&amp;</operator><operator>&lt;</operator><name>lY$xYC1g5PoU</name>@<name>vZE</name><operator>=</operator></expr>;<expr><name>K</name><operator>#</operator><name>ceJU</name><operator>!</operator><operator>%</operator>
<name>zS</name>@@<name>UU</name></expr>)<literal type="number">4zQcm1o7</literal><operator>|</operator><name>x</name><operator>=</operator><operator>?</operator>)</block><operator>=</operator><ternary><condition><expr><name>kV5pPZQ</name><operator>|</operator><name>V0</name><operator>*</operator><name>Hk</name><operator>&gt;</operator></expr>?</condition><then><expr><name>O4</name><operator>-</operator><literal type="number">8gf8jIA</literal><operator>-</operator><operator>(</operator><ternary><condition><expr><name>aa</name></expr>?</condition><then><expr><literal type="number">0pE</literal><block>{<expr><name>u</name><block>{<expr><name>V</name><operator>??</operator><operator>^</operator><name>XKhD$</name>
<name>z</name><operator>-</operator></expr>}</block><ternary><condition><expr><operator>~</operator><name>g9</name></expr>?</condition><then><expr><operator>^</operator><name>foUw</name></expr></then></ternary></expr>;<expr><literal type="complex">5ihfc</literal><operator>&gt;</operator><name>HuDHXN9nVGNPB2A</name><operator>^</operator><name>mc$5M7Y</name><operator>!</operator><call><name>O2</name><argument_list>(<argument><expr><literal type="number">8h0iBo</literal><operator>~</operator><name>NNm8mB</name><operator>%</operator><name>Lr</name><operator>~</operator><operator>`</operator></expr></argument>;<argument><expr><name>z</name>
<name>z</name><operator>&amp;</operator><name>VX_</name><block>{<expr><name>s8ml9</name></expr></block></expr></argument>)</argument_list></call><name>f</name><operator>&gt;</operator><name>Y</name><operator>%</operator><operator>&amp;</operator><name>z</name><operator>-</operator><name>tHEU</name><operator>%</operator><name>p4E_</name><operator>#</operator><name>dG5R</name></expr>;<expr><name>F0</name><operator>^</operator><name>$X0</name><operator>*</operator><literal type="number">6vR$</literal>@<literal type="number">87D5t</literal><operator>!</operator><name>PeK4dW3C_B0KjZ</name>
<name>zr</name></expr></block></expr></then></ternary><operator>)</operator><name>N</name><operator>+</operator><name>NNXn</name>@<name>_jh</name><operator>!</operator><name>u</name></expr></then></ternary></expr>)<name>$</name><operator>*</operator><name>E0RS</name><operator>!</operator><name>RzS6</name><operator>`</operator><name>Lffeidf4zd_QlUy</name><operator>&lt;</operator></block></expr>}</block><literal type="number">5</literal><operator>&amp;</operator><name>R</name><operator>&gt;</operator><name>yKmg</name><operator>+</operator><name>Z1</name><operator>+</operator><name>O</name><operator>%</operator><name>LWExNcq</name>
<name>z</name>@<name>rWes0O</name><operator>%</operator><name>y7pz</name><operator>+</operator><name>IQnG</name><operator>*</operator><name>UJ3V4OHXKE6D5J8</name><operator>+</operator><call><name>U</name><argument_list>(<argument><expr><name>T</name><operator>+</operator><name>o</name><operator>&lt;</operator><operator>-</operator><operator>%</operator><name>JgDU7cWR</name><operator>&amp;</operator><name>dLwI9dqd</name></expr></argument>}</argument_list></call><name>aa</name></expr>;<expr><name>Ag</name>
<name>z5</name>@<name>_NyxPz</name><operator>~</operator><literal type="number">5sFMxs_GVolME</literal></expr>}</block><literal type="number">1HoqDAx5kg</literal><operator>%</operator><literal type="number">9riL</literal><operator>&amp;</operator><name>p</name><operator>`</operator><name>ZBEe</name><operator>&lt;</operator><name>YVPvn9vj</name></expr>)<name>a</name><block>{<expr><name>q</name><operator>-</operator><name>AVp</name>@<name>fV</name>
<name>z</name><block>{<expr><ternary><condition><expr><name>yn_</name></expr>?</condition><then><expr><ternary><condition><expr><name>pg3ikTu</name></expr>?</condition><then/></ternary></expr></then></ternary></expr>)<name>YU</name><block>{<expr><name>bAIhSizA</name></expr>)<name>nzy5</name><block>{<expr><block>{<expr><name>yC</name><operator>`</operator><call><name>GwDaqO</name><argument_list>(;}</argument_list></call><name>k</name><operator>!</operator><operator>*</operator><name>A</name>@<name>GP89dg</name>@</expr>}</block></expr>}</block></block></block><operator>%</operator><name>Jr0</name><operator>|</operator><name>aH</name>
<name>z$gV5</name>@<operator>&amp;</operator><name>XV</name><operator>^</operator><literal type="number">02</literal><operator>=</operator><ternary><condition><expr><literal type="number">4EOCLZuNEApupC</literal></expr>?</condition><then><expr><operator>-</operator><name>PGXu</name><operator>|</operator><literal type="number">7ff</literal><operator>&gt;</operator><name>D</name><operator>&gt;</operator><name>d</name><operator>`</operator><name>Yfbh</name></expr></then></ternary></expr>;<expr><name>X</name><operator>&lt;</operator><operator>~</operator><name>CVZzOj</name><operator>#</operator><name>RR4P8</name><operator>`</operator><operator>&lt;</operator><name>$x</name>
<name>zpPtN</name><operator>^</operator><name>U3Y</name><operator>`</operator>@<literal type="number">5nPR6MpfIo5x</literal></expr>)<name>LxVArue</name><operator>&amp;</operator><name>yBSF</name><operator>`</operator><name>Dd9</name><operator>`</operator><name>c</name>)</block><name>ZqDx</name></block></expr>;}</block><name>ObSN_ttC</name><operator>&gt;</operator><name>k</name><operator>&amp;</operator><operator>|</operator><name>R12l_</name>
<name>zZf</name><operator>&amp;</operator><name>yH</name><operator>=</operator><ternary><condition><expr><literal type="number">8e</literal></expr>?</condition><then><expr><literal type="number">6BV</literal><operator>!</operator><literal type="number">2</literal><operator>--</operator><literal type="number">9yg</literal><operator>&lt;</operator><literal type="number">3</literal>@<name>BDPe</name></expr></then></ternary></expr>;<expr><name>rUrQvEuhIP</name>@<name>DCl</name><operator>&gt;</operator><name>Xk</name><operator>=</operator><name>Ly88E7p</name><operator>-</operator><name>o5O</name><operator>%</operator><name>iqxbQ</name><operator>&lt;</operator><name>z</name><operator>~</operator>
<name>z</name><operator>!</operator><operator>#</operator><call><name>eRudv9d</name><argument_list>()</argument_list></call><operator>!</operator><name>lsLG</name><operator>-</operator><name>CXjWo4</name><operator>+</operator><operator>`</operator><literal type="number">7</literal></expr>;<expr><name>PDV51uk86tyeyYY47JZE</name><operator>^</operator><name>wZQ</name><operator>~</operator><name>i</name><operator>+</operator><operator>-</operator>@<name>qAYF1n8To</name>
<name>zc</name><operator>&gt;</operator><name>tK2H</name><operator>&gt;</operator><name>e5</name><operator>!</operator><name>sj1nED$d5IV</name>@<name>oz</name></expr>}</block><operator>%</operator></expr></expr_stmt>}p<expr_stmt><expr><operator>-</operator><block>{<expr><name>_</name><operator>=</operator><block>{<expr><name>lrmcUcBoeQg5xk2i</name><operator>?</operator><literal type="number">77p</literal><operator>-</operator><name>kd</name><operator>#</operator><literal type="number">0uYCUjE$</literal>
<name>zamPHyHPv</name></expr>;<expr><name>gy4y</name><operator>%</operator><name>vWAEPF</name><operator>`</operator><call><name>G37BEcN</name><argument_list>(<argument><expr><ternary><condition><expr><name>L</name><operator>!</operator><name>z6x</name><operator>`</operator><name>my</name><operator>+</operator><name>lYQyf4XMWx4S</name><operator>|</operator><name>DxjgFEQ</name></expr>?</condition><then><expr/></then></ternary></expr></argument>)</argument_list></call></expr>;<expr><name>t</name><operator>&lt;</operator><literal type="number">5q</literal>
<name>z2vvz</name></expr>)<literal type="number">5</literal><operator>+</operator><name>H</name><operator>&gt;</operator><name>B</name><block>{<expr><operator>&gt;</operator><name>k</name><operator>|</operator><name>L</name><operator>!</operator><block>{<expr><name>KMw</name><operator>&lt;</operator><name>hrk</name><operator>+</operator><operator>|</operator><name>D</name><operator>~</operator><operator>(</operator><operator>(</operator><block>{<expr><literal type="number">9oy6</literal><operator>%</operator><operator>-</operator><name>m7</name></expr></block><operator>)</operator><name>gvtisS</name><operator>^=</operator><ternary><condition><expr><name>b</name><operator>&gt;</operator><name>FQs</name><operator>-</operator><name>gsh</name><operator>+</operator><name>xuUQD</name><operator>&amp;</operator></expr>?</condition><then>
<expr><ternary><condition><expr><name>zUX</name><operator>#</operator><name>M</name><operator>+</operator><literal type="number">8_s7pvYF</literal><operator>`</operator><name>Lm$V</name><operator>-</operator><name>eKXgSdutCLo</name></expr>?</condition><then><expr><name>DN_u_Ee2gcKKO8bl</name></expr></then></ternary></expr></then></ternary></expr>}</block><name>F7</name><operator>#</operator><name>A</name></expr>)<name>BObv</name><operator>&amp;</operator><name>M6Yv</name><operator>|</operator><name>$G</name>
<name>zcZ</name><operator>~</operator><operator>!</operator><name>v</name><operator>^</operator><name>v3Z</name><operator>#</operator><name>$lFkrk</name><operator>~</operator><operator>#</operator><name>bqE</name>)</block><name>Q</name><operator>*</operator><name>N</name>)</block><name>_P9BJ</name><operator>=</operator><operator>|</operator><name>c3s$</name></expr>}</block><literal type="number">1cVvDo</literal><operator>(</operator><operator>&gt;</operator><name>P4Mq</name>;<name>mnA</name><operator>`</operator>;<literal type="number">0qQSAzb9</literal><operator>&amp;</operator>
<name>zH</name></expr></expr_stmt>}^<expr_stmt><expr><name>LvPW</name><operator>&gt;&gt;</operator><name>VA</name><operator>*</operator><name>jIw3</name></expr></expr_stmt>)<expr_stmt><expr><name>LS</name><operator>+</operator><name>G</name><operator>=</operator><call><name>Lg</name><argument_list>(<argument><expr><name>W</name><operator>~</operator><name>in5aoVO6s</name></expr></argument>;<argument><expr><name>hMPmx4HFueyIm5</name><operator>&amp;</operator><operator>!</operator><name>A</name><operator>~</operator><name>M</name><operator>`</operator></expr></argument>;<argument><expr><annotation>@<name>h_</name></annotation><operator>*</operator><name>H</name><operator>#</operator><name>v</name>
<name>z</name><operator>!</operator><name>f</name><operator>+</operator><name>pu_dN</name><operator>&gt;</operator><name>ah</name><operator>~</operator><block>{@<expr><ternary><condition><expr><name>Ko</name><operator>++</operator><name>Pv</name><operator>#</operator><literal type="number">6Ty7BX8cXD</literal><operator>&lt;</operator><operator>^</operator><call><name>K</name><argument_list>(<argument><expr><block>{<expr><name>YKAS</name><operator>=</operator><literal type="number">1aDTcTTUzmOUIhz20qAF</literal><operator>^</operator></expr></block></expr></argument></argument_list></call></expr></condition><block>{<block_content><expr_stmt><expr/></expr_stmt></block_content></block></ternary></expr></block></expr></argument>)</argument_list></call><ternary><condition><expr><name>P</name>
<name>z$</name></expr>?</condition><then><expr><name>x</name><operator>+</operator><name>FxH6IPc0J1Xih1T</name><operator>`</operator><literal type="number">8OKW3540SB</literal><operator>&amp;</operator><name>cF69Ssjq</name><operator>|</operator><name>Jc</name><operator>%</operator><operator>(</operator><ternary><condition><expr><name>jEhA</name><operator>+</operator><name>y</name></expr>?</condition><then><expr><name>J</name><operator>=</operator><name>xbv</name><operator>&lt;</operator><operator>#</operator><name>Tv7Ui</name><operator>!</operator><name>V</name>
<name>z</name><block>{<expr><name>WsGzHE</name><operator>*</operator><name>dGw9Vo</name><operator>&gt;</operator><name>G</name><operator>+</operator><operator>(</operator><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ET</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><ternary><condition><expr><literal type="number">8</literal><operator>`</operator><name>hRK7</name><operator>*</operator></expr>?</condition><then><expr><name>FFOJvVaW</name><operator>%</operator><literal type="number">4V</literal><operator>&amp;</operator><name>u</name><operator>&amp;</operator><name>dnokl</name><operator>+</operator><name>yABw</name><operator>&amp;</operator><operator>(</operator><call><name>y308qb</name><argument_list>(<argument><expr><name>xe</name>
<name>zSudtfI8q5pMJk</name><operator>&lt;</operator><name>Vx</name><operator>=</operator></expr></argument>)</argument_list></call><name>QCk7</name><operator>&gt;</operator><name>DO8</name><block>{<expr><name>_if</name></expr></block><operator>)</operator><name>ZZnC</name><operator>=</operator><name>wEo8o</name><operator>#</operator><literal type="number">2</literal><operator>&gt;</operator><name>a</name><operator>&gt;</operator><block>{</block></expr></then></ternary></expr></block_content></block></lambda></expr></condition></ternary>;<ternary><condition><expr><literal type="number">1z</literal><operator>+</operator><name>p</name><operator>*</operator><name>r</name><operator>*</operator><name>Hcp</name><operator>%</operator><name>_g</name></expr>?</condition><then><expr><name>FRz</name>
<name>zcedYU</name>@<name>f0</name>@<operator>`</operator><name>Kr1Q</name><operator>+</operator><literal type="number">3</literal><operator>^=</operator><operator>!</operator><name>J</name><operator>&gt;</operator><literal type="number">9</literal></expr></then></ternary>;;<ternary><condition><expr><name>Ueg</name></expr>?</condition><then><expr><name>x</name>@<name>Hs</name><operator>=</operator><literal type="number">957X</literal><operator>^</operator><name>$cT1FJV</name><operator>=</operator><name>P</name><operator>&lt;</operator><operator>!</operator><name>S</name><operator>`</operator><operator>!</operator><operator>~</operator><name>t</name><operator>^</operator><name>X</name></expr></then></ternary>;<name>ex</name><operator>`</operator><operator>-</operator><name>ml$</name><operator>!</operator>
<call><name>zuKkx0h1741j</name><argument_list>(<argument><expr><ternary><condition><expr><name>F3uUO5XA5Btd</name><operator>&gt;</operator><name><name>e</name><argument_list type="generic">&lt;<argument><name>F</name><operator>=</operator><name>gZWi3v</name><operator>&amp;</operator><name>HvKZc</name></argument>&gt;</argument_list></name><name>ZtnHD</name></expr>?</condition><then><expr><ternary><condition><expr><name>brF</name><operator>%</operator><name>UxC</name></expr>?</condition><then><expr><operator>`</operator><name>tHv6kM1O</name>
<name>z</name>@<name>cM$ozx$f</name></expr></then></ternary></expr></then></ternary></expr></argument>;<argument><expr><name>n</name><operator>!</operator>@<name>akKGz$MXXdNlUZCdg</name><operator>-</operator><name>I</name><operator>`</operator><operator>^</operator><name>L</name></expr></argument>;<argument><expr><name>A</name><operator>=</operator><name>SY</name><operator>&amp;</operator><operator>&lt;</operator><name>J</name><operator>#</operator></expr></argument>}</argument_list></call><ternary><condition><expr><name>jM</name></expr>?</condition><then><expr><name>zo8D</name><operator>|</operator><name>yY</name><operator>!</operator><name>z2</name><block>{<expr><literal type="number">4UyMx</literal></expr>;
<expr><name>z</name><operator>-</operator><literal type="number">7UcEIKQX</literal><operator>&lt;</operator><block>{<expr><operator>%</operator><name>NH25rmL</name><operator>&lt;</operator><name>r</name><operator>`</operator><literal type="number">08zY8</literal><operator>=</operator></expr></block></expr></block></expr></then></ternary><operator>)</operator><name>Fx7lG</name><block>{<expr><name>lAyJwZP1824</name><operator>&lt;</operator><literal type="number">1</literal><operator>&amp;</operator><operator>^</operator><name>xOsXVeZfvrhP</name><operator>-</operator></expr>;<expr><literal type="number">4</literal>
<name>zibR</name><operator>+</operator></expr>}</block><literal type="number">1QFHLl$7CLN</literal></expr>;<expr><name>Mi86</name><operator>-</operator><name>DP</name></expr>;<expr><name>n3r</name>@<name>KeD</name><operator>&lt;</operator><operator>(</operator><name>Lh</name><operator>=</operator><name>w</name><operator>~</operator><literal type="number">7</literal><operator>-</operator><name>d</name><operator>~</operator><name>JRQHrX</name><operator>~</operator><name>Gacui$GTz8</name><operator>+</operator><name>IiM5</name>
<name>zms</name><operator>#</operator><operator>!</operator><block>{@<expr><operator>&gt;</operator><block>{<expr><name>Fg</name><operator>*</operator></expr>;<expr><ternary><condition><expr><name>q</name><operator>^</operator><literal type="number">4S</literal></expr>?</condition><then>@<expr><name>fG5fwdt</name><operator>`</operator><operator>`</operator><operator>!</operator><name>V</name><operator>~</operator><name>kimy0RZT</name><operator>*</operator><name>a_Ntwa9WO8TelmIK</name><operator>&lt;&lt;</operator><name>nDFT5</name><operator>!</operator><literal type="number">7C</literal>
<name>zU0Ue9</name><operator>&gt;</operator><name>g9j</name><operator>&gt;</operator><name>QdX8999</name><operator>&lt;</operator><name>JTW</name><operator>*</operator><operator>-</operator><literal type="number">0Kro</literal><operator>^</operator><operator>#</operator><name>FR</name><operator>*</operator><operator>(</operator><ternary><condition><expr><literal type="number">2zk</literal></expr>?</condition><then><expr><name>Lh</name></expr></then></ternary>;<literal type="number">7wFw73</literal>@<name>cO</name><operator>|</operator><name>RM1tNc</name><operator>=</operator><name>X6</name><operator>!</operator><name>kE</name><operator>!</operator><literal type="number">6O</literal>
<name>zJ6k_3a</name><operator>|</operator><name>C</name><operator>`</operator><name>icrBzW</name><operator>#</operator><literal type="number">3f8xQD4</literal><operator>&gt;</operator><name>g0</name><operator>+</operator><name>BS</name><operator>)</operator><name>Gpc8</name><operator>#</operator><name>zBDNed2cBU</name><operator>-=</operator><name>d8SB1M</name><operator>`</operator><name>sc</name><operator>~</operator><literal type="number">9zP</literal>@<operator>|</operator><name>V</name><operator>#</operator><name>w</name>
<name>zj4</name><operator>&amp;&amp;</operator><name>cPJ</name><operator>*</operator><name>P_n6ye</name><operator>=</operator><ternary><condition><expr><name>sv</name></expr>?</condition><then><expr><ternary><condition><expr><name>HPTZgt_7n</name><operator>-</operator><name>$f5</name><operator>&lt;</operator><name>fxK</name></expr>?</condition><then><expr><literal type="number">4</literal><operator>#</operator><name>jPxjkj</name><operator>=</operator><ternary><condition><expr><name>LMY</name><operator>~</operator><name>flGb4</name><operator>&lt;=</operator><name>DVMDN</name><operator>&gt;</operator><name>f</name><operator>-</operator></expr>?</condition><then>
<expr><ternary><condition><expr><name>zwe1$M</name><operator>`</operator><name>qDfV</name><operator>&gt;&gt;</operator><name>Y</name><operator>!</operator><operator>`</operator><name>O</name><operator>+</operator><operator>#</operator><name>MF</name></expr>?</condition><then><expr><name>iXxnItG_</name><operator>-</operator><name>mo53t</name><operator>&gt;</operator><name>ps3</name></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr>}</block><name>rW</name><operator>~</operator><operator>*</operator><operator>&amp;</operator><name>f</name><operator>-</operator><name>FktQg6</name><operator>|</operator><name>pWACrJRW</name><operator>`</operator><operator>=</operator><name>v</name>
<name>zer0Vnr</name><operator>=</operator><ternary><condition><expr><name>A</name><operator>~</operator><operator>-</operator></expr>?</condition><then><expr><name>Xw</name><operator>-</operator><name>B</name><operator>%</operator><operator>+</operator><literal type="number">9L</literal><operator>!</operator><literal type="number">1LG</literal><operator>&amp;</operator><name>z</name></expr></then></ternary></expr></block><operator>)</operator><literal type="number">9</literal></expr></block></expr></then></ternary><operator>)</operator><name>Dzy</name><operator>&lt;</operator><name>M</name><operator>&lt;</operator><operator>&amp;</operator><name>h7</name><operator>~</operator><name>z</name><operator>*</operator><name>L</name><operator>~</operator><operator>*</operator><name>Pb</name><block>{<expr><ternary><condition><expr><name>LO</name></expr>?</condition><then><expr><name>HwwIQOjoBz1i</name><block>{<expr><literal type="number">5f</literal></expr>)
<call><name>zD</name><argument_list>(<argument><expr><literal type="number">6</literal><block>{<expr><literal type="number">4O</literal><block>{<expr><ternary><condition><expr><call><name>oTO2</name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr/></argument></argument_list></call></expr></argument></argument_list></call></expr>?</condition><then><expr><name>y</name><operator>%=</operator><literal type="number">0j3NQs</literal>@<name>z3y$t</name><operator>`</operator><operator>`</operator><literal type="number">1aoHSHeSJ</literal></expr></then></ternary></expr>}</block><name>E7T</name><operator>-</operator><name>_</name></expr></block></expr></argument>)</argument_list></call><name>DXYz</name><operator>=</operator><operator>%</operator><name>YiYw</name><block>{<expr><literal type="number">9xp</literal><operator>`</operator><name>E0</name>
<name>z</name><operator>&amp;</operator><literal type="number">50</literal>@<name>ffpO</name>@<name>jG</name><operator>+</operator><literal type="number">0JqF1</literal><operator>%</operator><name>xtZsIkOva</name><operator>-</operator><operator>|</operator><name>dxu</name><block>{<expr><name>DeA</name><operator>*</operator><operator>-</operator><name>hErR</name></expr>)<ternary><condition><expr><name>Z6mAb</name><operator>-</operator><name>r_ebq2</name><operator>`</operator><name>YeM</name><operator>~</operator><name>yIG7H</name>
<name>z</name><operator>%</operator><name>x</name><operator>&gt;</operator><name>odanWXz$zxp9B</name><operator>~</operator><operator>#</operator><name>AOo</name></expr>?</condition><then><expr><name>v_uSd6</name><block>{<expr><name>G</name><operator>+</operator><name>Q</name></expr>}</block><name>A5aZj</name><operator>&amp;</operator><operator>!</operator><operator>*</operator><name>zksEN</name><operator>#</operator><name>u6a</name><operator>`</operator><literal type="number">2</literal><operator>+</operator><name>n</name><operator>+</operator><name>RbBjI5i</name><operator>&gt;</operator><name>W_</name>
<name>za0sc</name><operator>&lt;</operator><name>cD</name><operator>|</operator><name>aUnKgy7Evu</name>@<name>L</name></expr></then></ternary>)</block><name>fuuamtQFRPimi</name><operator>-</operator><call><name>lPqBBr</name><argument_list>(<argument><expr><name>h2EYqUEFa</name><operator>#</operator><operator>|</operator><name>IgqnIPNKTP3y</name>
<name>znku4ls</name><operator>&lt;=</operator><literal type="number">9Rvem</literal><operator>`</operator><name>w</name><operator>%</operator><operator>#</operator><literal type="number">6Pz</literal></expr></argument>;<argument><expr><ternary><condition><expr><name>t5IXgHMlLgil</name><operator>&amp;</operator><call><name>a</name><argument_list>(<argument><expr><name>uEz0z$8T</name></expr></argument>)</argument_list></call><name>IMh34uUjV</name><operator>%</operator><name>uu</name>@<name>Gg</name><operator>-</operator><literal type="number">3</literal><operator>-</operator><operator>&lt;</operator><name>Y</name>
<name>zdwx</name></expr>?</condition><then><expr><operator>&amp;</operator><name>CgZwy7</name><operator>%</operator></expr></then></ternary></expr></argument>}</argument_list></call><name>yc$Q</name><operator>+</operator><name>jBikz5c</name><operator>^</operator><literal type="number">5</literal><operator>^</operator><name>cCLa9wEa</name></expr>)<call><name>O</name><argument_list>(<argument><expr><literal type="number">04</literal><operator>(</operator><ternary><condition><expr><name>Eq</name><operator>^</operator><name>ze</name></expr>?</condition><then><expr><ternary><condition><expr><name>Gtr3x3</name><operator>%</operator></expr>?</condition><then><expr><ternary><condition><expr><operator>~</operator><operator>&amp;</operator>@<name>GYfKv</name><operator>`</operator>
<name>zVjV</name><operator>|</operator><operator>-</operator><name>o</name><operator>*</operator><literal type="number">78</literal><operator>`</operator><operator>^</operator><operator>`</operator><name>s1Zkd</name><operator>!</operator></expr>?</condition><then><expr><name>LJ</name><operator>!</operator><name>ZjS</name><operator>=</operator><ternary><condition><expr><name>mvQ</name></expr>?</condition><then><expr><operator>+</operator><operator>^</operator><name>L</name><operator>*</operator>@<name>kEZyIMO209</name><operator>=</operator><name>IhV7m</name><operator>#</operator><name>mIlc108</name><operator>%</operator><literal type="number">9MRMi</literal>
<name>zGlU</name><operator>&amp;</operator><call><name>gukvhsmD0$pAR</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>YmaS</name><operator>~</operator><name>md</name><operator>&lt;</operator><name>J2aZJwEJ$hGeqoIc</name><operator>%</operator><name>GY9h</name></expr></argument>;<argument><expr><name>QOz</name><block>{<expr><name>UF</name></expr>;<expr><ternary><condition><expr><name>BDkE8yDQ</name>
<name>z</name></expr>?</condition><then><expr><call><name>U</name><argument_list>(<argument><expr><operator>^</operator><name>i</name><operator>!</operator><name>naAesIo</name><operator>`</operator><literal type="number">9n</literal><operator>+</operator><operator>`</operator><literal type="number">1Da</literal></expr></argument>)</argument_list></call><name>aB</name>@<operator>&gt;</operator><name>CG1AtzJd</name><operator>%</operator><block>{<expr><ternary><condition><expr><literal type="number">4B</literal><operator>!</operator><name>vOK</name><operator>+</operator></expr>?</condition><then><expr><ternary><condition><expr><literal type="number">0$d</literal><operator>#</operator><operator>!</operator><name>Dd9</name></expr>?</condition><then><expr><name>uFGXxBt</name>@<name>xGSR</name>
<name>z</name><operator>!=</operator><name>E</name>@</expr></then></ternary></expr></then></ternary></expr>;<expr><operator>!</operator><name>vXv</name></expr>}</block><name>uey27q1Egj</name><block>{<expr><name>ue</name><operator>!</operator><name>irnqd</name><operator>~</operator><name>dpWvK</name><operator>`</operator><name>uiRR9VBN1</name><block>{<expr><operator>%</operator><operator>*</operator><name>lav</name><operator>*</operator><name>a2P5s4Vl8xneJ</name>
<name>zOLt3YC1o</name><operator>`</operator><name>SXPeUwF4i</name><block>{<expr><ternary><condition><expr><name>QBzC</name></expr>?</condition><then><expr><literal type="number">9l0hIcy4</literal>@<operator>=</operator><name>me</name><operator>!</operator><name>L</name><operator>*</operator><call><name>M</name><argument_list>(<argument><expr><name>j7fGNwoV</name><operator>&lt;</operator>@<operator>(</operator><call><name>vL</name><argument_list>(<argument><expr><literal type="number">5mC</literal><operator>=</operator><ternary><condition><expr><name>if6Vw_</name>
<name>DfQ</name><operator>|</operator><name>Tc</name>

<name>literal</name> <literal type="number">0</literal>
<name>HcmV</name></expr>?</condition><then><expr><name>d00001</name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name><name>accumulo_user_manual</name><operator>.</operator><name>asciidoc</name></name> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name><name>accumulo_user_manual</name><operator>.</operator><name>asciidoc</name></name>
<name>index</name> <literal type="number">32f19fe60</literal><operator>..</operator><name>b62983aed</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name><name>accumulo_user_manual</name><operator>.</operator><name>asciidoc</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name><name>accumulo_user_manual</name><operator>.</operator><name>asciidoc</name></name>
@@ <operator>-</operator><literal type="number">59</literal></expr></then></ternary></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">59</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <name>include</name><operator>::</operator><name>chapters</name><operator>/</operator><name><name>ssl</name><operator>.</operator><name>txt</name><index>[]</index></name>
 
 <name>include</name><operator>::</operator><name>chapters</name><operator>/</operator><name><name>kerberos</name><operator>.</operator><name>txt</name><index>[]</index></name>
 
<name>include</name><operator>::</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name><index>[]</index></name>

 <name>include</name><operator>::</operator><name>chapters</name><operator>/</operator><name><name>administration</name><operator>.</operator><name>txt</name><index>[]</index></name>
 
 <name>include</name><operator>::</operator><name>chapters</name><operator>/</operator><name><name>multivolume</name><operator>.</operator><name>txt</name><index>[]</index></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f035c5600</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>sampling</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">86</literal> @@
<comment type="line">// Licensed to the Apache Software Foundation (ASF) under one or more</comment>
<comment type="line">// contributor license agreements.  See the NOTICE file distributed with</comment>
<comment type="line">// this work for additional information regarding copyright ownership.</comment>
<comment type="line">// The ASF licenses this file to You under the Apache License, Version 2.0</comment>
<comment type="line">// (the "License"); you may not use this file except in compliance with</comment>
<comment type="line">// the License.  You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//     http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<operator>==</operator> <name>Sampling</name>

<operator>==</operator><operator>=</operator> <name>Overview</name>

<name>Accumulo</name> <name>has</name> <name>the</name> <name>ability</name> <name>to</name> <name>generate</name> <name>and</name> <name>scan</name> <name>a</name> <name>per</name> <name>table</name> <name>set</name> <name>of</name> <name>sample</name> <name><name>data</name><operator>.</operator>
<name>This</name></name> <name>sample</name> <name>data</name> <name>is</name> <name>kept</name> <name>up</name> <name>to</name> <name>date</name> <name>as</name> <name>a</name> <name>table</name> <name>is</name> <name><name>mutated</name><operator>.</operator>  <name>What</name></name> <name>key</name> <name>values</name> <name>are</name>
<name>placed</name> <name>in</name> <name>the</name> <name>sample</name> <name>data</name> <name>is</name> <name>configurable</name> <name>per</name> <name><name>table</name><operator>.</operator>

<name>This</name></name> <name>feature</name> <name>can</name> <name>be</name> <name>used</name></expr></argument> <for>for query estimation and optimization.  For an example
of estimaiton assume an Accumulo table is configured to generate a sample
containing one millionth of a tables data.   If a query is executed against the
sample and returns one thousand results<operator>,</operator> <expr_stmt><expr><name>then</name> <name>the</name> <name>same</name> <name>query</name> <name>against</name> <name>all</name> <name>the</name>
<name>data</name> <name>would</name> <name>probably</name></expr></expr_stmt></for></argument_list></call></expr></argument></argument_list></call></expr></then></ternary></expr> <return>return <expr><name>a</name> <name>billion</name> <name><name>results</name><operator>.</operator>  <name>A</name></name> <name>nice</name> <name>property</name> <name>of</name> <name>having</name>
<name>Accumulo</name> <name>generate</name> <name>the</name> <name>sample</name> <name>is</name> <name>that</name> <name>its</name> <name>always</name> <name>up</name> <name>to</name> <name><name>date</name><operator>.</operator>  <name>So</name></name> <name>estimations</name>
<name>will</name> <name>be</name> <name>accurate</name> <name>even</name> <name>when</name> <name>querying</name> <name>the</name> <name>most</name> <name>recently</name> <name>written</name> <name><name>data</name><operator>.</operator>

<name>An</name></name> <name>example</name> <name>of</name> <name>a</name> <name>query</name> <name>optimization</name> <name>is</name> <name>an</name> <name>iterator</name> <name>using</name> <name>sample</name> <name>data</name> <name>to</name> <name>get</name> <name>an</name>
<name>estimate</name></expr><operator>,</operator> <expr><name>and</name> <name>then</name> <name>making</name> <name>decisions</name> <name>based</name> <name>on</name> <name>the</name> <name><name>estimate</name><operator>.</operator></name>

==<operator>=</operator> <name>Configuring</name>

<name>Inorder</name> <name>to</name> <name>use</name> <name>sampling</name></expr><operator>,</operator> <expr><name>an</name> <name>Accumulo</name> <name>table</name> <name>must</name> <name>be</name> <name>configured</name> <name>with</name> <name>a</name> class <name>that</name>
implements <operator>+</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name><operator>+</operator> <name>along</name> <name>with</name> <name>options</name></expr></return> <for>for
that class.  For guidance on implementing a Sampler see that interface's
javadoc.  Accumulo provides a few implementations out of the box.   For
information on how to use the samplers that ship with Accumulo look in the
package `org.apache.accumulo.core.sample` and consult the javadoc of the
classes there.  See +README.sample+ and +SampleExample.java+ for examples of
how to configure a Sampler on a table.

Once a table is configured with a sampler all writes after that point will
generate sample data.  For data written before sampling was configured sample
data will not be present.  A compaction can be initiated that only compacts the
files in the table that do not have sample data.   The example readme shows how
to do this.

If the sampling configuration of a table is changed, then Accumulo will start
generating new sample data with the new configuration.   However old data will
still have sample data generated with the previous configuration.  A selective
compaction can also be issued in this case to regenerate the sample data.

=== Scanning sample data

Inorder to scan sample data, use the +setSamplerConfiguration(...)+  method on
+Scanner+ or +BatchScanner+.  Please consult this methods javadocs for more
information.

Sample data can also be scanned from within an Accumulo
+SortedKeyValueIterator+.  To see how to do this look at the example iterator
referenced in README.sample.  Also, consult the javadoc on
+org.apache.accumulo.core.iterators.IteratorEnvironment.cloneWithSamplingEnabled()+.

Map reduce jobs using the +AccumuloInputFormat+ can also read sample data.  See
the javadoc for the +setSamplerConfiguration()+ method on
+AccumuloInputFormat+.

Scans over sample data will throw a +SampleNotPresentException+ in the following cases :

. sample data is not present,
. sample data is present but was generated with multiple configurations
. sample data is partially present

So a scan over sample data can only succeed if all data written has sample data
generated with the same configuration.

=== Bulk import

When generating rfiles to bulk import into Accumulo, those rfiles can contain
sample data.  To use this feature, look at the javadoc on the
+AccumuloFileOutputFormat.setSampler(...)+ method.

diff --git a/docs/src/main/resources/examples/README b/docs/src/main/resources/examples/README
index 4211050fb..03c2e05f0 100644
-- a/docs/src/main/resources/examples/README
++ b/docs/src/main/resources/examples/README
@@ -80,6 +80,8 @@ features of Apache Accumulo.
    README.rowhash:     Using MapReduce to read a table and write to a new
                        column in the same table.
 
   README.sample:      Building and using sample data in Accumulo.

    README.shard:       Using the intersecting iterator with a term index
                        partitioned by document.
 
diff --git a/docs/src/main/resources/examples/README.sample b/docs/src/main/resources/examples/README.sample
new file mode 100644
index 000000000..15288aaed
-- /dev/null
++ b/docs/src/main/resources/examples/README.sample
@@ -0,0 +1,192 @@
Title: Apache Accumulo Batch Writing and Scanning Example
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.


Basic Sampling Example
----------------------

Accumulo supports building a set of sample data that can be efficiently
accessed by scanners.  What data is included in the sample set is configurable.
Below, some data representing documents are inserted.  

    root@instance sampex&gt; createtable sampex
    root@instance sampex&gt; insert 9255 doc content 'abcde'
    root@instance sampex&gt; insert 9255 doc url file://foo.txt
    root@instance sampex&gt; insert 8934 doc content 'accumulo scales'
    root@instance sampex&gt; insert 8934 doc url file://accumulo_notes.txt
    root@instance sampex&gt; insert 2317 doc content 'milk<operator>,</operator> <expr_stmt><expr><name>eggs</name></expr><operator>,</operator> <expr><name>bread</name></expr><operator>,</operator> <expr><name>parmigiano</name><operator>-</operator><name>reggiano</name><literal type="char">'
    root@instance sampex&gt; insert 2317 doc url file://groceries/9.txt
    root@instance sampex&gt; insert 3900 doc content '</literal><name>EC2</name> <name>ate</name> <name>my</name> <name>homework</name><literal type="char">'
    root@instance sampex&gt; insert 3900 doc uril file://final_project.txt

Below the table sampex is configured to build a sample set.  The configuration
causes Accumulo to include any row where `murmur3_32(row) % 3 ==0` in the
tables sample data.

    root@instance sampex&gt; config -t sampex -s table.sampler.opt.hasher=murmur3_32
    root@instance sampex&gt; config -t sampex -s table.sampler.opt.modulus=3
    root@instance sampex&gt; config -t sampex -s table.sampler=org.apache.accumulo.core.sample.RowSampler

Below, attempting to scan the sample returns an error.  This is because data
was inserted before the sample set was configured.

    root@instance sampex&gt; scan --sample
    2015-09-09 12:21:50,643 [shell.Shell] ERROR: org.apache.accumulo.core.client.SampleNotPresentException: Table sampex(ID:2) does not have sampling configured or built

To remedy this problem, the following command will flush in memory data and
compact any files that do not contain the correct sample data.   

    root@instance sampex&gt; compact -t sampex --sf-no-sample

After the compaction, the sample scan works.  

    root@instance sampex&gt; scan --sample
    2317 doc:content []    milk, eggs, bread, parmigiano-reggiano
    2317 doc:url []    file://groceries/9.txt

The commands below show that updates to data in the sample are seen when
scanning the sample.

    root@instance sampex&gt; insert 2317 doc content '</literal><name>milk</name></expr><operator>,</operator> <expr><name>eggs</name></expr><operator>,</operator> <expr><name>bread</name></expr><operator>,</operator> <expr><name>parmigiano</name><operator>-</operator><name>reggiano</name></expr><operator>,</operator> <expr><name>butter</name><literal type="char">'
    root@instance sampex&gt; scan --sample
    2317 doc:content []    milk, eggs, bread, parmigiano-reggiano, butter
    2317 doc:url []    file://groceries/9.txt

Inorder to make scanning the sample fast, sample data is partitioned as data is
written to Accumulo.  This means if the sample configuration is changed, that
data written previously is partitioned using a different criteria.  Accumulo
will detect this situation and fail sample scans.  The commands below show this
failure and fixiing the problem with a compaction.

    root@instance sampex&gt; config -t sampex -s table.sampler.opt.modulus=2
    root@instance sampex&gt; scan --sample
    2015-09-09 12:22:51,058 [shell.Shell] ERROR: org.apache.accumulo.core.client.SampleNotPresentException: Table sampex(ID:2) does not have sampling configured or built
    root@instance sampex&gt; compact -t sampex --sf-no-sample
    2015-09-09 12:23:07,242 [shell.Shell] INFO : Compaction of table sampex started for given range
    root@instance sampex&gt; scan --sample
    2317 doc:content []    milk, eggs, bread, parmigiano-reggiano
    2317 doc:url []    file://groceries/9.txt
    3900 doc:content []    EC2 ate my homework
    3900 doc:uril []    file://final_project.txt
    9255 doc:content []    abcde
    9255 doc:url []    file://foo.txt

The example above is replicated in a java program using the Accumulo API.
Below is the program name and the command to run it.

    ./bin/accumulo org.apache.accumulo.examples.simple.sample.SampleExample -i instance -z localhost -u root -p secret

The commands below look under the hood to give some insight into how this
feature works.  The commands determine what files the sampex table is using.

    root@instance sampex&gt; tables -l
    accumulo.metadata    =&gt;        !0
    accumulo.replication =&gt;      +rep
    accumulo.root        =&gt;        +r
    sampex               =&gt;         2
    trace                =&gt;         1
    root@instance sampex&gt; scan -t accumulo.metadata -c file -b 2 -e 2&lt;
    2&lt; file:hdfs://localhost:10000/accumulo/tables/2/default_tablet/A000000s.rf []    702,8

Below shows running `accumulo rfile-info` on the file above.  This shows the
rfile has a normal default locality group and a sample default locality group.
The output also shows the configuration used to create the sample locality
group.  The sample configuration within a rfile must match the tables sample
configuration for sample scan to work.

    $ ./bin/accumulo rfile-info hdfs://localhost:10000/accumulo/tables/2/default_tablet/A000000s.rf
    Reading file: hdfs://localhost:10000/accumulo/tables/2/default_tablet/A000000s.rf
    RFile Version            : 8
    
    Locality group           : &lt;DEFAULT&gt;
    	Start block            : 0
    	Num   blocks           : 1
    	Index level 0          : 35 bytes  1 blocks
    	First key              : 2317 doc:content [] 1437672014986 false
    	Last key               : 9255 doc:url [] 1437672014875 false
    	Num entries            : 8
    	Column families        : [doc]
    
    Sample Configuration     :
    	Sampler class          : org.apache.accumulo.core.sample.RowSampler
    	Sampler options        : {hasher=murmur3_32, modulus=2}

    Sample Locality group    : &lt;DEFAULT&gt;
    	Start block            : 0
    	Num   blocks           : 1
    	Index level 0          : 36 bytes  1 blocks
    	First key              : 2317 doc:content [] 1437672014986 false
    	Last key               : 9255 doc:url [] 1437672014875 false
    	Num entries            : 6
    	Column families        : [doc]
    
    Meta block     : BCFile.index
          Raw size             : 4 bytes
          Compressed size      : 12 bytes
          Compression type     : gz

    Meta block     : RFile.index
          Raw size             : 309 bytes
          Compressed size      : 176 bytes
          Compression type     : gz


Shard Sampling Example
-------------------------

`README.shard` shows how to index and search files using Accumulo.  That
example indexes documents into a table named `shard`.  The indexing scheme used
in that example places the document name in the column qualifier.  A useful
sample of this indexing scheme should contain all data for any document in the
sample.   To accomplish this, the following commands build a sample for the
shard table based on the column qualifier.

    root@instance shard&gt; config -t shard -s table.sampler.opt.hasher=murmur3_32
    root@instance shard&gt; config -t shard -s table.sampler.opt.modulus=101
    root@instance shard&gt; config -t shard -s table.sampler.opt.qualifier=true
    root@instance shard&gt; config -t shard -s table.sampler=org.apache.accumulo.core.sample.RowColumnSampler
    root@instance shard&gt; compact -t shard --sf-no-sample -w
    2015-07-23 15:00:09,280 [shell.Shell] INFO : Compacting table ...
    2015-07-23 15:00:10,134 [shell.Shell] INFO : Compaction of table shard completed for given range

After enabling sampling, the command below counts the number of documents in
the sample containing the words `import` and `int`.     

    $ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query --sample -i instance16 -z localhost -t shard -u root -p secret import int | fgrep '</literal><operator>.</operator><name>java</name><literal type="char">' | wc
         11      11    1246

The command below counts the total number of documents containing the words
`import` and `int`.

    $ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query -i instance16 -z localhost -t shard -u root -p secret import int | fgrep '</literal><operator>.</operator><name>java</name><literal type="char">' | wc
       1085    1085  118175

The counts 11 out of 1085 total are around what would be expected for a modulus
of 101.  Querying the sample first provides a quick way to estimate how much data
the real query will bring back. 

Another way sample data could be used with the shard example is with a
specialized iterator.  In the examples source code there is an iterator named
CutoffIntersectingIterator.  This iterator first checks how many documents are
found in the sample data.  If too many documents are found in the sample data,
then it returns nothing.   Otherwise it proceeds to query the full data set.
To experiment with this iterator, use the following command.  The
`--sampleCutoff` option below will cause the query to return nothing if based
on the sample it appears a query would return more than 1000 documents.

    $ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query --sampleCutoff 1000 -i instance16 -z localhost -t shard -u root -p secret import int | fgrep '</literal><operator>.</operator><name>java</name><literal type="char">' | wc
diff --git a/examples/simple/src/main/java/org/apache/accumulo/examples/simple/sample/SampleExample.java b/examples/simple/src/main/java/org/apache/accumulo/examples/simple/sample/SampleExample.java
new file mode 100644
index 000000000..57d77b177
-- /dev/null
++ b/examples/simple/src/main/java/org/apache/accumulo/examples/simple/sample/SampleExample.java
@@ -0,0 +1,150 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.accumulo.examples.simple.sample;

import java.util.Collections;
import java.util.Map.Entry;

import org.apache.accumulo.core.cli.BatchWriterOpts;
import org.apache.accumulo.core.cli.ClientOnDefaultTable;
import org.apache.accumulo.core.client.BatchWriter;
import org.apache.accumulo.core.client.Connector;
import org.apache.accumulo.core.client.SampleNotPresentException;
import org.apache.accumulo.core.client.Scanner;
import org.apache.accumulo.core.client.admin.CompactionConfig;
import org.apache.accumulo.core.client.admin.CompactionStrategyConfig;
import org.apache.accumulo.core.client.admin.SamplerConfiguration;
import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.Mutation;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.sample.RowSampler;
import org.apache.accumulo.core.security.Authorizations;
import org.apache.accumulo.examples.simple.client.RandomBatchWriter;
import org.apache.accumulo.examples.simple.shard.CutoffIntersectingIterator;

import com.google.common.collect.ImmutableMap;

/**
 * A simple example of using Accumulo'</literal><name>s</name> <name>sampling</name> <name><name>feature</name><operator>.</operator> <name>This</name></name> <name>example</name> <name>does</name> <name>something</name> <name>similar</name> <name>to</name> <name>what</name> <name><name>README</name><operator>.</operator><name>sample</name></name> <name>shows</name> <name>using</name> <name>the</name> <name><name>shell</name><operator>.</operator> <name>Also</name></name> <name>see</name>
 <operator>*</operator> <block>{@<expr><name>link</name> <name>CutoffIntersectingIterator</name></expr>}</block> <name>and</name> <name><name>README</name><operator>.</operator><name>sample</name></name></expr></expr_stmt></for> <for>for an example of how to use sample data from within an iterator.
 */
public class SampleExample <block>{<block_content>

  <comment type="line">// a compaction strategy that only selects files for compaction that have no sample data or sample data created in a different way than the tables</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>CompactionStrategyConfig</name></type> <name>NO_SAMPLE_STRATEGY</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(
      <argument><expr><literal type="string">"org.apache.accumulo.tserver.compaction.strategies.ConfigurableCompactionStrategy"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><literal type="string">"SF_NO_SAMPLE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <class><specifier>static</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>ClientOnDefaultTable</name></super></extends></super_list> <block>{
    <constructor><specifier>public</specifier> <name>Opts</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"sampex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

  public static void main(String[] args</block></constructor>)</block> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws>;</class>
    <decl_stmt><decl><type><name>BatchWriterOpts</name></type> <name>bwOpts</name> <init>= <expr><operator>new</operator> <call><name>BatchWriterOpts</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>RandomBatchWriter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> else <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Table exists, not doing anything."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <expr_stmt/>}</block_content>

    <comment type="line">// write some data</comment>
    BatchWriter bw = conn.createBatchWriter(opts.getTableName(</block></block></if></if_stmt>)</block_content></block><operator>,</operator> <expr_stmt><expr><call><name><name>bwOpts</name><operator>.</operator><name>getBatchWriterConfig</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for></block></expr></block></expr></block></expr></then></ternary></expr></block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><call><name>createMutation</name><argument_list>(<argument><expr><literal type="string">"9225"</literal></expr></argument>, <argument><expr><literal type="string">"abcde"</literal></expr></argument>, <argument><expr><literal type="string">"file://foo.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><call><name>createMutation</name><argument_list>(<argument><expr><literal type="string">"8934"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo scales"</literal></expr></argument>, <argument><expr><literal type="string">"file://accumulo_notes.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><call><name>createMutation</name><argument_list>(<argument><expr><literal type="string">"2317"</literal></expr></argument>, <argument><expr><literal type="string">"milk, eggs, bread, parmigiano-reggiano"</literal></expr></argument>, <argument><expr><literal type="string">"file://groceries/9/txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><call><name>createMutation</name><argument_list>(<argument><expr><literal type="string">"3900"</literal></expr></argument>, <argument><expr><literal type="string">"EC2 ate my homework"</literal></expr></argument>, <argument><expr><literal type="string">"file://final_project.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>bw</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr></argument>;

    <argument><expr><name>SamplerConfiguration</name> <name>sc1</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sc1</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sc1</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>Scanner</name> <name>scanner</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning all data :"</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning with sampler configuration.  Data was written before sampler was set on table, scan should fail."</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>sc1</name></expr></argument>)</argument_list></call></expr></argument>;
    try <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> catch (SampleNotPresentException e</block>)</argument_list></call> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  Saw sample not present exception as expected."</literal></expr></argument>)</argument_list></call></expr>;
    }</block>
    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr></then></ternary></expr></then></ternary></expr></then></ternary></expr></then></ternary>;

    <comment type="line">// compact table to recreate sample data</comment>
    <call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>NO_SAMPLE_STRATEGY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>;

    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning after compaction (compaction should have created sample data) : "</literal></expr></argument>)</argument_list></call>;
    <call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call>;
    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call>;

    <comment type="line">// update a document in the sample data</comment>
    <call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><call><name>createMutation</name><argument_list>(<argument><expr><literal type="string">"2317"</literal></expr></argument>, <argument><expr><literal type="string">"milk, eggs, bread, parmigiano-reggiano, butter"</literal></expr></argument>, <argument><expr><literal type="string">"file://groceries/9/txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>;
    <call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call>;
    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning sample after updating content for docId 2317 (should see content change in sample data) : "</literal></expr></argument>)</argument_list></call>;
    <call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call>;
    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call>;

    <comment type="line">// change tables sampling configuration...</comment>
    <name>SamplerConfiguration</name> <name>sc2</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>;
    <call><name><name>sc2</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>;
    <call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sc2</name></expr></argument>)</argument_list></call>;
    <comment type="line">// compact table to recreate sample data using new configuration</comment>
    <call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>NO_SAMPLE_STRATEGY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>;

    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning with old sampler configuration.  Sample data was created using new configuration with a compaction.  Scan should fail."</literal></expr></argument>)</argument_list></call>;
    <try>try <block>{<block_content>
      <comment type="line">// try scanning with old sampler configuration</comment>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> catch (SampleNotPresentException e</block></try>) <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  Saw sample not present exception as expected "</literal></expr></argument>)</argument_list></call></expr>;
    }</block>
    <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr></argument>;

    <comment type="line">// update expected sampler configuration on scanner</comment>
    <argument><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>sc2</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scanning with new sampler configuration : "</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr></argument>;

  }</argument_list></call></block></block>

  <specifier>private</specifier> <specifier>static</specifier> <name>void</name> <call><name>print</name><argument_list>(<argument><expr><name>Scanner</name> <name>scanner</name></expr></argument>)</argument_list></call> <block>{
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>scanner</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></then></ternary></expr>
  }</block>

  <specifier>private</specifier> <specifier>static</specifier> <name>Mutation</name> <call><name>createMutation</name><argument_list>(<argument><expr><name>String</name> <name>docId</name></expr></argument>, <argument><expr><name>String</name> <name>content</name></expr></argument>, <argument><expr><name>String</name> <name>url</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>Mutation</name> <name>m</name> <operator>=</operator> <operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><name>docId</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"doc"</literal></expr></argument>, <argument><expr><literal type="string">"context"</literal></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"doc"</literal></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>m</name></expr>;</return>
  }</block></expr></then></ternary></expr></expr_stmt>
}
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..133e8aed4</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">123</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>examples</name><operator>.</operator><name>simple</name><operator>.</operator><name>shard</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>user</name><operator>.</operator><name>IntersectingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowColumnSampler</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This iterator uses a sample built from the Column Qualifier to quickly avoid intersecting iterator queries that may return too many documents.
 */</comment>

<class><specifier>public</specifier> class <name>CutoffIntersectingIterator</name> <super_list><extends>extends <super><name>IntersectingIterator</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>IntersectingIterator</name></type> <name>sampleII</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>sampleMax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasTop</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCutoff</name><parameter_list>(<parameter><decl><type><name>IteratorSetting</name></type> <name>iterCfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cutoff</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>cutoff</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iterCfg</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><literal type="string">"cutoff"</literal></expr></argument>, <argument><expr><name>cutoff</name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>hasTop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>hasTop</name> <operator>&amp;&amp;</operator> <call><name><name>super</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>seekColumnFamilies</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><call><name><name>sampleII</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>seekColumnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// this check will be redone whenever iterator stack is torn down and recreated.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>count</name> <operator>&lt;=</operator> <name>sampleMax</name> <operator>&amp;&amp;</operator> <call><name><name>sampleII</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sampleII</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>sampleMax</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// In a real application would probably want to return a key value that indicates too much data. Since this would execute for each tablet, some tablets</comment>
      <comment type="line">// may return data. For tablets that did not return data, would want an indication.</comment>
      <expr_stmt><expr><name>hasTop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>hasTop</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>seekColumnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IteratorEnvironment</name></type> <name>sampleEnv</name> <init>= <expr><call><name><name>env</name><operator>.</operator><name>cloneWithSamplingEnabled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>setMax</name><argument_list>(<argument><expr><name>sampleEnv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sampleDC</name> <init>= <expr><call><name><name>source</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><name>sampleEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sampleII</name> <operator>=</operator> <operator>new</operator> <call><name>IntersectingIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sampleII</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>sampleDC</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>void</name></type> <name>validateSamplerConfig</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sampleConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>sampleConfig</name><operator>.</operator><name>getSamplerClassName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>RowColumnSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"Unexpected Sampler "</literal> <operator>+</operator> <call><name><name>sampleConfig</name><operator>.</operator><name>getSamplerClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>sampleConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"qualifier"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected sample on column qualifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name>isNullOrFalse</name><argument_list>(<argument><expr><call><name><name>sampleConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><literal type="string">"visibility"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected sample on column qualifier only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setMax</name><parameter_list>(<parameter><decl><type><name>IteratorEnvironment</name></type> <name>sampleEnv</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>cutoffValue</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"cutoff"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>sampleConfig</name> <init>= <expr><call><name><name>sampleEnv</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Ensure the sample was constructed in an expected way. If the sample is not built as expected, then can not draw conclusions based on sample.</comment>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>cutoffValue</name></expr></argument>, <argument><expr><literal type="string">"Expected cutoff option is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>validateSamplerConfig</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>modulus</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>sampleConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>sampleMax</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>cutoffValue</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>modulus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullOrFalse</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>val</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>Query</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>Query</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">41d5dc70f</literal><operator>..</operator><literal type="number">79258554b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>Query</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>examples</name><operator>/</operator><name>simple</name><operator>/</operator><name>shard</name><operator>/</operator><name><name>Query</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnRequiredTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@ <specifier>public</specifier> <name>class</name> <name>Query</name> <block>{
   <expr><specifier>static</specifier> <name>class</name> <name>Opts</name> extends <name>ClientOnRequiredTable</name> <block>{
     @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>description</name> <operator>=</operator> <literal type="string">" term { &lt;term&gt; ... }"</literal></expr></argument>)</argument_list></call>
     <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>terms</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

    @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"--sample"</literal></expr>}</block></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"Do queries against sample, useful when sample is built using column qualifier"</literal></expr></argument>)</argument_list></call>
    <specifier>private</specifier> <name>boolean</name> <name>useSample</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;

    @<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"--sampleCutoff"</literal></expr>}</block></expr></argument>,
        <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"Use sample data to determine if a query might return a number of documents over the cutoff.  This check is per tablet."</literal></expr></argument>)</argument_list></call>
    <specifier>private</specifier> <name>Integer</name> <name>sampleCutoff</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   }</block>
 
  <specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>query</name><argument_list>(<argument><expr><name>BatchScanner</name> <name>bs</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>terms</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>query</name><argument_list>(<argument><expr><name>BatchScanner</name> <name>bs</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>terms</name></expr></argument>, <argument><expr><name>Integer</name> <name>cutoff</name></expr></argument>)</argument_list></call> <block>{
 
     <expr><name>Text</name> <name><name>columns</name><index>[]</index></name> <operator>=</operator> <operator>new</operator> <name><name>Text</name><index>[<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;
     <expr><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
     <for>for <control>(<init><decl><type><name>String</name></type> <name>term</name> <range>: <expr><name>terms</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block>
    <name>IteratorSetting</name> <name>ii</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"ii"</literal></expr></argument>, <argument><expr><name><name>IntersectingIterator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;

    <expr><name>IteratorSetting</name> <name>ii</name></expr>;

    <if_stmt><if>if <condition>(<expr><name>cutoff</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ii</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"ii"</literal></expr></argument>, <argument><expr><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>setCutoff</name></name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>cutoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><name>ii</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"ii"</literal></expr></argument>, <argument><expr><name><name>IntersectingIterator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></else></if_stmt>}</block>

     <call><name><name>IntersectingIterator</name><operator>.</operator><name>setColumnFamilies</name></name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>addScanIterator</name></name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>setRanges</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>Query</name> <block>{
     <expr><name>Connector</name> <name>conn</name> <operator>=</operator> <call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>BatchScanner</name> <name>bs</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>auths</name></name></expr></argument>, <argument><expr><name><name>bsOpts</name><operator>.</operator><name>scanThreads</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>bs</name><operator>.</operator><name>setTimeout</name></name><argument_list>(<argument><expr><name><name>bsOpts</name><operator>.</operator><name>scanTimeout</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;

    <for>for <control>(<init><decl><type><name>String</name></type> <name>entry</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>terms</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>useSample</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>CutoffIntersectingIterator</name><operator>.</operator><name>validateSamplerConfig</name></name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>entry</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>terms</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>sampleCutoff</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  "</literal> <operator>+</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }
 
 }
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>VerifyTabletAssignments</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>VerifyTabletAssignments</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0d7ade82b</literal><operator>..</operator><name>d2d6664e4</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>VerifyTabletAssignments</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>VerifyTabletAssignments</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VerifyTabletAssignments</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>emptyListIterInfo</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>TColumn</name></argument>&gt;</argument_list></name> <name>emptyListColumn</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>InitialMultiScan</name> <name>is</name> <operator>=</operator> <call><name><name>client</name><operator>.</operator><name>startMultiScan</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>rpcCreds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>emptyListColumn</name></expr></argument>, <argument><expr><name>emptyListIterInfo</name></expr></argument>, <argument><expr><name>emptyMapSMapSS</name></expr></argument>,
        <argument><expr><call><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name><operator>.</operator><name>getAuthorizationsBB</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="null">null</literal></expr>, <expr><literal type="number">0L</literal></expr>)</block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>is</name><operator>.</operator><name>result</name><operator>.</operator><name>more</name></name></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>MultiScanResult</name></type> <name>result</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>continueMultiScan</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name><name>is</name><operator>.</operator><name>scanID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>checkFailures</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>failures</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>MetadataBulkLoadFilterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>MetadataBulkLoadFilterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7e9543f62</literal><operator>..</operator><literal type="number">1b305304e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>MetadataBulkLoadFilterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>iterators</name><operator>/</operator><name><name>MetadataBulkLoadFilterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>DataFileColumnFamily</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ColumnFQ</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>TransactionWatcher</name><operator>.</operator><name>Arbitrator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MetadataBulkLoadFilterTest</name> <block>{
     <expr><call><name>put</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>, <argument><expr><literal type="string">"2&lt;"</literal></expr></argument>, <argument><expr><name><name>TabletsSection</name><operator>.</operator><name>BulkFileColumnFamily</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="string">"/t2/fileA"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;
 
     <name>TestMetadataBulkLoadFilter</name> <name>iter</name> <operator>=</operator> <operator>new</operator> <call><name>TestMetadataBulkLoadFilter</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedMapIterator</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>IteratorEnvironment</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mapFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortedMapIterator</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>BaseIteratorEnvironment</name></super><argument_list>()</argument_list> <block>{
 
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>MetadataBulkLoadFilterTest</name> <block>{
       <expr><specifier>public</specifier> <name>IteratorScope</name> <call><name>getIteratorScope</name><argument_list>()</argument_list></call> <block>{
         <return>return <expr><name><name>IteratorScope</name><operator>.</operator><name>majc</name></name></expr>;</return>
       }</block>

      @<name>Override</name>
      <specifier>public</specifier> <name>AccumuloConfiguration</name> <call><name>getConfig</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block>
     }</expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>StatusCombinerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>StatusCombinerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f4d5a9b6b</name><operator>..</operator><literal type="number">26ad8de6d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>StatusCombinerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>StatusCombinerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>Combiner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>DevNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>replication</name><operator>.</operator><name>ReplicationSchema</name><operator>.</operator><name>StatusSection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>replication</name><operator>.</operator><name>proto</name><operator>.</operator><name>Replication</name><operator>.</operator><name>Status</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">38</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>StatusCombinerTest</name> <block>{
     <expr><name>builder</name> <operator>=</operator> <call><name><name>Status</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr>;
     <name>IteratorSetting</name> <name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name><name>StatusCombiner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Combiner</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name><name>StatusSection</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>combiner</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DevNull</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfg</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>IteratorEnvironment</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>AccumuloConfiguration</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>IteratorScope</name></type> <name>getIteratorScope</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullMajorCompaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>registerSideChannel</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>

      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Authorizations</name></type> <name>getAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>reserveMapFileReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>combiner</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DevNull</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfg</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
   @<name>Test</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>monitor</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>NullScanner</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>monitor</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>NullScanner</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">750ad8e1b</literal><operator>..</operator><literal type="number">2c4683587</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>monitor</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>NullScanner</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>monitor</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>monitor</name><operator>/</operator><name>servlets</name><operator>/</operator><name>trace</name><operator>/</operator><name><name>NullScanner</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument></argument_list></call></expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>NullScanner</name> implements <name>Scanner</name> <block>{
     <return>return <expr><literal type="number">0</literal></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setSamplerConfiguration</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clearSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>FileManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>FileManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1c4676e62</literal><operator>..</operator><literal type="number">2227b2504</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>FileManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>FileManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Semaphore</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SourceSwitchingIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SourceSwitchingIterator</name><operator>.</operator><name>DataSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>TimeSettingIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>AccumuloServerContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeManager</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">458</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">460</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileManager</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>iflag</name></name> <operator>=</operator> <name>flag</name></expr>;
       <expr><operator>(</operator><operator>(</operator><name>InterruptibleIterator</name><operator>)</operator> <name><name>this</name><operator>.</operator><name>iter</name></name><operator>)</operator><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>iflag</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>

   }
 
   public <class>class <name>ScanFileManager</name> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">502</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">503</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileManager</name> <block>{
       <return>return <expr><name>newlyReservedReaders</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InterruptibleIterator</name></argument>&gt;</argument_list></name></type> <name>openFiles</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>detachable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InterruptibleIterator</name></argument>&gt;</argument_list></name></type> <name>openFiles</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>detachable</name></decl></parameter>, <parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
       <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileSKVIterator</name></argument>&gt;</argument_list></name></type> <name>newlyReservedReaders</name> <init>= <expr><call><name>openFileRefs</name><argument_list>(<argument><expr><call><name><name>files</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">511</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">513</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileManager</name> <block>{
       <for>for <control>(<init><decl><type><name>FileSKVIterator</name></type> <name>reader</name> <range>: <expr><name>newlyReservedReaders</name></expr></range></decl></init>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name>getReservedReadeFilename</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>InterruptibleIterator</name></type> <name>iter</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>source</name> <init>= <expr><name>reader</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
          <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
        </block_content>}</block></function>

         <if_stmt><if>if <condition>(<expr><name>detachable</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>FileDataSource</name></type> <name>fds</name> <init>= <expr><operator>new</operator> <call><name>FileDataSource</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>FileDataSource</name></type> <name>fds</name> <init>= <expr><operator>new</operator> <call><name>FileDataSource</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>dataSources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>SourceSwitchingIterator</name></type> <name>ssi</name> <init>= <expr><operator>new</operator> <call><name>SourceSwitchingIterator</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>new</operator> <call><name>ProblemReportingIterator</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>continueOnFailure</name></expr></argument>, <argument><expr><name>ssi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>new</operator> <call><name>ProblemReportingIterator</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>continueOnFailure</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>new</operator> <call><name>ProblemReportingIterator</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>continueOnFailure</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
         <decl_stmt><decl><type><name>DataFileValue</name></type> <name>value</name> <init>= <expr><call><name><name>files</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileRef</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>isTimeSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">539</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">550</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileManager</name> <block>{
         <expr><call><name><name>fds</name><operator>.</operator><name>unsetIterator</name></name><argument_list>()</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reattach</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reattach</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>tabletReservedReaders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">562</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileManager</name> <block>{
 
       <for>for <control>(<init><decl><type><name>FileDataSource</name></type> <name>fds</name> <range>: <expr><name>dataSources</name></expr></range></decl></init>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>reader</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>fds</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fds</name><operator>.</operator><name>setIterator</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>source</name> <init>= <expr><name>reader</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>fds</name><operator>.</operator><name>setIterator</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
     }</block></expr></expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2274eeaa0</literal><operator>..</operator><name>f5141ffd1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMap</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name></name>;</package>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>ConfigurationCopy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>SiteConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedMapIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>WrappingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>EmptyIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>InterruptibleIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>LocalityGroupIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>LocalityGroupIterator</name><operator>.</operator><name>LocalityGroup</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SourceSwitchingIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SourceSwitchingIterator</name><operator>.</operator><name>DataSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>LocalityGroupConfigurationError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>Partitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>PreAllocatedArray</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>mutable</name><operator>.</operator><name>MutableLong</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>InMemoryMap</name> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleMap</name></type> <name>map</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">58</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
 
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>lggroups</name></expr>;
 
  <specifier>public</specifier> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>boolean</name> <name>useNativeMap</name></expr></argument>, <argument><expr><name>String</name> <name>memDumpDir</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>useNativeMap</name></expr></argument>, <argument><expr><name>memDumpDir</name></expr></argument>)</argument_list></call></expr>;
  <specifier>private</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>SamplerConfigurationImpl</name></argument>,<argument><name>Sampler</name></argument>&gt;</argument_list></name> <call><name>getSampler</name><argument_list>(<argument><expr><name>AccumuloConfiguration</name> <name>config</name></expr></argument>)</argument_list></call> <block>{
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sampleConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>, <argument><expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
   }</block>
 
  <specifier>public</specifier> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>lggroups</name></expr></argument>, <argument><expr><name>boolean</name> <name>useNativeMap</name></expr></argument>, <argument><expr><name>String</name> <name>memDumpDir</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>this</name><operator>.</operator><name>memDumpDir</name></name> <operator>=</operator> <name>memDumpDir</name></expr>;
    <name><name>this</name><operator>.</operator><name>lggroups</name></name> <operator>=</operator> <name>lggroups</name></block></block></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>SamplerConfigurationImpl</name></argument>,<argument><name>Sampler</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>samplerRef</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>lggroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>newMap</name><argument_list>(<argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMap</name><argument_list>(<argument><expr><name>lggroups</name></expr></argument>, <argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AccumuloConfiguration</name></type> <name>config</name></decl>;</decl_stmt>

  <comment type="line">// defer creating sampler until first write. This was done because an empty sample map configured with no sampler will not flush after a user changes sample</comment>
  <comment type="line">// config.</comment>
  <function><type><specifier>private</specifier> <name>Sampler</name></type> <name>getOrCreateSampler</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>SamplerConfigurationImpl</name></argument>,<argument><name>Sampler</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>samplerRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pair</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>getSampler</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>samplerRef</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name><name>samplerRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>pair</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <constructor><specifier>public</specifier> <name>InMemoryMap</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LocalityGroupConfigurationError</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>LocalityGroupUtil</name><operator>.</operator><name>getLocalityGroups</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_NATIVEMAP_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_MEMDUMP_DIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>useNativeMap</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_NATIVEMAP_ENABLED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>memDumpDir</name></name> <operator>=</operator> <call><name><name>config</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_MEMDUMP_DIR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lggroups</name></name> <operator>=</operator> <call><name><name>LocalityGroupUtil</name><operator>.</operator><name>getLocalityGroups</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SimpleMap</name></type> <name>allMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SimpleMap</name></type> <name>sampleMap</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>lggroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>allMap</name> <operator>=</operator> <call><name>newMap</name><argument_list>(<argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sampleMap</name> <operator>=</operator> <call><name>newMap</name><argument_list>(<argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>allMap</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMap</name><argument_list>(<argument><expr><name>lggroups</name></expr></argument>, <argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sampleMap</name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroupMap</name><argument_list>(<argument><expr><name>lggroups</name></expr></argument>, <argument><expr><name>useNativeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name>SampleMap</name><argument_list>(<argument><expr><name>allMap</name></expr></argument>, <argument><expr><name>sampleMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SimpleMap</name></type> <name>newMap</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>useNativeMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
 
     <expr><name>int</name> <call><name>size</name><argument_list>()</argument_list></call></expr>;
 
    <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>InterruptibleIterator</name></type> <name>skvIterator</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name></expr></argument>)</argument_list></decl>;</decl_stmt>
 
     <function_decl><type><name>void</name></type> <name>delete</name><parameter_list>()</parameter_list>;</function_decl>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">95</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <expr><name>void</name> <call><name>mutate</name><argument_list>(<argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name> <name>mutations</name></expr></argument>, <argument><expr><name>int</name> <name>kvCount</name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <class><specifier>private</specifier> class <name>SampleMap</name> <super_list><implements>implements <super><name>SimpleMap</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleMap</name></type> <name>map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleMap</name></type> <name>sample</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SampleMap</name><parameter_list>(<parameter><decl><type><name>SimpleMap</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>SimpleMap</name></type> <name>sampleMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sample</name></name> <operator>=</operator> <name>sampleMap</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>Key</name></type> <name>startKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>InterruptibleIterator</name></type> <name>skvIterator</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>SamplerConfigurationImpl</name></argument>,<argument><name>Sampler</name></argument>&gt;</argument_list></name></type> <name>samplerAndConf</name> <init>= <expr><call><name><name>samplerRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>samplerAndConf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name><name>EmptyIterator</name><operator>.</operator><name>EMPTY_ITERATOR</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>samplerAndConf</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>samplerAndConf</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>sample</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>map</name><operator>.</operator><name>getMemoryUsed</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>sample</name><operator>.</operator><name>getMemoryUsed</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mutate</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kvCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>mutate</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>kvCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name>getOrCreateSampler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sampler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>sampleMutations</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>m</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>colUpdates</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getUpdates</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>sampleColUpdates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>cvp</name> <range>: <expr><name>colUpdates</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Key</name></type> <name>k</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cvp</name><operator>.</operator><name>getColumnFamily</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cvp</name><operator>.</operator><name>getColumnQualifier</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cvp</name><operator>.</operator><name>getColumnVisibility</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cvp</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cvp</name><operator>.</operator><name>isDeleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>sampleColUpdates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>sampleColUpdates</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><call><name><name>sampleColUpdates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>

          <if_stmt><if>if <condition>(<expr><name>sampleColUpdates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>sampleMutations</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>sampleMutations</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>sampleMutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>LocalityGroupUtil</name><operator>.</operator><name>PartitionedMutation</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sampleColUpdates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>sampleMutations</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>mutate</name></name><argument_list>(<argument><expr><name>sampleMutations</name></expr></argument>, <argument><expr><name>kvCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

   <class><specifier>private</specifier> <specifier>static</specifier> class <name>LocalityGroupMap</name> <super_list><implements>implements <super><name>SimpleMap</name></super></implements></super_list> <block>{
 
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>PreAllocatedArray</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>,<argument><name>MutableLong</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupFams</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">181</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">317</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>()</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

       <name>LocalityGroup</name> <name><name>groups</name><index>[]</index></name> <operator>=</operator> <operator>new</operator> <name><name>LocalityGroup</name><index>[<expr><name><name>maps</name><operator>.</operator><name>length</name></name></expr>]</index></name></block></expr>;</block></expr></expr_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>groups</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>groupFams</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroup</name><argument_list>(<argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>skvIterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>groupFams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroup</name><argument_list>(<argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>skvIterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>groupFams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroup</name><argument_list>(<argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>skvIterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
          <expr_stmt><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>LocalityGroup</name><argument_list>(<argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>skvIterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
 
       <return>return <expr><operator>new</operator> <call><name>LocalityGroupIterator</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>nonDefaultColumnFamilies</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">264</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">403</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <specifier>synchronized</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>()</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr>
       <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
 
@@ <operator>-</operator><literal type="number">327</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">468</literal><operator>,</operator><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     }</block></block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>()</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>InterruptibleIterator</name> <call><name>skvIterator</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr>
       <return>return <expr><operator>(</operator><name>InterruptibleIterator</name><operator>)</operator> <call><name><name>nativeMap</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">410</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">553</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <expr><specifier>private</specifier> <name>MemoryDataSource</name> <name>parent</name></expr>;
     <specifier>private</specifier> <name>IteratorEnvironment</name> <name>env</name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicBoolean</name></type> <name>iflag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfigurationImpl</name></type> <name>iteratorSamplerConfig</name></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>SamplerConfigurationImpl</name></type> <name>getSamplerConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>env</name><operator>.</operator><name>isSamplingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>env</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>iteratorSamplerConfig</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
 
    <constructor><name>MemoryDataSource</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryDataSource</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>samplerConfig</name></expr></argument>)</argument_list></call> <block>{
      <expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <constructor><specifier>public</specifier> <name>MemoryDataSource</name><parameter_list>(<parameter><decl><type><name>MemoryDataSource</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>switched</name></decl></parameter>, <parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>AtomicBoolean</name></type> <name>iflag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>MemoryDataSource</name><parameter_list>(<parameter><decl><type><name>MemoryDataSource</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>switched</name></decl></parameter>, <parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>AtomicBoolean</name></type> <name>iflag</name></decl></parameter>, <parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>switched</name></name> <operator>=</operator> <name>switched</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iflag</name></name> <operator>=</operator> <name>iflag</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorSamplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
     </block_content>}</block></constructor>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">457</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">614</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
         <expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>RFileOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openReader</name><argument_list>(<argument><expr><name>memDumpFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>iflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getSamplerConfig</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><call><name>getSamplerConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></constructor>
 
       <return>return <expr><name>reader</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">466</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">627</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <expr><specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>iterator</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
       <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
         <if_stmt><if>if <condition>(<expr><operator>!</operator><name>switched</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><call><name>getSamplerConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
             <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>iflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">485</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">646</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>DataSource</name> <call><name>getDeepCopyDataSource</name><argument_list>(<argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>MemoryDataSource</name><argument_list>(<argument><expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal> <operator>?</operator> <name>this</name> <operator>:</operator> <name>parent</name></expr></argument>, <argument><expr><name>switched</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iflag</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
      <return>return <expr><operator>new</operator> <call><name>MemoryDataSource</name><argument_list>(<argument><expr><ternary><condition><expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>this</name></expr> </then><else>: <expr><name>parent</name></expr></else></ternary></expr></argument>, <argument><expr><name>switched</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iflag</name></expr></argument>, <argument><expr><name>iteratorSamplerConfig</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
     <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">562</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">723</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
 
   }</block>
 
  <specifier>public</specifier> <specifier>synchronized</specifier> <name>MemoryIterator</name> <call><name>skvIterator</name><argument_list>()</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>synchronized</specifier> <name>MemoryIterator</name> <call><name>skvIterator</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>iteratorSamplerConfig</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
 
@@ <operator>-</operator><literal type="number">570</literal><operator>,</operator><literal type="number">8</literal> <operator>+</operator><literal type="number">731</literal><operator>,</operator><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Can not obtain iterator after map deleted"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
 
     <name>int</name> <name>mc</name> <operator>=</operator> <call><name><name>kvCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></block></block></expr>;
    <name>MemoryDataSource</name> <name>mds</name> <operator>=</operator> <operator>new</operator> <call><name>MemoryDataSource</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SourceSwitchingIterator</name></type> <name>ssi</name> <init>= <expr><operator>new</operator> <call><name>SourceSwitchingIterator</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MemoryDataSource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryDataSource</name></type> <name>mds</name> <init>= <expr><operator>new</operator> <call><name>MemoryDataSource</name><argument_list>(<argument><expr><name>iteratorSamplerConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// TODO seems like a bug that two MemoryDataSources are created... may need to fix in older branches</comment>
    <decl_stmt><decl><type><name>SourceSwitchingIterator</name></type> <name>ssi</name> <init>= <expr><operator>new</operator> <call><name>SourceSwitchingIterator</name><argument_list>(<argument><expr><name>mds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>mi</name> <init>= <expr><operator>new</operator> <call><name>MemoryIterator</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartialMutationSkippingIterator</name><argument_list>(<argument><expr><name>ssi</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>mi</name><operator>.</operator><name>setSSI</name></name><argument_list>(<argument><expr><name>ssi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>mi</name><operator>.</operator><name>setMDS</name></name><argument_list>(<argument><expr><name>mds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">584</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">746</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <if_stmt><if>if <condition>(<expr><call><name><name>nextKVCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <call><name><name>kvCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Memory map in unexpected state : nextKVCount = "</literal> <operator>+</operator> <call><name><name>nextKVCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" kvCount = "</literal> <operator>+</operator> <call><name><name>kvCount</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr></expr_stmt>
 
    <return>return <expr><call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
 
   <specifier>private</specifier> <name>boolean</name> <name>deleted</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">615</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">777</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
         <expr><name>Configuration</name> <name>newConf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
         <call><name><name>newConf</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="string">"io.seqfile.compress.blocksize"</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>FileSKVWriter</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>RFileOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openWriter</name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>newConf</name></expr></argument>, <argument><expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>siteConf</name> <init>= <expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <decl_stmt><decl><type><name>InterruptibleIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getOrCreateSampler</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>siteConf</name> <operator>=</operator> <call><name>createSampleConfig</name><argument_list>(<argument><expr><name>siteConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>FileSKVWriter</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>RFileOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openWriter</name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>newConf</name></expr></argument>, <argument><expr><name>siteConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InterruptibleIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>allfams</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">668</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">836</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMap</name> <block>{
     <expr><call><name><name>tmpMap</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><specifier>private</specifier> <name>AccumuloConfiguration</name></type> <name>createSampleConfig</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>siteConf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>confCopy</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>siteConf</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>input</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_SAMPLER</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>samplerRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFirst</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toTablePropertiesMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>confCopy</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>siteConf</name> <operator>=</operator> <name>confCopy</name></expr>;</expr_stmt>
    <return>return <expr><name>siteConf</name></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>dumpLocalityGroup</name><parameter_list>(<parameter><decl><type><name>FileSKVWriter</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>InterruptibleIterator</name></type> <name>iter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>activeIters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">// RFile does not support MemKey, so we move the kv count into the value only for the RFile.</comment>
       <comment type="line">// There is no need to change the MemKey to a normal key because the kvCount info gets lost when it is written</comment>
      <decl_stmt><decl><type><name>Value</name></type> <name>newValue</name> <init>= <expr><operator>new</operator> <call><name>MemValue</name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MemKey</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>kvCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>MemValue</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MemKey</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>kvCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

     </block_content>}</block></while>
   </block_content>}</block></function>
 </block_content>}</block></constructor>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemKeyConversionIterator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemKeyConversionIterator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">00c8be94c</literal><operator>..</operator><literal type="number">71a4cbdf4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemKeyConversionIterator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemKeyConversionIterator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>MemKeyConversionIterator</name> extends <name>WrappingIterator</name> implements <name>Interruptible</name>
       <name>currVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
       <return>return;</return>
     }</block></class>
    <expr_stmt><expr><name>currVal</name> <operator>=</operator> <operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mc</name> <init>= <expr><call><name><name>MemValue</name><operator>.</operator><name>splitKVCount</name></name><argument_list>(<argument><expr><name>currVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>currKey</name> <operator>=</operator> <operator>new</operator> <call><name>MemKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemValue</name></type> <name>mv</name> <init>= <expr><call><name><name>MemValue</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>currVal</name> <operator>=</operator> <name><name>mv</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>currKey</name> <operator>=</operator> <operator>new</operator> <call><name>MemKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>mv</name><operator>.</operator><name>kvCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemValue</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemValue</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc444596b</name><operator>..</operator><name>af6f2f112</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemValue</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>MemValue</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">69</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  *
  */</comment>
<class><specifier>public</specifier> class <name>MemValue</name> <super_list><extends>extends <super><name>Value</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>kvCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>boolean</name></type> <name>merged</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<class><specifier>public</specifier> class <name>MemValue</name> <block>{
 
  <constructor><specifier>public</specifier> <name>MemValue</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kvCount</name></name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  <decl_stmt><decl><type><name>Value</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>kvCount</name></decl>;</decl_stmt>
 
   <constructor><specifier>public</specifier> <name>MemValue</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kvCount</name></name> <operator>=</operator> <name>kv</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <comment type="line">// Override</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>merged</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combinedBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name>getSize</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>combinedBytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kvCount</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kvCount</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kvCount</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kvCount</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name>combinedBytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>merged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>merged</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>merged</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combinedBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>value</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>combinedBytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kv</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kv</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kv</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>combinedBytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>kv</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><name>combinedBytes</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * Takes a Value and will take out the embedded kvCount, and then return that value while replacing the Value with the original unembedded version
   *
   * @return The kvCount embedded in v.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>splitKVCount</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>MemValue</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><operator>(</operator><name>MemValue</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><name>kvCount</name></expr>;</return></block_content></block></if></if_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MemValue</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>originalBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>v</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combined</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>combined</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>originalBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>originalBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>originalBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
    <decl_stmt><decl><type><name>int</name></type> <name>kv</name> <init>= <expr><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>combined</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>MemValue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><name>originalBytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>NativeMap</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>NativeMap</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cf01dd3ed</name><operator>..</operator><literal type="number">3cb4d40fa</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>NativeMap</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>NativeMap</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReadWriteLock</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantReadWriteLock</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ColumnUpdate</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">749</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">750</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>NativeMap</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>deepCopy</name><argument_list>(<argument><expr><name>IteratorEnvironment</name> <name>env</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>env</name><operator>.</operator><name>isSamplingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
      <expr_stmt/></block_content></block></if></if_stmt></block></expr>}</block></expr></expr_stmt>
       <return>return <expr><operator>new</operator> <call><name>NMSKVIter</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletIteratorEnvironment</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletIteratorEnvironment</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c5b63d85</literal><operator>..</operator><literal type="number">73adec39f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletIteratorEnvironment</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletIteratorEnvironment</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorUtil</name><operator>.</operator><name>IteratorScope</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>MultiIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>FileManager</name><operator>.</operator><name>ScanFileManager</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>IteratorScope</name> <name>scope</name></expr>;
   <specifier>private</specifier> <name>final</name> <name>boolean</name> <name>fullMajorCompaction</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>topLevelIterators</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>topLevelIterators</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Authorizations</name></type> <name>authorizations</name></decl>;</decl_stmt> <comment type="line">// these will only be supplied during scan scope</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enableSampleForDeepCopy</name></decl>;</decl_stmt>
 
   <constructor><specifier>public</specifier> <name>TabletIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>IteratorScope</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name><name>IteratorScope</name><operator>.</operator><name>majc</name></name></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;
     <name><name>this</name><operator>.</operator><name>fullMajorCompaction</name></name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt></block_content></block></if></if_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>topLevelIterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <constructor><specifier>public</specifier> <name>TabletIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>IteratorScope</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>ScanFileManager</name></type> <name>trm</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>,
      <parameter><decl><type><name>Authorizations</name></type> <name>authorizations</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <constructor><specifier>private</specifier> <name>TabletIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>IteratorScope</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>ScanFileManager</name></type> <name>trm</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>,
      <parameter><decl><type><name>Authorizations</name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>topLevelIterators</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <name><name>IteratorScope</name><operator>.</operator><name>majc</name></name></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"must set if compaction is full"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>fullMajorCompaction</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
     <name><name>this</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>files</name></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>authorizations</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>enableSampleForDeepCopy</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <call><name><name>samplerConfig</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>enableSampleForDeepCopy</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>topLevelIterators</name></name> <operator>=</operator> <name>topLevelIterators</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TabletIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>IteratorScope</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>ScanFileManager</name></type> <name>trm</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>,
      <parameter><decl><type><name>Authorizations</name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>trm</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <constructor><specifier>public</specifier> <name>TabletIteratorEnvironment</name><parameter_list>(<parameter><decl><type><name>IteratorScope</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fullMajC</name></decl></parameter>, <parameter><decl><type><name>AccumuloConfiguration</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;
     <name><name>this</name><operator>.</operator><name>fullMajorCompaction</name></name> <operator>=</operator> <name>fullMajC</name></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>topLevelIterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
   @<expr><name>Override</name>
   <specifier>public</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name> <call><name>reserveMapFileReader</name><argument_list>(<argument><expr><name>String</name> <name>mapFileName</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>FileRef</name> <name>ref</name> <operator>=</operator> <operator>new</operator> <call><name>FileRef</name><argument_list>(<argument><expr><name>mapFileName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>mapFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
    <return>return <expr><call><name><name>trm</name><operator>.</operator><name>openFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name><name>files</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>trm</name><operator>.</operator><name>openFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name><name>files</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></constructor>
 
   <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletIteratorEnvironment</name> implements <name>IteratorEnvironment</name> <block>{
     <expr><call><name><name>allIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <return>return <expr><operator>new</operator> <call><name>MultiIterator</name><argument_list>(<argument><expr><name>allIters</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
   }</block></class>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>enableSampleForDeepCopy</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// only create this once so that it stays the same, even if config changes</comment>
      <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sci</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sci</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>samplerConfig</name> <operator>=</operator> <call><name><name>sci</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>samplerConfig</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>IteratorEnvironment</name></type> <name>cloneWithSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scope</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>IteratorScope</name><operator>.</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sci</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sci</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TabletIteratorEnvironment</name></type> <name>te</name> <init>= <expr><operator>new</operator> <call><name>TabletIteratorEnvironment</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>trm</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>, <argument><expr><name>topLevelIterators</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>te</name></expr>;</return>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>de89b5066</name><operator>..</operator><name>d35e6af23</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Durability</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>CompressedIterators</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>CompressedIterators</name><operator>.</operator><name>IterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>DurabilityImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>replication</name><operator>.</operator><name>ReplicationConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>replication</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ReplicationServicer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>log</name><operator>.</operator><name>LogEntry</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ConstraintViolationException</name></name>
 <name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NoSuchScanIDException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NotServingTabletException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDurability</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Iface</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Processor</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">447</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">451</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>InitialScan</name> <call><name>startScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>TCredentials</name> <name>credentials</name></expr></argument>, <argument><expr><name>TKeyExtent</name> <name>textent</name></expr></argument>, <argument><expr><name>TRange</name> <name>range</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>TColumn</name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>int</name> <name>batchSize</name></expr></argument>,
         <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>,
        <argument><expr><name>long</name> <name>readaheadThreshold</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>ThriftSecurityException</name></expr></argument>,
        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name> <block>{
        <expr><name>long</name> <name>readaheadThreshold</name></expr>, <argument><expr><name>TSamplerConfiguration</name> <name>tSamplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>NotServingTabletException</name></expr></argument>, <argument><expr><name>ThriftSecurityException</name></expr></argument>,
        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name> <block>{
 
       <expr><name>String</name> <name>tableId</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>textent</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>security</name><operator>.</operator><name>canScan</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>tableId</name></expr></argument>, <argument><expr><call><name><name>Tables</name><operator>.</operator><name>getNamespaceId</name></name><argument_list>(<argument><expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">480</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">484</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
       <for>for <control>(<init><decl><type><name>TColumn</name></type> <name>tcolumn</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>columnSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>tcolumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>

       <name>final</name> <name>ScanSession</name> <name>scanSession</name> <operator>=</operator> <operator>new</operator> <call><name>ScanSession</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>columnSet</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Authorizations</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>readaheadThreshold</name></expr></argument>,
           <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <expr_stmt><expr><name><name>scanSession</name><operator>.</operator><name>scanner</name></name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>batchSize</name></expr></argument>, <argument><expr><name><name>scanSession</name><operator>.</operator><name>columnSet</name></name></expr></argument>, <argument><expr><name><name>scanSession</name><operator>.</operator><name>auths</name></name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>,
          <argument><expr><name><name>scanSession</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>, <argument><expr><name><name>scanSession</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>scanSession</name><operator>.</operator><name>interruptFlag</name></name></expr><operator>,</operator> <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>fromThrift</name></name><argument_list>(<argument><expr><name>tSamplerConfig</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>scanSession</name><operator>.</operator><name>batchTimeOut</name></name></expr></expr_stmt>)</block>;</class>
 
       <decl_stmt><decl><type><name>long</name></type> <name>sid</name> <init>= <expr><call><name><name>sessionManager</name><operator>.</operator><name>createSession</name></name><argument_list>(<argument><expr><name>scanSession</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">502</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">507</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>ScanResult</name> <call><name>continueScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>,
        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name> <block>{
        <expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name></expr>, <argument><expr><name>TSampleNotPresentException</name> <block>{
       <expr><name>ScanSession</name> <name>scanSession</name> <operator>=</operator> <operator>(</operator><name>ScanSession</name><operator>)</operator> <call><name><name>sessionManager</name><operator>.</operator><name>reserveSession</name></name><argument_list>(<argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr></block></expr></argument></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>scanSession</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>NoSuchScanIDException</name><argument_list>()</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">516</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">521</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
     }</block>
 
     <specifier>private</specifier> <name>ScanResult</name> <call><name>continueScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>, <argument><expr><name>ScanSession</name> <name>scanSession</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>NotServingTabletException</name></expr></argument>,
        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name> <block>{
        <expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name></expr>, <argument><expr><name>TSampleNotPresentException</name> <block>{</block></expr></argument></block></expr></argument></throws></expr></expr_stmt>
 
       <if_stmt><if>if <condition>(<expr><name><name>scanSession</name><operator>.</operator><name>nextBatchTask</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>scanSession</name><operator>.</operator><name>nextBatchTask</name></name> <operator>=</operator> <operator>new</operator> <call><name>NextBatchTask</name><argument_list>(<argument><expr><name><name>TabletServer</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>scanID</name></expr></argument>, <argument><expr><name><name>scanSession</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">533</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">538</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
           <throw>throw <argument_list>(<argument><expr><name>NotServingTabletException</name></expr></argument></argument_list></throw>) <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>TooManyFilesException</name></expr>)</condition><block type="pseudo"><block_content>
           <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TooManyFilesException</name></name><argument_list>(<argument><expr><call><name><name>scanSession</name><operator>.</operator><name>extent</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>SampleNotPresentException</name></expr>)</condition><block type="pseudo"><block_content>
          <throw>throw <expr><operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>(<argument><expr><call><name><name>scanSession</name><operator>.</operator><name>extent</name><operator>.</operator><name>toThrift</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
         <if type="elseif">else if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>IOException</name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name>sleepUninterruptibly</name><argument_list>(<argument><expr><name>MAX_TIME_TO_WAIT_FOR_SCAN_RESULT_MILLIS</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>KVEntry</name></argument>&gt;</argument_list></name></type> <name>empty</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">595</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">602</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>InitialMultiScan</name> <call><name>startMultiScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>TCredentials</name> <name>credentials</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TKeyExtent</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TRange</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>tbatch</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>TColumn</name></argument>&gt;</argument_list></name> <name>tcolumns</name></expr></argument>,
        <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call>
        <throws>throws <argument><expr><name>ThriftSecurityException</name> <block>{
        <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name> <name>authorizations</name></expr></argument>, <argument><expr><name>boolean</name> <name>waitForWrites</name></expr></argument>,
        <argument><expr><name>TSamplerConfiguration</name> <name>tSamplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>ThriftSecurityException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name> <block>{
       <comment type="line">// find all of the tables that need to be scanned</comment>
       <expr><name>final</name> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>tables</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>TKeyExtent</name></type> <name>keyExtent</name> <range>: <expr><call><name><name>tbatch</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">627</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">634</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>waitForWrites</name></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>writeTracker</name><operator>.</operator><name>waitForWrites</name></name><argument_list>(<argument><expr><call><name><name>TabletType</name><operator>.</operator><name>type</name></name><argument_list>(<argument><expr><call><name><name>batch</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
      <name>final</name> <name>MultiScanSession</name> <name>mss</name> <operator>=</operator> <operator>new</operator> <call><name>MultiScanSession</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>threadPoolExtent</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Authorizations</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>MultiScanSession</name></type> <name>mss</name> <init>= <expr><operator>new</operator> <call><name>MultiScanSession</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>threadPoolExtent</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Authorizations</name><argument_list>(<argument><expr><name>authorizations</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>fromThrift</name></name><argument_list>(<argument><expr><name>tSamplerConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <expr_stmt><expr><name><name>mss</name><operator>.</operator><name>numTablets</name></name> <operator>=</operator> <call><name><name>batch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <range>: <expr><call><name><name>batch</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">653</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">661</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>MultiScanResult</name> <call><name>continueMultiScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>NoSuchScanIDException</name> <block>{
    <expr><specifier>public</specifier> <name>MultiScanResult</name> <call><name>continueMultiScan</name><argument_list>(<argument><expr><name>TInfo</name> <name>tinfo</name></expr></argument>, <argument><expr><name>long</name> <name>scanID</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name> <block>{
 
       <expr><name>MultiScanSession</name> <name>session</name> <operator>=</operator> <operator>(</operator><name>MultiScanSession</name><operator>)</operator> <call><name><name>sessionManager</name><operator>.</operator><name>reserveSession</name></name><argument_list>(<argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">668</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">676</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></for>
 
    <function><type><specifier>private</specifier> <name>MultiScanResult</name></type> <name>continueMultiScan</name><parameter_list>(<parameter><decl><type><name>TInfo</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scanID</name></decl></parameter>, <parameter><decl><type><name>MultiScanSession</name></type> <name>session</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <name>MultiScanResult</name></type> <name>continueMultiScan</name><parameter_list>(<parameter><decl><type><name>TInfo</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scanID</name></decl></parameter>, <parameter><decl><type><name>MultiScanSession</name></type> <name>session</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchScanIDException</name></expr></argument>, <argument><expr><name>TSampleNotPresentException</name></expr></argument></throws> <block>{<block_content>
 
       <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>.</operator><name>lookupTask</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>session</name><operator>.</operator><name>lookupTask</name></name> <operator>=</operator> <operator>new</operator> <call><name>LookupTask</name><argument_list>(<argument><expr><name><name>TabletServer</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">679</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">687</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
         <expr><name>MultiScanResult</name> <name>scanResult</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>lookupTask</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>MAX_TIME_TO_WAIT_FOR_SCAN_RESULT_MILLIS</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
         <name><name>session</name><operator>.</operator><name>lookupTask</name></name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>
         <return>return <expr><name>scanResult</name></expr>;</return>
      </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sessionManager</name><operator>.</operator><name>removeSession</name></name><argument_list>(<argument><expr><name>scanID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>SampleNotPresentException</name></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>TSampleNotPresentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to get multiscan result"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
       </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>TabletServer</name><operator>.</operator><name>this</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_CLIENT_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>sessionManager</name><operator>.</operator><name>removeIfNotAccessed</name></name><argument_list>(<argument><expr><name>scanID</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1116</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
 
         <expr><name>IterConfig</name> <name>ic</name> <operator>=</operator> <call><name><name>compressedIters</name><operator>.</operator><name>decompress</name></name><argument_list>(<argument><expr><name><name>tc</name><operator>.</operator><name>iterators</name></name></expr></argument>)</argument_list></call></expr>;
 
        <name>Scanner</name> <name>scanner</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EMPTY_COLUMNS</name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>auths</name></name></expr></argument>, <argument><expr><name><name>ic</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>ic</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>tablet</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EMPTY_COLUMNS</name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>auths</name></name></expr></argument>, <argument><expr><name><name>ic</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>ic</name><operator>.</operator><name>ssio</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>interruptFlag</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <try>try <block>{<block_content>
           <decl_stmt><decl><type><name>ScanBatch</name></type> <name>batch</name> <init>= <expr><call><name><name>scanner</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name>strategies</name><operator>/</operator><name><name>ConfigurableCompactionStrategy</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name>strategies</name><operator>/</operator><name><name>ConfigurableCompactionStrategy</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b97b88be3</name><operator>..</operator><literal type="number">04915eff1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name>strategies</name><operator>/</operator><name><name>ConfigurableCompactionStrategy</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name>strategies</name><operator>/</operator><name><name>ConfigurableCompactionStrategy</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>ConfigurationCopy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionPlan</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionStrategy</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConfigurableCompactionStrategy</name> extends <name>CompactionStrategy</name> <block>{
     <expr><name>boolean</name> <call><name>shouldCompact</name><argument_list>(<argument><expr><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name> <name>file</name></expr></argument>, <argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>NoSampleTest</name> <super_list><implements>implements <super><name>Test</name></super></implements></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <try>try <init>(<decl><type><name>FileSKVIterator</name></type> <name>reader</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>openReader</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
        <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sc</name> <init>= <expr><call><name><name>SamplerConfigurationImpl</name><operator>.</operator><name>newSamplerConfig</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getTableProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>reader</name><operator>.</operator><name>getSample</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>
  }</block></class>

   <class><specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>FileSizeTest</name> <super_list><implements>implements <super><name>Test</name></super></implements></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>esize</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConfigurableCompactionStrategy</name> extends <name>CompactionStrategy</name> <block>{
     <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>es</name></expr></range></decl></init>)</control> <block>{<block_content>
 
       <switch>switch <condition>(<expr><call><name><name>CompactionSettings</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SF_NO_SAMPLE</name></expr>:</case>
          <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NoSampleTest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
         <case>case <expr><name>SF_LT_ESIZE_OPT</name></expr>:</case>
           <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FileSizeTest</name></super><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
             <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>LookupTask</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>LookupTask</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">57a09ce26</literal><operator>..</operator><literal type="number">2d745cb61</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>LookupTask</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>LookupTask</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Translator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Translators</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>LookupTask</name> extends <name><name>ScanTask</name><argument_list type="generic">&lt;<argument><name>MultiScanResult</name></argument>&gt;</argument_list></name> <block>{
             <expr><call><name><name>interruptFlag</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
           <name>lookupResult</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>columnSet</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>auths</name></name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>maxResultsSize</name> <operator>-</operator> <name>bytesAdded</name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>ssiList</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>ssio</name></name></expr></argument>,
              <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>batchTimeOut</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
              <expr_stmt><expr><name>interruptFlag</name></expr><operator>,</operator> <expr><name><name>session</name><operator>.</operator><name>samplerConfig</name></name></expr><operator>,</operator> <expr><name><name>session</name><operator>.</operator><name>batchTimeOut</name></name></expr></expr_stmt></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
           <comment type="line">// if the tablet was closed it it possible that the</comment>
           <comment type="line">// interrupt flag was set.... do not want it set for</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>LookupTask</name> extends <name><name>ScanTask</name><argument_list type="generic">&lt;<argument><name>MultiScanResult</name></argument>&gt;</argument_list></name> <block>{
         <expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Iteration interrupted, when scan not cancelled"</literal></expr></argument>, <argument><expr><name>iie</name></expr></argument>)</argument_list></call></expr>;
         <call><name>addResult</name><argument_list>(<argument><expr><name>iie</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       </block_content>}</block></switch>
    </block_content>}</block></for></block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>SampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"exception while doing multi-scan "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>NextBatchTask</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>NextBatchTask</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3f414615</name><operator>..</operator><name>ec2836763</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>NextBatchTask</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>scan</name><operator>/</operator><name><name>NextBatchTask</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>scan</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IterationInterruptedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>Halt</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>TabletServer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>NextBatchTask</name> extends <name><name>ScanTask</name><argument_list type="generic">&lt;<argument><name>ScanBatch</name></argument>&gt;</argument_list></name> <block>{
         <expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Iteration interrupted, when scan not cancelled"</literal></expr></argument>, <argument><expr><name>iie</name></expr></argument>)</argument_list></call></expr>;
         <call><name>addResult</name><argument_list>(<argument><expr><name>iie</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       </block_content>}</block></catch>
    }</block></class> <catch>catch <parameter_list>(<parameter><decl><type><name>TooManyFilesException</name></type> <name>tmfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>tmfe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TooManyFilesException</name></type> | <type><name>SampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>ome</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>Halt</name><operator>.</operator><name>halt</name></name><argument_list>(<argument><expr><literal type="string">"Ran out of memory scanning "</literal> <operator>+</operator> <name><name>scanSession</name><operator>.</operator><name>extent</name></name> <operator>+</operator> <literal type="string">" for "</literal> <operator>+</operator> <name><name>scanSession</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>ome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>session</name><operator>/</operator><name><name>MultiScanSession</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>session</name><operator>/</operator><name><name>MultiScanSession</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fccac475a</name><operator>..</operator><literal type="number">16fc21821</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>session</name><operator>/</operator><name><name>MultiScanSession</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>session</name><operator>/</operator><name><name>MultiScanSession</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>impl</name><operator>.</operator><name>KeyExtent</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiScanSession</name> extends <name>Session</name> <block>{
   <expr><specifier>public</specifier> <name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr>;
   <specifier>public</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Authorizations</name></type> <name>auths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt>
 
   <comment type="line">// stats</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiScanSession</name> extends <name>Session</name> <block>{
   <expr><specifier>public</specifier> <specifier>volatile</specifier> <name><name>ScanTask</name><argument_list type="generic">&lt;<argument><name>MultiScanResult</name></argument>&gt;</argument_list></name> <name>lookupTask</name></expr>;
 
   <specifier>public</specifier> <call><name>MultiScanSession</name><argument_list>(<argument><expr><name>TCredentials</name> <name>credentials</name></expr></argument>, <argument><expr><name>KeyExtent</name> <name>threadPoolExtent</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>KeyExtent</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>queries</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>,
      <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name>Authorizations</name> <name>authorizations</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr>, <expr><name>Authorizations</name> <name>authorizations</name></expr>, <expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr>, <expr><name>long</name> <name>batchTimeOut</name></expr>) <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;
     <name><name>this</name><operator>.</operator><name>queries</name></name> <operator>=</operator> <name>queries</name></block></block></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ssiList</name></name> <operator>=</operator> <name>ssiList</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <name>ssio</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>auths</name></name> <operator>=</operator> <name>authorizations</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadPoolExtent</name></name> <operator>=</operator> <name>threadPoolExtent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
   </block_content>}</block></catch>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanDataSource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanDataSource</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">853714af0</literal><operator>..</operator><literal type="number">72c289c07</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanDataSource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanDataSource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>SourceSwitchingIterator</name><operator>.</operator><name>DataSou</name></name>
 <name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>StatsIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>VisibilityFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>InMemoryMap</name><operator>.</operator><name>MemoryIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>TabletIteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>TabletServer</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

 <class>class <name>ScanDataSource</name> <super_list><implements>implements <super><name>DataSource</name></super></implements></super_list> <block>{
 
   <comment type="line">// data source state</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>ScanDataSource</name> implements <name>DataSource</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>ScanOptions</name> <name>options</name></expr>;
 
   <call><name>ScanDataSource</name><argument_list>(<argument><expr><name>Tablet</name> <name>tablet</name></expr></argument>, <argument><expr><name>Authorizations</name> <name>authorizations</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>defaultLabels</name></expr></argument>, <argument><expr><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name> <name>columnSet</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>,
      <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr>, <expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr>, <expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr>, <expr><name>long</name> <name>batchTimeOut</name></expr>) <block>{
     <expr><name><name>this</name><operator>.</operator><name>tablet</name></name> <operator>=</operator> <name>tablet</name></expr>;
     <name>expectedDeletionCount</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getDataSourceDeletions</name></name><argument_list>()</argument_list></call></block></block></block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name>ScanOptions</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>defaultLabels</name></expr></argument>, <argument><expr><name>columnSet</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name>ScanOptions</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name>defaultLabels</name></expr></argument>, <argument><expr><name>columnSet</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interruptFlag</name></name> <operator>=</operator> <name>interruptFlag</name></expr>;</expr_stmt>
   }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>ScanDataSource</name> implements <name>DataSource</name> <block>{
 
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name> <name>files</name></expr>;
 
    <name>SamplerConfigurationImpl</name> <name>samplerConfig</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getSamplerConfigurationImpl</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>

     <synchronized>synchronized <init>(<expr><name>tablet</name></expr>)</init> <block>{<block_content>
 
       <if_stmt><if>if <condition>(<expr><name>memIters</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <name>class</name> <name>ScanDataSource</name> implements <name>DataSource</name> <block>{
       <comment type="line">// getIterators() throws an exception</comment>
       <expr><name>expectedDeletionCount</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getDataSourceDeletions</name></name><argument_list>()</argument_list></call></expr>;
 
      <name>memIters</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getTabletMemory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIterators</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>memIters</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getTabletMemory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIterators</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>reservation</name> <init>= <expr><call><name><name>tablet</name><operator>.</operator><name>getDatafileManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reserveFilesForScan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name>fileReservationId</name> <operator>=</operator> <call><name><name>reservation</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>files</name> <operator>=</operator> <call><name><name>reservation</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></synchronized>
 
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InterruptibleIterator</name></argument>&gt;</argument_list></name></type> <name>mapfiles</name> <init>= <expr><call><name><name>fileManager</name><operator>.</operator><name>openFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>isIsolated</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InterruptibleIterator</name></argument>&gt;</argument_list></name></type> <name>mapfiles</name> <init>= <expr><call><name><name>fileManager</name><operator>.</operator><name>openFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>isIsolated</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>skvi</name> <range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>mapfiles</name></expr></argument>, <argument><expr><name>memIters</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>InterruptibleIterator</name><operator>)</operator> <name>skvi</name><operator>)</operator><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
 
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mapfiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>memIters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>iters</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>mapfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>iters</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>memIters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <for>for <control>(<init><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>skvi</name> <range>: <expr><name>iters</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>InterruptibleIterator</name><operator>)</operator> <name>skvi</name><operator>)</operator><operator>.</operator><call><name>setInterruptFlag</name><argument_list>(<argument><expr><name>interruptFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

     <decl_stmt><decl><type><name>MultiIterator</name></type> <name>multiIter</name> <init>= <expr><operator>new</operator> <call><name>MultiIterator</name><argument_list>(<argument><expr><name>iters</name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getExtent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>TabletIteratorEnvironment</name></type> <name>iterEnv</name> <init>= <expr><operator>new</operator> <call><name>TabletIteratorEnvironment</name><argument_list>(<argument><expr><name><name>IteratorScope</name><operator>.</operator><name>scan</name></name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getTableConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileManager</name></expr></argument>, <argument><expr><name>files</name></expr></argument>,
        <argument><expr><call><name><name>options</name><operator>.</operator><name>getAuthorizations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>getAuthorizations</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>samplerConfig</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
 
     <expr_stmt><expr><name>statsIterator</name> <operator>=</operator> <operator>new</operator> <call><name>StatsIterator</name><argument_list>(<argument><expr><name>multiIter</name></expr></argument>, <argument><expr><name><name>TabletServer</name><operator>.</operator><name>seekCount</name></name></expr></argument>, <argument><expr><call><name><name>tablet</name><operator>.</operator><name>getScannedCounter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>ScanDataSource</name> implements <name>DataSource</name> <block>{
 
   <expr><specifier>public</specifier> <name>void</name> <call><name>reattachFileManager</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
     <if_stmt><if>if <condition>(<expr><name>fileManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>fileManager</name><operator>.</operator><name>reattach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <call><name><name>fileManager</name><operator>.</operator><name>reattach</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getSamplerConfigurationImpl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   </block_content>}</block></catch>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>detachFileManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanOptions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanOptions</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2a38fbddd</literal><operator>..</operator><name>c97f3acf2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanOptions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>ScanOptions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IterInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 
 <class><specifier>final</specifier> class <name>ScanOptions</name> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>final</name> <name>class</name> <name>ScanOptions</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>AtomicBoolean</name> <name>interruptFlag</name></expr>;
   <specifier>private</specifier> <name>final</name> <name>int</name> <name>num</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isolated</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>SamplerConfiguration</name></type> <name>samplerConfig</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>batchTimeOut</name></decl>;</decl_stmt>
 
   <constructor><name>ScanOptions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>Authorizations</name></type> <name>authorizations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>defaultLabels</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnSet</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name></type> <name>ssiList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ssio</name></decl></parameter>,
      <parameter><decl><type><name>AtomicBoolean</name></type> <name>interruptFlag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isolated</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>batchTimeOut</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>AtomicBoolean</name></type> <name>interruptFlag</name></decl>, <decl><type ref="prev"/><name>boolean</name> <name>isolated</name></decl>, <decl><type ref="prev"/><name>SamplerConfiguration</name> <name>samplerConfig</name></decl>, <decl><type ref="prev"/><name>long</name> <name>batchTimeOut</name></decl>) <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <name>authorizations</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultLabels</name></name> <operator>=</operator> <name>defaultLabels</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>final</name> <name>class</name> <name>ScanOptions</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>ssio</name></name> <operator>=</operator> <name>ssio</name></expr>;
     <name><name>this</name><operator>.</operator><name>interruptFlag</name></name> <operator>=</operator> <name>interruptFlag</name></block></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isolated</name></name> <operator>=</operator> <name>isolated</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samplerConfig</name></name> <operator>=</operator> <name>samplerConfig</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchTimeOut</name></name> <operator>=</operator> <name>batchTimeOut</name></expr>;</expr_stmt>
   </block_content>}</block></decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>final</name> <name>class</name> <name>ScanOptions</name> <block>{
     <return>return <expr><name>isolated</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>samplerConfig</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>SamplerConfigurationImpl</name></type> <name>getSamplerConfigurationImpl</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>long</name></type> <name>getBatchTimeOut</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>batchTimeOut</name></expr>;</return>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b8c260d42</name><operator>..</operator><literal type="number">1f66302db</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Durability</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>DurabilityImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Tables</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">632</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">633</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>LookupResult</name> <call><name>lookup</name><argument_list>(<argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name> <name>ranges</name></expr></argument>, <argument><expr><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>Authorizations</name> <name>authorizations</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>KVEntry</name></argument>&gt;</argument_list></name> <name>results</name></expr></argument>, <argument><expr><name>long</name> <name>maxResultSize</name></expr></argument>,
      <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr></argument>, <argument><expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument></block></expr></argument></throws></expr></expr_stmt>)</block_content>
      <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
 
     if (ranges.size(</block></constructor>)</block> <expr_stmt><expr><operator>==</operator> <literal type="number">0</literal></expr></expr_stmt></class>)</block_content> <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>LookupResult</name><argument_list>()</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">650</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">652</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
       <expr><call><name><name>tabletRange</name><operator>.</operator><name>clip</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <decl_stmt><decl><type><name>ScanDataSource</name></type> <name>dataSource</name> <init>= <expr><operator>new</operator> <call><name>ScanDataSource</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>defaultSecurityLabel</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanDataSource</name></type> <name>dataSource</name> <init>= <expr><operator>new</operator> <call><name>ScanDataSource</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>defaultSecurityLabel</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>,
        <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>LookupResult</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">754</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">757</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>Scanner</name> <call><name>createScanner</name><argument_list>(<argument><expr><name>Range</name> <name>range</name></expr></argument>, <argument><expr><name>int</name> <name>num</name></expr></argument>, <argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name> <name>columns</name></expr></argument>, <argument><expr><name>Authorizations</name> <name>authorizations</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IterInfo</name></argument>&gt;</argument_list></name> <name>ssiList</name></expr></argument>,
      <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr></argument>, <argument><expr><name>boolean</name> <name>isolated</name></expr></argument>, <argument><expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr></argument>, <argument><expr><name>long</name> <name>batchTimeOut</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>ssio</name></expr>, <expr><name>boolean</name> <name>isolated</name></expr>, <expr><name>AtomicBoolean</name> <name>interruptFlag</name></expr>, <expr><name>SamplerConfiguration</name> <name>samplerConfig</name></expr>, <expr><name>long</name> <name>batchTimeOut</name></expr>) <block>{
     <comment type="line">// do a test to see if this range falls within the tablet, if it does not</comment>
     <comment type="line">// then clip will throw an exception</comment>
     <expr><call><name><name>extent</name><operator>.</operator><name>toDataRange</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clip</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;
 
    <name>ScanOptions</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>ScanOptions</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>defaultSecurityLabel</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ScanOptions</name></type> <name>opts</name> <init>= <expr><operator>new</operator> <call><name>ScanOptions</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>authorizations</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>defaultSecurityLabel</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>ssiList</name></expr></argument>, <argument><expr><name>ssio</name></expr></argument>, <argument><expr><name>interruptFlag</name></expr></argument>, <argument><expr><name>isolated</name></expr></argument>, <argument><expr><name>samplerConfig</name></expr></argument>,
        <argument><expr><name>batchTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>TabletMemory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>TabletMemory</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0b39d40bf</literal><operator>..</operator><literal type="number">86cc2626a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>TabletMemory</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>TabletMemory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>LocalityGroupConfigurationError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>InMemoryMap</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>InMemoryMap</name><operator>.</operator><name>MemoryIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>TabletMemory</name> implements <name>Closeable</name> <block>{
     <expr><call><name><name>tablet</name><operator>.</operator><name>updateMemoryUsageStats</name></name><argument_list>(<argument><expr><call><name><name>memTable</name><operator>.</operator><name>estimatedSizeInBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>MemoryIterator</name></argument>&gt;</argument_list></name></type> <name>getIterators</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>MemoryIterator</name></argument>&gt;</argument_list></name></type> <name>getIterators</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>samplerConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MemoryIterator</name></argument>&gt;</argument_list></name></type> <name>toReturn</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>MemoryIterator</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>toReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>memTable</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>memTable</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>otherMemTable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>toReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>otherMemTable</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>toReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>otherMemTable</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>toReturn</name></expr>;</return>
   </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMapTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMapTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>da7157afd</name><operator>..</operator><literal type="number">7b4d447e5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMapTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>InMemoryMapTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>BaseIteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>ConfigurationCopy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>DefaultConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ArrayByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">56</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IterationInterruptedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>system</name><operator>.</operator><name>ColumnFamilySkippingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>Sampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>LocalityGroupUtil</name><operator>.</operator><name>LocalityGroupConfigurationError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>client</name><operator>.</operator><name>HdfsZooInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>conf</name><operator>.</operator><name>ZooConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>InMemoryMap</name><operator>.</operator><name>MemoryIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Ignore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>ExpectedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>TemporaryFolder</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>

 <class><specifier>public</specifier> class <name>InMemoryMapTest</name> <block>{
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SampleIE</name> <super_list><extends>extends <super><name>BaseIteratorEnvironment</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>sampleConfig</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SampleIE</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleConfig</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>SampleIE</name><parameter_list>(<parameter><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleConfig</name></name> <operator>=</operator> <call><name><name>sampleConfig</name><operator>.</operator><name>toSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isSamplingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>sampleConfig</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SamplerConfiguration</name></type> <name>getSamplerConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>sampleConfig</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>ExpectedException</name></type> <name>thrown</name> <init>= <expr><call><name><name>ExpectedException</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

   <function><annotation>@<name>BeforeClass</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// suppress log messages having to do with not having an instance</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
   }</block>
 
   <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <call><name>newCFSet</name><argument_list>(<argument><expr><name>String</name><operator>...</operator> <name>cfs</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>cfSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name> <name>cfSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>cf</name> <range>: <expr><name>cfs</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>cfSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArrayByteSequence</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     <return>return <expr><name>cfSet</name></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name></type> <name>toTextSet</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>cfs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name></type> <name>cfSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>cf</name> <range>: <expr><name>cfs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cfSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>cfSet</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>ConfigurationCopy</name></type> <name>newConfig</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>memDumpDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_NATIVEMAP_ENABLED</name></name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_MEMDUMP_DIR</name></name></expr></argument>, <argument><expr><name>memDumpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>config</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>InMemoryMap</name></type> <name>newInMemoryMap</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>useNative</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>memDumpDir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LocalityGroupConfigurationError</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationCopy</name><argument_list>(<argument><expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_NATIVEMAP_ENABLED</name></name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>useNative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_MEMDUMP_DIR</name></name></expr></argument>, <argument><expr><name>memDumpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski2</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski2</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ski1</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>test3</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r3"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r3"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bara"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski2</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski2</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>ski1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>test4</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>test5</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>ski1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">204</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">267</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
     <expr><call><name><name>ski1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
 
    <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>ski1</name> <operator>=</operator> <call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ski1</name> <operator>=</operator> <call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>ski1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>test6</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc</name> <init>= <expr><call><name><name>ski1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc</name> <init>= <expr><call><name><name>ski1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name>nk</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>ski1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">271</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">334</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
   <expr><specifier>private</specifier> <name>void</name> <call><name>deepCopyAndDelete</name><argument_list>(<argument><expr><name>int</name> <name>interleaving</name></expr></argument>, <argument><expr><name>boolean</name> <name>interrupt</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <comment type="line">// interleaving == 0 intentionally omitted, this runs the test w/o deleting in mem map</comment>
 
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>AtomicBoolean</name></type> <name>iflag</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>ski1</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>iflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">350</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
         <expr><call><name><name>iflag</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc</name> <init>= <expr><call><name><name>ski1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc</name> <init>= <expr><call><name><name>ski1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>interleaving</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">338</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">401</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testBug1</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">348</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">411</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
       <expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r2"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>ski1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ColumnFamilySkippingIterator</name></type> <name>cfsi</name> <init>= <expr><operator>new</operator> <call><name>ColumnFamilySkippingIterator</name><argument_list>(<argument><expr><name>ski1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">366</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">429</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testSeekBackWards</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>skvi1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>skvi1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>skvi1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name>nk</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>skvi1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">385</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">448</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDuplicateKey</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>InMemoryMap</name> <name>imm</name> <operator>=</operator> <call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cq"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"v1"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cq"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"v2"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>mutate</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>skvi1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>skvi1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>skvi1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>skvi1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>skvi1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"foo:cq"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"v1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">410</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">473</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
   <comment type="line">// - hard to get this timing test to run well on apache build machines</comment>
   @<expr><name>Test</name>
   @<name>Ignore</name>
  <specifier>public</specifier> <name>void</name> <call><name>parallelWriteSpeed</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>void</name> <call><name>parallelWriteSpeed</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name> <name>timings</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>threads</name> <range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <comment type="block">/* 64, 256 */</comment>}</block></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name><name>counts</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name>threads</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>ExecutorService</name></type> <name>e</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newFixedThreadPool</name></name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>threads</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>threadId</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">451</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testLocalityGroups</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>ConfigurationCopy</name> <name>config</name> <operator>=</operator> <call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUP_PREFIX</name></name> <operator>+</operator> <literal type="string">"lg1"</literal></expr></argument>, <argument><expr><call><name><name>LocalityGroupUtil</name><operator>.</operator><name>encodeColumnFamilies</name></name><argument_list>(<argument><expr><call><name>toTextSet</name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cf2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUP_PREFIX</name></name> <operator>+</operator> <literal type="string">"lg2"</literal></expr></argument>, <argument><expr><call><name><name>LocalityGroupUtil</name><operator>.</operator><name>encodeColumnFamilies</name></name><argument_list>(<argument><expr><call><name>toTextSet</name><argument_list>(<argument><expr><literal type="string">"cf3"</literal></expr></argument>, <argument><expr><literal type="string">"cf4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUPS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lg1,lg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>lggroups1</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>lggroups1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"lg1"</literal></expr></argument>, <argument><expr><call><name>newCFSet</name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cf2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>lggroups1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"lg2"</literal></expr></argument>, <argument><expr><call><name>newCFSet</name><argument_list>(<argument><expr><literal type="string">"cf3"</literal></expr></argument>, <argument><expr><literal type="string">"cf4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>lggroups1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>Mutation</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">480</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">543</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
 
     <expr><call><name><name>imm</name><operator>.</operator><name>mutate</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <name>MemoryIterator</name> <name>iter1</name> <operator>=</operator> <call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name>seekLocalityGroups</name><argument_list>(<argument><expr><name>iter1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc1</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc1</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>seekLocalityGroups</name><argument_list>(<argument><expr><name>dc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>imm</name><operator>.</operator><name>getNumEntries</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">497</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">560</literal></expr><operator>,</operator><expr><literal type="number">254</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryMapTest</name> <block>{
     <comment type="line">// seekLocalityGroups(iter1.deepCopy(null));</comment>
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testSample</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{

    <expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>, <argument><expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config1</name> <init>= <expr><call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config2</name> <init>= <expr><call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config2</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUP_PREFIX</name></name> <operator>+</operator> <literal type="string">"lg1"</literal></expr></argument>, <argument><expr><call><name><name>LocalityGroupUtil</name><operator>.</operator><name>encodeColumnFamilies</name></name><argument_list>(<argument><expr><call><name>toTextSet</name><argument_list>(<argument><expr><literal type="string">"cf2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config2</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_LOCALITY_GROUPS</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config2</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>ConfigurationCopy</name></type> <name>config</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>config1</name></expr></argument>, <argument><expr><name>config2</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

      <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedSample</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedAll</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedNone</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter0</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r%06d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1:cq1"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v"</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name><operator>)</operator></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><name>expectedAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf2:cq2"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v"</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><name>expectedAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>expectedSample</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter1</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter2</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter0dc1</name> <init>= <expr><call><name><name>iter0</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter0dc2</name> <init>= <expr><call><name><name>iter0</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter1dc1</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter1dc2</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter2dc1</name> <init>= <expr><call><name><name>iter2</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter2dc2</name> <init>= <expr><call><name><name>iter2</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter0dc3</name> <init>= <expr><call><name><name>iter0</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter0dc4</name> <init>= <expr><call><name><name>iter0</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter1dc3</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter1dc4</name> <init>= <expr><call><name><name>iter1</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter2dc3</name> <init>= <expr><call><name><name>iter2</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter2dc4</name> <init>= <expr><call><name><name>iter2</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedNone</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter0dc4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter1dc4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter2dc4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>iter1</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iter2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInterruptingSample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>runInterruptSampleTest</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runInterruptSampleTest</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runInterruptSampleTest</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runInterruptSampleTest</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runInterruptSampleTest</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>runInterruptSampleTest</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>deepCopy</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>delete</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dcAfterDelete</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig1</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>sampleConfig1</name></expr></argument>, <argument><expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config1</name> <init>= <expr><call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig1</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedSample</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedAll</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r%06d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1:cq1"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v"</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name><operator>)</operator></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><name>expectedAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf2:cq2"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v"</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>r</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><name>expectedAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>expectedSample</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>miter</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AtomicBoolean</name></type> <name>iFlag</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>miter</name><operator>.</operator><name>setInterruptFlag</name></name><argument_list>(<argument><expr><name>iFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><name>miter</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>delete</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dcAfterDelete</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>deepCopy</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>iter</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>delete</name> <operator>&amp;&amp;</operator> <name>dcAfterDelete</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iFlag</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IterationInterruptedException</name></type> <name>iie</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>

    <expr_stmt><expr><call><name><name>miter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>mutate</name><parameter_list>(<parameter><decl><type><name>InMemoryMap</name></type> <name>imm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>Sampler</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedSample</name></decl></parameter>,
      <parameter><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedAll</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Key</name></type> <name>k1</name> <init>= <expr><call><name>nk</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>expectedSample</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>expectedAll</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>SampleNotPresentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDifferentSampleConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config1</name> <init>= <expr><call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><literal type="string">"cf:cq"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig2</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>SampleNotPresentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNoSampleConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><literal type="string">"cf:cq"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig2</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEmptyNoSampleConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><call><name>newInMemoryMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig2</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// when in mem map is empty should be able to get sample iterator with any sample config</comment>
    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDeferredSamplerCreation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig1</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConfigurationCopy</name></type> <name>config1</name> <init>= <expr><call><name>newConfig</name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>newFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig1</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>InMemoryMap</name></type> <name>imm</name> <init>= <expr><operator>new</operator> <call><name>InMemoryMap</name><argument_list>(<argument><expr><name>config1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// change sampler config after creating in mem map.</comment>
    <decl_stmt><decl><type><name>SamplerConfigurationImpl</name></type> <name>sampleConfig2</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>sampleConfig2</name><operator>.</operator><name>toTablePropertiesMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedSample</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expectedAll</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Sampler</name></type> <name>sampler</name> <init>= <expr><call><name><name>SamplerFactory</name><operator>.</operator><name>newSampler</name></name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>, <argument><expr><name>config1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="string">"r"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"cf:cq"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><name>expectedAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>MemoryIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>dc</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SampleIE</name><argument_list>(<argument><expr><name>sampleConfig2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dc</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedSample</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedAll</name></expr></argument>, <argument><expr><call><name>readAll</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>imm</name><operator>.</operator><name>skvIterator</name></name><argument_list>(<argument><expr><name>sampleConfig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>thrown</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><name><name>SampleNotPresentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>readAll</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LocalityGroupUtil</name><operator>.</operator><name>EMPTY_CF_SET</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>actual</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>actual</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iter</name><operator>.</operator><name>getTopValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>actual</name></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>seekLocalityGroups</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>iter1</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>iter1</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>newCFSet</name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>ae</name><argument_list>(<argument><expr><name>iter1</name></expr></argument>, <argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><literal type="string">"cf1:x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>DefaultCompactionStrategyTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>DefaultCompactionStrategyTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">55226fbca</literal><operator>..</operator><literal type="number">0388c1f30</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>DefaultCompactionStrategyTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>DefaultCompactionStrategyTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>NoSuchMetaStoreException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultCompactionStrategyTest</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{}</block>
 
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>FileSKVIterator</name> <call><name>getSample</name><argument_list>(<argument><expr><name>SamplerConfigurationImpl</name> <name>sampleConfig</name></expr></argument>)</argument_list></call> <block>{</block></expr></argument></throws></expr>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></expr></expr_stmt>

   </block_content>}</block></function>
 
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>DefaultConfiguration</name></type> <name>dfault</name> <init>= <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getDefaultConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f183b2501</name><operator>..</operator><name>c8b0e11d8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
 
   <comment type="line">// file selection and file output options</comment>
   <expr><specifier>private</specifier> <name>Option</name> <name>enameOption</name></expr>, <expr><name>epathOption</name></expr>, <expr><name>sizeLtOption</name></expr>, <expr><name>sizeGtOption</name></expr>, <expr><name>minFilesOption</name></expr>, <expr><name>outBlockSizeOpt</name></expr>, <expr><name>outHdfsBlockSizeOpt</name></expr>, <expr><name>outIndexBlockSizeOpt</name></expr>,
      <expr><name>outCompressionOpt</name></expr>, <expr><name>outReplication</name></expr>;
      <name>outCompressionOpt</name><operator>,</operator> <name>outReplication</name><operator>,</operator> <name>enoSampleOption</name></block></expr>;</expr_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionConfig</name></type> <name>compactionConfig</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>getConfigurableCompactionStrategyOpts</name><argument_list>(<argument><expr><name>CommandLine</name> <name>cl</name></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
    <call><name>put</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>enoSampleOption</name></expr></argument>, <argument><expr><name><name>CompactionSettings</name><operator>.</operator><name>SF_NO_SAMPLE</name></name></expr></argument>)</argument_list></call></block></expr>;
     <call><name>put</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>enameOption</name></expr></argument>, <argument><expr><name><name>CompactionSettings</name><operator>.</operator><name>SF_NAME_RE_OPT</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>epathOption</name></expr></argument>, <argument><expr><name><name>CompactionSettings</name><operator>.</operator><name>SF_PATH_RE_OPT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>sizeLtOption</name></expr></argument>, <argument><expr><name><name>CompactionSettings</name><operator>.</operator><name>SF_LT_ESIZE_OPT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
     <expr><name>cancelOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"cancel"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"cancel user initiated compactions"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>cancelOpt</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>enoSampleOption</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"sf-no-sample"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
        <argument><expr><literal type="string">"Select files that have no sample data or sample data that differes from the table configuration."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>enoSampleOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>enameOption</name> <operator>=</operator> <call><name>newLAO</name><argument_list>(<argument><expr><literal type="string">"sf-ename"</literal></expr></argument>, <argument><expr><literal type="string">"Select files using regular expression to match file names. Only matches against last part of path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>enameOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>epathOption</name> <operator>=</operator> <call><name>newLAO</name><argument_list>(<argument><expr><literal type="string">"sf-epath"</literal></expr></argument>, <argument><expr><literal type="string">"Select files using regular expression to match file paths to compact. Matches against full path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>GrepCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>GrepCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">97bddc908</literal><operator>..</operator><literal type="number">44ee93c99</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>GrepCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>GrepCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>GrepCommand</name> extends <name>ScanCommand</name> <block>{
 
     <expr><call><name><name>scanner</name><operator>.</operator><name>setTimeout</name></name><argument_list>(<argument><expr><call><name>getTimeout</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
 
    <call><name>setupSampling</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>shellState</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>cl</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>setUpIterator</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>-</operator> <call><name><name>cl</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"grep"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name><name>cl</name><operator>.</operator><name>getArgs</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ScanCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ScanCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3531fe906</literal><operator>..</operator><literal type="number">595829bd4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ScanCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ScanCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ScannerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScanCommand</name> extends <name>Command</name> <block>{
   <expr><specifier>private</specifier> <name>Option</name> <name>optEndRowExclusive</name></expr>;
   <specifier>private</specifier> <name>Option</name> <name>timeoutOption</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>Option</name></type> <name>profileOpt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Option</name></type> <name>sampleOpt</name></decl>;</decl_stmt>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupSampling</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CommandLine</name></type> <name>cl</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Shell</name></type> <name>shellState</name></decl></parameter>, <parameter><decl><type><name>ScannerBase</name></type> <name>scanner</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>,
      <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getUseSample</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>samplerConfig</name> <init>= <expr><call><name><name>shellState</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSamplerConfiguration</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>samplerConfig</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SampleNotPresentException</name><argument_list>(<argument><expr><literal type="string">"Table "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" does not have sampling configured"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Using sampling configuration : "</literal> <operator>+</operator> <name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>samplerConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fullCommand</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CommandLine</name></type> <name>cl</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Shell</name></type> <name>shellState</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScanCommand</name> extends <name>Command</name> <block>{
     <comment type="line">// set timeout</comment>
     <expr><call><name><name>scanner</name><operator>.</operator><name>setTimeout</name></name><argument_list>(<argument><expr><call><name>getTimeout</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
 
    <call><name>setupSampling</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>shellState</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

     <comment type="line">// output the records</comment>
     <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>showFewOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>showLength</name> <init>= <expr><call><name><name>cl</name><operator>.</operator><name>getOptionValue</name></name><argument_list>(<argument><expr><call><name><name>showFewOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScanCommand</name> extends <name>Command</name> <block>{
     <return>return <expr><literal type="number">0</literal></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>getUseSample</name><parameter_list>(<parameter><decl><type><name>CommandLine</name></type> <name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>sampleOpt</name><operator>.</operator><name>getLongOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>protected</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CommandLine</name></type> <name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>timeoutOption</name><operator>.</operator><name>getLongOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return <expr><call><name><name>AccumuloConfiguration</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>getOptionValue</name></name><argument_list>(<argument><expr><call><name><name>timeoutOption</name><operator>.</operator><name>getLongOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">294</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">315</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScanCommand</name> extends <name>Command</name> <block>{
     <expr><name>timeoutOption</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
         <argument><expr><literal type="string">"time before scan should fail if no data is returned. If no unit is given assumes seconds.  Units d,h,m,s,and ms are supported.  e.g. 30s or 100ms"</literal></expr></argument>)</argument_list></call></expr>;
     <name>outputFileOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="string">"o"</literal></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"local file to write the scan output to"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><name>sampleOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"Show sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>scanOptAuths</name><operator>.</operator><name>setArgName</name></name><argument_list>(<argument><expr><literal type="string">"comma-separated-authorizations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>scanOptRow</name><operator>.</operator><name>setArgName</name></name><argument_list>(<argument><expr><literal type="string">"row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">324</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">346</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ScanCommand</name> extends <name>Command</name> <block>{
     <expr><call><name><name>o</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>timeoutOption</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>o</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>outputFileOpt</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>profileOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>sampleOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <return>return <expr><name>o</name></expr>;</return>
   </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>start</name><operator>/</operator><operator>.</operator><name>gitignore</name> <name>b</name><operator>/</operator><name>start</name><operator>/</operator><operator>.</operator><name>gitignore</name>
<name>index</name> <literal type="number">56204d21a</literal><operator>..</operator><name>e7d7fb175</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>start</name><operator>/</operator><operator>.</operator><name>gitignore</name>
<operator>++</operator> <name>b</name><operator>/</operator><name>start</name><operator>/</operator><operator>.</operator><name>gitignore</name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">3</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@
 <operator>/</operator><operator>.</operator><name>pydevproject</name>
 <operator>/</operator><operator>.</operator><name>idea</name></expr></expr_stmt>
 <comment type="block">/*.iml
/target/
diff --git a/test/src/main/java/org/apache/accumulo/test/InMemoryMapMemoryUsageTest.java b/test/src/main/java/org/apache/accumulo/test/InMemoryMapMemoryUsageTest.java
index fb0050ff0..05b405e60 100644
-- a/test/src/main/java/org/apache/accumulo/test/InMemoryMapMemoryUsageTest.java
++ b/test/src/main/java/org/apache/accumulo/test/InMemoryMapMemoryUsageTest.java
@@ -18,9 +18,11 @@ package org.apache.accumulo.test;
 
 import java.util.Collections;
 
import org.apache.accumulo.core.conf.DefaultConfiguration;
 import org.apache.accumulo.core.data.Mutation;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.security.ColumnVisibility;
import org.apache.accumulo.core.util.LocalityGroupUtil.LocalityGroupConfigurationError;
 import org.apache.accumulo.tserver.InMemoryMap;
 import org.apache.hadoop.io.Text;
 
@@ -51,7 +53,11 @@ class InMemoryMapMemoryUsageTest extends MemoryUsageTest {
 
   @Override
   void init() {
    imm = new InMemoryMap(false, "/tmp");
    try {
      imm = new InMemoryMap(DefaultConfiguration.getInstance());
    } catch (LocalityGroupConfigurationError e) {
      throw new RuntimeException(e);
    }
     key = new Text();
 
     colf = new Text(String.format("%0" + colFamLen + "d", 0));
diff --git a/test/src/main/java/org/apache/accumulo/test/SampleIT.java b/test/src/main/java/org/apache/accumulo/test/SampleIT.java
new file mode 100644
index 000000000..423b955ba
-- /dev/null
++ b/test/src/main/java/org/apache/accumulo/test/SampleIT.java
@@ -0,0 +1,497 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientSideIteratorScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IsolatedScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>MutationsRejectedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>SampleNotPresentException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ScannerBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>NewTableConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Credentials</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>OfflineScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>ByteSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>IteratorEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>SortedKeyValueIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>WrappingIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterHarness</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

<class><specifier>public</specifier> class <name>SampleIT</name> <super_list><extends>extends <super><name>AccumuloClusterHarness</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>OPTIONS_1</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"1009"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>OPTIONS_2</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>, <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"997"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>SC1</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>OPTIONS_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>SC2</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>OPTIONS_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>IteratorThatUsesSample</name> <super_list><extends>extends <super><name>WrappingIterator</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>sampleDC</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasTop</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasTop</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>hasTop</name> <operator>&amp;&amp;</operator> <call><name><name>super</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteSequence</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <decl_stmt><decl><type><name>int</name></type> <name>sampleCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>sampleDC</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name><name>sampleDC</name><operator>.</operator><name>hasTop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sampleCount</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleDC</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>sampleCount</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hasTop</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>, <argument><expr><name>inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// its too much data</comment>
        <expr_stmt><expr><name>hasTop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>SortedKeyValueIterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>IteratorEnvironment</name></type> <name>env</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>IteratorEnvironment</name></type> <name>sampleEnv</name> <init>= <expr><call><name><name>env</name><operator>.</operator><name>cloneWithSamplingEnabled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>sampleDC</name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>deepCopy</name></name><argument_list>(<argument><expr><name>sampleEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBasic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clone</name> <init>= <expr><name>tableName</name> <operator>+</operator> <literal type="string">"_clone"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NewTableConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enableSampling</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>someRow</name> <init>= <expr><call><name>writeData</name><argument_list>(<argument><expr><name>bw</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>isoScanner</name> <init>= <expr><operator>new</operator> <call><name>IsolatedScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>csiScanner</name> <init>= <expr><operator>new</operator> <call><name>ClientSideIteratorScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>csiScanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>isoScanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>isoScanner</name><operator>.</operator><name>setBatchSize</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchScanner</name></type> <name>bScanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>setRanges</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>oScanner</name> <init>= <expr><call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ensure non sample data can be scanned after scanning sample data</comment>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>sb</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>clearSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>expected</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Key</name></type> <name>k</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>k</name><operator>.</operator><name>getRow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"42"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq3"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"suprise"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"42"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>putDelete</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq2"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq3"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"suprise"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>isoScanner</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>csiScanner</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>oScanner</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>setRanges</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"42"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>someRow</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq3"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"suprise"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Scanner</name></type> <name>newOfflineScanner</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clone</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>em</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>es</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clone</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>offline</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>cloneID</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableIdMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OfflineScanner</name></type> <name>oScanner</name> <init>= <expr><operator>new</operator> <call><name>OfflineScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Credentials</name><argument_list>(<argument><expr><call><name>getAdminPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAdminToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cloneID</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>oScanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>oScanner</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateExpected</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RowSampler</name></type> <name>sampler</name> <init>= <expr><operator>new</operator> <call><name>RowSampler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sampler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r_%06d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Key</name></type> <name>k1</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>Key</name></type> <name>k2</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><literal type="number">100000000</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>writeData</name><parameter_list>(<parameter><decl><type><name>BatchWriter</name></type> <name>bw</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MutationsRejectedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>someRow</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RowSampler</name></type> <name>sampler</name> <init>= <expr><operator>new</operator> <call><name>RowSampler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sampler</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r_%06d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><literal type="number">100000000</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Key</name></type> <name>k1</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq1"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>someRow</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>Key</name></type> <name>k2</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><literal type="string">"cq2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>sampler</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><literal type="number">100000000</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>someRow</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>countEntries</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>scanner</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>scanner</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ScannerBase</name></extends></argument>&gt;</argument_list></name></type> <name>scanners</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>instanceof</operator> <name>Scanner</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Scanner</name><operator>)</operator> <name>s</name><operator>)</operator><operator>.</operator><call><name>setRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>BatchScanner</name><operator>)</operator> <name>s</name><operator>)</operator><operator>.</operator><call><name>setRanges</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIterator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clone</name> <init>= <expr><name>tableName</name> <operator>+</operator> <literal type="string">"_clone"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NewTableConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enableSampling</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>writeData</name><argument_list>(<argument><expr><name>bw</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>expected</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Range</name></type> <name>range1</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>isoScanner</name> <init>= <expr><operator>new</operator> <call><name>IsolatedScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ClientSideIteratorScanner</name></type> <name>csiScanner</name> <init>= <expr><operator>new</operator> <call><name>ClientSideIteratorScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BatchScanner</name></type> <name>bScanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>csiScanner</name><operator>.</operator><name>setIteratorSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ScannerBase</name></extends></argument>&gt;</argument_list></name></type> <name>scanners</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>addScanIterator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>IteratorThatUsesSample</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// the iterator should see less than 10 entries in sample data, and return data</comment>
    <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>range1</name></expr></argument>, <argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2954</literal></expr></argument>, <argument><expr><call><name>countEntries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>Range</name></type> <name>range2</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>range2</name></expr></argument>, <argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// the iterator should see more than 10 entries in sample data, and return no data</comment>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>countEntries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// flush an rerun same test against files</comment>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>oScanner</name> <init>= <expr><call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>oScanner</name><operator>.</operator><name>addScanIterator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>IteratorThatUsesSample</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scanners</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>range1</name></expr></argument>, <argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2954</literal></expr></argument>, <argument><expr><call><name>countEntries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>range2</name></expr></argument>, <argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>countEntries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>updateSamplingConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>SC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>csiScanner</name><operator>.</operator><name>setIteratorSamplerConfiguration</name></name><argument_list>(<argument><expr><name>SC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>oScanner</name><operator>.</operator><name>addScanIterator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>IteratorThatUsesSample</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scanners</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>countEntries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Expected SampleNotPresentException, but it did not happen : "</literal> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      </block_content>}</block></catch></try>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setSamplerConfig</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name>ScannerBase</name><modifier>...</modifier></type> <name>scanners</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSampleNotPresent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clone</name> <init>= <expr><name>tableName</name> <operator>+</operator> <literal type="string">"_clone"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>writeData</name><argument_list>(<argument><expr><name>bw</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>isoScanner</name> <init>= <expr><operator>new</operator> <call><name>IsolatedScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>isoScanner</name><operator>.</operator><name>setBatchSize</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>csiScanner</name> <init>= <expr><operator>new</operator> <call><name>ClientSideIteratorScanner</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BatchScanner</name></type> <name>bScanner</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>setRanges</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ensure sample not present exception occurs when sampling is not configured</comment>
    <expr_stmt><expr><call><name>assertSampleNotPresent</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Scanner</name></type> <name>oScanner</name> <init>= <expr><call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertSampleNotPresent</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// configure sampling, however there exist an rfile w/o sample data... so should still see sample not present exception</comment>

    <expr_stmt><expr><call><name>updateSamplingConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create clone with new config</comment>
    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertSampleNotPresent</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create rfile with sample data present</comment>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// should be able to scan sample now</comment>
    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSamplerConfig</name><argument_list>(<argument><expr><name>SC1</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// change sampling config</comment>
    <expr_stmt><expr><call><name>updateSamplingConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>SC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create clone with new config</comment>
    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// rfile should have different sample config than table, and scan should not work</comment>
    <expr_stmt><expr><call><name>assertSampleNotPresent</name><argument_list>(<argument><expr><name>SC2</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create rfile that has same sample data as table config</comment>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// should be able to scan sample now</comment>
    <expr_stmt><expr><call><name>updateExpected</name><argument_list>(<argument><expr><name>SC2</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oScanner</name> <operator>=</operator> <call><name>newOfflineScanner</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><name>SC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSamplerConfig</name><argument_list>(<argument><expr><name>SC2</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>isoScanner</name></expr></argument>, <argument><expr><name>bScanner</name></expr></argument>, <argument><expr><name>csiScanner</name></expr></argument>, <argument><expr><name>oScanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bScanner</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateSamplingConfig</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>,
      <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSamplerConfiguration</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// wait for for config change</comment>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>offline</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>online</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertSampleNotPresent</name><parameter_list>(<parameter><decl><type><name>SamplerConfiguration</name></type> <name>sc</name></decl></parameter>, <parameter><decl><type><name>ScannerBase</name><modifier>...</modifier></type> <name>scanners</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>scanner</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SamplerConfiguration</name></type> <name>csc</name> <init>= <expr><call><name><name>scanner</name><operator>.</operator><name>getSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <try>try <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>scanner</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Expected SampleNotPresentException, but it did not happen : "</literal> <operator>+</operator> <call><name><name>scanner</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SampleNotPresentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      </block_content>}</block></catch></try>

      <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>clearSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>scanner</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>csc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>clearSamplerConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>csc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>ScannerBase</name><modifier>...</modifier></type> <name>scanners</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>actual</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ScannerBase</name></type> <name>s</name> <range>: <expr><name>scanners</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>actual</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>actual</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Saw %d instead of %d entries using %s"</literal></expr></argument>, <argument><expr><call><name><name>actual</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>,
          <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e7b579935</name><operator>..</operator><name>ae38fb8a6</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
<import>import <name><name>jline</name><operator>.</operator><name>console</name><operator>.</operator><name>ConsoleReader</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterators</name></name>;</import>
 
<import>import <name><name>jline</name><operator>.</operator><name>console</name><operator>.</operator><name>ConsoleReader</name></name>;</import>

 <class><specifier>public</specifier> class <name>ShellServerIT</name> <super_list><extends>extends <super><name>SharedMiniClusterBase</name></super></extends></super_list> <block>{
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">975</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">975</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SharedMiniClusterBase</name> <block>{
     <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>clone</name> <operator>+</operator> <literal type="string">" -w --sf-ename F.* --sf-lt-esize 1K"</literal></expr></argument>)</argument_list></call></expr>;
 
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>cloneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>clone2</name> <init>= <expr><name>table</name> <operator>+</operator> <literal type="string">"_clone_2"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clonetable -s table.sampler.opt.hasher=murmur3_32,table.sampler.opt.modulus=7,table.sampler=org.apache.accumulo.core.sample.RowSampler "</literal> <operator>+</operator> <name>clone</name>
        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>clone2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clone2Id</name> <init>= <expr><call><name>getTableId</name><argument_list>(<argument><expr><name>clone2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>clone2Id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"table "</literal> <operator>+</operator> <name>clone2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert v n l o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert x n l o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>clone2Id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>clone2</name> <operator>+</operator> <literal type="string">" -w --sf-no-sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>clone2Id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
   <annotation>@<name>Test</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">988</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1008</literal></expr><operator>,</operator><expr><literal type="number">54</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SharedMiniClusterBase</name> <block>{
     <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -w --sf-ename F.* -s "</literal> <operator>+</operator> <call><name><name>TestCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" -sc inputPrefix=F,dropPrefix=A"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testScanScample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>table</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// compact</comment>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 9255 doc content 'abcde'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 9255 doc url file://foo.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 8934 doc content 'accumulo scales'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 8934 doc url file://accumulo_notes.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 2317 doc content 'milk, eggs, bread, parmigiano-reggiano'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 2317 doc url file://groceries/9.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 3900 doc content 'EC2 ate my homework'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert 3900 doc uril file://final_project.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>clone1</name> <init>= <expr><name>table</name> <operator>+</operator> <literal type="string">"_clone_1"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clonetable -s table.sampler.opt.hasher=murmur3_32,table.sampler.opt.modulus=3,table.sampler=org.apache.accumulo.core.sample.RowSampler "</literal> <operator>+</operator> <name>table</name>
        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>clone1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>clone1</name> <operator>+</operator> <literal type="string">" -w --sf-no-sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"table "</literal> <operator>+</operator> <name>clone1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan --sample"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"parmigiano-reggiano"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep --sample reg"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"parmigiano-reggiano"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan --sample"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"accumulo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep --sample acc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"accumulo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create table where table sample config differs from whats in file</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>clone2</name> <init>= <expr><name>table</name> <operator>+</operator> <literal type="string">"_clone_2"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clonetable -s table.sampler.opt.hasher=murmur3_32,table.sampler.opt.modulus=2,table.sampler=org.apache.accumulo.core.sample.RowSampler "</literal> <operator>+</operator> <name>clone1</name>
        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>clone2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"table "</literal> <operator>+</operator> <name>clone2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan --sample"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"SampleNotPresentException"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep --sample reg"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"SampleNotPresentException"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>clone2</name> <operator>+</operator> <literal type="string">" -w --sf-no-sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>expected</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"2317"</literal></expr></argument>, <argument><expr><literal type="string">"3900"</literal></expr></argument>, <argument><expr><literal type="string">"9255"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan --sample"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep --sample "</literal> <operator>+</operator> <call><name><name>expected</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan --sample"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"8934"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep --sample 89"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"8934"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>constraint</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>table</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">71ddbcd98</literal><operator>..</operator><literal type="number">826907c2e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ExamplesIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package>
 
 <import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Charsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterators</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>ExamplesIT</name> <super_list><extends>extends <super><name>AccumuloClusterHarness</name></super></extends></super_list> <block>{
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ExamplesIT</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">390</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">390</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ExamplesIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     <expr><call><name><name>Index</name><operator>.</operator><name>index</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"\\W+"</literal></expr></argument>, <argument><expr><name>bw</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>BatchScanner</name></type> <name>bs</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>found</name> <init>= <expr><call><name><name>Query</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>found</name> <init>= <expr><call><name><name>Query</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <constructor_decl><name><name>bs</name><operator>.</operator><name>close</name></name><parameter_list>()</parameter_list>;</constructor_decl>
     <comment type="line">// should find ourselves</comment>
     <decl_stmt><decl><type><name>boolean</name></type> <name>thisFile</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ReadWriteIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ReadWriteIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">485d6d29a</literal><operator>..</operator><literal type="number">30982517f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ReadWriteIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>ReadWriteIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">430</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">430</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ReadWriteIT</name> extends <name>AccumuloClusterHarness</name> <block>{
         <expr><call><name><name>PrintInfo</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><call><name><name>args</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <call><name><name>newOut</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>stdout</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"Locality group         : g1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"families      : [colf]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"Locality group           : g1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"families        : [colf]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></class> <finally>finally <block>{<block_content>
         <expr_stmt><expr><call><name><name>newOut</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><name>oldOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7a4223d73</literal><operator>..</operator><name>dd085ccf5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapred</name><operator>.</operator><name>AccumuloFileOutputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapred</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>ConfiguratorBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>DefaultConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFileOperations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterHarness</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configured</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>JobClient</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>JobConf</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>AssertionError</name> <name>e1</name> <operator>=</operator> <literal type="null">null</literal></expr>;
   <specifier>private</specifier> <specifier>static</specifier> <name>AssertionError</name> <name>e2</name> <operator>=</operator> <literal type="null">null</literal></block></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>SAMPLER_CONFIG</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(
      <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

   <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
   <type><specifier>public</specifier> <name>TemporaryFolder</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>TemporaryFolder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/target"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
       <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getAdminPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAdminToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setOutputPath</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapperClass</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>BAD_TABLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>BadKeyMapper</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>IdentityMapper</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapOutputKeyClass</name></name><argument_list>(<argument><expr><name><name>Key</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     <if_stmt><if>if <condition>(<expr><name>content</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>files</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DefaultConfiguration</name></type> <name>acuconf</name> <init>= <expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>sample</name> <init>= <expr><call><name><name>RFileOperations</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openReader</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>FileSystem</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>acuconf</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>getSample</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>files</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2cef38223</literal><operator>..</operator><name>cd80139a8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal><operator>,</operator><literal type="number">11</literal> <operator>+</operator><literal type="number">27</literal><operator>,</operator><literal type="number">14</literal> @@</block></expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>NewTableConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapred</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapred</name><operator>.</operator><name>RangeInputSplit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterHarness</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
   }</block>
 
   <specifier>private</specifier> <specifier>static</specifier> <name>AssertionError</name> <name>e1</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>e1Count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>AssertionError</name></type> <name>e2</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>e2Count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
   <class><specifier>private</specifier> <specifier>static</specifier> class <name>MRTester</name> <super_list><extends>extends <super><name>Configured</name></super></extends> <implements>implements <super><name>Tool</name></super></implements></super_list> <block>{
     <class><specifier>private</specifier> <specifier>static</specifier> class <name>TestMapper</name> <super_list><implements>implements <super><name><name>Mapper</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>,<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
           <expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%09x"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>e1Count</name><operator>++</operator></expr>;</expr_stmt>
         </block_content>}</block></catch>
         <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
           <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name>e2</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>e2Count</name><operator>++</operator></expr>;</expr_stmt>
         </block_content>}</block></catch>
       }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>int</name> <call><name>run</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr>
 
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Usage : "</literal> <operator>+</operator> <call><name><name>MRTester</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" &lt;table&gt;"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Usage : "</literal> <operator>+</operator> <call><name><name>MRTester</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" &lt;table&gt; [&lt;batchScan&gt; &lt;scan sample&gt;]"</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
 
       <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Boolean</name></type> <name>batchScan</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>sample</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>batchScan</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
       <decl_stmt><decl><type><name>JobConf</name></type> <name>job</name> <init>= <expr><operator>new</operator> <call><name>JobConf</name><argument_list>(<argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setJarByClass</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
       <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getAdminPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAdminToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setZooKeeperInstance</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setBatchScan</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>batchScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sample</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapperClass</name></name><argument_list>(<argument><expr><name><name>TestMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapOutputKeyClass</name></name><argument_list>(<argument><expr><name><name>Key</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     }</block>
     <call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>e1</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

     <expr_stmt><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>SamplerConfiguration</name> <name>SAMPLER_CONFIG</name> <operator>=</operator> <operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(
      <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>TEST_TABLE_3</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NewTableConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enableSampling</name><argument_list>(<argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%09x"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%09x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><literal type="string">"False"</literal></expr></argument>, <argument><expr><literal type="string">"True"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><name>e1Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e2Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>e2Count</name> <operator>=</operator> <name>e1Count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><literal type="string">"False"</literal></expr></argument>, <argument><expr><literal type="string">"False"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e1Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e2Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>e2Count</name> <operator>=</operator> <name>e1Count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><literal type="string">"True"</literal></expr></argument>, <argument><expr><literal type="string">"True"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><name>e1Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e2Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testCorrectRangeInputSplits</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>JobConf</name></type> <name>job</name> <init>= <expr><operator>new</operator> <call><name>JobConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8f5337862</literal><operator>..</operator><name>d00a9b3bc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloFileOutputFormatIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloFileOutputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>DefaultConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>rfile</name><operator>.</operator><name>RFileOperations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>impl</name><operator>.</operator><name>SamplerConfigurationImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterHarness</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configured</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Job</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Mapper</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
   <expr><specifier>private</specifier> <name>String</name> <name>TEST_TABLE</name></expr>;
   <specifier>private</specifier> <name>String</name> <name>EMPTY_TABLE</name></block></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>SAMPLER_CONFIG</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(
      <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>protected</specifier> <name>int</name></type> <name>defaultTimeoutSeconds</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
       <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;
       <call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setZooKeeperInstance</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setOutputPath</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloFileOutputFormat</name><operator>.</operator><name>setSampler</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapperClass</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"_mapreduce_bad_table"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>BadKeyMapper</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>Mapper</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapOutputKeyClass</name></name><argument_list>(<argument><expr><name><name>Key</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">201</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloFileOutputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     <if_stmt><if>if <condition>(<expr><name>content</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>files</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>CachedConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DefaultConfiguration</name></type> <name>acuconf</name> <init>= <expr><call><name><name>DefaultConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileSKVIterator</name></type> <name>sample</name> <init>= <expr><call><name><name>RFileOperations</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openReader</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>FileSystem</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>acuconf</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>getSample</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SamplerConfigurationImpl</name><argument_list>(<argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>files</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1ca4f9232</literal><operator>..</operator><literal type="number">0a5bd68e4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name><name>AccumuloInputFormatIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">39</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">39</literal><operator>,</operator><literal type="number">8</literal> @@</block></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>NewTableConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>RangeInputSplit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>impl</name><operator>.</operator><name>BatchInputSplit</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>sample</name><operator>.</operator><name>RowSampler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterHarness</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">270</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">273</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>int</name> <call><name>run</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr>
 
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Usage : "</literal> <operator>+</operator> <call><name><name>MRTester</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" &lt;table&gt; &lt;inputFormatClass&gt; [&lt;batchScan&gt;]"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Usage : "</literal> <operator>+</operator> <call><name><name>MRTester</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" &lt;table&gt; &lt;inputFormatClass&gt; [&lt;batchScan&gt; &lt;scan sample&gt;]"</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
 
       <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>inputFormatClassName</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Boolean</name></type> <name>batchScan</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>sample</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>batchScan</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><call><name><name>assertionErrors</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="string">"_map"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Dummy_map"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>assertionErrors</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Dummy_cleanup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">296</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">302</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
       <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getAdminPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAdminToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setBatchScan</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>batchScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sample</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setSamplerConfiguration</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapperClass</name></name><argument_list>(<argument><expr><name><name>TestMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setMapOutputKeyClass</name></name><argument_list>(<argument><expr><name><name>Key</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">335</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">344</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_1</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SamplerConfiguration</name></type> <name>SAMPLER_CONFIG</name> <init>= <expr><operator>new</operator> <call><name>SamplerConfiguration</name><argument_list>(<argument><expr><call><name><name>RowSampler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(<argument><expr><literal type="string">"hasher"</literal></expr></argument>, <argument><expr><literal type="string">"murmur3_32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addOption</name><argument_list>(
      <argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>TEST_TABLE_3</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NewTableConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enableSampling</name><argument_list>(<argument><expr><name>SAMPLER_CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%09x"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%09x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>TEST_TABLE_3</name></expr>, <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"False"</literal></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_map"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>assertionErrors</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>TEST_TABLE_3</name></expr>, <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"False"</literal></expr>, <expr><literal type="string">"False"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_map"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>assertionErrors</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>TEST_TABLE_3</name></expr>, <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"True"</literal></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_map"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_3</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testMapWithBatchScanner</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>TEST_TABLE_2</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">349</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">390</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloInputFormatIT</name> extends <name>AccumuloClusterHarness</name> <block>{
     }</block>
     <call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>TEST_TABLE_2</name></expr>, <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>MRTester</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>TEST_TABLE_2</name></expr>, <expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"True"</literal></expr>, <expr><literal type="string">"False"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_2</name> <operator>+</operator> <literal type="string">"_map"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>assertionErrors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TEST_TABLE_2</name> <operator>+</operator> <literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>performance</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>NullTserver</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>performance</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>NullTserver</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ef05f3711</name><operator>..</operator><literal type="number">559703fe6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>performance</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>NullTserver</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>performance</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>NullTserver</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ActiveCompaction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ActiveScan</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>NoSuchScanIDException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDurability</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TSamplerConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Iface</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name><operator>.</operator><name>Processor</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>net</name><operator>.</operator><name>HostAndPort</name></name>;</import>

 <import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name>;</import></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></function></block_content></block></function></block></class></block_content></block></finally></block_content></block></function></block></class></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function></block></class></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block></class>
 
 <comment type="block" format="javadoc">/**
@@ -136,14 +138,14 @@ public class NullTserver {
 
     @Override
     public InitialMultiScan startMultiScan(TInfo tinfo, TCredentials credentials, Map&lt;TKeyExtent,List&lt;TRange&gt;&gt; batch, List&lt;TColumn&gt; columns,
        List&lt;IterInfo&gt; ssiList, Map&lt;String,Map&lt;String,String&gt;&gt; ssio, List&lt;ByteBuffer&gt; authorizations, boolean waitForWrites, long batchTimeOut) {
        List&lt;IterInfo&gt; ssiList, Map&lt;String,Map&lt;String,String&gt;&gt; ssio, List&lt;ByteBuffer&gt; authorizations, boolean waitForWrites, TSamplerConfiguration tsc, long batchTimeOut) {
       return null;
     }
 
     @Override
     public InitialScan startScan(TInfo tinfo, TCredentials credentials, TKeyExtent extent, TRange range, List&lt;TColumn&gt; columns, int batchSize,
         List&lt;IterInfo&gt; ssiList, Map&lt;String,Map&lt;String,String&gt;&gt; ssio, List&lt;ByteBuffer&gt; authorizations, boolean waitForWrites, boolean isolated,
        long readaheadThreshold, long batchTimeOut) {
        long readaheadThreshold, TSamplerConfiguration tsc, long batchTimeOut) {
       return null;
     }
 
- 
2.19.1.windows.1

</comment></unit>
