<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/f446b9007.java"><expr_stmt><expr><name>From</name> <name>f446b9007ce8a4f0820e89c9e8e41a866ee8d548</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Dave</name> <name><name>Marion</name> <argument_list type="generic">&lt;<argument><name>dlmarion</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">2</literal> <name>Mar</name> <literal type="number">2016</literal> <literal type="number">15</literal><operator>:</operator><literal type="number">08</literal><operator>:</operator><literal type="number">40</literal> <operator>-</operator><literal type="number">0500</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">1755</literal><operator>:</operator> <name>Removed</name> <name>synchronization</name> <name>of</name> <name>binning</name> <name>mutations</name>
 <name>in</name> <name>TabletServerBatchWriter</name>

<name>The</name> <name>TabletServerBatchWriter</name> <name>will</name> <name>attempt</name> <name>to</name> <name>bin</name> <name>mutations</name> <name>in</name> <name>a</name> <name>background</name> <name><name>thread</name><operator>.</operator> <name>If</name></name> <name>that</name>
<name>thread</name> <name>is</name> <name>busy</name> <name>then</name> <name>the</name> <name>binning</name> <name>will</name> <name>occur</name> <name>in</name> <name>the</name> <name>client</name> <name><name>thread</name><operator>.</operator> <name>Previously</name></name></expr><operator>,</operator></expr_stmt> <if_stmt><if>if binning were
to occur in one client thread<operator>,</operator> <expr_stmt><expr><name>it</name> <name>would</name> <name>block</name> <name>all</name> <name>client</name> <name>threads</name> <name>from</name> <name>adding</name> <name><name>mutations</name><operator>.</operator></name>
--
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">135</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SimpleThreadPool</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>BatchWriterFlushIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">88</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">185</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">44</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">404b4947f</literal><operator>..</operator><literal type="number">491bcc15c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TabletServerBatchWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt></if></if_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Timer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimerTask</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SynchronousQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
   <expr><specifier>private</specifier> <name>long</name> <name>initialCompileTimes</name></expr>;
   <expr><specifier>private</specifier> <name>double</name> <name>initialSystemLoad</name></expr>;
 
  <expr><specifier>private</specifier> <name>int</name> <name>tabletServersBatchSum</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>tabletBatchSum</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>numBatches</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>maxTabletBatch</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>minTabletBatch</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>minTabletServersBatch</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;
  <expr><specifier>private</specifier> <name>int</name> <name>maxTabletServersBatch</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>tabletServersBatchSum</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>tabletBatchSum</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>numBatches</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>maxTabletBatch</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>minTabletBatch</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>minTabletServersBatch</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>AtomicInteger</name> <name>maxTabletServersBatch</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;
 
   <expr><specifier>private</specifier> <name>Throwable</name> <name>lastUnknownError</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
@@ <expr><operator>-</operator><literal type="number">230</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">233</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
     <if_stmt><if>if <condition>(<expr><call><name><name>mutations</name><operator>.</operator><name>getMemoryUsed</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <return>return;</return></block_content></block></if></if_stmt>
     <name>lastProcessingStartTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></block></expr>;
    <expr><call><name><name>writer</name><operator>.</operator><name>addMutations</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>queueMutations</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Mutations rejected from binning thread, retrying..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>failedMutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch>
     <expr_stmt><expr><name>mutations</name> <operator>=</operator> <operator>new</operator> <call><name>MutationSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">362</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
       <expr><call><name>checkForFailures</name><argument_list>()</argument_list></call></expr>;
     }</block></expr></expr_stmt> <finally>finally <block>{<block_content>
       <comment type="line">// make a best effort to release these resources</comment>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>binningThreadPool</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>sendThreadPool</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>jtimer</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">361</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">370</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
   }</block>
 
   <specifier>private</specifier> <name>void</name> <call><name>logStats</name><argument_list>()</argument_list></call> <block>{
    <expr><name>long</name> <name>finishTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>finishTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name>long</name></type> <name>finalGCTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GarbageCollectorMXBean</name></argument>&gt;</argument_list></name></type> <name>gcmBeans</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getGarbageCollectorMXBeans</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>GarbageCollectorMXBean</name></type> <name>garbageCollectorMXBean</name> <range>: <expr><name>gcmBeans</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>finalGCTimes</name> <operator>+=</operator> <call><name><name>garbageCollectorMXBean</name><operator>.</operator><name>getCollectionTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block>
      <name>long</name> <name>finalGCTimes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GarbageCollectorMXBean</name></argument>&gt;</argument_list></name></type> <name>gcmBeans</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getGarbageCollectorMXBeans</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>GarbageCollectorMXBean</name></type> <name>garbageCollectorMXBean</name> <range>: <expr><name>gcmBeans</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>finalGCTimes</name> <operator>+=</operator> <call><name><name>garbageCollectorMXBean</name><operator>.</operator><name>getCollectionTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
 
    <decl_stmt><decl><type><name>CompilationMXBean</name></type> <name>compMxBean</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getCompilationMXBean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>finalCompileTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>compMxBean</name><operator>.</operator><name>isCompilationTimeMonitoringSupported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>finalCompileTimes</name> <operator>=</operator> <call><name><name>compMxBean</name><operator>.</operator><name>getTotalCompilationTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>CompilationMXBean</name></type> <name>compMxBean</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getCompilationMXBean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>finalCompileTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>compMxBean</name><operator>.</operator><name>isCompilationTimeMonitoringSupported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>finalCompileTimes</name> <operator>=</operator> <call><name><name>compMxBean</name><operator>.</operator><name>getTotalCompilationTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>double</name></type> <name>averageRate</name> <init>= <expr><call><name><name>totalSent</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><call><name><name>totalSendTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>overallRate</name> <init>= <expr><name>totalAdded</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>finishTime</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>averageRate</name> <init>= <expr><call><name><name>totalSent</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><call><name><name>totalSendTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>overallRate</name> <init>= <expr><name>totalAdded</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>finishTime</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name>double</name></type> <name>finalSystemLoad</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getOperatingSystemMXBean</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemLoadAverage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>finalSystemLoad</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getOperatingSystemMXBean</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemLoadAverage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"TABLET SERVER BATCH WRITER STATISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Added                : %,10d mutations"</literal></expr></argument>, <argument><expr><name>totalAdded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">397</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">406</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
       <expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Total bin time       : %,10.2f secs %6.2f%s"</literal></expr></argument>, <argument><expr><call><name><name>totalBinTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>,
           <argument><expr><literal type="number">100.0</literal> <operator>*</operator> <call><name><name>totalBinTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>finishTime</name> <operator>-</operator> <name>startTime</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Average bin rate     : %,10.2f mutations/sec"</literal></expr></argument>, <argument><expr><call><name><name>totalBinned</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><call><name><name>totalBinTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"tservers per batch   : %,8.2f avg  %,6d min %,6d max"</literal></expr></argument>, <argument><expr><name>tabletServersBatchSum</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>numBatches</name></expr></argument>, <argument><expr><name>minTabletServersBatch</name></expr></argument>,
          <argument><expr><name>maxTabletServersBatch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"tablets per batch    : %,8.2f avg  %,6d min %,6d max"</literal></expr></argument>, <argument><expr><name>tabletBatchSum</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>numBatches</name></expr></argument>, <argument><expr><name>minTabletBatch</name></expr></argument>, <argument><expr><name>maxTabletBatch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"tservers per batch   : %,8.2f avg  %,6d min %,6d max"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>tabletServersBatchSum</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>numBatches</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>,
          <argument><expr><call><name><name>minTabletServersBatch</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>maxTabletServersBatch</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"tablets per batch    : %,8.2f avg  %,6d min %,6d max"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>tabletBatchSum</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>numBatches</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><call><name><name>minTabletBatch</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>maxTabletBatch</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"SYSTEM STATISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"JVM GC Time          : %,10.2f secs"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>finalGCTimes</name> <operator>-</operator> <name>initialGCTimes</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">416</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">426</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>updateBinningStats</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>, <argument><expr><name>long</name> <name>time</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>binnedMutations</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name><name>totalBinTime</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;
    <call><name><name>totalBinned</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateBatchStats</name><argument_list>(<argument><expr><name>binnedMutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>totalBinTime</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>totalBinned</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateBatchStats</name><argument_list>(<argument><expr><name>binnedMutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateBatchStats</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>binnedMutations</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>tabletServersBatchSum</name> <operator>+=</operator> <call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>computeMin</name><parameter_list>(<parameter><decl><type><name>AtomicInteger</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>stat</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>stat</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>computeMax</name><parameter_list>(<parameter><decl><type><name>AtomicInteger</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>stat</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>stat</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>
 
    <expr_stmt><expr><name>minTabletServersBatch</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minTabletServersBatch</name></expr></argument>, <argument><expr><call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTabletServersBatch</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxTabletServersBatch</name></expr></argument>, <argument><expr><call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateBatchStats</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>binnedMutations</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tabletServersBatchSum</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>computeMin</name><argument_list>(<argument><expr><name>minTabletServersBatch</name></expr></argument>, <argument><expr><call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>computeMax</name><argument_list>(<argument><expr><name>maxTabletServersBatch</name></expr></argument>, <argument><expr><call><name><name>binnedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>int</name></type> <name>numTablets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">434</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">460</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
       <expr><name>numTablets</name> <operator>+=</operator> <call><name><name>tsm</name><operator>.</operator><name>getMutations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;
     }</block>
 
    <name>tabletBatchSum</name> <operator>+=</operator> <name>numTablets</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabletBatchSum</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><name>numTablets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>minTabletBatch</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minTabletBatch</name></expr></argument>, <argument><expr><name>numTablets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxTabletBatch</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxTabletBatch</name></expr></argument>, <argument><expr><name>numTablets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>computeMin</name><argument_list>(<argument><expr><name>minTabletBatch</name></expr></argument>, <argument><expr><name>numTablets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>computeMax</name><argument_list>(<argument><expr><name>maxTabletBatch</name></expr></argument>, <argument><expr><name>numTablets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>numBatches</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>numBatches</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>waitRTE</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">616</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">642</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
   <expr><specifier>private</specifier> <name>class</name> <name>MutationWriter</name> <block>{
 
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>MUTATION_BATCH_SIZE</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr>;
    <expr><specifier>private</specifier> <name>ExecutorService</name> <name>sendThreadPool</name></expr>;
    <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>serversMutations</name></expr>;
    <expr><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>queued</name></expr>;
    <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TabletLocator</name></argument>&gt;</argument_list></name> <name>locators</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name>ExecutorService</name> <name>sendThreadPool</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name>SimpleThreadPool</name> <name>binningThreadPool</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>serversMutations</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>queued</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TabletLocator</name></argument>&gt;</argument_list></name> <name>locators</name></expr>;
 
     <expr><specifier>public</specifier> <call><name>MutationWriter</name><argument_list>(<argument><expr><name>int</name> <name>numSendThreads</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>serversMutations</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><name>queued</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
       <expr><name>sendThreadPool</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleThreadPool</name><argument_list>(<argument><expr><name>numSendThreads</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><name>locators</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TabletLocator</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
      <expr><name>binningThreadPool</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleThreadPool</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"BinMutations"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>SynchronousQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>binningThreadPool</name><operator>.</operator><name>setRejectedExecutionHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ThreadPoolExecutor</name><operator>.</operator><name>CallerRunsPolicy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    <specifier>private</specifier> <name>TabletLocator</name> <call><name>getLocator</name><argument_list>(<argument><expr><name>String</name> <name>tableId</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>private</specifier> <specifier>synchronized</specifier> <name>TabletLocator</name> <call><name>getLocator</name><argument_list>(<argument><expr><name>String</name> <name>tableId</name></expr></argument>)</argument_list></call> <block>{
       <expr><name>TabletLocator</name> <name>ret</name> <operator>=</operator> <call><name><name>locators</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;
       <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>TabletLocator</name><operator>.</operator><name>getLocator</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">686</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">715</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServerBatchWriter</name> <block>{
 
     }</block>
 
    <name>void</name> <call><name>addMutations</name><argument_list>(<argument><expr><name>MutationSet</name> <name>mutationsToSend</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>void</name> <call><name>queueMutations</name><argument_list>(<argument><expr><name>final</name> <name>MutationSet</name> <name>mutationsToSend</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>InterruptedException</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>mutationsToSend</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
      <call><name><name>binningThreadPool</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>mutationsToSend</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name><name>log</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" - binning "</literal> <operator>+</operator> <call><name><name>mutationsToSend</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" mutations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <expr_stmt><expr><call><name>addMutations</name><argument_list>(<argument><expr><name>mutationsToSend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content> catch (Exception e</block></try>)</block_content> <block>{<block_content>
              <expr_stmt><expr><call><name>updateUnknownErrors</name><argument_list>(<argument><expr><literal type="string">"Error processing mutation set"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
          }
        }
      }</block></block></if></if_stmt>)</block_content></block>;</function>
    <expr_stmt/>}</block>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addMutations</name><parameter_list>(<parameter><decl><type><name>MutationSet</name></type> <name>mutationsToSend</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>binnedMutations</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>TabletServerMutations</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Span</name></type> <name>span</name> <init>= <expr><call><name><name>Trace</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="string">"binMutations"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <try>try <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SimpleThreadPool</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SimpleThreadPool</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a406233c0</name><operator>..</operator><literal type="number">899199126</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SimpleThreadPool</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SimpleThreadPool</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>BlockingQueue</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LinkedBlockingQueue</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> class <name>SimpleThreadPool</name> extends <name>ThreadPoolExecutor</name> <block>{
     <expr><call><name>allowCoreThreadTimeOut</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>public</specifier> <call><name>SimpleThreadPool</name><argument_list>(<argument><expr><name>int</name> <name>max</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>BlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name> <name>queue</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">4l</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NamingThreadFactory</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <call><name>allowCoreThreadTimeOut</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
  <expr_stmt/>}</block_content>

 }
diff --git a/test/src/test/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java b/test/src/test/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
index 52d9c9370..e2277a37c 100644
-- a/test/src/test/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
++ b/test/src/test/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
@@ -18</block><operator>,</operator><expr_stmt><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt></try> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package>
 
 <import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Charsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>SimpleThreadPool</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterIT</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>BatchWriterFlushIT</name> <super_list><extends>extends <super><name>AccumuloClusterIT</name></super></extends></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_TO_FLUSH</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_THREADS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>protected</specifier> <name>int</name></type> <name>defaultTimeoutSeconds</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>BatchWriterFlushIT</name> extends <name>AccumuloClusterIT</name> <block>{
     <expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>bwlt</name></expr></argument>)</argument_list></call></expr>;
     <call><name>runFlushTest</name><argument_list>(<argument><expr><name>bwft</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>runLatencyTest</name><argument_list>(<argument><expr><name>bwlt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt/>}</block_content>
 
   private void runLatencyTest(String tableName</block></function>)</block> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">170</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">179</literal></expr></argument>,<argument><expr><literal type="number">83</literal> @@ <specifier>public</specifier> class <name>BatchWriterFlushIT</name> extends <name>AccumuloClusterIT</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt/>}</block_content>
   }
 
  @Test
  public void runMultiThreadedBinningTest(</block></class>)</block_content> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Connector</name> <name>c</name> <operator>=</operator> <call><name>getConnector</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block>;</function></class></expr></argument></argument_list></call>
    <name><name>String</name><index>[]</index></name> <name>tableNames</name> <operator>=</operator> <call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name><name>tableNames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSplits</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>NUM_TO_FLUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block>

    <comment type="line">// Logger.getLogger(TabletServerBatchWriter.class).setLevel(Level.TRACE);</comment>
    <name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>allMuts</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name> <name>data</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>thread</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_TO_FLUSH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>thread</name> <operator>*</operator> <name>NUM_TO_FLUSH</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%10d"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cf"</literal> <operator>+</operator> <name>thread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cq"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">""</literal> <operator>+</operator> <name>row</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></for></block_content></block></for>}</block></expr>
    }</block>
    <call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>NUM_THREADS</name> <operator>*</operator> <name>NUM_TO_FLUSH</name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Collections</name><operator>.</operator><name>shuffle</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>NUM_THREADS</name> <operator>*</operator> <name>NUM_TO_FLUSH</name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <name>NUM_TO_FLUSH</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>muts</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <name>NUM_TO_FLUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>allMuts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>muts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block>

    <name>SimpleThreadPool</name> <name>threads</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleThreadPool</name><argument_list>(<argument><expr><name>NUM_THREADS</name></expr></argument>, <argument><expr><literal type="string">"ClientThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>allowCoreThreadTimeOut</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>prestartAllCoreThreads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriterConfig</name></type> <name>cfg</name> <init>= <expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setMaxLatency</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setMaxMemory</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setMaxWriteThreads</name></name><argument_list>(<argument><expr><name>NUM_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createBatchWriter</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutations</name></name><argument_list>(<argument><expr><call><name><name>allMuts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MutationsRejectedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Error adding mutations to batch writer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createScanner</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><name>scanner</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnFamily</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnQualifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>allMuts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>allMuts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"Mutation not found: "</literal> <operator>+</operator> <call><name><name>m</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>NUM_THREADS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>allMuts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>verifyEntry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"r_%10d"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Unexpected key returned, expected "</literal> <operator>+</operator> <name>row</name> <operator>+</operator> <literal type="string">" got "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></finally>

</unit>
