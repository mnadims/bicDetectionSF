<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/d1dfa5f9234.java"><expr_stmt><expr><name>From</name> <name>d1dfa5f923408fea94fe18b7886ead4573560e6a</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Chris</name> <name><name>Nauroth</name> <argument_list type="generic">&lt;<argument><name>cnauroth</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">22</literal> <name>Aug</name> <literal type="number">2013</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">13</literal><operator>:</operator><literal type="number">51</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">9887.</literal> <name>globStatus</name> <name>does</name> <name>not</name> <name>correctly</name> <name>handle</name> <name>paths</name>
 <name>starting</name> <name>with</name> <name>a</name> <name>drive</name> <name>spec</name> <name>on</name> <name><name>Windows</name><operator>.</operator> <name>Contributed</name></name> <name>by</name> <name>Chuan</name> <name><name>Liu</name><operator>.</operator>

<name>git</name></name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1516608 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>  <literal type="number">3</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">22</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">19</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">6</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>a2d1304ead7</name><operator>..</operator><literal type="number">7b749b7a1bd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.1.1</literal><operator>-</operator><name>beta</name> <operator>-</operator> <name>UNRELEASED</name>
     <name>HADOOP</name><operator>-</operator><literal type="number">9880.</literal> <name>SASL</name> <name>changes</name> <name>from</name> <name>HADOOP</name><operator>-</operator><literal type="number">9421</literal> <name>breaks</name> <name>Secure</name> <name>HA</name> <name><name>NN</name><operator>.</operator></name> (<name>daryn</name> <name>via</name>
     <name>jing9</name></expr></expr_stmt>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">9887.</literal> <name>globStatus</name> <name>does</name> <name>not</name> <name>correctly</name> <name>handle</name> <name>paths</name> <name>starting</name> <name>with</name> <name>a</name> <name>drive</name>
    <name>spec</name> <name>on</name> <name><name>Windows</name><operator>.</operator></name> (<name>Chuan</name> <name>Liu</name> <name>via</name> <name>cnauroth</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Release</name> <literal type="number">2.1.0</literal><operator>-</operator><name>beta</name> <operator>-</operator> <literal type="number">2013</literal><operator>-</operator><literal type="number">08</literal><operator>-</operator><literal type="number">22</literal>
 
   <name>INCOMPATIBLE</name> <name>CHANGES</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">57ad45e81d4</literal><operator>..</operator><name>b0bd8490715</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>Path</name> <call><name>fixRelativePart</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
   <comment type="block" format="javadoc">/**
    * Translate an absolute path into a list of path components.
    * We merge double slashes into a single slash here.
   * The first path component (i.e. root) does not get an entry in the list.
   * POSIX root path, i.e. '/', does not get an entry in the list.
    */</comment>
   <expr><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>getPathComponents</name><argument_list>(<argument><expr><name>String</name> <name>path</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">167</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">167</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>String</name> <call><name>unquotePathComponent</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call></expr></argument></throws> <block>{<block_content>
       <comment type="line">// Get the absolute path for this flattened pattern.  We couldn't do </comment>
       <comment type="line">// this prior to flattening because of patterns like {/,a}, where which</comment>
       <comment type="line">// path you go down influences how the path must be made absolute.</comment>
      <decl_stmt><decl><type><name>Path</name></type> <name>absPattern</name> <init>=
          <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>flatPattern</name> <operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><name>flatPattern</name></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Path</name></type> <name>absPattern</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(
          <argument><expr><ternary><condition><expr><call><name><name>flatPattern</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Path</name><operator>.</operator><name>CUR_DIR</name></name></expr> </then><else>: <expr><name>flatPattern</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <comment type="line">// Now we break the flattened, absolute pattern into path components.</comment>
       <comment type="line">// For example, /a/*/c would be broken into the list [a, *, c]</comment>
       <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>=
@@ <expr><operator>-</operator><literal type="number">176</literal></expr></init></decl>,9 +176,19 @@ private static <decl><type ref="prev"/><name>String</name> <name>unquotePathComponent</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list> <block>{<block_content>
       <comment type="line">// Starting out at the root of the filesystem, we try to match</comment>
       <comment type="line">// filesystem entries against pattern components.</comment>
       <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></type> <name>candidates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileStatus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>authority</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>components</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>
          <operator>&amp;&amp;</operator> <call><name><name>Path</name><operator>.</operator><name>isWindowsAbsolutePath</name></name><argument_list>(<argument><expr><call><name><name>absPattern</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// On Windows the path could begin with a drive letter, e.g. /E:/foo.</comment>
        <comment type="line">// We will skip matching the drive letter and start from listing the</comment>
        <comment type="line">// root of the filesystem on that drive.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>driveLetter</name> <init>= <expr><call><name><name>components</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileStatus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>,
            <argument><expr><name>authority</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name> <operator>+</operator> <name>driveLetter</name> <operator>+</operator> <name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content> else <block>{<block_content>
        <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileStatus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>authority</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
      
       for (String component : components</block></block></if></if_stmt>)</block_content> <block>{<block_content>
         <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></type> <name>newCandidates</name> <init>=
             <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block_content></block></block></decl></decl_stmt></block_content></block></expr></block></expr></expr_stmt>

</unit>
