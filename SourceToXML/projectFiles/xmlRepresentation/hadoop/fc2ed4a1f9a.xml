<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/fc2ed4a1f9a.java"><expr_stmt><expr><name>From</name> <name>fc2ed4a1f9a19d61f5e3cb4fd843604f0c7fe95f</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Colin</name> <name>Patrick</name> <name><name>Mccabe</name> <argument_list type="generic">&lt;<argument><name>cmccabe</name><annotation>@<name><name>cloudera</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">8</literal> <name>Jun</name> <literal type="number">2015</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">49</literal><operator>:</operator><literal type="number">31</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">11347.</literal> <name>RawLocalFileSystem</name><operator>#</operator><name>mkdir</name> <name>and</name> <name>create</name> <name>should</name>
 <name>honor</name> <call><name>umask</name> <argument_list>(<argument><expr><name>Varun</name> <name>Saxena</name> <name>via</name> <name>Colin</name> <name><name>P</name><operator>.</operator> <name>McCabe</name></name></expr></argument>)</argument_list></call>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">45</literal> <operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestLocalFileSystemPermission</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">111</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">134</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">25</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>fa6e4b75e53</name><operator>..</operator><name>ce8baeeaad7</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">482</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">482</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <call><name>Trunk</name> <argument_list>(<argument><expr><name>Unreleased</name></expr></argument>)</argument_list></call>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">9905.</literal> <name>remove</name> <name>dependency</name> <name>of</name> <name>zookeeper</name></expr></expr_stmt> <for>for hadoop-client <control>(<init><expr><name>vinayakumarb</name></expr></init>)</control><block type="pseudo"><block_content>
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">11347.</literal> <name>RawLocalFileSystem</name><operator>#</operator><name>mkdir</name> <name>and</name> <name>create</name> <name>should</name> <name>honor</name> <call><name>umask</name> <argument_list>(<argument><expr><name>Varun</name>
    <name>Saxena</name> <name>via</name> <name>Colin</name> <name><name>P</name><operator>.</operator> <name>McCabe</name></name></expr></argument>)</argument_list></call>

   <name>OPTIMIZATIONS</name>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">7761.</literal> <name>Improve</name> <name>the</name> <name>performance</name> <name>of</name> <name>raw</name> <name><name>comparisons</name><operator>.</operator></name> (<name>todd</name></expr></expr_stmt></block_content></block></for>)
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">56dd7adaf7e</literal><operator>..</operator><name>b94d9d9ce8c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
   <comment type="line">// Temporary workaround for HADOOP-9652.</comment>
   <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <name>useDeprecatedFileStatus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>FsPermission</name></type> <name>umask</name></decl>;</decl_stmt>

   <function><annotation>@<name>VisibleForTesting</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>useStatIfAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>useDeprecatedFileStatus</name> <operator>=</operator> <operator>!</operator><call><name><name>Stat</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>File</name> <call><name>pathToFile</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>super</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name>setConf</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>umask</name> <operator>=</operator> <call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
   }</block>
   
   <comment type="block" format="javadoc">/*******************************************************
@@ -211,9 +214,13 @@ public FSDataInputStream open(Path f, int bufferSize) throws IOException {
     private LocalFSFileOutputStream(Path f, boolean append,
         FsPermission permission) throws IOException {
       File file = pathToFile(f);
      if (!append &amp;&amp; permission == null) {
        permission = FsPermission.getFileDefault();
      }
       if (permission == null) {
         this.fos = new FileOutputStream(file, append);
       } else {
        permission = permission.applyUMask(umask);
         if (Shell.WINDOWS &amp;&amp; NativeIO.isAvailable()) {
           this.fos = NativeIO.Windows.createFileOutputStreamWithMode(file,
               append, permission.toShort());
@@ -484,27 +491,27 @@ protected boolean mkOneDir(File p2f) throws IOException {
   protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)
       throws IOException {
     if (permission == null) {
      return p2f.mkdir();
    } else {
      if (Shell.WINDOWS &amp;&amp; NativeIO.isAvailable()) {
        try {
          NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());
          return true;
        } catch (IOException e) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(String.format(
                "NativeIO.createDirectoryWithMode error, path = %s, mode = %o",
                p2f, permission.toShort()), e);
          }
          return false;
        }
      } else {
        boolean b = p2f.mkdir();
        if (b) {
          setPermission(p, permission);
      permission = FsPermission.getDirDefault();
    }
    permission = permission.applyUMask(umask);
    if (Shell.WINDOWS &amp;&amp; NativeIO.isAvailable()) {
      try {
        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());
        return true;
      } catch (IOException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(
              "NativeIO.createDirectoryWithMode error, path = %s, mode = %o",
              p2f, permission.toShort()), e);
         }
        return b;
        return false;
      }
    } else {
      boolean b = p2f.mkdir();
      if (b) {
        setPermission(p, permission);
       }
      return b;
     }
   }
 
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
index 5e985737d3c..148cf3e1036 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
@@ -54,12 +54,75 @@ private Path writeFile(FileSystem fs, String name) throws IOException {
     return f;
   }
 
  private void cleanupFile(FileSystem fs, Path name) throws IOException {
  private Path writeFile(FileSystem fs, String name, FsPermission perm) throws IOException {
    Path f = new Path(TEST_PATH_PREFIX + name);
    FSDataOutputStream stm = fs.create(f, perm, true, 2048, (short)1, 32 * 1024 * 1024, null);
    stm.writeBytes("42\n");
    stm.close();
    return f;
  }

  private void cleanup(FileSystem fs, Path name) throws IOException {
     assertTrue(fs.exists(name));
     fs.delete(name, true);
     assertTrue(!fs.exists(name));
   }
 
  public void testLocalFSDirsetPermission() throws IOException {
    if (Path.WINDOWS) {
      System.out.println("Cannot run test for Windows");
      return;
    }
    Configuration conf = new Configuration();
    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "044");
    LocalFileSystem localfs = FileSystem.getLocal(conf);
    Path dir = new Path(TEST_PATH_PREFIX + "dir");
    localfs.mkdirs(dir);
    try {
      FsPermission initialPermission = getPermission(localfs, dir);
      assertEquals(
          FsPermission.getDirDefault().applyUMask(FsPermission.getUMask(conf)),
          initialPermission);
    } catch(Exception e) {
      System.out.println(StringUtils.stringifyException(e));
      System.out.println("Cannot run test");
      return;
    }

    FsPermission perm = new FsPermission((short)0755);
    Path dir1 = new Path(TEST_PATH_PREFIX + "dir1");
    localfs.mkdirs(dir1, perm);
    try {
      FsPermission initialPermission = getPermission(localfs, dir1);
      assertEquals(perm.applyUMask(FsPermission.getUMask(conf)), initialPermission);
    } catch(Exception e) {
      System.out.println(StringUtils.stringifyException(e));
      System.out.println("Cannot run test");
      return;
    }

    Path dir2 = new Path(TEST_PATH_PREFIX + "dir2");
    localfs.mkdirs(dir2);
    try {
      FsPermission initialPermission = getPermission(localfs, dir2);
      Path copyPath = new Path(TEST_PATH_PREFIX + "dir_copy");
      localfs.rename(dir2, copyPath);
      FsPermission copyPermission = getPermission(localfs, copyPath);
      assertEquals(copyPermission, initialPermission);
      dir2 = copyPath;
    } catch (Exception e) {
      System.out.println(StringUtils.stringifyException(e));
      System.out.println("Cannot run test");
      return;
    } finally {
      cleanup(localfs, dir);
      cleanup(localfs, dir1);
      if (localfs.exists(dir2)) {
        localfs.delete(dir2, true);
      }
    }
  }

   /** Test LocalFileSystem.setPermission */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"044"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><literal type="string">"foo"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>f</name> <init>= <expr><call><name>writeFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>FsPermission</name></type> <name>initialPermission</name> <init>= <expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getFileDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyUMask</name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
          <argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getFileDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyUMask</name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
     </block_content>}</block></catch>
    <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>String</name></type> <name>filename1</name> <init>= <expr><literal type="string">"foo1"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FsPermission</name></type> <name>perm</name> <init>= <expr><operator>new</operator> <call><name>FsPermission</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>f1</name> <init>= <expr><call><name>writeFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>initialPermission</name> <init>= <expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
          <argument><expr><call><name><name>perm</name><operator>.</operator><name>applyUMask</name></name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name>String</name></type> <name>filename2</name> <init>= <expr><literal type="string">"foo2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>f2</name> <init>= <expr><call><name>writeFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>initialPermission</name> <init>= <expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Path</name></type> <name>copyPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_PATH_PREFIX</name> <operator>+</operator> <literal type="string">"/foo_copy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>localfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>copyPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>copyPermission</name> <init>= <expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>copyPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>copyPermission</name></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>f2</name> <operator>=</operator> <name>copyPath</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name><name>localfs</name><operator>.</operator><name>setPermission</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>all</name></expr></argument>, <argument><expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch>
    <finally>finally <block>{<block_content><expr_stmt><expr><call><name>cleanupFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></finally>
    <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>localfs</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>localfs</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></finally></try>
   </block_content>}</block></catch></try>
 
   <function><type><name>FsPermission</name></type> <name>getPermission</name><parameter_list>(<parameter><decl><type><name>LocalFileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">205</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetOwner</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     }</block>
 
     <name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"044"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><literal type="string">"bar"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>f</name> <init>= <expr><call><name>writeFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">240</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetOwner</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
                            <expr><literal type="string">"belongs to only one group."</literal></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content></block>;</function>
       </block_content>}</block></function>
     } 
    finally <block>{<block_content><expr_stmt><expr><call><name>cleanupFile</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
    <finally>finally <block>{<block_content><expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></finally>
   }
 
   static <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getGroups</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function>

</unit>
