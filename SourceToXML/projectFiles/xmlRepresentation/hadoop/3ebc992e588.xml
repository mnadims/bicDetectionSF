<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/3ebc992e588.java"><expr_stmt><expr><name>From</name> <literal type="number">3ebc992e588c076afd4db0c8f28e9f5f86e93979</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Eli</name> <name><name>Collins</name> <argument_list type="generic">&lt;<argument><name>eli</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">28</literal> <name>Jun</name> <literal type="number">2011</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">34</literal><operator>:</operator><literal type="number">20</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">7429.</literal> <name>Add</name> <name>another</name> <name>IOUtils</name><operator>#</operator><name>copyBytes</name> <name><name>method</name><operator>.</operator>
 <name>Contributed</name></name> <name>by</name> <name>Eli</name> <name>Collins</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1140442 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">83</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">61</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">24</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>eee47e05490</name><operator>..</operator><name>feae1ef333f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">237</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">237</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <call><name>Trunk</name> <argument_list>(<argument><expr><name>unreleased</name> <name>changes</name></expr></argument>)</argument_list></call>
     <name>HADOOP</name><operator>-</operator><literal type="number">310.</literal> <name>Additional</name> <name>constructor</name> <name>requested</name> <name>in</name> <name><name>BytesWritable</name><operator>.</operator></name> (<name>Brock</name>
     <name>Noland</name> <name>via</name> <name>atm</name></expr></expr_stmt>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">7429.</literal> <name>Add</name> <name>another</name> <name>IOUtils</name><operator>#</operator><name>copyBytes</name> <name><name>method</name><operator>.</operator></name> (<name>eli</name></expr></expr_stmt>)

   <expr_stmt><expr><name>OPTIMIZATIONS</name>
   
     <name>HADOOP</name><operator>-</operator><literal type="number">7333.</literal> <name>Performance</name> <name>improvement</name> <name>in</name> <name><name>PureJavaCrc32</name><operator>.</operator></name> (<name>Eric</name> <name>Caspole</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ca6df1bd7e8</name><operator>..</operator><literal type="number">29db28032ba</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
 
   <comment type="block" format="javadoc">/**
    * Copies from one stream to another.
   *
    * @param in InputStrem to read from
    * @param out OutputStream to write to
    * @param buffSize the size of the buffer 
@@ -44,7 +45,6 @@
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>copyBytes</name><argument_list>(<argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>OutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>int</name> <name>buffSize</name></expr></argument>, <argument><expr><name>boolean</name> <name>close</name></expr></argument>)</argument_list></call> 
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>

     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name>copyBytes</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if<condition>(<expr><name>close</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>copyBytes</name><argument_list>(<argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>OutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>int</name> <name>buffSize</name></expr></argument>, <argument><expr><name>boo</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>copyBytes</name><argument_list>(<argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>OutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>int</name> <name>buffSize</name></expr></argument>)</argument_list></call> 
     <throws>throws <argument><expr><name>IOException</name> <block>{

     <expr><name>PrintStream</name> <name>ps</name> <operator>=</operator> <ternary><condition><expr><name>out</name> <operator>instanceof</operator> <name>PrintStream</name></expr> ?</condition><then> <expr><operator>(</operator><name>PrintStream</name><operator>)</operator><name>out</name></expr></then></ternary></expr></block></expr></argument></throws> <operator>:</operator> <literal type="null">null</literal></expr></argument>;</argument_list></call></expr></expr_stmt>
     <decl_stmt><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>buffSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>copyBytes</name><argument_list>(<argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>OutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>int</name> <name>buffSize</name></expr></argument>)</argument_list></call>
       <name>bytesRead</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></try>

   <comment type="block" format="javadoc">/**
    * Copies from one stream to another. &lt;strong&gt;closes the input and output streams 
    * at the end&lt;/strong&gt;.
   *
    * @param in InputStrem to read from
    * @param out OutputStream to write to
    * @param conf the Configuration object 
@@ -96,7 +97,8 @@ public static void copyBytes(InputStream in, OutputStream out, Configuration con
   
   /**
    * Copies from one stream to another.
   * @param in InputStrem to read from
   *
   * @param in InputStream to read from
    * @param out OutputStream to write to
    * @param conf the Configuration object
    * @param close whether or not close the InputStream and 
@@ -106,21 +108,50 @@ public static void copyBytes(InputStream in, OutputStream out, Configuration con
     throws IOException {
     copyBytes(in, out, conf.getInt("io.file.buffer.size", 4096),  close);
   }

  /**
   * Copies count bytes from one stream to another.
   *
   * @param in InputStream to read from
   * @param out OutputStream to write to
   * @param count number of bytes to copy
   * @throws IOException if bytes can not be read or written
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyBytes</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>bytesRemaining</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>bytesRemaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bytesToRead</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator>
        <operator>(</operator><ternary><condition><expr><name>bytesRemaining</name> <operator>&lt;</operator> <name><name>buf</name><operator>.</operator><name>length</name></name></expr> ?</condition><then> <expr><name>bytesRemaining</name></expr> </then><else>: <expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bytesRemaining</name> <operator>-=</operator> <name>bytesRead</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>
   
  <comment type="block" format="javadoc">/** Reads len bytes in a loop.
   * @param in The InputStream to read from
  /**
   * Reads len bytes in a loop.
   *
   * @param in InputStream to read from
    * @param buf The buffer to fill
    * @param off offset from the buffer
    * @param len the length of bytes to read
    * @throws IOException if it could not read requested number of bytes 
    * for any reason (including EOF)
    */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>readFully</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>int</name></type> <name>toRead</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>toRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>toRead</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>toRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>toRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>( <argument><expr><literal type="string">"Premature EOF from inputStream"</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>toRead</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>readFully</name><argument_list>( <argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>byte</name> <name><name>buf</name><index>[]</index></name></expr></argument>,</argument_list></call></expr></expr_stmt>
     </block_content>}</block></while>
   </block_content>}</block></if></if_stmt>
   
  <comment type="block" format="javadoc">/** Similar to readFully(). Skips bytes in a loop.
  /**
   * Similar to readFully(). Skips bytes in a loop.
    * @param in The InputStream to skip bytes from
    * @param len number of bytes to skip.
    * @throws IOException if it could not skip requested number of bytes 
    * for any reason (including EOF)
    */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>skipFully</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <while>while <condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>skip</name></name><argument_list>( <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>skipFully</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>( <argument><expr><literal type="string">"Premature EOF from inputStream"</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>skipFully</name><argument_list>( <argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument> )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <comment type="block" format="javadoc">/**
    * Close the Closeable objects and &lt;b&gt;ignore&lt;/b&gt; any {@link IOException} or 
    * null pointers. Must only be used for cleanup in exception handlers.
   *
    * @param log the log to record problems to at debug level. Can be null.
    * @param closeables the objects to close
    */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>cleanup</name><argument_list>(<argument><expr><name>Log</name> <name>log</name></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name><operator>...</operator> <name>closeables</name></expr></argument>)</argument_list></call> <block>{</block></expr></block></expr></argument></throws></expr></expr_stmt>
    <for>for<control>(<init><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name></type> <name>c</name> <range>: <expr><name>closeables</name></expr></range></decl></init>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name></type> <name>c</name> <range>: <expr><name>closeables</name></expr></range></decl></init>)</control> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <try>try <block>{<block_content>
           <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">200</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>cleanup</name><argument_list>(<argument><expr><name>Log</name> <name>log</name></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name><operator>...</operator> <name>closeables</name></expr></argument>)</argument_list></call> <block>{
   <comment type="block" format="javadoc">/**
    * Closes the stream ignoring {@link IOException}.
    * Must only be called in cleaning up from exception handlers.
   *
    * @param stream the Stream to close
    */</comment>
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>closeStream</name><argument_list>( <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name> <name>stream</name></expr></argument> )</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>closeStream</name><argument_list>(<argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name> <name>stream</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>cleanup</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</block></expr>
   }</block>
   
   <comment type="block" format="javadoc">/**
   * Closes the socket ignoring {@link IOException} 
   * Closes the socket ignoring {@link IOException}
   *
    * @param sock the Socket to close
    */</comment>
  <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>closeSocket</name><argument_list>( <argument><expr><name>Socket</name> <name>sock</name></expr></argument> )</argument_list></call> <block>{
    <comment type="line">// avoids try { close() } dance</comment>
    <if_stmt><if>if <condition>( <expr><name>sock</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>closeSocket</name><parameter_list>(<parameter><decl><type><name>Socket</name></type> <name>sock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>sock</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></try></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt></block></expr>}</block></expr></expr_stmt> <catch>catch <parameter_list>( <parameter><decl><type><name>IOException</name></type> <name>ignored</name></decl></parameter> )</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sock</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
       </block_content>}</block></catch>
     </block_content>}</block></try>
   </block_content>}</block></if></if_stmt>
   
  <comment type="block" format="javadoc">/** /dev/null of OutputStreams.
  /**
   * The /dev/null of OutputStreams.
    */</comment>
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>NullOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
     <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class></block_content></block></for></block_content></block></for></block_content></block></while></block_content></block></function></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function></block_content></block></while></block_content></block></function></block_content></block></function>

</unit>
