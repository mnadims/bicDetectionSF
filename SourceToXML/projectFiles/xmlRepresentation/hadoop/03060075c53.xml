<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/03060075c53.java"><expr_stmt><expr><name>From</name> <literal type="number">03060075c53a2cecfbf5f60b6fc77afecf64ace5</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Andrew</name> <name><name>Wang</name> <argument_list type="generic">&lt;<argument><name>wang</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">10</literal> <name>Oct</name> <literal type="number">2016</literal> <literal type="number">12</literal><operator>:</operator><literal type="number">19</literal><operator>:</operator><literal type="number">26</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">13699.</literal> <name>Configuration</name> <name>does</name> <name>not</name> <name>substitute</name> <name>multiple</name>
 <name>references</name> <name>to</name> <name>the</name> <name>same</name> <name><name>var</name><operator>.</operator></name>

--
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">23</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">24</literal> <operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">16</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">31</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1e8ed503c39</literal><operator>..</operator><name>dbbc8ff20e8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">943</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">943</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>addResourceObject</name><argument_list>(<argument><expr><name>Resource</name> <name>resource</name></expr></argument>)</argument_list></call> <block>{
    <expr><operator>*</operator>
    <operator>*</operator> <name>If</name> <name>var</name> <name>is</name> <name>unbounded</name> <name>the</name> <name>current</name> <name>state</name> <name>of</name> <name>expansion</name> <literal type="string">"prefix${var}suffix"</literal> <name>is</name>
    <operator>*</operator> <name><name>returned</name><operator>.</operator></name>
   *
   <operator>*</operator> <name>If</name> <name>a</name> <name>cycle</name> <name>is</name> <name>detected</name><operator>:</operator> <name>replacing</name> <name>var1</name> <name>requires</name> <name>replacing</name> <name>var2</name> <operator>...</operator> <name>requires</name>
   <operator>*</operator> <name>replacing</name> <name>var1</name></expr>, <expr><name><name>i</name><operator>.</operator><name>e</name><operator>.</operator></name>, <name>the</name> <name>cycle</name> <name>is</name> <name>shorter</name> <name>than</name>
   <operator>*</operator> <block>{@<expr><name>link</name> <name>Configuration</name><operator>#</operator><name>MAX_SUBST</name></expr>}</block> <name>then</name> <name>the</name> <name>original</name> <name>expr</name> <name>is</name> <name><name>returned</name><operator>.</operator></name>
   * <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
   <operator>*</operator> <name>This</name> <name>function</name> <name>also</name> <name>detects</name> <name>self</name><operator>-</operator><name>referential</name> <name>substitutions</name></expr>, <expr><name><name>i</name><operator>.</operator><name>e</name><operator>.</operator></name>
   * <operator>&lt;</operator><name>pre</name><operator>&gt;</operator>
   <operator>*</operator>   <block>{@<expr><name>code</name>
   <operator>*</operator>   <name><name>foo</name><operator>.</operator><name>bar</name></name> <operator>=</operator> <name>$</name><block>{<expr><name><name>foo</name><operator>.</operator><name>bar</name></name></expr>}</block>
   <operator>*</operator></expr>   }</block>
   <operator>*</operator> <operator>&lt;</operator><operator>/</operator><name>pre</name><operator>&gt;</operator>
   <operator>*</operator> <name>If</name> <name>a</name> <name>cycle</name> <name>is</name> <name>detected</name> <name>then</name> <name>the</name> <name>original</name> <name>expr</name> <name>is</name> <name><name>returned</name><operator>.</operator> <name>Loops</name></name>
   <operator>*</operator> <name>involving</name> <name>multiple</name> <name>substitutions</name> <name>are</name> <name>not</name> <name><name>detected</name><operator>.</operator></name>
    *
    <operator>*</operator> @<name>param</name> <name>expr</name> <name>the</name> <name>literal</name> <name>value</name> <name>of</name> <name>a</name> <name>config</name> <name>key</name>
    <operator>*</operator> @</expr><return>return <expr><literal type="null">null</literal></expr></return> <if_stmt><if>if expr is null<operator>,</operator> <expr_stmt><expr><name>otherwise</name> <name>the</name> <name>value</name> <name>resulting</name> <name>from</name> <name>expanding</name>
@@ <operator>-</operator><literal type="number">959</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">964</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>private</specifier> <name>String</name> <call><name>substituteVars</name><argument_list>(<argument><expr><name>String</name> <name>expr</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     }</block></expr></expr_stmt></if></if_stmt>
     <name>String</name> <name>eval</name> <operator>=</operator> <name>expr</name></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>evalSet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>MAX_SUBST</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>varBounds</name> <init>= <expr><call><name>findSubVariable</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name><name>varBounds</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1004</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1008</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>private</specifier> <name>String</name> <call><name>substituteVars</name><argument_list>(<argument><expr><name>String</name> <name>expr</name></expr></argument>)</argument_list></call> <block>{
         <return>return <expr><name>eval</name></expr>;</return> <comment type="line">// return literal ${var}: var is unbound</comment>
       }</block></expr></expr_stmt>
 
      <comment type="line">// prevent recursive resolution</comment>
      <comment type="line">//</comment>
       <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>dollar</name> <init>= <expr><name><name>varBounds</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name> <operator>-</operator> <literal type="string">"${"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>afterRightBrace</name> <init>= <expr><name><name>varBounds</name><index>[<expr><name>SUB_END_IDX</name></expr>]</index></name> <operator>+</operator> <literal type="string">"}"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>refVar</name> <init>= <expr><call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>dollar</name></expr></argument>, <argument><expr><name>afterRightBrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>evalSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>evalSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>evalSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>refVar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

      <comment type="line">// detect self-referential values</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>refVar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>expr</name></expr>;</return> <comment type="line">// return original expression if there is a loop</comment>
       </block_content>}</block></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">917ccbce29c</literal><operator>..</operator><literal type="number">17112f5c9f6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testVariableSubstitution</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>declareProperty</name><argument_list>(<argument><expr><literal type="string">"my.fullfile"</literal></expr></argument>, <argument><expr><literal type="string">"${my.base}/${my.file}${my.suffix}"</literal></expr></argument>, <argument><expr><literal type="string">"/tmp/hadoop_user/hello.txt"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <comment type="line">// check that undefined variables are returned as-is</comment>
     <expr_stmt><expr><call><name>declareProperty</name><argument_list>(<argument><expr><literal type="string">"my.failsexpand"</literal></expr></argument>, <argument><expr><literal type="string">"a${my.undefvar}b"</literal></expr></argument>, <argument><expr><literal type="string">"a${my.undefvar}b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check that multiple variable references are resolved</comment>
    <expr_stmt><expr><call><name>declareProperty</name><argument_list>(<argument><expr><literal type="string">"my.user.group"</literal></expr></argument>, <argument><expr><literal type="string">"${user.name} ${user.name}"</literal></expr></argument>,
        <argument><expr><literal type="string">"hadoop_user hadoop_user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>endConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>fileResource</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>CONFIG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>mock</name><operator>.</operator><name>addResource</name></name><argument_list>(<argument><expr><name>fileResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1508</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1511</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testSettingKeyNull</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     }</block></expr></argument>
   }
 
  <argument><expr><specifier>public</specifier> <name>void</name> <call><name>testInvalidSubstitutation</name><argument_list>()</argument_list></call></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidSubstitution</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>configuration</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// 2-var loops</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1522</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">1525</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testInvalidSubstitutation</name><argument_list>()</argument_list></call> <block>{
       <expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr>;
       <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     </block_content>}</block></function>

    <comment type="line">//</comment>
    <comment type="line">// 3-variable loops</comment>
    <comment type="line">//</comment>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expVal1</name> <init>= <expr><literal type="string">"${test.var2}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>testVar1</name> <init>= <expr><literal type="string">"test.var1"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>, <argument><expr><name>expVal1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var2"</literal></expr></argument>, <argument><expr><literal type="string">"${test.var3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var3"</literal></expr></argument>, <argument><expr><literal type="string">"${test.var1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>expVal1</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 3-variable loop with non-empty value prefix/suffix</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expVal2</name> <init>= <expr><literal type="string">"foo2${test.var2}bar2"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>, <argument><expr><name>expVal2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var2"</literal></expr></argument>, <argument><expr><literal type="string">"foo3${test.var3}bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var3"</literal></expr></argument>, <argument><expr><literal type="string">"foo1${test.var1}bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>expVal2</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></expr></expr_stmt>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testIncompleteSubbing</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

</unit>
