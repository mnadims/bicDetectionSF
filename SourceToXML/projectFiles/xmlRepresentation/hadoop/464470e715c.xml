<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/464470e715c.java"><expr_stmt><expr><name>From</name> <literal type="number">464470e715c95fc3b832e93800d551fdb44333f1</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Colin</name> <name><name>McCabe</name> <argument_list type="generic">&lt;<argument><name>cmccabe</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">25</literal> <name>Sep</name> <literal type="number">2013</literal> <literal type="number">20</literal><operator>:</operator><literal type="number">51</literal><operator>:</operator><literal type="number">09</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">9981.</literal> <name>globStatus</name> <name>should</name> <name>minimize</name> <name>its</name> <name>listStatus</name> <name>and</name>
 <name>getFileStatus</name> <name><name>calls</name><operator>.</operator></name>  (<name>Contributed</name> <name>by</name> <name>Colin</name> <name>Patrick</name> <name>McCabe</name></expr></expr_stmt>)

<expr_stmt><expr><name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1526297 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>  <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">86</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestGlobPaths</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">49</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">105</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">33</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">90ae9e91013</literal><operator>..</operator><name>e196b74927a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">369</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">369</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.3.0</literal> <operator>-</operator> <name>UNRELEASED</name>
     <name>HADOOP</name><operator>-</operator><literal type="number">9791.</literal> <name>Add</name> <name>a</name> <name>test</name></expr></expr_stmt> <case>case <expr><name>covering</name> <name>long</name> <name>paths</name></expr> <for>for new FileUtil access
     check methods <control>(<init><expr><name>ivanmi</name></expr></init>)</control><block type="pseudo"><block_content>
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">9981.</literal> <name>globStatus</name> <name>should</name> <name>minimize</name> <name>its</name> <name>listStatus</name> <name>and</name> <name>getFileStatus</name>
    <name><name>calls</name><operator>.</operator></name>  (<name>Contributed</name> <name>by</name> <name>Colin</name> <name>Patrick</name> <name>McCabe</name></expr></expr_stmt></block_content></block></for></case>)

 <expr_stmt><expr><name>Release</name> <literal type="number">2.2.0</literal> <operator>-</operator> <name>UNRELEASED</name>
 
   <name>INCOMPATIBLE</name> <name>CHANGES</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a23649fe482</name><operator>..</operator><name>d00c387f9b3</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>Globber</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>private</specifier> <name>Path</name> <call><name>fixRelativePart</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   }
 
  <comment type="block" format="javadoc">/**
   * Convert a path component that contains backslash ecape sequences to a
   * literal string.  This is necessary when you want to explicitly refer to a
   * path that contains globber metacharacters.
   */</comment>
  private <function><type><specifier>static</specifier> <name>String</name></type> <name>unescapePathComponent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>name</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"\\\\(.)"</literal></expr></argument>, <argument><expr><literal type="string">"$1"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Translate an absolute path into a list of path components.
    * We merge double slashes into a single slash here.
@@ -166,37 +175,72 @@ private String authorityFromPath(Path path) throws IOException {
             new Path(scheme, authority, Path.SEPARATOR)));
       }
       
      for (String component : components) {
      for (int componentIdx = 0; componentIdx &lt; components.size();
          componentIdx++) {
         ArrayList&lt;FileStatus&gt; newCandidates =
             new ArrayList&lt;FileStatus&gt;(candidates.size());
        GlobFilter globFilter = new GlobFilter(component);
        GlobFilter globFilter = new GlobFilter(components.get(componentIdx));
        String component = unescapePathComponent(components.get(componentIdx));
         if (globFilter.hasPattern()) {
           sawWildcard = true;
         }
         if (candidates.isEmpty() &amp;&amp; sawWildcard) {
          // Optimization: if there are no more candidates left, stop examining 
          // the path components.  We can only do this if we've already seen
          // a wildcard component-- otherwise, we still need to visit all path 
          // components in case one of them is a wildcard.
           break;
         }
        for (FileStatus candidate : candidates) {
          FileStatus resolvedCandidate = candidate;
          if (candidate.isSymlink()) {
            // We have to resolve symlinks, because otherwise we don't know
            // whether they are directories.
            resolvedCandidate = getFileStatus(candidate.getPath());
        if ((componentIdx &lt; components.size() - 1) &amp;&amp;
            (!globFilter.hasPattern())) {
          // Optimization: if this is not the terminal path component, and we 
          // are not matching against a glob, assume that it exists.  If it 
          // doesn't exist, we'll find out later when resolving a later glob
          // or the terminal path component.
          for (FileStatus candidate : candidates) {
            candidate.setPath(new Path(candidate.getPath(), component));
           }
          if (resolvedCandidate == null ||
              resolvedCandidate.isDirectory() == false) {
            continue;
          }
          FileStatus[] children = listStatus(candidate.getPath());
          for (FileStatus child : children) {
            // Set the child path based on the parent path.
            // This keeps the symlinks in our path.
            child.setPath(new Path(candidate.getPath(),
                    child.getPath().getName()));
            if (globFilter.accept(child.getPath())) {
              newCandidates.add(child);
          continue;
        }
        for (FileStatus candidate : candidates) {
          if (globFilter.hasPattern()) {
            FileStatus[] children = listStatus(candidate.getPath());
            if (children.length == 1) {
              // If we get back only one result, this could be either a listing
              // of a directory with one entry, or it could reflect the fact
              // that what we listed resolved to a file.
              //
              // Unfortunately, we can't just compare the returned paths to
              // figure this out.  Consider the case where you have /a/b, where
              // b is a symlink to "..".  In that case, listing /a/b will give
              // back "/a/b" again.  If we just went by returned pathname, we'd
              // incorrectly conclude that /a/b was a file and should not match
              // /a/*/</comment><expr_stmt><expr><operator>*</operator><operator>.</operator>  <name>So</name> <name>we</name> <name>use</name> <name>getFileStatus</name> <name>of</name> <name>the</name> <name>path</name> <name>we</name> <name>just</name> <name>listed</name> <name>to</name></expr></expr_stmt>
              <comment type="line">// disambiguate.</comment>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getFileStatus</name><argument_list>(<argument><expr><call><name><name>candidate</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
              </block_content>}</block></if></if_stmt>
             }
          }
            <for>for <control>(<init><decl><type><name>FileStatus</name></type> <name>child</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
              <comment type="line">// Set the child path based on the parent path.</comment>
              <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setPath</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>candidate</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>child</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>globFilter</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newCandidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
          } else <block>{<block_content>
            <comment type="line">// When dealing with non-glob components, use getFileStatus </comment>
            <comment type="line">// instead of listStatus.  This is an optimization, but it also</comment>
            <comment type="line">// is necessary for correctness in HDFS, since there are some</comment>
            <comment type="line">// special HDFS directories like .reserved and .snapshot that are</comment>
            <comment type="line">// not visible to listStatus, but which do exist.  (See HADOOP-9877)</comment>
            <decl_stmt><decl><type><name>FileStatus</name></type> <name>childStatus</name> <init>= <expr><call><name>getFileStatus</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>candidate</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>childStatus</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>newCandidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>childStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
           </block_content>}</block>
         }
         candidates <expr_stmt><expr><operator>=</operator> <name>newCandidates</name></expr>;</expr_stmt>
       }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestGlobPaths</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestGlobPaths</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8e8124747c3</literal><operator>..</operator><literal type="number">8eb9847ebb5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestGlobPaths</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestGlobPaths</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>permission</name><operator>.</operator><name>FsPermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>HdfsConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>MiniDFSCluster</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>server</name><operator>.</operator><name>namenode</name><operator>.</operator><name>INodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>*</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">361</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">362</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testMultiGlob</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>status</name> <operator>=</operator> <call><name><name>fs</name><operator>.</operator><name>globStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>USER_DIR</name><operator>+</operator><literal type="string">"{/dir*}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>checkStatus</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <comment type="block">/* 
     * true filter
     */</comment>

    <decl_stmt><decl><type><name>PathFilter</name></type> <name>trueFilter</name> <init>= <expr><operator>new</operator> <class><super><name>PathFilter</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

     <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>fs</name><operator>.</operator><name>globStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trueFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>checkStatus</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">843</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">833</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>accept</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   }
 
  private <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>PathFilter</name></type> <name>trueFilter</name> <init>= <expr><operator>new</operator> <call><name>AcceptAllPathFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/**
    * Accept only paths ending in Z.
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">893</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">885</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>(<argument><expr><name>FSTestWrapper</name> <name>wrap</name></expr></argument>, <argument><expr><name>FSTestWrapper</name> <name>unprivilegedWrap</name></expr></argument>,</argument_list></call></expr></expr_stmt>
     }
   }
 
  <function><annotation>@<name>Ignore</name></annotation>
   <annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGlobWithSymlinksOnFS</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileSystem</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobWithSymlinks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><annotation>@<name>Ignore</name></annotation>
   <annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGlobWithSymlinksOnFC</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobWithSymlinks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">970</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">964</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>(<argument><expr><name>FSTestWrapper</name> <name>wrap</name></expr></argument>, <argument><expr><name>FSTestWrapper</name> <name>unprivilegedWrap</name></expr></argument>,</argument_list></call></expr></expr_stmt>
     </block_content>}</block></function>
   }
 
  @<function><type><name>Ignore</name>
   <annotation>@<name>Test</name></annotation>
   <specifier>public</specifier> <name>void</name></type> <name>testGlobWithSymlinksToSymlinksOnFS</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileSystem</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobWithSymlinksToSymlinks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><annotation>@<name>Ignore</name></annotation>
   <annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGlobWithSymlinksToSymlinksOnFC</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobWithSymlinksToSymlinks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1019</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1015</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>(<argument><expr><name>FSTestWrapper</name> <name>wrap</name></expr></argument>, <argument><expr><name>FSTestWrapper</name> <name>unprivilegedWrap</name></expr></argument>,</argument_list></call></expr></expr_stmt>
     </block_content>}</block></function>
   }
 
  @<function><type><name>Ignore</name>
   <annotation>@<name>Test</name></annotation>
   <specifier>public</specifier> <name>void</name></type> <name>testGlobSymlinksWithCustomPathFilterOnFS</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileSystem</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobSymlinksWithCustomPathFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><annotation>@<name>Ignore</name></annotation>
   <annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGlobSymlinksWithCustomPathFilterOnFC</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testOnFileContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobSymlinksWithCustomPathFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1044</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1042</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>(<argument><expr><name>FSTestWrapper</name> <name>wrap</name></expr></argument>, <argument><expr><name>FSTestWrapper</name> <name>unprivilegedWrap</name></expr></argument>,
           <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>USER_DIR</name> <operator>+</operator> <literal type="string">"/alphaLink"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AcceptAllPathFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>statuses</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><name><name>statuses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>USER_DIR</name> <operator>+</operator> <literal type="string">"/alphaLink"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>USER_DIR</name> <operator>+</operator> <literal type="string">"/alpha"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"hdfs"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <comment type="line">// If we're using FileContext, then we can list a file:/// URI.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1150</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1148</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testGlobAccessDeniedOnFS</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>testGlobAccessDeniedOnFC</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>testOnFileContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestGlobAccessDenied</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>

  <comment type="block" format="javadoc">/**
   * Test that trying to list a reserved path on HDFS via the globber works.
   **/</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TestReservedHdfsPaths</name> <super_list><implements>implements <super><name>FSTestWrapperGlobTest</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>FSTestWrapper</name></type> <name>wrap</name></decl></parameter>, <parameter><decl><type><name>FSTestWrapper</name></type> <name>unprivilegedWrap</name></decl></parameter>,
        <parameter><decl><type><name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>FileContext</name></type> <name>fc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>reservedRoot</name> <init>= <expr><literal type="string">"/.reserved/.inodes/"</literal> <operator>+</operator> <name><name>INodeId</name><operator>.</operator><name>ROOT_INODE_ID</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>reservedRoot</name></expr></argument>,
        <argument><expr><call><name><name>TestPath</name><operator>.</operator><name>mergeStatuses</name></name><argument_list>(<argument><expr><call><name><name>unprivilegedWrap</name><operator>.</operator>
            <name>globStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>reservedRoot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AcceptAllPathFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// These inodes don't show up via listStatus.</comment>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,
        <argument><expr><call><name><name>TestPath</name><operator>.</operator><name>mergeStatuses</name></name><argument_list>(<argument><expr><call><name><name>unprivilegedWrap</name><operator>.</operator>
            <name>globStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><literal type="string">"/.reserved/*"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AcceptAllPathFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testReservedHdfsPathsOnFS</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testOnFileSystem</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestReservedHdfsPaths</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testReservedHdfsPathsOnFC</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testOnFileContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestReservedHdfsPaths</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
