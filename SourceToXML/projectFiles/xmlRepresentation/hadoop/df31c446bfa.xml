<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/df31c446bfa.java"><expr_stmt><expr><name>From</name> <name>df31c446bfa628bee9fab88addcfec5a13edda30</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Arpit</name> <name><name>Agarwal</name> <argument_list type="generic">&lt;<argument><name>arp</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">24</literal> <name>Sep</name> <literal type="number">2015</literal> <literal type="number">11</literal><operator>:</operator><literal type="number">41</literal><operator>:</operator><literal type="number">48</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">12437.</literal> <name>Allow</name> <name>SecurityUtil</name> <name>to</name> <name>lookup</name> <name>alternate</name>
 <name><name>hostnames</name><operator>.</operator></name> (<name>Contributed</name> <name>by</name> <name>Arpit</name> <name>Agarwal</name></expr></expr_stmt>)

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>fs</name><operator>/</operator><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>DNS</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">129</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityUtil</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">37</literal> <operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>core</name><operator>-</operator>default<operator>.</operator><name>xml</name>       <operator>|</operator>  <literal type="number">25</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>TestDNS</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">110</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>TestSecurityUtil</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>server</name><operator>/</operator><name>datanode</name><operator>/</operator><name><name>DataNode</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">25</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>hdfs</name><operator>-</operator>default<operator>.</operator><name>xml</name>       <operator>|</operator>  <literal type="number">25</literal> <operator>++</operator><operator>--</operator>
 <literal type="number">9</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">316</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">46</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">73e56b37bfe</literal><operator>..</operator><literal type="number">11e4852cacd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1147</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1147</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.8.0</literal> <operator>-</operator> <name>UNRELEASED</name>
     <name>HADOOP</name><operator>-</operator><literal type="number">12438.</literal> <name>Reset</name> <name><name>RawLocalFileSystem</name><operator>.</operator><name>useDeprecatedFileStatus</name></name> <name>in</name>
     <name><name>TestLocalFileSystem</name><operator>.</operator></name> (<name>Chris</name> <name>Nauroth</name> <name>via</name> <name>wheat9</name></expr></expr_stmt>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">12437.</literal> <name>Allow</name> <name>SecurityUtil</name> <name>to</name> <name>lookup</name> <name>alternate</name> <name><name>hostnames</name><operator>.</operator></name>
    (<name>Arpit</name> <name>Agarwal</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Release</name> <literal type="number">2.7.2</literal> <operator>-</operator> <name>UNRELEASED</name>
 
   <name>INCOMPATIBLE</name> <name>CHANGES</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9f053b8b7a1</literal><operator>..</operator><literal type="number">9fff33e95c5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">294</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">294</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@
   <comment type="block" format="javadoc">/** See &lt;a href="{@docRoot}/../core-default.html"&gt;core-default.xml&lt;/a&gt; */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name>  <name>HADOOP_SECURITY_AUTH_TO_LOCAL</name> <operator>=</operator>
     <literal type="string">"hadoop.security.auth_to_local"</literal></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/** See &lt;a href="{@docRoot}/../core-default.html"&gt;core-default.xml&lt;/a&gt; */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HADOOP_SECURITY_DNS_INTERFACE_KEY</name> <init>=
    <expr><literal type="string">"hadoop.security.dns.interface"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** See &lt;a href="{@docRoot}/../core-default.html"&gt;core-default.xml&lt;/a&gt; */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HADOOP_SECURITY_DNS_NAMESERVER_KEY</name> <init>=
    <expr><literal type="string">"hadoop.security.dns.nameserver"</literal></expr></init></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** See &lt;a href="{@docRoot}/../core-default.html"&gt;core-default.xml&lt;/a&gt; */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN</name> <init>=
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>DNS</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>DNS</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f19e80235b3</name><operator>..</operator><name>a6dc8e3d376</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>DNS</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>net</name><operator>/</operator><name><name>DNS</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr></init></decl>,6 +18,8 @@
 
 package <decl><type ref="prev"/><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>net</name></name></decl>;</decl_stmt>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddresses</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>istack</name><operator>.</operator><name>Nullable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>LogFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceAudience</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInterface</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Vector</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>NamingException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
    <operator>*</operator> @</expr></expr_stmt><return>return <expr><name>The</name> <name>host</name> <name>name</name> <name>associated</name> <name>with</name> <name>the</name> <name>provided</name> <name>IP</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>NamingException</name> <name>If</name> <name>a</name> <name>NamingException</name> <name>is</name> <name>encountered</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>reverseDns</name><argument_list>(<argument><expr><name>InetAddress</name> <name>hostIp</name></expr></argument>, <argument><expr><name>String</name> <name>ns</name></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>reverseDns</name><argument_list>(<argument><expr><name>InetAddress</name> <name>hostIp</name></expr></argument>, <argument><expr><annotation>@<name>Nullable</name></annotation> <name>String</name> <name>ns</name></expr></argument>)</argument_list></call></expr></argument></throws>
     <throws>throws <argument><expr><name>NamingException</name> <block>{</block></expr></argument>
     <comment type="line">//</comment>
     <comment type="line">// Builds the reverse IP lookup form</comment>
@<argument>@ <expr><operator>-</operator><literal type="number">228</literal></expr></argument>,<argument><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">232</literal></expr></argument>,<argument><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>getDefaultIP</name><argument_list>(<argument><expr><name>String</name> <name>strInterface</name></expr></argument>)</argument_list></call>
    <operator>*</operator>            <operator>(</operator><name><name>e</name><operator>.</operator><name>g</name><operator>.</operator> <name>eth0</name></name> <name>or</name> <name>eth0</name><operator>:</operator><literal type="number">0</literal><operator>)</operator>
    <operator>*</operator> @<name>param</name> <name>nameserver</name>
    <operator>*</operator>            <name>The</name> <name>DNS</name> <name>host</name> <name>name</name>
   <operator>*</operator> @<name>param</name> <name>tryfallbackResolution</name>
   <operator>*</operator></expr></argument></throws></expr></return>            <if_stmt><if>if true and if reverse DNS resolution fails then attempt to
   *            resolve the hostname with
   *            <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>InetAddress</name><operator>#</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call></expr></block_content>}</block></if></if_stmt> <expr_stmt><expr><name>which</name> <name>includes</name>
   <operator>*</operator>            <name>hosts</name> <name>file</name> <name><name>resolution</name><operator>.</operator></name>
    * @</expr></expr_stmt><return>return <expr><name>A</name> <name>string</name> <name>vector</name> <name>of</name> <name>all</name> <name>host</name> <name>names</name> <name>associated</name> <name>with</name> <name>the</name> <name>IPs</name> <name>tied</name> <name>to</name>
    <operator>*</operator>         <name>the</name> <name>specified</name> interface
    <operator>*</operator> @<throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws></expr></return> <if_stmt><if>if the given interface is invalid
    */
  public static String[] getHosts<condition>(<expr><name>String</name> <name>strInterface</name></expr><operator>,</operator> <expr><name>String</name> <name>nameserver</name></expr>)</condition><block type="pseudo"><block_content>
    <throws>throws <argument><expr><name>UnknownHostException</name> <block>{
    <expr><name><name>String</name><index>[]</index></name> <name>ips</name> <operator>=</operator> <call><name>getIPs</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>Vector</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>ctr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ctr</name> <operator>&lt;</operator> <name><name>ips</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>ctr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getHosts</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>strInterface</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>nameserver</name></decl></parameter>,
                                  <parameter><decl><type><name>boolean</name></type> <name>tryfallbackResolution</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>Vector</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>=
        <expr><call><name>getIPsAsInetAddressList</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>InetAddress</name></type> <name>address</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control> <block>{<block_content>
       <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>reverseDns</name><argument_list>(<argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>ips</name><index>[<expr><name>ctr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>reverseDns</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NamingException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
       </block_content>}</block></catch></try>
     </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>tryfallbackResolution</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>InetAddress</name></type> <name>address</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>canonicalHostName</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>getCanonicalHostName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Don't use the result if it looks like an IP address.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>InetAddresses</name><operator>.</operator><name>isInetAddress</name></name><argument_list>(<argument><expr><name>canonicalHostName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>canonicalHostName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

     <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to determine hostname for interface "</literal> <operator>+</operator> <name>strInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>cachedHostname</name></expr> }</block></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name><name>hosts</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to determine hostname for interface "</literal> <operator>+</operator>
          <name>strInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cachedHostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name><name>hosts</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">315</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">335</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>String</name> <call><name>resolveLocalHostIPAddress</name><argument_list>()</argument_list></call> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getHosts</name><argument_list>(<argument><expr><name>String</name> <name>strInterface</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>UnknownHostException</name> <block>{</block></expr></argument></throws></expr>
    <return>return <expr><call><name>getHosts</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
    <return>return <expr><call><name>getHosts</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></for>
 
   <comment type="block" format="javadoc">/**
@@ -331,17 +351,19 @@ private static String resolveLocalHostIPAddress() {
    * @throws UnknownHostException
    *             If one is encountered while querying the default interface
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefaultHost</name><argument_list>(<argument><expr><name>String</name> <name>strInterface</name></expr></argument>, <argument><expr><name>String</name> <name>nameserver</name></expr></argument>)</argument_list>
  public static <name>String</name> <name>getDefaultHost</name><argument_list>(<argument><expr><annotation>@<name>Nullable</name></annotation> <name>String</name> <name>strInterface</name></expr></argument>,
                                      <argument><expr><annotation>@<name>Nullable</name></annotation> <name>String</name> <name>nameserver</name></expr></argument>,
                                      <argument><expr><name>boolean</name> <name>tryfallbackResolution</name></expr></argument>)</argument_list>
     <throws>throws <argument><expr><name>UnknownHostException</name> <block>{</block></expr></argument></throws>
    if <argument_list>(<argument><expr><literal type="string">"default"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>strInterface</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <literal type="string">"default"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return <expr><name>cachedHostname</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><literal type="string">"default"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getDefaultHost</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr>;</return>
    <if_stmt><if>if <condition>(<expr><name>nameserver</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <literal type="string">"default"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nameserver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>hosts</name> <init>= <expr><call><name>getHosts</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><name>nameserver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>hosts</name> <init>= <expr><call><name>getHosts</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><name>nameserver</name></expr></argument>, <argument><expr><name>tryfallbackResolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><name><name>hosts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">379</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>getDefaultHost</name><argument_list>(<argument><expr><name>String</name> <name>strInterface</name></expr></argument>, <argument><expr><name>String</name> <name>nameserver</name></expr></argument>)</argument_list></call>
    <operator>*</operator> @<throws>throws <argument><expr><name>UnknownHostException</name>
    <operator>*</operator>             <name>If</name> <name>one</name> <name>is</name> <name>encountered</name></expr></argument></throws></expr></expr_stmt> <while>while querying the default interface
    */
  public static String getDefaultHost<condition>(<expr><name>String</name> <name>strInterface</name></expr>)</condition><block type="pseudo"><block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefaultHost</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>strInterface</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getDefaultHost</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>getDefaultHost</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function></block_content></block></while>
 
  <comment type="block" format="javadoc">/**
   * Returns the default (first) host name associated by the provided
   * nameserver with the address bound to the specified network interface.
   *
   * @param strInterface
   *            The name of the network interface to query (e.g. eth0)
   * @param nameserver
   *            The DNS host name
   * @throws UnknownHostException
   *             If one is encountered while querying the default interface
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefaultHost</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>strInterface</name></decl></parameter>,
                                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>nameserver</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getDefaultHost</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>, <argument><expr><name>nameserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns all the IPs associated with the provided interface, if any, as
   * a list of InetAddress objects.
   *
   * @param strInterface
   *            The name of the network interface or sub-interface to query
   *            (eg eth0 or eth0:0) or the string "default"
   * @param returnSubinterfaces
   *            Whether to return IPs associated with subinterfaces of
   *            the given interface
   * @return A list of all the IPs associated with the provided
   *         interface. The local host IP is returned if the interface
   *         name "default" is specified or there is an I/O error looking
   *         for the given interface.
   * @throws UnknownHostException
   *             If the given interface is invalid
   *
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getIPsAsInetAddressList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>strInterface</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>returnSubinterfaces</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="string">"default"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>cachedHostAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>NetworkInterface</name></type> <name>netIf</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>netIf</name> <operator>=</operator> <call><name><name>NetworkInterface</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>netIf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>netIf</name> <operator>=</operator> <call><name>getSubinterface</name><argument_list>(<argument><expr><name>strInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SocketException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"I/O error finding interface "</literal> <operator>+</operator> <name>strInterface</name> <operator>+</operator>
          <literal type="string">": "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>cachedHostAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></catch></try>
    <if_stmt><if>if <condition>(<expr><name>netIf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnknownHostException</name><argument_list>(<argument><expr><literal type="string">"No such interface "</literal> <operator>+</operator> <name>strInterface</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// NB: Using a LinkedHashSet to preserve the order for callers</comment>
    <comment type="line">// that depend on a particular element being 1st in the array.</comment>
    <comment type="line">// For example, getDefaultIP always returns the first element.</comment>
    <decl_stmt><decl><type><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>allAddrs</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>allAddrs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>netIf</name><operator>.</operator><name>getInetAddresses</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>returnSubinterfaces</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>allAddrs</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><call><name>getSubinterfaceInetAddrs</name><argument_list>(<argument><expr><name>netIf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>Vector</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>allAddrs</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>eddf98d07ff</name><operator>..</operator><literal type="number">38096ab4715</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name></name>;</package>
 
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_AUTHENTICATION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_DNS_INTERFACE_KEY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_DNS_NAMESERVER_KEY</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceLoader</name></name>;</import>
 
<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>kerberos</name><operator>.</operator><name>KerberosPrincipal</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>kerberos</name><operator>.</operator><name>KerberosTicket</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeys</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>net</name><operator>.</operator><name>DNS</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>net</name><operator>.</operator><name>NetUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name><operator>.</operator><name>AuthenticationMethod</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>String</name> <call><name>replacePattern</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>components</name></expr></argument>, <argument><expr><name>String</name> <name>hostname</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>String</name> <name>fqdn</name> <operator>=</operator> <name>hostname</name></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>fqdn</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>fqdn</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>fqdn</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fqdn</name> <operator>=</operator> <call><name>getLocalHostName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fqdn</name> <operator>=</operator> <call><name>getLocalHostName</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><name><name>components</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator>
         <call><name><name>StringUtils</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"@"</literal> <operator>+</operator> <name><name>components</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
   }
  
  static <function><type><name>String</name></type> <name>getLocalHostName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>

  <comment type="block" format="javadoc">/**
   * Retrieve the name of the current host. Multihomed hosts may restrict the
   * hostname lookup to a specific interface and nameserver with {@link
   * org.apache.hadoop.fs.CommonConfigurationKeysPublic#HADOOP_SECURITY_DNS_INTERFACE_KEY}
   * and {@link org.apache.hadoop.fs.CommonConfigurationKeysPublic#HADOOP_SECURITY_DNS_NAMESERVER_KEY}
   *
   * @param conf Configuration object. May be null.
   * @return
   * @throws UnknownHostException
   */</comment>
  <function><type><specifier>static</specifier> <name>String</name></type> <name>getLocalHostName</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>dnsInterface</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_DNS_INTERFACE_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>nameServer</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_DNS_NAMESERVER_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>dnsInterface</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><name>dnsInterface</name></expr></argument>, <argument><expr><name>nameServer</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nameServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>HADOOP_SECURITY_DNS_NAMESERVER_KEY</name> <operator>+</operator>
            <literal type="string">" requires "</literal> <operator>+</operator> <name>HADOOP_SECURITY_DNS_INTERFACE_KEY</name> <operator>+</operator> <literal type="string">". Check your"</literal> <operator>+</operator>
            <literal type="string">"configuration."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Fallback to querying the default hostname as we did before.</comment>
     <return>return <expr><call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">236</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>static</specifier> <name>String</name> <call><name>getLocalHostName</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>UnknownHostException</name> <block>{
   <expr><annotation>@<name><name>InterfaceStability</name><operator>.</operator><name>Evolving</name></name></annotation>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>login</name><argument_list>(<argument><expr><name>final</name> <name>Configuration</name> <name>conf</name></expr></argument>,
       <argument><expr><name>final</name> <name>String</name> <name>keytabFileKey</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>userNameKey</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>login</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>keytabFileKey</name></expr></argument>, <argument><expr><name>userNameKey</name></expr></argument>, <argument><expr><call><name>getLocalHostName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>login</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>keytabFileKey</name></expr></argument>, <argument><expr><name>userNameKey</name></expr></argument>, <argument><expr><call><name>getLocalHostName</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/hadoop-common-project/hadoop-common/src/main/resources/core-default.xml b/hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
index 410d96618ff..a57e81b2747 100644
-- a/hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
++ b/hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
@@ -88,6 +88,31 @@
   &lt;/description&gt;
 &lt;/property&gt;
 
&lt;property&gt;
  &lt;name&gt;hadoop.security.dns.interface&lt;/name&gt;
  &lt;description&gt;
    The name of the Network Interface from which the service should determine
    its host name for Kerberos login. e.g. eth2. In a multi-homed environment,
    the setting can be used to affect the _HOST subsitution in the service
    Kerberos principal. If this configuration value is not set, the service
    will use its default hostname as returned by
    InetAddress.getLocalHost().getCanonicalHostName().

    Most clusters will not require this setting.
  &lt;/description&gt;
&lt;/property&gt;

&lt;property&gt;
  &lt;name&gt;hadoop.security.dns.nameserver&lt;/name&gt;
  &lt;description&gt;
    The host name or IP address of the name server (DNS) which a service Node
    should use to determine its own host name for Kerberos Login. Requires
    hadoop.security.dns.interface.

    Most clusters will not require this setting.
  &lt;/description&gt;
&lt;/property&gt;

 &lt;!-- 
 === Multiple group mapping providers configuration sample === 
   This sample illustrates a typical use case for CompositeGroupsMapping where
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestDNS.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestDNS.java
index 18316d20afa..2a3098ad234 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestDNS.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestDNS.java
@@ -18,6 +18,10 @@
 
 package org.apache.hadoop.net;
 
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.net.NetworkInterface;
import java.net.SocketException;
 import java.net.UnknownHostException;
 import java.net.InetAddress;
 
@@ -28,6 +32,9 @@
 import org.apache.hadoop.util.Time;
 
 import org.junit.Test;

import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.*;
 
 /**
@@ -38,6 +45,11 @@
   private static final Log LOG = LogFactory.getLog(TestDNS.class);
   private static final String DEFAULT = "default";
 
  // This is not a legal hostname (starts with a hyphen). It will never
  // be returned on any test machine.
  private static final String DUMMY_HOSTNAME = "-DUMMY_HOSTNAME";
  private static final String INVALID_DNS_SERVER = "0.0.0.0";

   /**
    * Test that asking for the default hostname works
    * @throws Exception if hostname lookups fail
@@ -89,12 +101,8 @@ private InetAddress getLocalIPAddr() throws UnknownHostException {
    */</comment>
   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testNullInterface</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expected a NullPointerException, got "</literal> <operator>+</operator> <name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Expected</comment>
    </block_content>}</block></catch></try>
    <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// should work.</comment>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>ip</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultIP</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expected a NullPointerException, got "</literal> <operator>+</operator> <name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testNullInterface</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     }</block></expr></argument>
   }
 
  <comment type="block" format="javadoc">/**
   * Test that 'null' DNS server gives the same result as if no DNS
   * server was passed.
   */</comment>
  <argument><expr><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <name>void</name> <call><name>testNullDnsServer</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>String</name> <name>host</name> <operator>=</operator> <call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></try>

  <comment type="block" format="javadoc">/**
   * Test that "default" DNS server gives the same result as if no DNS
   * server was passed.
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDefaultDnsServer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Get the IP addresses of an unknown interface
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">80</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRDNS</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
                 <expr><operator>+</operator> <literal type="string">" Loopback="</literal> <operator>+</operator> <call><name><name>localhost</name><operator>.</operator><name>isLoopbackAddress</name></name><argument_list>()</argument_list></call>
                 <operator>+</operator> <literal type="string">" Linklocal="</literal> <operator>+</operator> <call><name><name>localhost</name><operator>.</operator><name>isLinkLocalAddress</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content></block>;</function>
       }
    }
  }

  <comment type="block" format="javadoc">/**
   * Test that when using an invalid DNS server with hosts file fallback,
   * we are able to get the hostname from the hosts file.
   *
   * This test may fail on some misconfigured test machines that don't have
   * an entry for "localhost" in their hosts file. This entry is correctly
   * configured out of the box on common Linux distributions, OS X and
   * Windows.
   *
   * @throws Exception
   */</comment>
  @<expr_stmt><expr><call><name>Test</name> <argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">60000</literal></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testLookupWithHostsFallback</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name>String</name> <name>oldHostname</name> <operator>=</operator> <call><name>changeDnsCachedHostname</name><argument_list>(<argument><expr><name>DUMMY_HOSTNAME</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>hostname</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(
          <argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INVALID_DNS_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Expect to get back something other than the cached host name.</comment>
      <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>not</name><argument_list>(<argument><expr><name>DUMMY_HOSTNAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// Restore DNS#cachedHostname for subsequent tests.</comment>
      <expr_stmt><expr><call><name>changeDnsCachedHostname</name><argument_list>(<argument><expr><name>oldHostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  }

  <comment type="block" format="javadoc">/**
   * Test that when using an invalid DNS server without hosts file
   * fallback, we get back the cached host name.
   *
   * @throws Exception
   */</comment>
  @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">60000</literal></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testLookupWithoutHostsFallback</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name>String</name> <name>oldHostname</name> <operator>=</operator> <call><name>changeDnsCachedHostname</name><argument_list>(<argument><expr><name>DUMMY_HOSTNAME</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>hostname</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(
          <argument><expr><call><name>getLoopbackInterface</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INVALID_DNS_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Expect to get back the cached host name since there was no hosts</comment>
      <comment type="line">// file lookup.</comment>
      <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><name>DUMMY_HOSTNAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// Restore DNS#cachedHostname for subsequent tests.</comment>
      <expr_stmt><expr><call><name>changeDnsCachedHostname</name><argument_list>(<argument><expr><name>oldHostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
   }
 
  private <function><type><name>String</name></type> <name>getLoopbackInterface</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SocketException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>NetworkInterface</name><operator>.</operator><name>getByInetAddress</name></name><argument_list>(
        <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Change DNS#cachedHostName to something which cannot be a real
   * host name. Uses reflection since it is a 'private final' field.
   */</comment>
  <function><type><specifier>private</specifier> <name>String</name></type> <name>changeDnsCachedHostname</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>newHostname</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>oldCachedHostname</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name>getDefaultHost</name></name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>DNS</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"cachedHostname"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Field</name></type> <name>modifiersField</name> <init>= <expr><call><name><name>Field</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"modifiers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>modifiersField</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>modifiersField</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>newHostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>oldCachedHostname</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Test that the name "localhost" resolves to something.
    *
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java
index e523e1864e3..14f9091ed9a 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java
@@ -111,7 +111,7 @@ public void testPrincipalsWithLowerCaseHosts() throws IOException {
 
   @Test
   public void testLocalHostNameForNullOrWild() throws Exception {
    String local = StringUtils.toLowerCase(SecurityUtil.getLocalHostName());
    String local = StringUtils.toLowerCase(SecurityUtil.getLocalHostName(null));
     assertEquals("hdfs/" + local + "@REALM",
                  SecurityUtil.getServerPrincipal("hdfs/_HOST@REALM", (String)null));
     assertEquals("hdfs/" + local + "@REALM",
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
index 2aad83dd032..7c935d3574e 100644
-- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
@@ -761,11 +761,24 @@ private static String getHostName(Configuration config)
       throws UnknownHostException {
     String name = config.get(DFS_DATANODE_HOST_NAME_KEY);
     if (name == null) {
      name = DNS.getDefaultHost(
          config.get(DFS_DATANODE_DNS_INTERFACE_KEY,
                     DFS_DATANODE_DNS_INTERFACE_DEFAULT),
          config.get(DFS_DATANODE_DNS_NAMESERVER_KEY,
                     DFS_DATANODE_DNS_NAMESERVER_DEFAULT));
      String dnsInterface = config.get(
          CommonConfigurationKeys.HADOOP_SECURITY_DNS_INTERFACE_KEY);
      String nameServer = config.get(
          CommonConfigurationKeys.HADOOP_SECURITY_DNS_NAMESERVER_KEY);
      boolean fallbackToHosts = false;

      if (dnsInterface == null) {
        // Try the legacy configuration keys.
        dnsInterface = config.get(DFS_DATANODE_DNS_INTERFACE_KEY);
        nameServer = config.get(DFS_DATANODE_DNS_NAMESERVER_KEY);
      } else {
        // If HADOOP_SECURITY_DNS_* is set then also attempt hosts file
        // resolution if DNS fails. We will not use hosts file resolution
        // by default to avoid breaking existing clusters.
        fallbackToHosts = true;
      }

      name = DNS.getDefaultHost(dnsInterface, nameServer, fallbackToHosts);
     }
     return name;
   }
@@ -2290,7 +2303,7 @@ public static DataNode instantiateDataNode(String args [], Configuration conf,
     Collection&lt;StorageLocation&gt; dataLocations = getStorageLocations(conf);
     UserGroupInformation.setConfiguration(conf);
     SecurityUtil.login(conf, DFS_DATANODE_KEYTAB_FILE_KEY,
        DFS_DATANODE_KERBEROS_PRINCIPAL_KEY);
        DFS_DATANODE_KERBEROS_PRINCIPAL_KEY, getHostName(conf));
     return makeInstance(dataLocations, conf, resources);
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/resources/hdfs-default.xml b/hadoop-hdfs-project/hadoop-hdfs/src/main/resources/hdfs-default.xml
index 072b7a56b4e..77460efaabb 100644
-- a/hadoop-hdfs-project/hadoop-hdfs/src/main/resources/hdfs-default.xml
++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/resources/hdfs-default.xml
@@ -225,19 +225,28 @@
 &lt;/property&gt;
 
  &lt;property&gt;
  &lt;name&gt;dfs.datanode.dns.interface&lt;/name&gt;
  &lt;value&gt;default&lt;/value&gt;
  &lt;description&gt;The name of the Network Interface from which a data node should 
  report its IP address.
  &lt;/description&gt;
   &lt;name&gt;dfs.datanode.dns.interface&lt;/name&gt;
   &lt;value&gt;default&lt;/value&gt;
   &lt;description&gt;
     The name of the Network Interface from which a data node should
     report its IP address. e.g. eth2. This setting may be required for some
     multi-homed nodes where the DataNodes are assigned multiple hostnames
     and it is desirable for the DataNodes to use a non-default hostname.

     Prefer using hadoop.security.dns.interface over
     dfs.datanode.dns.interface.
   &lt;/description&gt;
  &lt;/property&gt;
  
 &lt;property&gt;
   &lt;name&gt;dfs.datanode.dns.nameserver&lt;/name&gt;
   &lt;value&gt;default&lt;/value&gt;
  &lt;description&gt;The host name or IP address of the name server (DNS)
  which a DataNode should use to determine the host name used by the
  NameNode for communication and display purposes.
  &lt;description&gt;
    The host name or IP address of the name server (DNS) which a DataNode
    should use to determine its own host name.

    Prefer using hadoop.security.dns.nameserver over
    dfs.datanode.dns.nameserver.
   &lt;/description&gt;
  &lt;/property&gt;
  
- 
2.19.1.windows.1

</comment></unit>
