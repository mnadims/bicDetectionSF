<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/7eb7b3b723c.java"><expr_stmt><expr><name>From</name> <literal type="number">7eb7b3b723c524ece8ef2247943eb631fefcfe41</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Daryn</name> <name><name>Sharp</name> <argument_list type="generic">&lt;<argument><name>daryn</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Mar</name> <literal type="number">2013</literal> <literal type="number">13</literal><operator>:</operator><literal type="number">46</literal><operator>:</operator><literal type="number">52</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">9299.</literal>  <name>kerberos</name> <name>name</name> <name>resolution</name> <name>is</name> <name>kicking</name> <name>in</name> <name>even</name>
 <name>when</name> <name>kerberos</name> <name>is</name> <name>not</name> <call><name>configured</name> <argument_list>(<argument><expr><name>daryn</name></expr></argument>)</argument_list></call>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1457763 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>authentication</name><operator>/</operator><name>util</name><operator>/</operator><name><name>KerberosName</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">18</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>HadoopKerberosName</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">30</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>UserGroupInformation</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">46</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">147</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">191</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">53</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>auth</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name>authentication</name><operator>/</operator><name>util</name><operator>/</operator><name><name>KerberosName</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>auth</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name>authentication</name><operator>/</operator><name>util</name><operator>/</operator><name><name>KerberosName</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6ff30f78909</literal><operator>..</operator><literal type="number">6c511869c0f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>auth</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name>authentication</name><operator>/</operator><name>util</name><operator>/</operator><name><name>KerberosName</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>auth</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name>authentication</name><operator>/</operator><name>util</name><operator>/</operator><name><name>KerberosName</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>String</name> <call><name>getShortName</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <annotation>@<name>param</name></annotation> <name>ruleString</name> <name>the</name> <name>rules</name> <name><name>string</name><operator>.</operator></name></expr></block></expr></argument>
    *<argument><expr><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setRules</name><argument_list>(<argument><expr><name>String</name> <name>ruleString</name></expr></argument>)</argument_list></call></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>rules</name> <operator>=</operator> <call><name>parseRules</name><argument_list>(<argument><expr><name>ruleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rules</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ruleString</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>parseRules</name><argument_list>(<argument><expr><name>ruleString</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
   </block_content>}</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Get the rules.
   * @return String of configured rules, or null if not yet configured
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRules</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>ruleString</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rules</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>Rule</name></type> <name>rule</name> <range>: <expr><name>rules</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>rule</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>ruleString</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ruleString</name></expr>;</return>
  </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/**
    * Indicates if the name rules have been set.
    * 
diff --git a/hadoop-common-project/hadoop-common/CHANGES.txt b/hadoop-common-project/hadoop-common/CHANGES.txt
index 1cb8ecbd3b8..85540ccdfde 100644
-- a/hadoop-common-project/hadoop-common/CHANGES.txt
++ b/hadoop-common-project/hadoop-common/CHANGES.txt
@@ -571,6 +571,9 @@ Release 2.0.5-beta - UNRELEASED
     HADOOP-9407. commons-daemon 1.0.3 dependency has bad group id causing
     build issues. (Sangjin Lee via suresh)
 
    HADOOP-9299.  kerberos name resolution is kicking in even when kerberos
    is not configured (daryn)

 Release 2.0.4-alpha - UNRELEASED
 
   INCOMPATIBLE CHANGES
diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
index 00ef5d7a357..55b27868571 100644
-- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
@@ -18,6 +18,8 @@
 
 package org.apache.hadoop.security;
 
import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTH_TO_LOCAL;

 import java.io.IOException;
 
 import org.apache.hadoop.classification.InterfaceAudience;
@@ -25,7 +27,6 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.authentication.util.KerberosName;
 import org.apache.hadoop.security.authentication.util.KerberosUtil;
import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
 /**
  * This class implements parsing and handling of Kerberos principal names. In 
  * particular, it splits them apart and translates them down into local
@@ -36,15 +37,6 @@
 @InterfaceStability.Evolving
 public class HadoopKerberosName extends KerberosName {
 
  static {
    try {
      KerberosUtil.getDefaultRealm();
    } catch (Exception ke) {
      if(UserGroupInformation.isSecurityEnabled())
        throw new IllegalArgumentException("Can't get Kerberos configuration",ke);
    }
  }

   /**
    * Create a name from the full Kerberos principal name.
    * @param name
@@ -63,7 +55,23 @@ public HadoopKerberosName(String name) {
    * @throws IOException
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConfiguration</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>ruleString</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>defaultRule</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name><name>SecurityUtil</name><operator>.</operator><name>getAuthenticationMethod</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>KERBEROS</name></expr>:</case>
      <case>case <expr><name>KERBEROS_SSL</name></expr>:</case>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>KerberosUtil</name><operator>.</operator><name>getDefaultRealm</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ke</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Can't get Kerberos realm"</literal></expr></argument>, <argument><expr><name>ke</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name>defaultRule</name> <operator>=</operator> <literal type="string">"DEFAULT"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <comment type="line">// just extract the simple user name</comment>
        <expr_stmt><expr><name>defaultRule</name> <operator>=</operator> <literal type="string">"RULE:[1:$1] RULE:[2:$1]"</literal></expr>;</expr_stmt>
        <break>break;</break> 
    </block_content>}</block></switch>
    <decl_stmt><decl><type><name>String</name></type> <name>ruleString</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></expr></argument>, <argument><expr><name>defaultRule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>setRules</name><argument_list>(<argument><expr><name>ruleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>UserGroupInformation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>UserGroupInformation</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f2c74d8f654</name><operator>..</operator><literal type="number">8a22a6f8b08</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>UserGroupInformation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>UserGroupInformation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceAudience</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceStability</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Metric</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Metrics</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>lib</name><operator>.</operator><name>DefaultMetricsSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>lib</name><operator>.</operator><name>MutableRate</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>SaslRpcServer</name><operator>.</operator><name>AuthMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>authentication</name><operator>.</operator><name>util</name><operator>.</operator><name>KerberosName</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>authentication</name><operator>.</operator><name>util</name><operator>.</operator><name>KerberosUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>TokenIdentifier</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>logout</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>LoginException</name> <block>{
 
   <comment type="block" format="javadoc">/** Metrics to track UGI activity */</comment>
   <expr><specifier>static</specifier> <name>UgiMetrics</name> <name>metrics</name> <operator>=</operator> <call><name><name>UgiMetrics</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/** Are the static variables that depend on configuration initialized? */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isInitialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
   <comment type="block" format="javadoc">/** The auth method to use */</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>AuthenticationMethod</name></type> <name>authenticationMethod</name></decl>;</decl_stmt>
   <comment type="block" format="javadoc">/** Server-side groups fetching service */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">213</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>logout</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>LoginException</name> <block>{
    <expr><operator>*</operator> <name>Must</name> <name>be</name> <name>called</name> <name>before</name> <name>useKerberos</name> <name>or</name> <name>groups</name> <name>is</name> <name><name>used</name><operator>.</operator></name></expr></block></expr></argument>
    *<argument><expr><operator>/</operator>
   <specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>ensureInitialized</name><argument_list>()</argument_list></call></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInitialized</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>ensureInitialized</name><argument_list>()</argument_list></call> <block>{
    <expr><operator>*</operator> <name>Initialize</name> <name>UGI</name> <name>and</name> <name>related</name> <name><name>classes</name><operator>.</operator></name>
    * @<name>param</name> <name>conf</name> <name>the</name> <name>configuration</name> <name>to</name> <name>use</name>
    <operator>*</operator><operator>/</operator>
  <specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>, <argument><expr><name>boolean</name> <name>skipRulesSetting</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>initUGI</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line">// give the configuration on how to translate Kerberos names</comment>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skipRulesSetting</name></expr>)</condition> <block>{<block_content>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>,
                                              <parameter><decl><type><name>boolean</name></type> <name>overrideNameRules</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>authenticationMethod</name> <operator>=</operator> <call><name><name>SecurityUtil</name><operator>.</operator><name>getAuthenticationMethod</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>overrideNameRules</name> <operator>||</operator> <operator>!</operator><call><name><name>HadoopKerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>HadoopKerberosName</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></try></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
            <argument><expr><literal type="string">"Problem with Kerberos auth_to_local name configuration"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
       <expr_stmt/></block_content></block></catch>}</block></expr></expr_stmt>
    </block_content>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Problem with Kerberos auth_to_local name "</literal> <operator>+</operator>
          <literal type="string">"configuration"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch>
  }
  
  <comment type="block" format="javadoc">/**
   * Set the configuration values for UGI.
   * @param conf the configuration to use
   */</comment>
  private <function><type><specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initUGI</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>authenticationMethod</name> <operator>=</operator> <call><name><name>SecurityUtil</name><operator>.</operator><name>getAuthenticationMethod</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
         <expr_stmt><expr><name>kerberosMinSecondsBeforeRelogin</name> <operator>=</operator> <literal type="number">1000L</literal> <operator>*</operator> <call><name><name>conf</name><operator>.</operator><name>getLong</name></name><argument_list>(
                 <argument><expr><name>HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">243</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>initUGI</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>groups</name> <operator>instanceof</operator> <name>TestingGroups</name><operator>)</operator></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>groups</name> <operator>=</operator> <call><name><name>Groups</name><operator>.</operator><name>getUserToGroupsMappingService</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
    isInitialized = true</block><empty_stmt>;</empty_stmt></if></if_stmt>
     <name><name>UserGroupInformation</name><operator>.</operator><name>conf</name></name> <operator>=</operator> <name>conf</name></block></expr></argument>;</argument_list></call></expr></expr_stmt>
   </block_content>}</block></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">268</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>initUGI</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
   @<expr><name><name>InterfaceAudience</name><operator>.</operator><name>Public</name></name>
   @<name><name>InterfaceStability</name><operator>.</operator><name>Evolving</name></name>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setConfiguration</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>initialize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>initialize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
  }</block>
  
  @<name><name>InterfaceAudience</name><operator>.</operator><name>Private</name></name>
  @<name>VisibleForTesting</name>
  <specifier>static</specifier> <name>void</name> <call><name>reset</name><argument_list>()</argument_list></call> <block>{
    <expr><name>authenticationMethod</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <expr><name>conf</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <expr><name>groups</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <expr><name>kerberosMinSecondsBeforeRelogin</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><call><name>setLoginUser</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>HadoopKerberosName</name><operator>.</operator><name>setRules</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
   
   <comment type="block" format="javadoc">/**
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
index 12f4b313ecd..fd23e965536 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
@@ -38,10 +38,12 @@
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.metrics2.MetricsRecordBuilder;
 import org.apache.hadoop.security.UserGroupInformation.AuthenticationMethod;
import org.apache.hadoop.security.authentication.util.KerberosName;
 import org.apache.hadoop.security.token.Token;
 import org.apache.hadoop.security.token.TokenIdentifier;
 import static org.apache.hadoop.test.MetricsAsserts.*;
 import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTH_TO_LOCAL;
 import org.apache.hadoop.util.Shell;
 
 public class TestUserGroupInformation {
@@ -73,17 +75,18 @@
   public static void setup() {
     javax.security.auth.login.Configuration.setConfiguration(
         new DummyLoginConfiguration());
    // doesn't matter what it is, but getGroups needs it set...
    System.setProperty("hadoop.home.dir", "/tmp");
    // fake the realm is kerberos is enabled
    System.setProperty("java.security.krb5.kdc", "");
    System.setProperty("java.security.krb5.realm", "DEFAULT.REALM");
   }
   
   @Before
   public void setupUgi() {
     conf = new Configuration();
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTH_TO_LOCAL,
        "RULE:[2:$1@$0](.*@HADOOP.APACHE.ORG)s/@.*/</comment><operator>/</operator><literal type="string">" +
        "</literal><name>RULE</name><operator>:</operator><index>[<expr><literal type="number">1</literal><operator>:</operator><name>$1</name></expr></index>@<name>$0</name>]<operator>(</operator><operator>.</operator><operator>*</operator>@<name><name>HADOOP</name><operator>.</operator><name>APACHE</name><operator>.</operator><name>ORG</name></name><operator>)</operator><name>s</name><operator>/</operator>@<operator>.</operator><operator>*</operator><comment type="line">//"</comment>
        <operator>+</operator> <literal type="string">"DEFAULT"</literal></expr>)</block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setLoginUser</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <annotation>@<name>After</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">230</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">233</literal></expr><operator>,</operator><expr><literal type="number">138</literal> @@ <specifier>public</specifier> <name>Object</name> <call><name>run</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <comment type="block" format="javadoc">/** test constructor */</comment>
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testConstructor</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>UserGroupInformation</name> <name>ugi</name> <operator>=</operator> 
      <call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"user2/cron@HADOOP.APACHE.ORG"</literal></expr></argument>, 
                                                <argument><expr><name>GROUP_NAMES</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <comment type="line">// make sure the short and full user names are correct</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"user2/cron@HADOOP.APACHE.ORG"</literal></expr></argument>, <argument><expr><call><name><name>ugi</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"user2"</literal></expr></argument>, <argument><expr><call><name><name>ugi</name><operator>.</operator><name>getShortUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ugi</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><name>USER_NAME</name></expr></argument>, <argument><expr><name>GROUP_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><call><name><name>ugi</name><operator>.</operator><name>getShortUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// security off, so default should just return simple name</comment>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user2@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user3/cron@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user4@OTHER.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user5/cron@OTHER.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// failure test</comment>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }
  
  <comment type="block" format="javadoc">/** test constructor */</comment>
  @<expr_stmt><expr><call><name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testConstructorWithRules</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// security off, but use rules if explicitly set</comment>
    <expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></expr></argument>,
        <argument><expr><literal type="string">"RULE:[1:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user4@OTHER.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"other-user4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// failure test</comment>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">"user2@DEFAULT.REALM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">"user3/cron@DEFAULT.REALM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">"user5/cron@OTHER.REALM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }
  
  <comment type="block" format="javadoc">/** test constructor */</comment>
  @<expr_stmt><expr><call><name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testConstructorWithKerberos</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// security on, default is remove default realm</comment>
    <expr><call><name><name>SecurityUtil</name><operator>.</operator><name>setAuthenticationMethod</name></name><argument_list>(<argument><expr><name><name>AuthenticationMethod</name><operator>.</operator><name>KERBEROS</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user2@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user3/cron@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <comment type="line">// failure test</comment>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">"user4@OTHER.REALM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">"user5/cron@OTHER.REALM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }

  <comment type="block" format="javadoc">/** test constructor */</comment>
  @<expr_stmt><expr><call><name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
  <specifier>public</specifier> <name>void</name> <call><name>testConstructorWithKerberosRules</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// security on, explicit rules</comment>
    <expr><call><name><name>SecurityUtil</name><operator>.</operator><name>setAuthenticationMethod</name></name><argument_list>(<argument><expr><name><name>AuthenticationMethod</name><operator>.</operator><name>KERBEROS</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></expr></argument>,
        <argument><expr><literal type="string">"RULE:[2:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"</literal> <operator>+</operator>
        <literal type="string">"RULE:[1:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"</literal> <operator>+</operator>
        <literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user2@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user3/cron@DEFAULT.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"user3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user4@OTHER.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"other-user4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testConstructorSuccess</name><argument_list>(<argument><expr><literal type="string">"user5/cron@OTHER.REALM"</literal></expr></argument>, <argument><expr><literal type="string">"other-user5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// failure test</comment>
     <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>testConstructorFailures</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
  private <function><type><name>void</name></type> <name>testConstructorSuccess</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shortName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>ugi</name> <init>= 
        <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>GROUP_NAMES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// make sure the short and full user names are correct</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><call><name><name>ugi</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>shortName</name></expr></argument>, <argument><expr><call><name><name>ugi</name><operator>.</operator><name>getShortUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
   <function><type><specifier>private</specifier> <name>void</name></type> <name>testConstructorFailures</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>boolean</name></type> <name>gotException</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createRemoteUser</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>gotException</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"user:"</literal><operator>+</operator><name>userName</name><operator>+</operator><literal type="string">" wasn't invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>expect</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>userName</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>userName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>
          ?</condition><then> <expr><literal type="string">"Null user"</literal></expr> </then><else>: <expr><literal type="string">"Illegal principal name "</literal><operator>+</operator><name>userName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>gotException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSetConfigWithRules</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>rules</name> <init>= <expr><block>{ <expr><literal type="string">"RULE:[1:TEST1]"</literal></expr>, <expr><literal type="string">"RULE:[1:TEST2]"</literal></expr>, <expr><literal type="string">"RULE:[1:TEST3]"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// explicitly set a rule</comment>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KerberosName</name><operator>.</operator><name>setRules</name></name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// implicit init should honor rules already being set</comment>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"someone"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set conf, should override</comment>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></expr></argument>, <argument><expr><name><name>rules</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set conf, should again override</comment>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>HADOOP_SECURITY_AUTH_TO_LOCAL</name></expr></argument>, <argument><expr><name><name>rules</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// implicit init should honor rules already being set</comment>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"someone"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEnsureInitWithRules</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>rules</name> <init>= <expr><literal type="string">"RULE:[1:RULE1]"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// trigger implicit init, rules should init</comment>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"someone"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// set a rule, trigger implicit init, rule should not change </comment>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KerberosName</name><operator>.</operator><name>setRules</name></name><argument_list>(<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>hasRulesBeenSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"someone"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><call><name><name>KerberosName</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
