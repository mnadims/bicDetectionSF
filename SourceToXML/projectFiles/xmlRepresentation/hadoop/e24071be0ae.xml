<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/e24071be0ae.java"><expr_stmt><expr><name>From</name> <name>e24071be0aec7e63a0b73bf01f4bbd9930ece066</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Hemanth</name> <name><name>Yamijala</name> <argument_list type="generic">&lt;<argument><name>yhemanth</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">7</literal> <name>Sep</name> <literal type="number">2009</literal> <literal type="number">11</literal><operator>:</operator><literal type="number">04</literal><operator>:</operator><literal type="number">17</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">6105.</literal> <name>Adds</name> <name>support</name></expr></expr_stmt> <for>for automatically handling
 deprecation of configuration keys. Contributed by V.V.Chaitanya Krishna.

git-svn-id: https:<comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@812078 13f79535-47bb-0310-9956-ffa450edef68</comment>
--
 CHANGES.txt                                   <operator>|</operator>   3 +
 src/java/core-default.xml                     <operator>|</operator>   6 +-
 .../org/apache/hadoop/conf/Configuration.java <operator>|</operator> 282 +++++++++++++++-
 .../conf/TestConfigurationDeprecation.java    <operator>|</operator> 312 ++++++++++++++++++
 4 files changed<operator>,</operator> <expr_stmt><expr><literal type="number">592</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">11</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfigurationDeprecation</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">96b8111cfd4</literal><operator>..</operator><name>b210bf9ad02</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <call><name>Trunk</name> <argument_list>(<argument><expr><name>unreleased</name> <name>changes</name></expr></argument>)</argument_list></call>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">6165.</literal> <name>Add</name> <name>metadata</name> <name>to</name> <name><name>Serializations</name><operator>.</operator></name> (<name>tomwhite</name></expr></expr_stmt></for>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">6105.</literal> <name>Adds</name> <name>support</name></expr></expr_stmt> <for>for automatically handling deprecation of
    configuration keys. <control>(<init><expr><name><name>V</name><operator>.</operator><name>V</name><operator>.</operator><name>Chaitanya</name></name> <name>Krishna</name> <name>via</name> <name>yhemanth</name></expr></init>)</control><block type="pseudo"><block_content>
    
   <expr_stmt><expr><name>IMPROVEMENTS</name>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">4565.</literal> <name>Added</name> <name>CombineFileInputFormat</name> <name>to</name> <name>use</name> <name>data</name> <name>locality</name> <name>information</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>core</name><operator>-</operator>default<operator>.</operator><name>xml</name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>core</name><operator>-</operator>default<operator>.</operator><name>xml</name>
<name>index</name> <literal type="number">146a0238a3e</literal><operator>..</operator><literal type="number">9034a9e655e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>core</name><operator>-</operator>default<operator>.</operator><name>xml</name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>core</name><operator>-</operator>default<operator>.</operator><name>xml</name>
@@ <operator>-</operator><literal type="number">486</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">486</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
   <operator>&lt;</operator><operator>/</operator><name>description</name><operator>&gt;</operator>
 <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
 

<operator>&lt;</operator><name>property</name><operator>&gt;</operator>
  <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>extra</name><operator>.</operator><name><name>classes</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name></name>
  <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name><name>JobConf</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>value</name></argument>&gt;</argument_list></name></name>
  <operator>&lt;</operator><name>final</name><operator>&gt;</operator><literal type="boolean">true</literal><operator>&lt;</operator><operator>/</operator><name>final</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
 
 <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>edf0f15afef</name><operator>..</operator><name>cfb1ba8d70a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></block_content></block></for>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">182</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">141</literal> @@
    <operator>*</operator><operator>/</operator>
   <specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>updatingResource</name></expr>;</expr_stmt>
   
  <comment type="block" format="javadoc">/**
   * Class to keep the information about the keys which replace the deprecated
   * ones.
   * 
   * This class stores the new keys which replace the deprecated keys and also
   * gives a provision to have a custom message for each of the deprecated key
   * that is being replaced. It also provides method to get the appropriate
   * warning message which can be logged whenever the deprecated key is used.
   */</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DeprecatedKeyInfo</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>newKeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>customMessage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>accessed</name></decl>;</decl_stmt>
    <constructor><name>DeprecatedKeyInfo</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>newKeys</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>customMessage</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newKeys</name></name> <operator>=</operator> <name>newKeys</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customMessage</name></name> <operator>=</operator> <name>customMessage</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>accessed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    <constructor><name>DeprecatedKeyInfo</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>newKeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>newKeys</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Method to provide the warning message. It gives the custom message if
     * non-null, and default message otherwise.
     * @param key the associated deprecated key.
     * @return message that is to be logged when a deprecated key is used.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>getWarningMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>warningMessage</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><name>customMessage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>deprecatedKeySuffix</name> <init>= <expr><literal type="string">" is deprecated. Instead, use "</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>deprecatedKeySuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newKeys</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>newKeys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name><name>newKeys</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>warningMessage</name> <operator>=</operator> <call><name><name>message</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><name>warningMessage</name> <operator>=</operator> <name>customMessage</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>accessed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return <expr><name>warningMessage</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <comment type="block" format="javadoc">/**
   * Stores the deprecated keys, the new keys which replace the deprecated keys
   * and custom message(if any provided).
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DeprecatedKeyInfo</name></argument>&gt;</argument_list></name></type> <name>deprecatedKeyMap</name> <init>= 
    <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DeprecatedKeyInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/**
   * Adds the deprecated key to the deprecation map.
   * It does not override any existing entries in the deprecation map.
   * This is to be used only by the developers in order to add deprecation of
   * keys, and attempts to call this method after loading resources once,
   * would lead to &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;
   * @param key
   * @param newKeys
   * @param customMessage
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDeprecation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>newKeys</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>customMessage</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <name>newKeys</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>newKeys</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDeprecated</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DeprecatedKeyInfo</name></type> <name>newKeyInfo</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>customMessage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newKeyInfo</name> <operator>=</operator> <operator>new</operator> <call><name>DeprecatedKeyInfo</name><argument_list>(<argument><expr><name>newKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><name>newKeyInfo</name> <operator>=</operator> <operator>new</operator> <call><name>DeprecatedKeyInfo</name><argument_list>(<argument><expr><name>newKeys</name></expr></argument>, <argument><expr><name>customMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>newKeyInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adds the deprecated key to the deprecation map when no custom message
   * is provided.
   * It does not override any existing entries in the deprecation map.
   * This is to be used only by the developers in order to add deprecation of
   * keys, and attempts to call this method after loading resources once,
   * would lead to &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;
   * 
   * @param key Key that is to be deprecated
   * @param newKeys list of keys that take up the values of deprecated key
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDeprecation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>newKeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>addDeprecation</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>newKeys</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * checks whether the given &lt;code&gt;key&lt;/code&gt; is deprecated.
   * 
   * @param key the parameter which is to be checked for deprecation
   * @return &lt;code&gt;true&lt;/code&gt; if the key is deprecated and 
   *         &lt;code&gt;false&lt;/code&gt; otherwise.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDeprecated</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * Checks for the presence of the property &lt;code&gt;name&lt;/code&gt; in the
   * deprecation map. Returns the first of the list of new keys if present
   * in the deprecation map or the &lt;code&gt;name&lt;/code&gt; itself.
   * @param name the property name
   * @return the first property in the list of properties mapping
   *         the &lt;code&gt;name&lt;/code&gt; or the &lt;code&gt;name&lt;/code&gt; itself.
   */</comment>
  <function><type><specifier>private</specifier> <name>String</name></type> <name>handleDeprecation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isDeprecated</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DeprecatedKeyInfo</name></type> <name>keyInfo</name> <init>= <expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>keyInfo</name><operator>.</operator><name>accessed</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>keyInfo</name><operator>.</operator><name>getWarningMessage</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>newKey</name> <range>: <expr><name><name>keyInfo</name><operator>.</operator><name>newKeys</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>newKey</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>name</name> <operator>=</operator> <name>newKey</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>name</name></expr>;</return>
  </block_content>}</block></function>
  
   <static>static<block>{<block_content>
     <comment type="line">//print deprecation warning if hadoop-site.xml is found in classpath</comment>
     <decl_stmt><decl><type><name>ClassLoader</name></type> <name>cL</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">405</literal></expr><operator>,</operator><expr><literal type="number">40</literal> <operator>+</operator><literal type="number">541</literal></expr><operator>,</operator><expr><literal type="number">60</literal> @@ <specifier>private</specifier> <name>String</name> <call><name>substituteVars</name><argument_list>(<argument><expr><name>String</name> <name>expr</name></expr></argument>)</argument_list></call> <block>{
   
   <comment type="block" format="javadoc">/**
    * Get the value of the &lt;code&gt;name&lt;/code&gt; property, &lt;code&gt;null&lt;/code&gt; if
   * no such property exists.
   * no such property exists. If the key is deprecated, it returns the value of
   * the first key which replaces the deprecated key and is not null
    * 
    * Values are processed for &lt;a href="#VariableExpansion"&gt;variable expansion&lt;/a&gt; 
    * before being returned. 
    * 
    * @param name the property name.
   * @return the value of the &lt;code&gt;name&lt;/code&gt; property, 
   * @return the value of the &lt;code&gt;name&lt;/code&gt; or its replacing property, 
    *         or null if no such property exists.
    */</comment>
   <expr><specifier>public</specifier> <name>String</name> <call><name>get</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>name</name> <operator>=</operator> <call><name>handleDeprecation</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><call><name>substituteVars</name><argument_list>(<argument><expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
   }</block>
 
   <comment type="block" format="javadoc">/**
    * Get the value of the &lt;code&gt;name&lt;/code&gt; property, without doing
   * &lt;a href="#VariableExpansion"&gt;variable expansion&lt;/a&gt;.
   * &lt;a href="#VariableExpansion"&gt;variable expansion&lt;/a&gt;.If the key is 
   * deprecated, it returns the value of the first key which replaces 
   * the deprecated key and is not null.
    * 
    * @param name the property name.
   * @return the value of the &lt;code&gt;name&lt;/code&gt; property, 
   *         or null if no such property exists.
   * @return the value of the &lt;code&gt;name&lt;/code&gt; property or 
   *         its replacing property and null if no such property exists.
    */</comment>
   <specifier>public</specifier> <name>String</name> <call><name>getRaw</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>name</name> <operator>=</operator> <call><name>handleDeprecation</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/** 
   * Set the &lt;code&gt;value&lt;/code&gt; of the &lt;code&gt;name&lt;/code&gt; property.
   * Set the &lt;code&gt;value&lt;/code&gt; of the &lt;code&gt;name&lt;/code&gt; property. If 
   * &lt;code&gt;name&lt;/code&gt; is deprecated, it sets the &lt;code&gt;value&lt;/code&gt; to the keys
   * that replace the deprecated key.
    * 
    * @param name property name.
    * @param value property value.
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>getOverlay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getProps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDeprecated</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>getOverlay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>DeprecatedKeyInfo</name></type> <name>keyInfo</name> <init>= <expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>keyInfo</name><operator>.</operator><name>getWarningMessage</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>newKey</name> <range>: <expr><name><name>keyInfo</name><operator>.</operator><name>newKeys</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>getOverlay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>newKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>newKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/**
@@ -460,8 +616,11 @@ private synchronized Properties getOverlay() {
   }
 
   /** 
   * Get the value of the &lt;code&gt;name&lt;/code&gt; property. If no such property 
   * exists, then &lt;code&gt;defaultValue&lt;/code&gt; is returned.
   * Get the value of the &lt;code&gt;name&lt;/code&gt;. If the key is deprecated,
   * it returns the value of the first key which replaces the deprecated key
   * and is not null.
   * If no such property exists,
   * then &lt;code&gt;defaultValue&lt;/code&gt; is returned.
    * 
    * @param name property name.
    * @param defaultValue default value.
@@ -469,6 +628,7 @@ private synchronized Properties getOverlay() {
    *         doesn't exist.                    
    */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>handleDeprecation</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name>substituteVars</name><argument_list>(<argument><expr><call><name>getProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
     
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1180</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1340</literal></expr><operator>,</operator><expr><literal type="number">110</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>loadResources</name><argument_list>(<argument><expr><name>Properties</name> <name>properties</name></expr></argument>,
     for <argument><expr><operator>(</operator><name>Object</name> <name>resource</name> <operator>:</operator> <name>resources</name><operator>)</operator> <block>{
       <expr><call><name>loadResource</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>)</argument_list></call></expr>;
     }</block>
    <comment type="line">// process for deprecation.</comment>
    <call><name>processDeprecation</name><argument_list>()</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
   </block_content>}</block></static>
  
  <comment type="block" format="javadoc">/**
   * Flag to ensure that the classes mentioned in the value of the property
   * &lt;code&gt;hadoop.conf.extra.classes&lt;/code&gt; are loaded only once for
   * all instances of &lt;code&gt;Configuration&lt;/code&gt;
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>AtomicBoolean</name></type> <name>loadedDeprecation</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>extraConfKey</name> <init>= <expr><literal type="string">"hadoop.conf.extra.classes"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * adds all the deprecations to the deprecatedKeyMap and updates the values of
   * the appropriate keys
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>processDeprecation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>populateDeprecationMapping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>processDeprecatedKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Loads all the classes in mapred and hdfs that extend Configuration and that
   * have deprecations to be added into deprecatedKeyMap
   */</comment>
  <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>populateDeprecationMapping</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>loadedDeprecation</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// load classes from mapred and hdfs which extend Configuration and have </comment>
      <comment type="line">// deprecations added in their static blocks</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>classnames</name> <init>= <expr><call><name>substituteVars</name><argument_list>(<argument><expr><call><name><name>properties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>extraConfKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>classnames</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>classes</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>getStrings</name></name><argument_list>(<argument><expr><name>classnames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>className</name> <range>: <expr><name>classes</name></expr></range></decl></init>)</control> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>className</name> <operator>+</operator> <literal type="string">" is not in the classpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
      <comment type="line">// make deprecatedKeyMap unmodifiable in order to prevent changes to </comment>
      <comment type="line">// it in user's code.</comment>
      <expr_stmt><expr><name>deprecatedKeyMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>deprecatedKeyMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// ensure that deprecation processing is done only once for all </comment>
      <comment type="line">// instances of this object</comment>
      <expr_stmt><expr><call><name><name>loadedDeprecation</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Updates the keys that are replacing the deprecated keys and removes the 
   * deprecated keys from memory.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>processDeprecatedKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DeprecatedKeyInfo</name></argument>&gt;</argument_list></name></name></type> <name>item</name> <range>: 
      <expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>properties</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>oldKey</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call><operator>.</operator><name>accessed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setDeprecatedValue</name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>finalParameters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>finalParameters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>finalParameters</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>storeResource</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>updatingResource</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Sets the deprecated key's value to the associated mapped keys
   * @param attr the deprecated key
   * @param value the value corresponding to the deprecated key
   * @param finalParameter flag to indicate if &lt;code&gt;attr&lt;/code&gt; is
   *        marked as final
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>setDeprecatedValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>finalParameter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DeprecatedKeyInfo</name></type> <name>keyInfo</name> <init>= <expr><call><name><name>deprecatedKeyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name><range>:<expr><name><name>keyInfo</name><operator>.</operator><name>newKeys</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// update replacing keys with deprecated key's value in all cases,</comment>
      <comment type="line">// except when the replacing key is already set to final</comment>
      <comment type="line">// and finalParameter is false</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>finalParameters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>finalParameter</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"An attempt to override final parameter: "</literal><operator>+</operator><name>key</name>
            <operator>+</operator><literal type="string">";  Ignoring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>storeResource</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>updatingResource</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>updatingResource</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>finalParameter</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>finalParameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
  
   <function><type><specifier>private</specifier> <name>void</name></type> <name>loadResource</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>properties</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quiet</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>DocumentBuilderFactory</name> <name>docBuilderFactory</name> 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfigurationDeprecation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfigurationDeprecation</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..bbb0e758c58</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfigurationDeprecation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">312</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

 
<class><specifier>public</specifier> class <name>TestConfigurationDeprecation</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Configuration</name></type> <name>conf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CONFIG</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"./test-config.xml"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CONFIG2</name> <init>= 
    <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"./test-config2.xml"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CONFIG3</name> <init>= 
    <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"./test-config3.xml"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>After</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>CONFIG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>CONFIG2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>CONFIG3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>startConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{<block_content>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;?xml version=\"1.0\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;configuration&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>endConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{<block_content>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/configuration&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>appendProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
  <function><type><name>void</name></type> <name>appendProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isFinal</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;property&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;name&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/name&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;value&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/value&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isFinal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;final&gt;true&lt;/final&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/property&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <class><specifier>static</specifier> class <name>MyConf</name> <super_list><extends>extends <super><name>Configuration</name></super></extends></super_list> <block>{
    <static>static <block>{<block_content>
      <comment type="line">// add deprecation mappings.</comment>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key1"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key2"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key3"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key3"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key4"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key4"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key5"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key5"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key6"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key6"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key7"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key7"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key8"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key8"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key9"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key9"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key10"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key10"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key11"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key11"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key12"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key12"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key13"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key13"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key14"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key14"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key15"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key15"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"old.key16"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"new.key16"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"B"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"D"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"F"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Configuration</name><operator>.</operator><name>addDeprecation</name></name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"H"</literal></expr>,<expr><literal type="string">"I"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>
  }</block></class>
  
  <comment type="block" format="javadoc">/**
   * This test is to check the precedence order between being final and 
   * deprecation.Based on the order of occurrence of deprecated key and 
   * its corresponding mapping key, various cases arise.
   * The precedence order being followed is:
   * 1. Final Parameter 
   * 2. Deprecated key's value.
   * @throws IOException 
   * 
   * @throws IOException
   * @throws ClassNotFoundException 
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDeprecation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>out</name><operator>=</operator><operator>new</operator> <call><name>BufferedWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>CONFIG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"hadoop.conf.extra.classes"</literal></expr></argument>, <argument><expr><call><name><name>MyConf</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call>
        <operator>+</operator> <literal type="string">",myconf1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// load keys with default values. Some of them are set to final to</comment>
    <comment type="line">// test the precedence order between deprecation and being final</comment>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key1"</literal></expr></argument>,<argument><expr><literal type="string">"default.value1"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key2"</literal></expr></argument>,<argument><expr><literal type="string">"default.value2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key3"</literal></expr></argument>,<argument><expr><literal type="string">"default.value3"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key4"</literal></expr></argument>,<argument><expr><literal type="string">"default.value4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key5"</literal></expr></argument>,<argument><expr><literal type="string">"default.value5"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key6"</literal></expr></argument>,<argument><expr><literal type="string">"default.value6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key7"</literal></expr></argument>,<argument><expr><literal type="string">"default.value7"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key8"</literal></expr></argument>,<argument><expr><literal type="string">"default.value8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key9"</literal></expr></argument>,<argument><expr><literal type="string">"default.value9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key10"</literal></expr></argument>,<argument><expr><literal type="string">"default.value10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key11"</literal></expr></argument>,<argument><expr><literal type="string">"default.value11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key12"</literal></expr></argument>,<argument><expr><literal type="string">"default.value12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key13"</literal></expr></argument>,<argument><expr><literal type="string">"default.value13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key14"</literal></expr></argument>,<argument><expr><literal type="string">"default.value14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key15"</literal></expr></argument>,<argument><expr><literal type="string">"default.value15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key16"</literal></expr></argument>,<argument><expr><literal type="string">"default.value16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>endConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>fileResource</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>CONFIG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>addResource</name></name><argument_list>(<argument><expr><name>fileResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>out</name><operator>=</operator><operator>new</operator> <call><name>BufferedWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>CONFIG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// add keys that are tested while they are loaded just after their </comment>
    <comment type="line">// corresponding default values</comment>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key1"</literal></expr></argument>,<argument><expr><literal type="string">"old.value1"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key2"</literal></expr></argument>,<argument><expr><literal type="string">"old.value2"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key3"</literal></expr></argument>,<argument><expr><literal type="string">"old.value3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key4"</literal></expr></argument>,<argument><expr><literal type="string">"old.value4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key5"</literal></expr></argument>,<argument><expr><literal type="string">"new.value5"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key6"</literal></expr></argument>,<argument><expr><literal type="string">"new.value6"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key7"</literal></expr></argument>,<argument><expr><literal type="string">"new.value7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key8"</literal></expr></argument>,<argument><expr><literal type="string">"new.value8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// add keys that are tested while they are loaded first and are followed by</comment>
    <comment type="line">// loading of their corresponding deprecated or replacing key</comment>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key9"</literal></expr></argument>,<argument><expr><literal type="string">"new.value9"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key10"</literal></expr></argument>,<argument><expr><literal type="string">"new.value10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key11"</literal></expr></argument>,<argument><expr><literal type="string">"new.value11"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key12"</literal></expr></argument>,<argument><expr><literal type="string">"new.value12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key13"</literal></expr></argument>,<argument><expr><literal type="string">"old.value13"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key14"</literal></expr></argument>,<argument><expr><literal type="string">"old.value14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key15"</literal></expr></argument>,<argument><expr><literal type="string">"old.value15"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key16"</literal></expr></argument>,<argument><expr><literal type="string">"old.value16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>endConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>fileResource1</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>CONFIG2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>addResource</name></name><argument_list>(<argument><expr><name>fileResource1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>out</name><operator>=</operator><operator>new</operator> <call><name>BufferedWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>CONFIG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// add keys which are already loaded by the corresponding replacing or </comment>
    <comment type="line">// deprecated key.</comment>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key9"</literal></expr></argument>,<argument><expr><literal type="string">"old.value9"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key10"</literal></expr></argument>,<argument><expr><literal type="string">"old.value10"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key11"</literal></expr></argument>,<argument><expr><literal type="string">"old.value11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"old.key12"</literal></expr></argument>,<argument><expr><literal type="string">"old.value12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key13"</literal></expr></argument>,<argument><expr><literal type="string">"new.value13"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key14"</literal></expr></argument>,<argument><expr><literal type="string">"new.value14"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key15"</literal></expr></argument>,<argument><expr><literal type="string">"new.value15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"new.key16"</literal></expr></argument>,<argument><expr><literal type="string">"new.value16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendProperty</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"valueB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>endConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>fileResource2</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>CONFIG3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>addResource</name></name><argument_list>(<argument><expr><name>fileResource2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// get the values. Also check for consistency in get of old and new keys, </comment>
    <comment type="line">// when they are set to final or non-final</comment>
    <comment type="line">// Key - the key that is being loaded</comment>
    <comment type="line">// isFinal - true if the key is marked as final</comment>
    <comment type="line">// prev.occurrence - key that most recently loaded the current key </comment>
    <comment type="line">//                   with its value.</comment>
    <comment type="line">// isPrevFinal - true if key corresponding to </comment>
    <comment type="line">//               prev.occurrence is marked as final.</comment>
    
    <comment type="line">// Key-deprecated , isFinal-true, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value1"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-true, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value2"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-false, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"default.value3"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-false, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value4"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-true, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"default.value5"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-true, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"new.value6"</literal></expr></argument>,<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-false, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"default.value7"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key7"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-false, prev.occurrence-default.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"new.value8"</literal></expr></argument>,<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key8"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-true, prev.occurrence-site.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value9"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key9"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-true, prev.occurrence-site.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value10"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key10"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-false, prev.occurrence-site.xml,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"new.value11"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key11"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-deprecated , isFinal-false, prev.occurrence-site.xml,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value12"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key12"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-true, prev.occurrence-deprecated,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value13"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key13"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key13"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key13"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-true, prev.occurrence-deprecated,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"new.value14"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key14"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key14"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key14"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-false, prev.occurrence-deprecated,</comment>
    <comment type="line">// isPrevFinal-true</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value15"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key15"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Key-site.xml , isFinal-false, prev.occurrence-deprecated,</comment>
    <comment type="line">// isPrevFinal-false</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"old.value16"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key16"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"old.key16"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"new.key16"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// ensure that reloadConfiguration doesn't deprecation information</comment>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>reloadConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valueB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// check for consistency in get and set of deprecated and corresponding </comment>
    <comment type="line">// new keys from the user code</comment>
    <comment type="line">// set old key</comment>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"valueC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// get new key</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"valueC"</literal></expr></argument>,<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// set new key</comment>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"F"</literal></expr></argument>,<argument><expr><literal type="string">"valueF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// get old key</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"valueF"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check consistency in get of old and new keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>, <argument><expr><literal type="string">"valueG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"valueG"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"valueG"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"valueG"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></try></block_content></block></function>

</unit>
