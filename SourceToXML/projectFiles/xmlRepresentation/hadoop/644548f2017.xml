<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/644548f2017.java"><expr_stmt><expr><name>From</name> <literal type="number">644548f201743408904dfe24b9f5b515b2c96713</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Gera</name> <name><name>Shegalov</name> <argument_list type="generic">&lt;<argument><name>gera</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">30</literal> <name>Jan</name> <literal type="number">2015</literal> <literal type="number">23</literal><operator>:</operator><literal type="number">18</literal><operator>:</operator><literal type="number">03</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">11506.</literal> <name>Configuration</name> <name>variable</name> <name>expansion</name> <name>regex</name>
 <name>expensive</name></expr></expr_stmt> <for>for long values. <control>(<init><expr><name>Gera</name> <name>Shegalov</name> <name>via</name> <name>gera</name></expr></init>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Configuration</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">124</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">54</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">159</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">22</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">44adf7f79a5</literal><operator>..</operator><literal type="number">66c2cba70a5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.7.0</literal> <operator>-</operator> <name>UNRELEASED</name>
     <name>HADOOP</name><operator>-</operator><literal type="number">11188.</literal> <name>hadoop</name><operator>-</operator><name>azure</name><operator>:</operator> <name>automatically</name> <name>expand</name> <name>page</name> <name>blobs</name> <name>when</name> <name>they</name> <name>become</name>
     <name><name>full</name><operator>.</operator></name> (<name>Eric</name> <name>Hanson</name> <name>via</name> <name>cnauroth</name></expr></expr_stmt></block_content></block></for>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">11506.</literal> <name>Configuration</name> <name>variable</name> <name>expansion</name> <name>regex</name> <name>expensive</name></expr></expr_stmt> <for>for long
    values. <control>(<init><expr><name>Gera</name> <name>Shegalov</name> <name>via</name> <name>gera</name></expr></init>)</control><block type="pseudo"><block_content>

   <expr_stmt><expr><name>BUG</name> <name>FIXES</name>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">11488.</literal> <name>Difference</name> <name>in</name> default <name>connection</name> <name>timeout</name></expr></expr_stmt></block_content></block></for> <for>for S3A FS
diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
index 8f98d0a89e3..ea0d3a65880 100644
-- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
@@ -187<operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
     <literal type="string">"testingforemptydefaultvalue"</literal></expr>;</expr_stmt></for>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowNullValueProperties</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  

   <class><specifier>private</specifier> <specifier>static</specifier> class <name>Resource</name> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>resource</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">845</literal></expr><operator>,</operator><expr><literal type="number">31</literal> <operator>+</operator><literal type="number">845</literal></expr><operator>,</operator><expr><literal type="number">106</literal> @@ <specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>addResourceObject</name><argument_list>(<argument><expr><name>Resource</name> <name>resource</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name><name>resources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;                      <comment type="line">// add to resources</comment>
     <expr><call><name>reloadConfiguration</name><argument_list>()</argument_list></call></expr>;
   }</block>
  
  <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Pattern</name> <name>VAR_PATTERN</name> <operator>=</operator>
      <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\$\\{[^\\}\\$\u0020]+\\}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_SUBST</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SUB_START_IDX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SUB_END_IDX</name> <init>= <expr><name>SUB_START_IDX</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * This is a manual implementation of the following regex
   * "\\$\\{[^\\}\\$\u0020]+\\}". It can be 15x more efficient than
   * a regex matcher as demonstrated by HADOOP-11506. This is noticeable with
   * Hadoop apps building on the assumption Configuration#get is an O(1)
   * hash table lookup, especially when the eval is a long string.
   *
   * @param eval a string that may contain variables requiring expansion.
   * @return a 2-element int array res such that
   * eval.substring(res[0], res[1]) is "var" for the left-most occurrence of
   * ${var} in eval. If no variable is found -1, -1 is returned.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>findSubVariable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eval</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>matchStart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>leftBrace</name></decl>;</decl_stmt>

    <comment type="line">// scanning for a brace first because it's less frequent than $</comment>
    <comment type="line">// that can occur in nested class names</comment>
    <comment type="line">//</comment>
    <label><name>match_loop</name>:</label>
    <for>for <control>(<init><expr><name>matchStart</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>leftBrace</name> <operator>=</operator> <call><name><name>eval</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><name>matchStart</name></expr></argument>)</argument_list></call></expr>;</init>
         <comment type="line">// minimum left brace position (follows '$')</comment>
         <condition><expr><name>leftBrace</name> <operator>&gt;</operator> <literal type="number">0</literal>
         <comment type="line">// right brace of a smallest valid expression "${c}"</comment>
         <operator>&amp;&amp;</operator> <name>leftBrace</name> <operator>+</operator> <literal type="string">"{c"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>eval</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition>
         <incr><expr><name>leftBrace</name> <operator>=</operator> <call><name><name>eval</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><name>matchStart</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>matchedLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>eval</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>leftBrace</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>subStart</name> <init>= <expr><name>leftBrace</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// after '{'</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>subStart</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>eval</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <switch>switch <condition>(<expr><call><name><name>eval</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'}'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><name>matchedLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// match</comment>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name> <operator>=</operator> <name>subStart</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>SUB_END_IDX</name></expr>]</index></name> <operator>=</operator> <name>subStart</name> <operator>+</operator> <name>matchedLen</name></expr>;</expr_stmt>
                <break>break <name>match_loop</name>;</break>
              </block_content>}</block></if></if_stmt>
              <comment type="line">// fall through to skip 1 char</comment>
            <case>case <expr><literal type="char">' '</literal></expr>:</case>
            <case>case <expr><literal type="char">'$'</literal></expr>:</case>
              <expr_stmt><expr><name>matchStart</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
              <continue>continue <name>match_loop</name>;</continue>
            <default>default:</default>
              <expr_stmt><expr><name>matchedLen</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></switch>
        </block_content>}</block></for>
        <comment type="line">// scanned from "${"  to the end of eval, and no reset via ' ', '$':</comment>
        <comment type="line">//    no match!</comment>
        <break>break <name>match_loop</name>;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// not a start of a variable</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><name>matchStart</name> <operator>=</operator> <name>leftBrace</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Attempts to repeatedly expand the value {@code expr} by replacing the
   * left-most substring of the form "${var}" in the following precedence order
   * &lt;ol&gt;
   *   &lt;li&gt;by the value of the Java system property "var" if defined&lt;/li&gt;
   *   &lt;li&gt;by the value of the configuration key "var" if defined&lt;/li&gt;
   * &lt;/ol&gt;
   *
   * If var is unbounded the current state of expansion "prefix${var}suffix" is
   * returned.
   *
   * If a cycle is detected: replacing var1 requires replacing var2 ... requires
   * replacing var1, i.e., the cycle is shorter than
   * {@link Configuration#MAX_SUBST} then the original expr is returned.
   *
   * @param expr the literal value of a config key
   * @return null if expr is null, otherwise the value resulting from expanding
   * expr using the algorithm above.
   * @throws IllegalArgumentException when more than
   * {@link Configuration#MAX_SUBST} replacements are required
   */</comment>
   <function><type><specifier>private</specifier> <name>String</name></type> <name>substituteVars</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Matcher</name></type> <name>match</name> <init>= <expr><call><name><name>VAR_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>eval</name> <init>= <expr><name>expr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>evalSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>MAX_SUBST</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>evalSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Cyclic resolution pattern detected. Return current expression.</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>evalSet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>MAX_SUBST</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>varBounds</name> <init>= <expr><call><name>findSubVariable</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>varBounds</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>eval</name></expr>;</return>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>evalSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>match</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>match</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>eval</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>var</name> <init>= <expr><call><name><name>match</name><operator>.</operator><name>group</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name><name>var</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>var</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// remove ${ .. }</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>var</name> <init>= <expr><call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name><name>varBounds</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name></expr></argument>,
          <argument><expr><name><name>varBounds</name><index>[<expr><name>SUB_END_IDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
       <try>try <block>{<block_content>
         <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">882</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">957</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>private</specifier> <name>String</name> <call><name>substituteVars</name><argument_list>(<argument><expr><name>String</name> <name>expr</name></expr></argument>)</argument_list></call> <block>{
       <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>eval</name></expr>;</return> <comment type="line">// return literal ${var}: var is unbound</comment>
       </block_content>}</block></if></if_stmt>

      <comment type="line">// prevent recursive resolution</comment>
      <comment type="line">//</comment>
      <name>final</name> <name>int</name> <name>dollar</name> <operator>=</operator> <name><name>varBounds</name><index>[<expr><name>SUB_START_IDX</name></expr>]</index></name> <operator>-</operator> <literal type="string">"${"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>afterRightBrace</name> <init>= <expr><name><name>varBounds</name><index>[<expr><name>SUB_END_IDX</name></expr>]</index></name> <operator>+</operator> <literal type="string">"}"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>refVar</name> <init>= <expr><call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>dollar</name></expr></argument>, <argument><expr><name>afterRightBrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>evalSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>evalSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>evalSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>refVar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>expr</name></expr>;</return> <comment type="line">// return original expression if there is a loop</comment>
      </block_content>}</block></if></if_stmt>

       <comment type="line">// substitute</comment>
      <expr_stmt><expr><name>eval</name> <operator>=</operator> <call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>match</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>val</name><operator>+</operator><call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>match</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>eval</name> <operator>=</operator> <call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dollar</name></expr></argument>)</argument_list></call>
             <operator>+</operator> <name>val</name>
             <operator>+</operator> <call><name><name>eval</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>afterRightBrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
     <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Variable substitution depth too large: "</literal> 
                                     <operator>+</operator> <name>MAX_SUBST</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7b4fbb5ba34</literal><operator>..</operator><name>b84045d25eb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>TestConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1271</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1271</literal></expr><operator>,</operator><expr><literal type="number">56</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testSettingKeyNull</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>testInvalidSubstitutation</name><argument_list>()</argument_list></call> <block>{
    <expr><name>final</name> <name>Configuration</name> <name>configuration</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <comment type="line">// 2-var loops</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> <init>= <expr><literal type="string">"test.random.key"</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>keyExpression</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
        <argument><expr><literal type="string">"${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>,
        <argument><expr><literal type="string">"foo${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}"</literal></expr></argument>,
        <argument><expr><literal type="string">"foo${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}bar"</literal></expr></argument>,
        <argument><expr><literal type="string">"${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}bar"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//</comment>
    <comment type="line">// 3-variable loops</comment>
    <comment type="line">//</comment>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expVal1</name> <init>= <expr><literal type="string">"${test.var2}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>testVar1</name> <init>= <expr><literal type="string">"test.var1"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>, <argument><expr><name>expVal1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var2"</literal></expr></argument>, <argument><expr><literal type="string">"${test.var3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var3"</literal></expr></argument>, <argument><expr><literal type="string">"${test.var1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>expVal1</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 3-variable loop with non-empty value prefix/suffix</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expVal2</name> <init>= <expr><literal type="string">"foo2${test.var2}bar2"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>, <argument><expr><name>expVal2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var2"</literal></expr></argument>, <argument><expr><literal type="string">"foo3${test.var3}bar3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"test.var3"</literal></expr></argument>, <argument><expr><literal type="string">"foo1${test.var1}bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected value"</literal></expr></argument>, <argument><expr><name>expVal2</name></expr></argument>, <argument><expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>testVar1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testIncompleteSubbing</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>configuration</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><literal type="string">"test.random.key"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>keyExpression</name> <init>= <expr><literal type="string">"${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>configuration</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Unexpected value "</literal> <operator>+</operator> <name>value</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>keyExpression</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
        <argument><expr><literal type="string">"{}"</literal></expr></argument>,
        <argument><expr><literal type="string">"${}"</literal></expr></argument>,
        <argument><expr><literal type="string">"{"</literal> <operator>+</operator> <name>key</name></expr></argument>,
        <argument><expr><literal type="string">"${"</literal> <operator>+</operator> <name>key</name></expr></argument>,
        <argument><expr><literal type="string">"foo${"</literal> <operator>+</operator> <name>key</name></expr></argument>,
        <argument><expr><literal type="string">"foo${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"bar"</literal></expr></argument>,
        <argument><expr><literal type="string">"foo{"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"}bar"</literal></expr></argument>,
        <argument><expr><literal type="string">"${"</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>configuration</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>configuration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Unexpected value "</literal> <operator>+</operator> <name>value</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keyExpression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testBoolean</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></block></class>

</unit>
