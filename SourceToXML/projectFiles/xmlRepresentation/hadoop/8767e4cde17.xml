<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/8767e4cde17.java"><expr_stmt><expr><name>From</name> <literal type="number">8767e4cde172b6e6070e3fd45325ede617b99343</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Colin</name> <name><name>McCabe</name> <argument_list type="generic">&lt;<argument><name>cmccabe</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">11</literal> <name>Jul</name> <literal type="number">2013</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">31</literal><operator>:</operator><literal type="number">04</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">9418.</literal>  <name>Add</name> <name>symlink</name> <name>support</name> <name>to</name> <call><name>DistributedFileSystem</name>
 <argument_list>(<argument><expr><name>Andrew</name> <name>Wang</name> <name>via</name> <name>Colin</name> <name>Patrick</name> <name>McCabe</name></expr></argument>)</argument_list></call>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>   <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DFSClient</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DistributedFileSystem</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">863</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>DFSAdmin</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkHdfsFileSystem</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">107</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDistributedFileSystem</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>snapshot</name><operator>/</operator><name><name>TestNestedSnapshots</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">18</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">7</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">875</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">151</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkHdfsFileSystem</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>b3f81b0b8a5</name><operator>..</operator><literal type="number">3f92b18016f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">263</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">263</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.1.1</literal><operator>-</operator><name>beta</name> <operator>-</operator> <name>UNRELEASED</name>
 
   <name>IMPROVEMENTS</name>
 
    <name>HADOOP</name><operator>-</operator><literal type="number">9418.</literal>  <name>Add</name> <name>symlink</name> <name>support</name> <name>to</name> <call><name>DistributedFileSystem</name> <argument_list>(<argument><expr><name>Andrew</name> <name>Wang</name> <name>via</name>
    <name>Colin</name> <name>Patrick</name> <name>McCabe</name></expr></argument>)</argument_list></call>

   <name>OPTIMIZATIONS</name>
 
   <name>BUG</name> <name>FIXES</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DFSClient</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DFSClient</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6638768f27b</literal><operator>..</operator><name>b881a8b226a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DFSClient</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>DFSClient</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1020</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1020</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>boolean</name> <call><name>recoverLease</name><argument_list>(<argument><expr><name>String</name> <name>src</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <return>return <expr><call><name><name>namenode</name><operator>.</operator><name>recoverLease</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>clientName</name></expr></argument>)</argument_list></call></expr>;</return>
     } catch <expr_stmt><expr><operator>(</operator><name>RemoteException</name> <name>re</name><operator>)</operator> <block>{
       <throw>throw <argument_list>re<argument><expr><operator>.</operator><call><name>unwrapRemoteException</name><argument_list>(<argument><expr><name><name>FileNotFoundException</name><operator>.</operator><name>class</name></name></expr></argument>,
                                     <argument><expr><name><name>AccessControlException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
                                     <expr><name><name>AccessControlException</name><operator>.</operator><name>class</name></name></expr>,
                                     <expr><name><name>UnresolvedPathException</name><operator>.</operator><name>class</name></name></expr>)</block></expr>;</expr_stmt>
     }
   }
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2159</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2160</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>renameSnapshot</name><argument_list>(<argument><expr><name>String</name> <name>snapshotDir</name></expr></argument>, <argument><expr><name>String</name> <name>snapshotOldName</name></expr></argument>,
    <argument><expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>allowSnapshot</name><argument_list>(<argument><expr><name>String</name> <name>snapshotRoot</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>checkOpen</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    <argument><expr><call><name><name>namenode</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>snapshotRoot</name></expr></argument>)</argument_list></call></expr></argument>;
    try <block>{<block_content>
      <expr_stmt><expr><call><name><name>namenode</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>snapshotRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></argument_list></call></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><call><name><name>re</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
   }
   
   <comment type="block" format="javadoc">/**
@@ -2169,7 +2174,11 @@ public void allowSnapshot(String snapshotRoot) throws IOException {
    */</comment>
   public <function><type><name>void</name></type> <name>disallowSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotRoot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>namenode</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><name>snapshotRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>namenode</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><name>snapshotRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><call><name><name>re</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/**
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java
index 2a01d7fd3d9..8127689713d 100644
-- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java
++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java
@@ -34,17 +34,24 @@
 import org.apache.hadoop.fs.ContentSummary;
 import org.apache.hadoop.fs.CreateFlag;
 import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FSLinkResolver;
import org.apache.hadoop.fs.FileAlreadyExistsException;
import org.apache.hadoop.fs.FileChecksum;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FileSystemLinkResolver;
 import org.apache.hadoop.fs.FsServerDefaults;
 import org.apache.hadoop.fs.FsStatus;
 import org.apache.hadoop.fs.LocatedFileStatus;
import org.apache.hadoop.fs.MD5MD5CRC32FileChecksum;
 import org.apache.hadoop.fs.Options;
 import org.apache.hadoop.fs.Options.ChecksumOpt;
import org.apache.hadoop.fs.ParentNotDirectoryException;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.PathFilter;
 import org.apache.hadoop.fs.RemoteIterator;
import org.apache.hadoop.fs.UnresolvedLinkException;
import org.apache.hadoop.fs.UnsupportedFileSystemException;
 import org.apache.hadoop.fs.VolumeId;
 import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.hdfs.client.HdfsAdmin;
@@ -54,12 +61,12 @@
 import org.apache.hadoop.hdfs.protocol.DirectoryListing;
 import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
 import org.apache.hadoop.hdfs.protocol.HdfsConstants;
import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
 import org.apache.hadoop.hdfs.protocol.HdfsConstants.DatanodeReportType;
 import org.apache.hadoop.hdfs.protocol.HdfsConstants.SafeModeAction;
 import org.apache.hadoop.hdfs.protocol.HdfsFileStatus;
 import org.apache.hadoop.hdfs.protocol.HdfsLocatedFileStatus;
 import org.apache.hadoop.hdfs.protocol.LocatedBlock;
import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
 import org.apache.hadoop.hdfs.protocol.SnapshottableDirectoryStatus;
 import org.apache.hadoop.hdfs.security.token.block.InvalidBlockTokenException;
 import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
@@ -146,22 +153,14 @@ public short getDefaultReplication() {
     return dfs.getDefaultReplication();
   }
 
  private Path makeAbsolute(Path f) {
    if (f.isAbsolute()) {
      return f;
    } else {
      return new Path(workingDir, f);
    }
  }

   @Override
   public void setWorkingDirectory(Path dir) {
    String result = makeAbsolute(dir).toUri().getPath();
    String result = fixRelativePart(dir).toUri().getPath();
     if (!DFSUtil.isValidName(result)) {
       throw new IllegalArgumentException("Invalid DFS directory name " + 
                                          result);
     }
    workingDir = makeAbsolute(dir);
    workingDir = fixRelativePart(dir);
   }
 
   
@@ -170,9 +169,18 @@ public Path getHomeDirectory() {
     return makeQualified(new Path("/user/" + dfs.ugi.getShortUserName()));
   }
 
  /**
   * Checks that the passed URI belongs to this filesystem, resolves the path
   * component against the current working directory if relative, and finally
   * returns the absolute path component.
   * 
   * @param file URI to check and resolve
   * @return resolved absolute path component of {file}
   * @throws IllegalArgumentException if URI does not belong to this DFS
   */</comment>
   <function><type><specifier>private</specifier> <name>String</name></type> <name>getPathName</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>checkPath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>makeAbsolute</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUri</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DFSUtil</name><operator>.</operator><name>isValidName</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Pathname "</literal> <operator>+</operator> <name>result</name> <operator>+</operator> <literal type="string">" from "</literal> <operator>+</operator>
                                          <name>file</name><operator>+</operator><literal type="string">" is not a valid DFS filename."</literal></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>private</specifier> <name>String</name> <call><name>getPathName</name><argument_list>(<argument><expr><name>Path</name> <name>file</name></expr></argument>)</argument_list></call> <block>{
   
   @<expr><name>Override</name>
   <specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name> <call><name>getFileBlockLocations</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, 
      <argument><expr><name>long</name> <name>start</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>final</name> <name>long</name> <name>start</name></expr>, <argument><expr><name>final</name> <name>long</name> <name>len</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getBlockLocations</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name><name>BlockLocation</name><index>[]</index></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getBlockLocations</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getFileBlockLocations</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
   <comment type="block" format="javadoc">/**
@@ -239,28 +258,68 @@ public void setVerifyChecksum(boolean verifyChecksum) {
    * @return true if the file is already closed
    * @throws IOException if an error occurs
    */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>recoverLease</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>recoverLease</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>recoverLease</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>recoverLease</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>myDfs</name><operator>.</operator><name>recoverLease</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot recoverLease through"</literal> <operator>+</operator>
            <literal type="string">" a symlink to a non-DistributedFileSystem: "</literal> <operator>+</operator> <name>f</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
   <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HdfsDataInputStream</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>DFSClient</name><operator>.</operator><name>DFSDataInputStream</name></name><argument_list>(
          <argument><expr><call><name><name>dfs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>verifyChecksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FSDataInputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HdfsDataInputStream</name><argument_list>(
            <argument><expr><call><name><name>dfs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>verifyChecksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** This optional operation is not yet supported. */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
      <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FSDataOutputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
  <argument><expr><specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
       <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>, <argument><expr><name>long</name> <name>blockSize</name></expr></argument>,
       <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <return>return <expr><call><name><name>this</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">279</literal></expr></argument>,<argument><expr><literal type="number">61</literal> <operator>+</operator><literal type="number">338</literal></expr></argument>,<argument><expr><literal type="number">125</literal> @@ <specifier>public</specifier> <name>HdfsDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>replication</name></expr></argument>, <argument><expr><name>to</name> <name>move</name> <name>the</name> <name>blocks</name> <name>from</name> <name>favored</name> <name><name>nodes</name><operator>.</operator> <name>A</name></name> <name>value</name> <name>of</name> <literal type="null">null</literal> <name>means</name>
    <operator>*</operator> <name>no</name> <name>favored</name> <name>nodes</name></expr></argument> <for>for this create
    */
  public HdfsDataOutputStream create<control>(<init><decl><type><name>Path</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>FsPermission</name> <name>permission</name></decl>,
      <decl><type ref="prev"/><name>boolean</name> <name>overwrite</name></decl>, <decl><type ref="prev"/><name>int</name> <name>bufferSize</name></decl>, <decl><type ref="prev"/><name>short</name> <name>replication</name></decl>, <decl><type ref="prev"/><name>long</name> <name>blockSize</name></decl>,
      <decl><type ref="prev"/><name>Progressable</name> <name>progress</name></decl>, <decl><type ref="prev"/><name><name>InetSocketAddress</name><index>[]</index></name> <name>favoredNodes</name></decl></init>)</control><block type="pseudo"><block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>HdfsDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>f</name></expr></argument>,
      <argument><expr><name>final</name> <name>FsPermission</name> <name>permission</name></expr></argument>, <argument><expr><name>final</name> <name>boolean</name> <name>overwrite</name></expr></argument>,
      <argument><expr><name>final</name> <name>int</name> <name>bufferSize</name></expr></argument>, <argument><expr><name>final</name> <name>short</name> <name>replication</name></expr></argument>, <argument><expr><name>final</name> <name>long</name> <name>blockSize</name></expr></argument>,
      <argument><expr><name>final</name> <name>Progressable</name> <name>progress</name></expr></argument>, <argument><expr><name>final</name> <name><name>InetSocketAddress</name><index>[]</index></name> <name>favoredNodes</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>
          <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></for></argument_list></call></expr></argument></argument_list></call></expr></return></argument_list></decl></decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DFSOutputStream</name></type> <name>out</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name>overwrite</name></expr> ?</condition><then> <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr>
            </then><else>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>CREATE</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
        <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>favoredNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>HdfsDataOutputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DFSOutputStream</name></type> <name>out</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>overwrite</name></expr> ?</condition><then> <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>CREATE</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
            <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
            <argument><expr><name>favoredNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>myDfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>,
              <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>favoredNodes</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot create with"</literal> <operator>+</operator>
            <literal type="string">" favoredNodes through a symlink to a non-DistributedFileSystem: "</literal>
            <operator>+</operator> <name>f</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>,
    <parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>cflags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>,
    <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>ChecksumOpt</name></type> <name>checksumOpt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FsPermission</name></type> <name>permission</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>cflags</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Progressable</name></type> <name>progress</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>ChecksumOpt</name></type> <name>checksumOpt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DFSOutputStream</name></type> <name>out</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>,
        <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>checksumOpt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FSDataOutputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>,
            <argument><expr><name>cflags</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>checksumOpt</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>,
            <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>checksumOpt</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>

   <annotation>@<name>Override</name></annotation>
   <type><specifier>protected</specifier> <name>HdfsDataOutputStream</name></type> <name>primitiveCreate</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>,
     <parameter><decl><type><name>FsPermission</name></type> <name>absolutePermission</name></decl></parameter>, <parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
     <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>,
     <parameter><decl><type><name>ChecksumOpt</name></type> <name>checksumOpt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>primitiveCreate</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
    return <argument><expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>primitiveCreate</name></name><argument_list>(
        <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>absolutePermission</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>,
         <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>checksumOpt</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></return>
   </block_content>}</block></function> 
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * Same as create(), except fails if parent directory doesn't already exist.
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HdfsDataOutputStream</name></type> <name>createNonRecursive</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>,
      <parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>createNonRecursive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>f</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>FsPermission</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>flag</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>blockSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Progressable</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>flag</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>flag</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>CREATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>,
        <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, 
        <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FSDataOutputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
          <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HdfsDataOutputStream</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>,
            <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>statistics</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>createNonRecursive</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>,
            <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>setReplication</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, 
                                <parameter><decl><type><name>short</name> <name>replication</name>
                                <specifier>final</specifier> <name>short</name></type> <name>replication</name></decl></parameter>
                                )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>setReplication</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/**
@@ -346,12 +469,44 @@ public boolean setReplication(Path src,
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>concat</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>trg</name></decl></parameter>, <parameter><decl><type><name><name>Path</name> <index>[]</index></name></type> <name>psrcs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name> <index>[]</index></name></type> <name>srcs</name> <init>= <expr><operator>new</operator> <name><name>String</name> <index>[<expr><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getPathName</name><argument_list>(<argument><expr><name><name>psrcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Make target absolute</comment>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Make all srcs absolute</comment>
    <decl_stmt><decl><type><name><name>Path</name><index>[]</index></name></type> <name>srcs</name> <init>= <expr><operator>new</operator> <name><name>Path</name><index>[<expr><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fixRelativePart</name><argument_list>(<argument><expr><name><name>psrcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Try the concat without resolving any links</comment>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>srcsStr</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>srcsStr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getPathName</name><argument_list>(<argument><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcsStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnresolvedLinkException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Exception could be from trg or any src.</comment>
      <comment type="line">// Fully resolve trg and srcs. Fail if any of them are a symlink.</comment>
      <decl_stmt><decl><type><name>FileStatus</name></type> <name>stat</name> <init>= <expr><call><name>getFileLinkStatus</name><argument_list>(<argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>stat</name><operator>.</operator><name>isSymlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Cannot concat with a symlink target: "</literal>
            <operator>+</operator> <name>trg</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <call><name><name>stat</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>absF</name> <operator>=</operator> <call><name>fixRelativePart</name><argument_list>(<argument><expr><call><name><name>stat</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>getFileLinkStatus</name><argument_list>(<argument><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>stat</name><operator>.</operator><name>isSymlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Cannot concat with a symlink src: "</literal>
              <operator>+</operator> <name><name>psrcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <call><name><name>stat</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fixRelativePart</name><argument_list>(<argument><expr><call><name><name>stat</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <comment type="line">// Try concat again. Can still race with another symlink.</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psrcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>srcsStr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getPathName</name><argument_list>(<argument><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcsStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
 
   
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">359</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>concat</name><argument_list>(<argument><expr><name>Path</name> <name>trg</name></expr></argument>, <argument><expr><name><name>Path</name> <index>[]</index></name> <name>psrcs</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Override</name></annotation>
   <specifier>public</specifier> <name>boolean</name> <call><name>rename</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="line">// Both Paths have to belong to this DFS</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absSrc</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absDst</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>srcFS</name> <init>= <expr><call><name>getFSofPath</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>dstFS</name> <init>= <expr><call><name>getFSofPath</name><argument_list>(<argument><expr><name>absDst</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>srcFS</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name><name>dstFS</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Renames across FileSystems not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Try the rename without resolving first</comment>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>absDst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnresolvedLinkException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Fully resolve the source</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>source</name> <init>= <expr><call><name>getFileLinkStatus</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Keep trying to resolve the destination</comment>
      <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><call><name><name>fs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absDst</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** 
@@ -367,62 +550,102 @@ public boolean rename(Path src, Path dst) throws IOException {
    */</comment>
   <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
   <annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name><name>Options</name><operator>.</operator><name>Rename</name></name><modifier>...</modifier></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Options</name><operator>.</operator><name>Rename</name></name><modifier>...</modifier></type> <name>options</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Both Paths have to belong to this DFS</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absSrc</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absDst</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>srcFS</name> <init>= <expr><call><name>getFSofPath</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileSystem</name></type> <name>dstFS</name> <init>= <expr><call><name>getFSofPath</name><argument_list>(<argument><expr><name>absDst</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>srcFS</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name><name>dstFS</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Renames across FileSystems not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Try the rename without resolving first</comment>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>absDst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnresolvedLinkException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Fully resolve the source</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>source</name> <init>= <expr><call><name>getFileLinkStatus</name><argument_list>(<argument><expr><name>absSrc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Keep trying to resolve the destination</comment>
      <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
          <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
          <comment type="line">// Since we know it's this DFS for both, can just call doCall again</comment>
          <return>return <expr><call><name>doCall</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
   </block_content>}</block></function>
   
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>ContentSummary</name></type> <name>getContentSummary</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getContentSummary</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>ContentSummary</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>ContentSummary</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getContentSummary</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>ContentSummary</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getContentSummary</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** Set a directory's quotas
    * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String, long, long) 
    */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuota</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>namespaceQuota</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>diskspaceQuota</name></decl></parameter>)</parameter_list> 
                       <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setQuota</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namespaceQuota</name></expr></argument>, <argument><expr><name>diskspaceQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>FileStatus</name></type> <name>makeQualified</name><parameter_list>(<parameter><decl><type><name>HdfsFileStatus</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>FileStatus</name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>getLen</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>isDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getReplication</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getModificationTime</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getAccessTime</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getPermission</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><operator>(</operator><call><name><name>f</name><operator>.</operator><name>getFullPath</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>makeQualified</name><argument_list>(
            <argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getWorkingDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// fully-qualify path</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>LocatedFileStatus</name></type> <name>makeQualifiedLocated</name><parameter_list>(
      <parameter><decl><type><name>HdfsLocatedFileStatus</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>LocatedFileStatus</name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>getLen</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>isDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getReplication</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getModificationTime</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getAccessTime</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getPermission</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><operator>(</operator><call><name><name>f</name><operator>.</operator><name>getFullPath</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>makeQualified</name><argument_list>(
            <argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getWorkingDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <comment type="line">// fully-qualify path</comment>
        <argument><expr><call><name><name>DFSUtil</name><operator>.</operator><name>locatedBlocks2Locations</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>getBlockLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuota</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>namespaceQuota</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>diskspaceQuota</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setQuota</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namespaceQuota</name></expr></argument>, <argument><expr><name>diskspaceQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// setQuota is not defined in FileSystem, so we only can resolve</comment>
        <comment type="line">// within this DFS</comment>
        <return>return <expr><call><name>doCall</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * List all the entries of a directory
   *
   * Note that this operation is not atomic for a large directory.
   * The entries of a directory may be fetched from NameNode multiple times.
   * It only guarantees that  each name occurs once if a directory
   * undergoes changes between the calls.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>private</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatusInternal</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>src</name> <init>= <expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// fetch the first batch of entries in the directory</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">437</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">660</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>LocatedFileStatus</name> <call><name>makeQualifiedLocated</name><argument_list>(
     if <argument><expr><operator>(</operator><operator>!</operator><call><name><name>thisListing</name><operator>.</operator><name>hasMore</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{ <comment type="line">// got all entries of the directory</comment>
       <expr><name><name>FileStatus</name><index>[]</index></name> <name>stats</name> <operator>=</operator> <operator>new</operator> <name><name>FileStatus</name><index>[<expr><name><name>partialListing</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partialListing</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>makeQualified</name><argument_list>(<argument><expr><name><name>partialListing</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>partialListing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>makeQualified</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
       statistics.incrementReadOps(1</block></for>)</block></expr></argument>;
       return <argument><expr><name>stats</name></expr></argument>;
<argument>@@ <expr><operator>-</operator><literal type="number">451</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">674</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>LocatedFileStatus</name> <call><name>makeQualifiedLocated</name><argument_list>(
       <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>totalNumEntries</name></expr></argument>)</argument_list></call></expr></argument>;
     <comment type="line">// add the first batch of entries to the array list</comment>
     for <argument><expr><operator>(</operator><name>HdfsFileStatus</name> <name>fileStatus</name> <operator>:</operator> <name>partialListing</name><operator>)</operator> <block>{
      <expr><call><name><name>listing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>makeQualified</name><argument_list>(<argument><expr><name>fileStatus</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>listing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>fileStatus</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
     <call><name><name>statistics</name><operator>.</operator><name>incrementLargeReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
  
<argument>@@ <expr><operator>-</operator><literal type="number">465</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">688</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>LocatedFileStatus</name> <call><name>makeQualifiedLocated</name><argument_list>(
  
       <argument><expr><name>partialListing</name> <operator>=</operator> <call><name><name>thisListing</name><operator>.</operator><name>getPartialListing</name></name><argument_list>()</argument_list></call></expr></argument>;
       for <argument><expr><operator>(</operator><name>HdfsFileStatus</name> <name>fileStatus</name> <operator>:</operator> <name>partialListing</name><operator>)</operator> <block>{
        <expr><call><name><name>listing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>makeQualified</name><argument_list>(<argument><expr><name>fileStatus</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>listing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>fileStatus</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       }</block>
       <call><name><name>statistics</name><operator>.</operator><name>incrementLargeReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
     </block_content>}</block></function> <while>while <condition>(<expr><call><name><name>thisListing</name><operator>.</operator><name>hasMore</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">473</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">696</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>private</specifier> <name>LocatedFileStatus</name> <call><name>makeQualifiedLocated</name><argument_list>(
     return <argument><expr><call><name><name>listing</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>FileStatus</name><index>[<expr><call><name><name>listing</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * List all the entries of a directory
   *
   * Note that this operation is not atomic for a large directory.
   * The entries of a directory may be fetched from NameNode multiple times.
   * It only guarantees that  each name occurs once if a directory
   * undergoes changes between the calls.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name><name>FileStatus</name><index>[]</index></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>listStatusInternal</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>listStatus</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
   <type><specifier>protected</specifier> <name><name>RemoteIterator</name><argument_list type="generic">&lt;<argument><name>LocatedFileStatus</name></argument>&gt;</argument_list></name></type> <name>listLocatedStatus</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>p</name></expr></argument>,
       <argument><expr><name>final</name> <name>PathFilter</name> <name>filter</name></expr></argument>)</argument_list>
@@ -484</decl>,7 +732,9 @@ private <decl><type ref="prev"/><name>LocatedFileStatus</name> <name>makeQualifiedLocated</name><argument_list>(
       <argument><expr><specifier>private</specifier> <name>LocatedFileStatus</name> <name>curStat</name> <operator>=</operator> <literal type="null">null</literal></expr></argument>;
 
       <block>{<block_content> <comment type="line">// initializer</comment>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Fully resolve symlinks in path first to avoid additional resolution</comment>
        <comment type="line">// round-trips as we fetch more batches of listings</comment>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getPathName</name><argument_list>(<argument><expr><call><name>resolvePath</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line">// fetch the first batch of entries in the directory</comment>
         <expr_stmt><expr><name>thisListing</name> <operator>=</operator> <call><name><name>dfs</name><operator>.</operator><name>listPaths</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>HdfsFileStatus</name><operator>.</operator><name>EMPTY_NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">496</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">746</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>private</specifier> <name>LocatedFileStatus</name> <call><name>makeQualifiedLocated</name><argument_list>(
       <argument><expr><annotation>@<name>Override</name></annotation>
       <specifier>public</specifier> <name>boolean</name> <call><name>hasNext</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
         <while>while <condition>(<expr><name>curStat</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>hasNextNoFilter</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>LocatedFileStatus</name></type> <name>next</name> <init>= <expr><call><name>makeQualifiedLocated</name><argument_list>(
              <argument><expr><operator>(</operator><name>HdfsLocatedFileStatus</name><operator>)</operator><call><name><name>thisListing</name><operator>.</operator><name>getPartialListing</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>LocatedFileStatus</name></type> <name>next</name> <init>= 
              <expr><operator>(</operator><operator>(</operator><name>HdfsLocatedFileStatus</name><operator>)</operator><call><name><name>thisListing</name><operator>.</operator><name>getPartialListing</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name><operator>++</operator></expr>]</index><operator>)</operator>
              <operator>.</operator><call><name>makeQualifiedLocated</name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><call><name><name>next</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>curStat</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">547</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">798</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>LocatedFileStatus</name> <call><name>next</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator>                    <name>effective</name> <name><name>permission</name><operator>.</operator></name></expr></block></expr></argument>
    *<argument><expr><operator>/</operator>
   <specifier>public</specifier> <name>boolean</name> <call><name>mkdir</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument></throws></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>mkdirsInternal</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></while></argument_list></call></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/**
@@ -564,8 +814,32 @@ public boolean mkdir(Path f, FsPermission permission) throws IOException {
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>mkdirs</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>mkdirsInternal</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>mkdirsInternal</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>FsPermission</name></type> <name>permission</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>createParent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>createParent</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// FileSystem doesn't have a non-recursive mkdir() method</comment>
        <comment type="line">// Best we can do is error out</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>createParent</name></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"FileSystem does not support non-recursive"</literal>
              <operator>+</operator> <literal type="string">"mkdir"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">791</literal></expr><operator>,</operator><expr><literal type="number">42</literal> <operator>+</operator><literal type="number">1065</literal></expr><operator>,</operator><expr><literal type="number">207</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>reportChecksumFailure</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
   <argument><expr><annotation>@<name>Override</name></annotation>
   <specifier>public</specifier> <name>FileStatus</name> <call><name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    <argument><expr><name>HdfsFileStatus</name> <name>fi</name> <operator>=</operator> <call><name><name>dfs</name><operator>.</operator><name>getFileInfo</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    if <argument><expr><operator>(</operator><name>fi</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <block>{
      <return>return <expr><call><name>makeQualified</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></argument></argument_list></call></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</throw>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileStatus</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
          <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>HdfsFileStatus</name></type> <name>fi</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>getFileInfo</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fi</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>fi</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileStatus</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>createSymlink</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>link</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>createParent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccessControlException</name></expr></argument>,
      <argument><expr><name>FileAlreadyExistsException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>,
      <argument><expr><name>ParentNotDirectoryException</name></expr></argument>, <argument><expr><name>UnsupportedFileSystemException</name></expr></argument>, 
      <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
          <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>createParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>createParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>supportsSymlinks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>FileStatus</name></type> <name>getFileLinkStatus</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>AccessControlException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>,
      <argument><expr><name>UnsupportedFileSystemException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileStatus</name></type> <name>status</name> <init>= <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileStatus</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
          <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>HdfsFileStatus</name></type> <name>fi</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>getFileLinkInfo</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fi</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>fi</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileStatus</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Fully-qualify the symlink</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>isSymlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Path</name></type> <name>targetQual</name> <init>= <expr><call><name><name>FSLinkResolver</name><operator>.</operator><name>qualifySymlinkTarget</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>status</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>getSymlink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>setSymlink</name></name><argument_list>(<argument><expr><name>targetQual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>status</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Path</name></type> <name>getLinkTarget</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccessControlException</name></expr></argument>,
      <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>UnsupportedFileSystemException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Path</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
          <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>HdfsFileStatus</name></type> <name>fi</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>getFileLinkInfo</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fi</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name><name>fi</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSymlink</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Path</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getLinkTarget</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>Path</name></type> <name>resolveLink</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>target</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>getLinkTarget</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>MD5MD5CRC32FileChecksum</name></type> <name>getFileChecksum</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>FileChecksum</name></type> <name>getFileChecksum</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementReadOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getFileChecksum</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>FileChecksum</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileChecksum</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getFileChecksum</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>FileChecksum</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getFileChecksum</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setPermission</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name>
  <specifier>public</specifier> <name>void</name> <call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>final</name> <name>FsPermission</name> <name>permission</name></expr></argument>
       )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    <argument><expr><call><name><name>dfs</name><operator>.</operator><name>setPermission</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Path</name> <name>absF</name> <operator>=</operator> <call><name>fixRelativePart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setPermission</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>setPermission</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></decl></decl_stmt>
   </block_content>}</block></function>
 
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setOwner</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>String</name> <name>username</name></expr></argument>, <argument><expr><name>String</name> <name>groupname</name>
  <specifier>public</specifier> <name>void</name> <call><name>setOwner</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>username</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>groupname</name></expr></argument>
       )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>groupname</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"username == null &amp;&amp; groupname == null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt></argument_list></decl></decl_stmt>
     <expr_stmt><expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setOwner</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>groupname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setOwner</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>groupname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>setOwner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>groupname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></argument_list></decl></decl_stmt>
 
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setTimes</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>long</name> <name>mtime</name></expr></argument>, <argument><expr><name>long</name> <name>atime</name>
  <specifier>public</specifier> <name>void</name> <call><name>setTimes</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>final</name> <name>long</name> <name>mtime</name></expr></argument>, <argument><expr><name>final</name> <name>long</name> <name>atime</name></expr></argument>
       )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>statistics</name><operator>.</operator><name>incrementWriteOps</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
    <argument><expr><call><name><name>dfs</name><operator>.</operator><name>setTimes</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Path</name> <name>absF</name> <operator>=</operator> <call><name>fixRelativePart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>setTimes</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>setTimes</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></decl></decl_stmt>
   </block_content>}</block></function>
   
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">902</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1341</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>cancelDelegationToken</name><argument_list>(<argument><expr><name><name>Token</name><argument_list type="generic">&lt;<argument><name>DelegationTokenIdentifier</name></argument>&gt;</argument_list></name> <name>token</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>The</name> <name>bandwidth</name> <name>parameter</name> <name>is</name> <name>the</name> <name>max</name> <name>number</name> <name>of</name> <name>bytes</name> <name>per</name> <name>second</name> <name>of</name> <name>network</name>
    <operator>*</operator> <name>bandwidth</name> <name>to</name> <name>be</name> <name>used</name> <name>by</name> <name>a</name> <name>datanode</name> <name>during</name> <name><name>balancing</name><operator>.</operator></name>
    *
   <operator>*</operator> @<name>param</name> <name>bandwidth</name> <name>Blanacer</name> <name>bandwidth</name> <name>in</name> <name>bytes</name> <name>per</name> <name>second</name></expr></expr_stmt> <for>for all datanodes.
   * @param bandwidth Balancer bandwidth in bytes per second for all datanodes.
    * @<throws>throws <argument><expr><name>IOException</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setBalancerBandwidth</name><argument_list>(<argument><expr><name>long</name> <name>bandwidth</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">943</literal></expr></argument>,<argument><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">1382</literal></expr></argument>,<argument><expr><literal type="number">111</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>isInSafeMode</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** @see HdfsAdmin#allowSnapshot(Path) */</comment>
  <specifier>public</specifier> <name>void</name> <call><name>allowSnapshot</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument></throws><empty_stmt>;</empty_stmt></for>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>allowSnapshot</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>myDfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform snapshot"</literal>
              <operator>+</operator> <literal type="string">" operations on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>path</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** @see HdfsAdmin#disallowSnapshot(Path) */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>disallowSnapshot</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>disallowSnapshot</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>myDfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform snapshot"</literal>
              <operator>+</operator> <literal type="string">" operations on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>path</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Path</name></type> <name>createSnapshot</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>snapshotName</name></expr></argument>)</argument_list> 
  public <name>Path</name> <name>createSnapshot</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>snapshotName</name></expr></argument>)</argument_list> 
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
    return new <name>Path</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>createSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Path</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>createSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Path</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>myDfs</name><operator>.</operator><name>createSnapshot</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform snapshot"</literal>
              <operator>+</operator> <literal type="string">" operations on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>path</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>renameSnapshot</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotOldName</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>snapshotNewName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>renameSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snapshotOldName</name></expr></argument>, <argument><expr><name>snapshotNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>renameSnapshot</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>snapshotOldName</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>snapshotNewName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>renameSnapshot</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snapshotOldName</name></expr></argument>, <argument><expr><name>snapshotNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>myDfs</name><operator>.</operator><name>renameSnapshot</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>snapshotOldName</name></expr></argument>, <argument><expr><name>snapshotNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform snapshot"</literal>
              <operator>+</operator> <literal type="string">" operations on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>path</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/**
@@ -974,9 +1499,31 @@ public void renameSnapshot(Path path, String snapshotOldName,
   }
   
   @Override
  public void deleteSnapshot(Path snapshotDir, String snapshotName)
  public void deleteSnapshot(final Path snapshotDir, final String snapshotName)
       throws IOException {
    dfs.deleteSnapshot(getPathName(snapshotDir), snapshotName);
    Path absF = fixRelativePart(snapshotDir);
    new FileSystemLinkResolver&lt;Void&gt;() {
      @Override
      public Void doCall(final Path p)
          throws IOException, UnresolvedLinkException {
        dfs.deleteSnapshot(getPathName(p), snapshotName);
        return null;
      }

      @Override
      public Void next(final FileSystem fs, final Path p)
          throws IOException {
        if (fs instanceof DistributedFileSystem) {
          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
          myDfs.deleteSnapshot(p, snapshotName);
        } else {
          throw new UnsupportedOperationException("Cannot perform snapshot"
              + " operations on a symlink to a non-DistributedFileSystem: "
              + snapshotDir + " -&gt; " + p);
        }
        return null;
      }
    }.resolve(this, absF);
   }
 
   /**
@@ -985,9 +1532,31 @@ public void deleteSnapshot(Path snapshotDir, String snapshotName)
    * 
    * @see DFSClient#getSnapshotDiffReport(Path, String, String)
    */</comment>
  <function><type><specifier>public</specifier> <name>SnapshotDiffReport</name></type> <name>getSnapshotDiffReport</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>snapshotDir</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>fromSnapshot</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>toSnapshot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getSnapshotDiffReport</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fromSnapshot</name></expr></argument>, <argument><expr><name>toSnapshot</name></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>SnapshotDiffReport</name></type> <name>getSnapshotDiffReport</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>snapshotDir</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromSnapshot</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>toSnapshot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>SnapshotDiffReport</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SnapshotDiffReport</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>getSnapshotDiffReport</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fromSnapshot</name></expr></argument>,
            <argument><expr><name>toSnapshot</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SnapshotDiffReport</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>myDfs</name><operator>.</operator><name>getSnapshotDiffReport</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fromSnapshot</name></expr></argument>, <argument><expr><name>toSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform snapshot"</literal>
              <operator>+</operator> <literal type="string">" operations on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>snapshotDir</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
   <comment type="block" format="javadoc">/**
@@ -998,8 +1567,28 @@ public SnapshotDiffReport getSnapshotDiffReport(Path snapshotDir,
    * @throws FileNotFoundException if the file does not exist.
    * @throws IOException If an I/O error occurred     
    */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFileClosed</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>isFileClosed</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFileClosed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>src</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>absF</name> <init>= <expr><call><name>fixRelativePart</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <class><super><name><name>FileSystemLinkResolver</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnresolvedLinkException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>isFileClosed</name></name><argument_list>(<argument><expr><call><name>getPathName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>next</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>instanceof</operator> <name>DistributedFileSystem</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>DistributedFileSystem</name></type> <name>myDfs</name> <init>= <expr><operator>(</operator><name>DistributedFileSystem</name><operator>)</operator><name>fs</name></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>myDfs</name><operator>.</operator><name>isFileClosed</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot call isFileClosed"</literal>
              <operator>+</operator> <literal type="string">" on a symlink to a non-DistributedFileSystem: "</literal>
              <operator>+</operator> <name>src</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
    }</block></class><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>absF</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
   
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>DFSAdmin</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>DFSAdmin</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">38465679dfe</literal><operator>..</operator><name>c56bcb985aa</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>DFSAdmin</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>DFSAdmin</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>protocol</name><operator>.</operator><name>HdfsConstants</name><operator>.</operator><name>SafeModeAction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>server</name><operator>.</operator><name>namenode</name><operator>.</operator><name>NameNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>server</name><operator>.</operator><name>namenode</name><operator>.</operator><name>TransferFsImage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>server</name><operator>.</operator><name>namenode</name><operator>.</operator><name>snapshot</name><operator>.</operator><name>SnapshotException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>ipc</name><operator>.</operator><name>RPC</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>ipc</name><operator>.</operator><name>RemoteException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>net</name><operator>.</operator><name>NetUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">414</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">415</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setSafeMode</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>argv</name></expr></argument>, <argument><expr><name>int</name> <name>idx</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>allowSnapshot</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>argv</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{   
     <expr><name>DistributedFileSystem</name> <name>dfs</name> <operator>=</operator> <call><name>getDFS</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RemoteException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Allowing snaphot on "</literal> <operator>+</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">426</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">431</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>allowSnapshot</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>argv</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>disallowSnapshot</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>argv</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{  
     <expr><name>DistributedFileSystem</name> <name>dfs</name> <operator>=</operator> <call><name>getDFS</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RemoteException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Disallowing snaphot on "</literal> <operator>+</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkHdfsFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkHdfsFileSystem</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">00000000000..bf42e24b01d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkHdfsFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">107</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Ignore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>TestSymlinkHdfsFileSystem</name> <super_list><extends>extends <super><name>TestSymlinkHdfs</name></super></extends></super_list> <block>{

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testSetup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>wrapper</name> <operator>=</operator> <operator>new</operator> <call><name>FileSystemTestWrapper</name><argument_list>(<argument><expr><name>dfs</name></expr></argument>, <argument><expr><literal type="string">"/tmp/TestSymlinkHdfsFileSystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <annotation>@<name>Ignore</name><argument_list>(<argument><expr><literal type="string">"FileSystem adds missing authority in absolute URIs"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">1000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCreateWithPartQualPathFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <function><annotation>@<name>Ignore</name><argument_list>(<argument><expr><literal type="string">"FileSystem#create creates parent directories,"</literal> <operator>+</operator>
      <literal type="string">" so dangling links to directories are created"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">1000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCreateFileViaDanglingLinkParent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <comment type="line">// Additional tests for DFS-only methods</comment>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRecoverLease</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Attempt recoverLease through a symlink</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>closed</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>recoverLease</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expected recoverLease to return true"</literal></expr></argument>, <argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIsFileClosed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Attempt recoverLease through a symlink</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>closed</name> <init>= <expr><call><name><name>dfs</name><operator>.</operator><name>isFileClosed</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expected isFileClosed to return true"</literal></expr></argument>, <argument><expr><name>closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testConcat</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir2</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>dir2</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Concat with a target and srcs through a link</comment>
    <decl_stmt><decl><type><name>Path</name></type> <name>target</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Path</name><index>[]</index></name></type> <name>srcs</name> <init>= <expr><operator>new</operator> <name><name>Path</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>srcs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"src-"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name><name>srcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>srcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSnapshot</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir2</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>dir2</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>createSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"mcmillan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>renameSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"mcmillan"</literal></expr></argument>, <argument><expr><literal type="string">"seaborg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfs</name><operator>.</operator><name>deleteSnapshot</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"seaborg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDistributedFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDistributedFileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9e2fd277b47</literal><operator>..</operator><literal type="number">9b4f3130d7f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDistributedFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDistributedFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testDFSCloseOrdering</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><specifier>public</specifier> <name>boolean</name> <call><name>exists</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>)</argument_list></call> <block>{</block></expr></block></expr></argument></throws></expr></expr_stmt>
       <return>return <expr><literal type="boolean">true</literal></expr>;</return> <comment type="line">// trick out deleteOnExit</comment>
     </block_content>}</block></function>
    <comment type="line">// Symlink resolution doesn't work with a mock, since it doesn't</comment>
    <comment type="line">// have a valid Configuration to resolve paths to the right FileSystem.</comment>
    <comment type="line">// Just call the DFSClient directly to register the delete</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>dfs</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
   </block_content>}</block></function>
 
   <annotation>@<name>Test</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>server</name><operator>/</operator><name>namenode</name><operator>/</operator><name>snapshot</name><operator>/</operator><name><name>TestNestedSnapshots</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>server</name><operator>/</operator><name>namenode</name><operator>/</operator><name>snapshot</name><operator>/</operator><name><name>TestNestedSnapshots</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a983098224d</name><operator>..</operator><literal type="number">8ee8e48df59</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>server</name><operator>/</operator><name>namenode</name><operator>/</operator><name>snapshot</name><operator>/</operator><name><name>TestNestedSnapshots</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name>server</name><operator>/</operator><name>namenode</name><operator>/</operator><name>snapshot</name><operator>/</operator><name><name>TestNestedSnapshots</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testNestedSnapshots</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>hdfs</name><operator>.</operator><name>disallowSnapshot</name></name><argument_list>(<argument><expr><name>rootPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expect snapshot exception when disallowing snapshot on root again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>GenericTestUtils</name><operator>.</operator><name>assertExceptionContains</name></name><argument_list>(
           <argument><expr><literal type="string">"Root is not a snapshottable directory"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">149</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">149</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testNestedSnapshots</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>hdfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>rootPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertNestedSnapshotException</name><argument_list>(
          <argument><expr><operator>(</operator><name>SnapshotException</name><operator>)</operator> <call><name><name>se</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"subdirectory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>se</name></expr><operator>,</operator> <expr><literal type="string">"subdirectory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch></try>
     </block_content>}</block></function>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>hdfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertNestedSnapshotException</name><argument_list>(
          <argument><expr><operator>(</operator><name>SnapshotException</name><operator>)</operator> <call><name><name>se</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"subdirectory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>se</name></expr><operator>,</operator> <expr><literal type="string">"subdirectory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch></try>
     </block_content>}</block></function>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>sub1Bar</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testNestedSnapshots</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>hdfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>sub1Bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertNestedSnapshotException</name><argument_list>(
          <argument><expr><operator>(</operator><name>SnapshotException</name><operator>)</operator> <call><name><name>se</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ancestor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>se</name></expr><operator>,</operator> <expr><literal type="string">"ancestor"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch></try>
     </block_content>}</block></function>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>hdfs</name><operator>.</operator><name>allowSnapshot</name></name><argument_list>(<argument><expr><name>sub2Bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SnapshotException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertNestedSnapshotException</name><argument_list>(
          <argument><expr><operator>(</operator><name>SnapshotException</name><operator>)</operator> <call><name><name>se</name><operator>.</operator><name>unwrapRemoteException</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ancestor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>se</name></expr><operator>,</operator> <expr><literal type="string">"ancestor"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch></try>
     }
   }
   
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
