<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/cc8a2a29f18.java"><expr_stmt><expr><name>From</name> <name>cc8a2a29f18a6b54e182c320fa356751a494d499</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Robert</name> <name>Joseph</name> <name><name>Evans</name> <argument_list type="generic">&lt;<argument><name>bobby</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">27</literal> <name>Jan</name> <literal type="number">2012</literal> <literal type="number">22</literal><operator>:</operator><literal type="number">42</literal><operator>:</operator><literal type="number">47</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">7998</literal> <name>CheckFileSystem</name> <name>does</name> <name>not</name> <name>correctly</name> <name>honor</name>
 <call><name>setVerifyChecksum</name> <argument_list>(<argument><expr><name>Daryn</name> <name>Sharp</name> <name>via</name> <name>bobby</name></expr></argument>)</argument_list></call>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1236911 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>dev</name><operator>-</operator><name>support</name><operator>/</operator><name>test</name><operator>-</operator><name><name>patch</name><operator>.</operator><name>properties</name></name>         <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>ChecksumFileSystem</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestChecksumFileSystem</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">93</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">76</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">26</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>dev</name><operator>-</operator><name>support</name><operator>/</operator><name>test</name><operator>-</operator><name><name>patch</name><operator>.</operator><name>properties</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>dev</name><operator>-</operator><name>support</name><operator>/</operator><name>test</name><operator>-</operator><name><name>patch</name><operator>.</operator><name>properties</name></name>
<name>index</name> <literal type="number">15b54bfcf0d</literal><operator>..</operator><name>c33b2a9440b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>dev</name><operator>-</operator><name>support</name><operator>/</operator><name>test</name><operator>-</operator><name><name>patch</name><operator>.</operator><name>properties</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>dev</name><operator>-</operator><name>support</name><operator>/</operator><name>test</name><operator>-</operator><name><name>patch</name><operator>.</operator><name>properties</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@
 
 <name>OK_RELEASEAUDIT_WARNINGS</name><operator>=</operator><literal type="number">0</literal>
 <name>OK_FINDBUGS_WARNINGS</name><operator>=</operator><literal type="number">0</literal>
<name>OK_JAVADOC_WARNINGS</name><operator>=</operator><literal type="number">6</literal>
<name>OK_JAVADOC_WARNINGS</name><operator>=</operator><literal type="number">13</literal>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>fb7eb2a2e18</name><operator>..</operator><literal type="number">444224bc758</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <call><name>Trunk</name> <argument_list>(<argument><expr><name>unreleased</name> <name>changes</name></expr></argument>)</argument_list></call>
     <name>HADOOP</name><operator>-</operator><literal type="number">7965.</literal> <name>Support</name></expr></expr_stmt> <for>for protocol version and signature in PB. <control>(<init><expr><name>jitendra</name></expr></init>)</control><block type="pseudo"><block_content>
 
   <expr_stmt><expr><name>BUGS</name>
    <name>HADOOP</name><operator>-</operator><literal type="number">7998.</literal> <name>CheckFileSystem</name> <name>does</name> <name>not</name> <name>correctly</name> <name>honor</name> <call><name>setVerifyChecksum</name>
                 <argument_list>(<argument><expr><name>Daryn</name> <name>Sharp</name> <name>via</name> <name>bobby</name></expr></argument>)</argument_list></call>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">7851.</literal> <call><name><name>Configuration</name><operator>.</operator><name>getClasses</name></name><argument_list>()</argument_list></call> <name>never</name> <name>returns</name> <name>the</name> default <name><name>value</name><operator>.</operator></name> 
                  (<name>Uma</name> <name>Maheswara</name> <name>Rao</name> <name>G</name> <name>via</name> <name>amarrk</name></expr></expr_stmt></block_content></block></for>)
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>ChecksumFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>ChecksumFileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f24c3924caf</name><operator>..</operator><name>de1178930f7</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>ChecksumFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>ChecksumFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">304</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">304</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>seek</name><argument_list>(<argument><expr><name>long</name> <name>pos</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <annotation>@<name>Override</name></annotation>
   <specifier>public</specifier> <name>FSDataInputStream</name> <call><name>open</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>FSDataInputStream</name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>ChecksumFSInputChecker</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><ternary><condition><expr><name>verifyChecksum</name></expr>
      ?</condition><then> <expr><operator>new</operator> <call><name>FSDataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChecksumFSInputChecker</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
      </then><else>: <expr><call><name>getRawFileSystem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
   }
 
   <comment type="block" format="javadoc">/** {@inheritDoc} */</comment>
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestChecksumFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestChecksumFileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">373bdf12d5a</literal><operator>..</operator><literal type="number">80347a72b45</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestChecksumFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestChecksumFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FSDataOutputStream</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystemTestHelper</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>
 
<class><specifier>public</specifier> class <name>TestChecksumFileSystem</name> <super_list><extends>extends <super><name>TestCase</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class <name>TestChecksumFileSystem</name> <block>{
   <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST_ROOT_DIR</name>
     <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"test.build.data"</literal></expr></argument>,<argument><expr><literal type="string">"build/test/data/work-dir/localfs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>static</specifier> <name>LocalFileSystem</name></type> <name>localFs</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>resetLocalFs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>localFs</name> <operator>=</operator> <call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testgetChecksumLength</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name><name>ChecksumFileSystem</name><operator>.</operator><name>getChecksumLength</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name><name>ChecksumFileSystem</name><operator>.</operator><name>getChecksumLength</name></name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testgetChecksumLength</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
                  <expr><call><name><name>ChecksumFileSystem</name><operator>.</operator><name>getChecksumLength</name></name><argument_list>(<argument><expr><literal type="number">10000000000000L</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content></block>;</function>    
   }</block></class> 
   
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testVerifyChecksum</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>    
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localFs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testPath"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>testPath11</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testPath11"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FSDataOutputStream</name></type> <name>fout</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testVerifyChecksum</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     
     <comment type="line">//copying the wrong checksum file</comment>
     <expr><call><name><name>FileUtil</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><call><name><name>localFs</name><operator>.</operator><name>getChecksumFile</name></name><argument_list>(<argument><expr><name>testPath11</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>localFs</name></expr></argument>, 
        <argument><expr><call><name><name>localFs</name><operator>.</operator><name>getChecksumFile</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>getChecksumFile</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="boolean">false</literal></expr><operator>,</operator><expr><literal type="boolean">true</literal></expr><operator>,</operator><expr><call><name><name>localFs</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"checksum exists"</literal></expr></argument>, <argument><expr><call><name><name>localFs</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>localFs</name><operator>.</operator><name>getChecksumFile</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <decl_stmt><decl><type><name>boolean</name></type> <name>errorRead</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testVerifyChecksum</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"error reading"</literal></expr></argument>, <argument><expr><name>errorRead</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
     <comment type="line">//now setting verify false, the read should succeed</comment>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">"testing"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// reset for other tests</comment>
      <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
    
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">"testing"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testMultiChunkFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localFs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testMultiChunk"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FSDataOutputStream</name></type> <name>fout</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testMultiChunkFile</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><operator>*</operator> <name>Test</name> <name>to</name> <name>ensure</name> <name>that</name></expr></block></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if the checksum file is truncated<operator>,</operator> <expr_stmt><expr><name>a</name>
    <operator>*</operator> <name>ChecksumException</name> <name>is</name> <name>thrown</name>
    <operator>*</operator><operator>/</operator>
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testTruncatedChecksum</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{ 
    <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt></if></if_stmt>
    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localFs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testtruncatedcrc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FSDataOutputStream</name></type> <name>fout</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>fout</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"testing truncation"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">146</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">60</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTruncatedChecksum</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     }</block>
 
     <comment type="line">// telling it not to verify checksums, should avoid issue.</comment>
    <call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">"testing truncation"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testStreamType</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testStreamType"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    <decl_stmt><decl><type><name>FSDataInputStream</name></type> <name>in</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>localFs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"stream is input checker"</literal></expr></argument>,
        <argument><expr><call><name><name>in</name><operator>.</operator><name>getWrappedStream</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>FSInputChecker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>localFs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"stream is not input checker"</literal></expr></argument>,
        <argument><expr><call><name><name>in</name><operator>.</operator><name>getWrappedStream</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>FSInputChecker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCorruptedChecksum</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"testCorruptChecksum"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>checksumPath</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>getChecksumFile</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// write a file to generate checksum</comment>
    <decl_stmt><decl><type><name>FSDataOutputStream</name></type> <name>out</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"testing 1 2 3"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>localFs</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>checksumPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FileStatus</name></type> <name>stat</name> <init>= <expr><call><name><name>localFs</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>checksumPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="line">// alter file directly so checksum is invalid</comment>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>localFs</name><operator>.</operator><name>getRawFileSystem</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"testing stale checksum"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>localFs</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>checksumPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// checksum didn't change on disk</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><call><name><name>localFs</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>checksumPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Exception</name></type> <name>e</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><literal type="string">"testing truncation"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// reset for other tests</comment>
       <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally> <catch>catch <parameter_list>(<parameter><decl><type><name>ChecksumException</name></type> <name>ce</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>e</name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><literal type="string">"got checksum error"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
 
    <expr_stmt><expr><call><name><name>localFs</name><operator>.</operator><name>setVerifyChecksum</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>readFile</name><argument_list>(<argument><expr><name>localFs</name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"testing stale checksum"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 </block_content>}</block></function>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
