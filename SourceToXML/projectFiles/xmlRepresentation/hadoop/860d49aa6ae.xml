<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/860d49aa6ae.java"><expr_stmt><expr><name>From</name> <literal type="number">860d49aa6ae7790d970d7f2322fed890b0e5cda2</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Mingliang</name> <name><name>Liu</name> <argument_list type="generic">&lt;<argument><name>liuml07</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">23</literal> <name>Nov</name> <literal type="number">2016</literal> <literal type="number">16</literal><operator>:</operator><literal type="number">32</literal><operator>:</operator><literal type="number">42</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">13605.</literal> <name>Clean</name> <name>up</name> <name>FileSystem</name> <name>javadocs</name></expr><operator>,</operator> <expr><name>logging</name></expr>;</expr_stmt> <expr_stmt><expr><name>improve</name>
 <name>diagnostics</name> <name>on</name> <name>FS</name> <name><name>load</name><operator>.</operator> <name>Contributed</name></name> <name>by</name> <name>Steve</name> <name>Loughran</name>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileSystem</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">1449</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>site</name><operator>/</operator><name>markdown</name><operator>/</operator><name>filesystem</name><operator>/</operator><name><name>filesystem</name><operator>.</operator><name>md</name></name>    <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestDefaultUri</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">40</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileSystemCaching</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">920</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">579</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9e984559149</literal><operator>..</operator><name>f581f613935</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@
<comment type="block" format="javadoc">/**
/*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -75,6 +75,8 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.annotations.VisibleForTesting;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.*;
@@ -88,79 +90,118 @@
  * &lt;p&gt;
  *
  * All user code that may potentially use the Hadoop Distributed
 * File System should be written to use a FileSystem object.  The
 * Hadoop DFS is a multi-machine system that appears as a single
 * disk.  It's useful because of its fault tolerance and potentially
 * very large capacity.
 * 
 * File System should be written to use a FileSystem object or its
 * successor, {@link FileContext}.
 *
  * &lt;p&gt;
  * The local implementation is {@link LocalFileSystem} and distributed
 * implementation is DistributedFileSystem.
 * implementation is DistributedFileSystem. There are other implementations
 * for object stores and (outside the Apache Hadoop codebase),
 * third party filesystems.
 * &lt;p&gt;
 * Notes
 * &lt;ol&gt;
 * &lt;li&gt;The behaviour of the filesystem is
 * &lt;a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/filesystem/filesystem.html"&gt;
 * specified in the Hadoop documentation. &lt;/a&gt;
 * However, the normative specification of the behavior of this class is
 * actually HDFS: if HDFS does not behave the way these Javadocs or
 * the specification in the Hadoop documentations define, assume that
 * the documentation is incorrect.
 * &lt;/li&gt;
 * &lt;li&gt;The term {@code FileSystem} refers to an instance of this class.&lt;/li&gt;
 * &lt;li&gt;The acronym "FS" is used as an abbreviation of FileSystem.&lt;/li&gt;
 * &lt;li&gt;The term {@code filesystem} refers to the distributed/local filesystem
 * itself, rather than the class used to interact with it.&lt;/li&gt;
 * &lt;li&gt;The term "file" refers to a file in the remote filesystem,
 * rather than instances of {@code java.io.File}.&lt;/li&gt;
 * &lt;/ol&gt;
  *****************************************************************/</comment>
@<call><name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"DeprecatedIsStillUsed"</literal></expr></argument>)</argument_list></call>
 @<name><name>InterfaceAudience</name><operator>.</operator><name>Public</name></name>
 @<name><name>InterfaceStability</name><operator>.</operator><name>Stable</name></name>
 <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>FileSystem</name> extends <name>Configured</name> implements <name>Closeable</name> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>FS_DEFAULT_NAME_KEY</name> <operator>=</operator> 
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>FS_DEFAULT_NAME_KEY</name> <operator>=</operator>
                    <name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_DEFAULT_NAME_KEY</name></name></expr>;
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>DEFAULT_FS</name> <operator>=</operator> 
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>DEFAULT_FS</name> <operator>=</operator>
                    <name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_DEFAULT_NAME_DEFAULT</name></name></expr>;
 
  <comment type="block" format="javadoc">/**
   * This log is widely used in the org.apache.hadoop.fs code and tests,
   * so must be considered something to only be changed with care.
   */</comment>
  @<expr><name><name>InterfaceAudience</name><operator>.</operator><name>Private</name></name>
   <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>Log</name> <name>LOG</name> <operator>=</operator> <call><name><name>LogFactory</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>FileSystem</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
   <comment type="block" format="javadoc">/**
   * Priority of the FileSystem shutdown hook.
   * The SLF4J logger to use in logging within the FileSystem class itself.
   */</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>LOGGER</name> <operator>=</operator>
      <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>FileSystem</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * Priority of the FileSystem shutdown hook: {@value}.
    */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>SHUTDOWN_HOOK_PRIORITY</name> <operator>=</operator> <literal type="number">10</literal></expr>;
 
  <comment type="block" format="javadoc">/**
   * Prefix for trash directory: {@value}.
   */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>TRASH_PREFIX</name> <operator>=</operator> <literal type="string">".Trash"</literal></expr>;
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>USER_HOME_PREFIX</name> <operator>=</operator> <literal type="string">"/user"</literal></expr>;
 
  <comment type="block" format="javadoc">/** FileSystem cache */</comment>
  <comment type="block" format="javadoc">/** FileSystem cache. */</comment>
   <expr><specifier>static</specifier> <name>final</name> <name>Cache</name> <name>CACHE</name> <operator>=</operator> <operator>new</operator> <call><name>Cache</name><argument_list>()</argument_list></call></expr>;
 
   <comment type="block" format="javadoc">/** The key this instance is stored under in the cache. */</comment>
   <expr><specifier>private</specifier> <name><name>Cache</name><operator>.</operator><name>Key</name></name> <name>key</name></expr>;
 
  <comment type="block" format="javadoc">/** Recording statistics per a FileSystem class */</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FileSystem</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name> 
    <name>statisticsTable</name> <operator>=</operator>
      <operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FileSystem</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  
  <comment type="block" format="javadoc">/** Recording statistics per a FileSystem class. */</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FileSystem</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name>
      <name>statisticsTable</name> <operator>=</operator> <operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

   <comment type="block" format="javadoc">/**
    * The statistics for this file system.
    */</comment>
   <expr><specifier>protected</specifier> <name>Statistics</name> <name>statistics</name></expr>;
 
   <comment type="block" format="javadoc">/**
   * A cache of files that should be deleted when filesystem is closed
   * A cache of files that should be deleted when the FileSystem is closed
    * or the JVM is exited.
    */</comment>
  <expr><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name> <name>deleteOnExit</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  
  <expr><specifier>private</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name> <name>deleteOnExit</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

  <comment type="block" format="javadoc">/**
   * Should symbolic links be resolved by {@link FileSystemLinkResolver}.
   * Set to the value of
   * {@link CommonConfigurationKeysPublic#FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY}
   */</comment>
   <expr><name>boolean</name> <name>resolveSymlinks</name></expr>;
 
   <comment type="block" format="javadoc">/**
   * This method adds a file system for testing so that we can find it later. It
   * is only for testing.
   * This method adds a FileSystem instance to the cache so that it can
   * be retrieved later. It is only for testing.
    * @param uri the uri to store it under
    * @param conf the configuration to store it under
   * @param fs the file system to store
   * @throws IOException
   * @param fs the FileSystem to store
   * @throws IOException if the current user cannot be determined.
    */</comment>
  @<expr><name>VisibleForTesting</name>
   <specifier>static</specifier> <name>void</name> <call><name>addFileSystemForTesting</name><argument_list>(<argument><expr><name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>,
       <argument><expr><name>FileSystem</name> <name>fs</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>CACHE</name><operator>.</operator><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Cache</name><operator>.</operator><name>Key</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Get a filesystem instance based on the uri, the passed
   * configuration and the user
   * Get a FileSystem instance based on the uri, the passed in
   * configuration and the user.
    * @param uri of the filesystem
    * @param conf the configuration to use
    * @param user to perform the get as
    * @return the filesystem instance
   * @throws IOException
   * @throws InterruptedException
   * @throws IOException failure to load
   * @throws InterruptedException If the {@code UGI.doAs()} call was
   * somehow interrupted.
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>get</name><argument_list>(<argument><expr><name>final</name> <name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>final</name> <name>Configuration</name> <name>conf</name></expr></argument>,
         <argument><expr><name>final</name> <name>String</name> <name>user</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">177</literal></expr></argument>,<argument><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">218</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>FileSystem</name> <call><name>run</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Returns the configured filesystem implementation.
   * Returns the configured FileSystem implementation.
    * @param conf the configuration to use
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>get</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name>get</name><argument_list>(<argument><expr><call><name>getDefaultUri</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
   }
  
  <comment type="block" format="javadoc">/** Get the default filesystem URI from a configuration.

  /**
   * Get the default FileSystem URI from a configuration.
    * @param conf the configuration to use
    * @return the uri of the default filesystem
    */</comment>
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">238</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>URI</name> <call><name>getDefaultUri</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><name>uri</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** Set the default filesystem URI in a configuration.
  /**
   * Set the default FileSystem URI in a configuration.
    * @param conf the configuration to alter
    * @param uri the new default filesystem uri
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">204</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setDefaultUri</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>, <argument><expr><name>URI</name> <name>uri</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>FS_DEFAULT_NAME_KEY</name></expr></argument>, <argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/** Set the default filesystem URI in a configuration.
  /** Set the default FileSystem URI in a configuration.
    * @param conf the configuration to alter
    * @param uri the new default filesystem uri
    */</comment>
@@ <operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setDefaultUri</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>, <argument><expr><name>String</name> <name>uri</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>setDefaultUri</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>fixName</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/** Called after a new FileSystem instance is constructed.
   * @param name a uri whose authority section names the host, port, etc.
  /**
   * Initialize a FileSystem.
   *
   * Called after the new FileSystem instance is constructed, and before it
   * is ready for use.
   *
   * FileSystem implementations overriding this method MUST forward it to
   * their superclass, though the order in which it is done, and whether
   * to alter the configuration before the invocation are options of the
   * subclass.
   * @param name a URI whose authority section names the host, port, etc.
    *   for this FileSystem
    * @param conf the configuration
   * @throws IOException on any failure to initialize this instance.
   * @throws IllegalArgumentException if the URI is considered invalid.
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name>URI</name> <name>name</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>final</name> <name>String</name> <name>scheme</name></expr></block></expr></argument></throws></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">226</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name>URI</name> <name>name</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     }</block>
     <name>statistics</name> <operator>=</operator> <call><name>getStatistics</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><name>resolveSymlinks</name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(
        <argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY</name></name></expr></argument>,
        <argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY</name></name></expr><operator>,</operator>
        <expr><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_DEFAULT</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
   }
 
   <comment type="block" format="javadoc">/**
   * Return the protocol scheme for the FileSystem.
   * &lt;p/&gt;
   * Return the protocol scheme for this FileSystem.
   * &lt;p&gt;
    * This implementation throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.
    *
   * @return the protocol scheme for the FileSystem.
   * @return the protocol scheme for this FileSystem.
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default).
    */</comment>
   public <function><type><name>String</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not implemented by the "</literal> <operator>+</operator> <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" FileSystem implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not implemented by the "</literal>
        <operator>+</operator> <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" FileSystem implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Returns a URI whose scheme and authority identify this FileSystem.*/</comment>
  <comment type="block" format="javadoc">/**
   * Returns a URI which identifies this FileSystem.
   *
   * @return the URI of this filesystem.
   */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>URI</name></type> <name>getUri</name><parameter_list>()</parameter_list>;</function_decl>
  

   <comment type="block" format="javadoc">/**
    * Return a canonicalized form of this FileSystem's URI.
   * 
   *
    * The default implementation simply calls {@link #canonicalizeUri(URI)}
    * on the filesystem's own URI, so subclasses typically only need to
    * implement that method.
@@ -256,16 +317,17 @@ public String getScheme() {
   protected URI getCanonicalUri() {
     return canonicalizeUri(getUri());
   }
  

   /**
    * Canonicalize the given URI.
   * 
   * This is filesystem-dependent, but may for example consist of
   *
   * This is implementation-dependent, and may for example consist of
    * canonicalizing the hostname using DNS and adding the default
    * port if not specified.
   * 
   *
    * The default implementation simply fills in the default port if
   * not specified and if the filesystem has a default port.
   * not specified and if {@link #getDefaultPort()} returns a
   * default port.
    *
    * @return URI
    * @see NetUtils#getCanonicalUri(URI, int)
@@ -283,12 +345,12 @@ protected URI canonicalizeUri(URI uri) {
             uri);
       }
     }
    

     return uri;
   }
  

   /**
   * Get the default port for this file system.
   * Get the default port for this FileSystem.
    * @return the default port or 0 if there isn't one
    */</comment>
   <function><type><specifier>protected</specifier> <name>int</name></type> <name>getDefaultPort</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">301</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">363</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>protected</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>getFSofPath</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>absOrFqPath</name></expr></argument>,
     <argument><expr><call><name><name>absOrFqPath</name><operator>.</operator><name>checkNotSchemeWithRelative</name></name><argument_list>()</argument_list></call></expr></argument>;
     <argument><expr><call><name><name>absOrFqPath</name><operator>.</operator><name>checkNotRelative</name></name><argument_list>()</argument_list></call></expr></argument>;
 
    <comment type="line">// Uses the default file system if not fully qualified</comment>
    <comment type="line">// Uses the default FileSystem if not fully qualified</comment>
     return <argument><expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>absOrFqPath</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Get a canonical service name for this file system.  The token cache is
   * the only user of the canonical service name, and uses it to lookup this
   * filesystem's service tokens.
   * If file system provides a token of its own then it must have a canonical
   * name, otherwise canonical name can be null.
   * 
   * Default Impl: If the file system has child file systems 
   * (such as an embedded file system) then it is assumed that the fs has no
   * Get a canonical service name for this FileSystem.
   * The token cache is the only user of the canonical service name,
   * and uses it to lookup this FileSystem's service tokens.
   * If the file system provides a token of its own then it must have a
   * canonical name, otherwise the canonical name can be null.
   *
   * Default implementation: If the FileSystem has child file systems
   * (such as an embedded file system) then it is assumed that the FS has no
    * tokens of its own and hence returns a null name; otherwise a service
    * name is built using Uri and port.
   * 
   *
    * @return a service string that uniquely identifies this file system, null
    *         if the filesystem does not implement tokens
   * @see SecurityUtil#buildDTServiceName(URI, int) 
   * @see SecurityUtil#buildDTServiceName(URI, int)
    */</comment>
   <function><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>LimitedPrivate</name></name><argument_list>(<argument><expr><block>{ <expr><literal type="string">"HDFS"</literal></expr>, <argument><expr><literal type="string">"MapReduce"</literal></expr></argument> }</block></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>String</name></type> <name>getCanonicalServiceName</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">328</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">390</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>String</name> <call><name>getCanonicalServiceName</name><argument_list>()</argument_list></call> <block>{
       <operator>:</operator> <expr><literal type="null">null</literal></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/** @deprecated call #getUri() instead.*/</comment>
  <comment type="block" format="javadoc">/** @deprecated call {@link #getUri()} instead.*/</comment>
   @<name>Deprecated</name>
   <specifier>public</specifier> <name>String</name> <call><name>getName</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><call><name>getUri</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** @deprecated call #get(URI,Configuration) instead. */</comment>
  <comment type="block" format="javadoc">/** @deprecated call {@link #get(URI, Configuration)} instead. */</comment>
   <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>getNamed</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>fixName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/** Update old-format filesystem names, for back-compatibility.  This should
    * eventually be replaced with a checkName() method that throws an exception
   * for old-format names. */</comment> 
   <expr_stmt><expr><operator>*</operator></expr></expr_stmt> <for>for old-format names.
   */
   private static String fixName<control>(<init><expr><name>String</name> <name>name</name></expr></init>)</control> <block>{<block_content>
     <comment type="line">// convert old-format name to new-format name</comment>
     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>         <comment type="line">// "local" is now "file:///".</comment>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"\"local\" is a deprecated filesystem name."</literal>
      <call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"\"local\" is a deprecated filesystem name."</literal>
                <operator>+</operator><literal type="string">" Use \"file:///\" instead."</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
       <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"file:///"</literal></expr>;</expr_stmt>
     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>   <comment type="line">// unqualified is "hdfs://"</comment>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal><operator>+</operator><name>name</name><operator>+</operator><literal type="string">"\" is a deprecated filesystem name."</literal>
      <call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal><operator>+</operator><name>name</name><operator>+</operator><literal type="string">"\" is a deprecated filesystem name."</literal>
                <operator>+</operator><literal type="string">" Use \"hdfs://"</literal><operator>+</operator><name>name</name><operator>+</operator><literal type="string">"/\" instead."</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
       <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"hdfs://"</literal><operator>+</operator><name>name</name></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">36</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>String</name> <call><name>fixName</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Get the local file system.
   * @param conf the configuration to configure the file system with
   * Get the local FileSystem.
   * @param conf the configuration to configure the FileSystem with
   * if it is newly instantiated.
    * @return a LocalFileSystem
   * @throws IOException if somehow the local FS cannot be instantiated.
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>LocalFileSystem</name> <call><name>getLocal</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><operator>(</operator><name>LocalFileSystem</name><operator>)</operator><call><name>get</name><argument_list>(<argument><expr><name><name>LocalFileSystem</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></for>
 
  <comment type="block" format="javadoc">/** Returns the FileSystem for this URI's scheme and authority.  The scheme
   * of the URI determines a configuration property name,
   * &lt;tt&gt;fs.&lt;i&gt;scheme&lt;/i&gt;.class&lt;/tt&gt; whose value names the FileSystem class.
   * The entire URI is passed to the FileSystem instance's initialize method.
  /**
   * Get a FileSystem for this URI's scheme and authority.
   * &lt;ol&gt;
   * &lt;li&gt;
   *   If the configuration has the property
   *   {@code "fs.$SCHEME.impl.disable.cache"} set to true,
   *   a new instance will be created, initialized with the supplied URI and
   *   configuration, then returned without being cached.
   * &lt;/li&gt;
   * &lt;li&gt;
   *   If the there is a cached FS instance matching the same URI, it will
   *   be returned.
   * &lt;/li&gt;
   * &lt;li&gt;
   *   Otherwise: a new FS instance will be created, initialized with the
   *   configuration and URI, cached and returned to the caller.
   * &lt;/li&gt;
   * &lt;/ol&gt;
   * @throws IOException if the FileSystem cannot be instantiated.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>URI</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">466</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>get</name><argument_list>(<argument><expr><name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
         <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>defaultUri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>              <comment type="line">// return default</comment>
       </block_content>}</block></function>
     </block_content>}</block></function>
    
     <decl_stmt><decl><type><name>String</name></type> <name>disableCacheName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"fs.%s.impl.disable.cache"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>disableCacheName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Bypassing cache to create filesystem {}"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name>createFileSystem</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">396</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>get</name><argument_list>(<argument><expr><name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Returns the FileSystem for this URI's scheme and authority and the 
   * passed user. Internally invokes {@link #newInstance(URI, Configuration)}
   * Returns the FileSystem for this URI's scheme and authority and the
   * given user. Internally invokes {@link #newInstance(URI, Configuration)}
    * @param uri of the filesystem
    * @param conf the configuration to use
    * @param user to perform the get as
    * @return filesystem instance
   * @throws IOException
   * @throws InterruptedException
   * @throws IOException if the FileSystem cannot be instantiated.
   * @throws InterruptedException If the {@code UGI.doAs()} call was
   *         somehow interrupted.
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>newInstance</name><argument_list>(<argument><expr><name>final</name> <name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>final</name> <name>Configuration</name> <name>conf</name></expr></argument>,
       <argument><expr><name>final</name> <name>String</name> <name>user</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">414</literal></expr></argument>,<argument><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">495</literal></expr></argument>,<argument><expr><literal type="number">56</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name> <call><name>newInstance</name><argument_list>(<argument><expr><name>final</name> <name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>final</name> <name>Configuration</name> <name>conf</name></expr></argument>,
     return <argument><expr><call><name><name>ugi</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>FileSystem</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>FileSystem</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return> 
        <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></function>
     }</block></class></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></throws></expr></expr_stmt>
   }
  <comment type="block" format="javadoc">/** Returns the FileSystem for this URI's scheme and authority.  The scheme
   * of the URI determines a configuration property name,
   * &lt;tt&gt;fs.&lt;i&gt;scheme&lt;/i&gt;.class&lt;/tt&gt; whose value names the FileSystem class.

  /**
   * Returns the FileSystem for this URI's scheme and authority.
    * The entire URI is passed to the FileSystem instance's initialize method.
    * This always returns a new FileSystem object.
   * @param uri FS URI
   * @param config configuration to use
   * @return the new FS instance
   * @throws IOException FS creation or initialization failure.
    */</comment>
  public <function><type><specifier>static</specifier> <name>FileSystem</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>URI</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>URI</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>config</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>authority</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>scheme</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>                       <comment type="line">// no scheme: use default FS</comment>
      <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>authority</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>                       <comment type="line">// no authority</comment>
      <decl_stmt><decl><type><name>URI</name></type> <name>defaultUri</name> <init>= <expr><call><name>getDefaultUri</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>URI</name></type> <name>defaultUri</name> <init>= <expr><call><name>getDefaultUri</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>scheme</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>defaultUri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>    <comment type="line">// if scheme matches default</comment>
           <operator>&amp;&amp;</operator> <call><name><name>defaultUri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// &amp; default has authority</comment>
        <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>defaultUri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>              <comment type="line">// return default</comment>
        <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><name>defaultUri</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</return>              <comment type="line">// return default</comment>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>CACHE</name><operator>.</operator><name>getUnique</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>CACHE</name><operator>.</operator><name>getUnique</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Returns a unique configured filesystem implementation.
  /**
   * Returns a unique configured FileSystem implementation for the default
   * filesystem of the supplied configuration.
    * This always returns a new FileSystem object.
    * @param conf the configuration to use
   * @return the new FS instance
   * @throws IOException FS creation or initialization failure.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileSystem</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><call><name>getDefaultUri</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Get a unique local file system object
   * @param conf the configuration to configure the file system with
   * @return a LocalFileSystem
   * This always returns a new FileSystem object.
   * Get a unique local FileSystem object.
   * @param conf the configuration to configure the FileSystem with
   * @return a new LocalFileSystem object.
   * @throws IOException FS creation or initialization failure.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LocalFileSystem</name></type> <name>newInstanceLocal</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">462</literal></expr><operator>,</operator><expr><literal type="number">65</literal> <operator>+</operator><literal type="number">552</literal></expr><operator>,</operator><expr><literal type="number">70</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>LocalFileSystem</name> <call><name>newInstanceLocal</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Close all cached filesystems. Be sure those filesystems are not
   * used anymore.
   * 
   * @throws IOException
   * Close all cached FileSystem instances. After this operation, they
   * may not be used in any operations.
   *
   * @throws IOException a problem arose closing one or more filesystem.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>closeAll</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>CACHE</name><operator>.</operator><name>closeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Close all cached filesystems for a given UGI. Be sure those filesystems 
   * are not used anymore.
   * Close all cached FileSystem instances for a given UGI.
   * Be sure those filesystems are not used anymore.
    * @param ugi user group info to close
   * @throws IOException
   * @throws IOException a problem arose closing one or more filesystem.
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>closeAllForUGI</name><argument_list>(<argument><expr><name>UserGroupInformation</name> <name>ugi</name></expr></argument>)</argument_list> 
  public static <name>void</name> <name>closeAllForUGI</name><argument_list>(<argument><expr><name>UserGroupInformation</name> <name>ugi</name></expr></argument>)</argument_list>
   <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>CACHE</name><operator>.</operator><name>closeAll</name></name><argument_list>(<argument><expr><name>ugi</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** 
   * Make sure that a path specifies a FileSystem.
   * @param path to use
  /**
   * Qualify a path to one which uses this FileSystem and, if relative,
   * made absolute.
   * @param path to qualify.
   * @return this path if it contains a scheme and authority and is absolute, or
   * a new path that includes a path and authority and is fully qualified
   * @see Path#makeQualified(URI, Path)
   * @throws IllegalArgumentException if the path has a schema/URI different
   * from this FileSystem.
    */</comment>
   <function><type><specifier>public</specifier> <name>Path</name></type> <name>makeQualified</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>checkPath</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>path</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
    

   <comment type="block" format="javadoc">/**
   * Get a new delegation token for this file system.
   * Get a new delegation token for this FileSystem.
    * This is an internal method that should have been declared protected
    * but wasn't historically.
    * Callers should use {@link #addDelegationTokens(String, Credentials)}
   * 
   *
    * @param renewer the account name that is allowed to renew the token.
   * @return a new delegation token
   * @throws IOException
   * @return a new delegation token or null if the FS does not support tokens.
   * @throws IOException on any problem obtaining a token
    */</comment>
   <function><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>Private</name></name><argument_list>()</argument_list></annotation>
   <type><specifier>public</specifier> <name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>renewer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Obtain all delegation tokens used by this FileSystem that are not
   * already present in the given Credentials.  Existing tokens will neither
   * already present in the given Credentials. Existing tokens will neither
    * be verified as valid nor having the given renewer.  Missing tokens will
    * be acquired and added to the given Credentials.
   * 
   * Default Impl: works for simple fs with its own token
   * and also for an embedded fs whose tokens are those of its
   * children file system (i.e. the embedded fs has not tokens of its
   * own).
   * 
   *
   * Default Impl: works for simple FS with its own token
   * and also for an embedded FS whose tokens are those of its
   * child FileSystems (i.e. the embedded FS has no tokens of its own).
   *
    * @param renewer the user allowed to renew the delegation tokens
    * @param credentials cache in which to add new delegation tokens
    * @return list of new delegation tokens
   * @throws IOException
   * @throws IOException problems obtaining a token
    */</comment>
   <decl_stmt><decl><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>LimitedPrivate</name></name><argument_list>(<argument><expr><block>{ <expr><literal type="string">"HDFS"</literal></expr>, <argument><expr><literal type="string">"MapReduce"</literal></expr></argument> }</block></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>addDelegationTokens</name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">528</literal></expr></argument>,<argument><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">623</literal></expr></argument>,<argument><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>Path</name> <call><name>makeQualified</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name>credentials</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>credentials</name> <operator>=</operator> <operator>new</operator> <call><name>Credentials</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
    final List&lt;Token&lt;?&gt;&gt; tokens = new ArrayList&lt;Token&lt;?&gt;&gt;(</block></if></if_stmt>)</block></expr></argument>;
    <argument><expr><name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>tokens</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>;
     <argument><expr><call><name>collectDelegationTokens</name><argument_list>(<argument><expr><name>renewer</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>;
     return <argument><expr><call><name><name>tokens</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[<expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></decl></decl_stmt>
   }
  

   <comment type="block" format="javadoc">/**
   * Recursively obtain the tokens for this FileSystem and all descended
   * FileSystems as determined by getChildFileSystems().
   * Recursively obtain the tokens for this FileSystem and all descendant
   * FileSystems as determined by {@link #getChildFileSystems()}.
    * @param renewer the user allowed to renew the delegation tokens
    * @param credentials cache in which to add the new delegation tokens
    * @param tokens list in which to add acquired tokens
   * @throws IOException
   * @throws IOException problems obtaining a token
    */</comment>
   private <decl_stmt><decl><type><name>void</name></type> <name>collectDelegationTokens</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>renewer</name></expr></argument>,
                                        <argument><expr><name>final</name> <name>Credentials</name> <name>credentials</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">570</literal></expr></argument>,<argument><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">665</literal></expr></argument>,<argument><expr><literal type="number">34</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>collectDelegationTokens</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>renewer</name></expr></argument>,
   <comment type="block" format="javadoc">/**
    * Get all the immediate child FileSystems embedded in this FileSystem.
    * It does not recurse and get grand children.  If a FileSystem
   * has multiple child FileSystems, then it should return a unique list
   * has multiple child FileSystems, then it must return a unique list
    * of those FileSystems.  Default is to return null to signify no children.
   * 
   * @return FileSystems used by this FileSystem
   *
   * @return FileSystems that are direct children of this FileSystem,
   *         or null for "no children"
    */</comment>
   <argument><expr><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>LimitedPrivate</name></name><argument_list>(<argument><expr><block>{ <expr><literal type="string">"HDFS"</literal></expr> }</block></expr></argument>)</argument_list></annotation>
   @<name>VisibleForTesting</name>
   <specifier>public</specifier> <name><name>FileSystem</name><index>[]</index></name> <call><name>getChildFileSystems</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   }</block></expr></argument></argument_list></call></expr></argument></argument_list></decl></decl_stmt>
  
  <comment type="block" format="javadoc">/** create a file with the provided permission

  /**
   * Create a file with the provided permission.
   *
    * The permission of the file is set to be the provided permission as in
    * setPermission, not permission&amp;~umask
   * 
   * It is implemented using two RPCs. It is understood that it is inefficient,
   *
   * The HDFS implementation is implemented using two RPCs.
   * It is understood that it is inefficient,
    * but the implementation is thread-safe. The other option is to change the
    * value of umask in configuration to be 0, but it is not thread-safe.
   * 
   * @param fs file system handle
   *
   * @param fs FileSystem
    * @param file the name of the file to be created
    * @param permission the permission of the file
    * @return an output stream
   * @throws IOException
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>FileSystem</name></type> <name>fs</name></decl></parameter>,
       <parameter><decl><type><name>Path</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">604</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">703</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>FileSystem</name> <name>fs</name></expr></argument>,
     return <argument><expr><name>out</name></expr></argument>;</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** create a directory with the provided permission
  /**
   * Create a directory with the provided permission.
    * The permission of the directory is set to be the provided permission as in
    * setPermission, not permission&amp;~umask
   * 
   *
    * @see #create(FileSystem, Path, FsPermission)
   * 
   * @param fs file system handle
   *
   * @param fs FileSystem handle
    * @param dir the name of the directory to be created
    * @param permission the permission of the directory
    * @return true if the directory creation succeeds; false otherwise
   * @throws IOException
   * @throws IOException A problem creating the directories.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>mkdirs</name><parameter_list>(<parameter><decl><type><name>FileSystem</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>permission</name></decl></parameter>)</parameter_list>
  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// create the directory using the default permission</comment>
     <expr><name>boolean</name> <name>result</name> <operator>=</operator> <call><name><name>fs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt>
     <comment type="line">// set its permission to be the supplied one</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">633</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">733</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>protected</specifier> <call><name>FileSystem</name><argument_list>()</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/** 
  /**
    * Check that a Path belongs to this FileSystem.
   *
   * The base implementation performs case insensitive equality checks
   * of the URIs' schemes and authorities. Subclasses may implement slightly
   * different checks.
    * @param path to check
   * @throws IllegalArgumentException if the path is not considered to be
   * part of this FileSystem.
   *
    */</comment>
   <specifier>protected</specifier> <name>void</name> <call><name>checkPath</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>URI</name> <name>uri</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">667</literal></expr>,<expr><literal type="number">25</literal> <operator>+</operator><literal type="number">774</literal></expr>,<expr><literal type="number">37</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>checkPath</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
           <return>return;</return></block></expr>
       }</block></expr></expr_stmt>
     </block_content>}</block></function>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Wrong FS: "</literal><operator>+</operator><name>path</name><operator>+</operator>
                                       <literal type="string">", expected: "</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Wrong FS: "</literal> <operator>+</operator> <name>path</name> <operator>+</operator>
                                       <literal type="string">", expected: "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
   }
 
   <comment type="block" format="javadoc">/**
   * Return an array containing hostnames, offset and size of 
   * portions of the given file.  For a nonexistent 
   * file or regions, null will be returned.
   * Return an array containing hostnames, offset and size of
   * portions of the given file.  For nonexistent
   * file or regions, {@code null} is returned.
    *
   * This call is most helpful with DFS, where it returns 
   * hostnames of machines that contain the given file.
   * &lt;pre&gt;
   *   if f == null :
   *     result = null
   *   elif f.getLen() &lt;= start:
   *     result = []
   *   else result = [ locations(FS, b) for b in blocks(FS, p, s, s+l)]
   * &lt;/pre&gt;
   * This call is most helpful with and distributed filesystem
   * where the hostnames of machines that contain blocks of the given file
   * can be determined.
    *
   * The FileSystem will simply return an elt containing 'localhost'.
   * The default implementation returns an array containing one element:
   * &lt;pre&gt;
   * BlockLocation( { "localhost:50010" },  { "localhost" }, 0, file.getLen())
   * &lt;/pre&gt;&gt;
    *
    * @param file FilesStatus to get data from
    * @param start offset into the given file
    * @param len length for which to get locations for
   * @throws IOException IO failure
    */</comment>
  public <decl_stmt><decl><type><name><name>BlockLocation</name><index>[]</index></name></type> <name>getFileBlockLocations</name><argument_list>(<argument><expr><name>FileStatus</name> <name>file</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name> <call><name>getFileBlockLocations</name><argument_list>(<argument><expr><name>FileStatus</name> <name>file</name></expr></argument>,
       <argument><expr><name>long</name> <name>start</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">704</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">823</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>checkPath</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><operator>new</operator> <name><name>BlockLocation</name><index>[]</index></name> <block>{
       <expr><operator>new</operator> <call><name>BlockLocation</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getLen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr>;</return>
   }</block></expr></expr_stmt>
 
 
   <comment type="block" format="javadoc">/**
   * Return an array containing hostnames, offset and size of 
   * portions of the given file.  For a nonexistent 
   * file or regions, null will be returned.
   * Return an array containing hostnames, offset and size of
   * portions of the given file.  For a nonexistent
   * file or regions, {@code null} is returned.
    *
   * This call is most helpful with DFS, where it returns 
   * hostnames of machines that contain the given file.
   * This call is most helpful with location-aware distributed
   * filesystems, where it returns hostnames of machines that
   * contain the given file.
    *
   * The FileSystem will simply return an elt containing 'localhost'.
   * A FileSystem will normally return the equivalent result
   * of passing the {@code FileStatus} of the path to
   * {@link #getFileBlockLocations(FileStatus, long, long)}
    *
    * @param p path is used to identify an FS since an FS could have
    *          another FS that it could be delegating the call to
    * @param start offset into the given file
    * @param len length for which to get locations for
   * @throws FileNotFoundException when the path does not exist
   * @throws IOException IO failure
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name></type> <name>getFileBlockLocations</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name><name>BlockLocation</name><index>[]</index></name> <call><name>getFileBlockLocations</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>,
       <argument><expr><name>long</name> <name>start</name></expr></argument>, <argument><expr><name>long</name> <name>len</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></decl></decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">729</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">852</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>checkPath</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>FileStatus</name> <name>file</name> <operator>=</operator> <call><name>getFileStatus</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <return>return <expr><call><name>getFileBlockLocations</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
  

   <comment type="block" format="javadoc">/**
   * Return a set of server default configuration values
   * Return a set of server default configuration values.
    * @return server default configuration values
   * @throws IOException
   * @throws IOException IO failure
    * @deprecated use {@link #getServerDefaults(Path)} instead
    */</comment>
   <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <name>FsServerDefaults</name></type> <name>getServerDefaults</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// CRC32 is chosen as default as it is available in all </comment>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>config</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// CRC32 is chosen as default as it is available in all</comment>
     <comment type="line">// releases that support checksum.</comment>
     <comment type="line">// The client trash configuration is ignored.</comment>
    <return>return <expr><operator>new</operator> <call><name>FsServerDefaults</name><argument_list>(<argument><expr><call><name>getDefaultBlockSize</name><argument_list>()</argument_list></call></expr></argument>, 
        <argument><expr><call><name><name>conf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"io.bytes.per.checksum"</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>, 
        <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, 
    return <argument><expr><operator>new</operator> <call><name>FsServerDefaults</name><argument_list>(<argument><expr><call><name>getDefaultBlockSize</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>config</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"io.bytes.per.checksum"</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
         <argument><expr><call><name>getDefaultReplication</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>conf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>, <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>config</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>, <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="boolean">false</literal></expr></argument>,
         <argument><expr><name>FS_TRASH_INTERVAL_DEFAULT</name></expr></argument>,
         <argument><expr><name><name>DataChecksum</name><operator>.</operator><name>Type</name><operator>.</operator><name>CRC32</name></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Return a set of server default configuration values
   * Return a set of server default configuration values.
    * @param p path is used to identify an FS since an FS could have
    *          another FS that it could be delegating the call to
    * @return server default configuration values
   * @throws IOException
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>FsServerDefaults</name></type> <name>getServerDefaults</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>getServerDefaults</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Return the fully-qualified path of path f resolving the path
   * through any symlinks or mount point
   * Return the fully-qualified path of path, resolving the path
   * through any symlinks or mount point.
    * @param p path to be resolved
   * @return fully qualified path 
   * @throws FileNotFoundException
   * @return fully qualified path
   * @throws FileNotFoundException if the path is not present
   * @throws IOException for any other error
    */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>resolvePath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name>checkPath</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">779</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">903</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>Path</name> <call><name>resolvePath</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>p</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>Opens</name> <name>an</name> <name>FSDataInputStream</name> <name>at</name> <name>the</name> <name>indicated</name> <name><name>Path</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument><expr><annotation>@<name>param</name></annotation> <name>f</name> <name>the</name> <name>file</name> <name>name</name> <name>to</name> <name>open</name>
    <operator>*</operator> @<name>param</name> <name>bufferSize</name> <name>the</name> <name>size</name> <name>of</name> <name>the</name> <name>buffer</name> <name>to</name> <name>be</name> <name><name>used</name><operator>.</operator></name>
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>abstract</specifier> <name>FSDataInputStream</name> <call><name>open</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>)</argument_list></call></expr></argument></throws>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></expr>;</expr_stmt>
    

   <comment type="block" format="javadoc">/**
    * Opens an FSDataInputStream at the indicated Path.
    * @param f the file to open
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>FSDataInputStream</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">796</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">922</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>FSDataInputStream</name> <call><name>open</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>Create</name> <name>an</name> <name>FSDataOutputStream</name> <name>at</name> <name>the</name> <name>indicated</name> <name><name>Path</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument><expr><name>Files</name> <name>are</name> <name>overwritten</name> <name>by</name> default<operator>.</operator>
    <operator>*</operator> @<name>param</name> <name>f</name> <name>the</name> <name>file</name> <name>to</name> <name>create</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></throws></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></return>
     <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">806</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">933</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <annotation>@<name>param</name></annotation> <name>f</name> <name>the</name> <name>file</name> <name>to</name> <name>create</name>
    <operator>*</operator> <annotation>@<name>param</name></annotation> <name>overwrite</name></expr></block></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if a file with this name already exists<operator>,</operator> <macro><name>then</name></macro> <if_stmt><if>if true<operator>,</operator>
    <expr_stmt><expr><operator>*</operator>   <name>the</name> <name>file</name> <name>will</name> <name>be</name> <name>overwritten</name></expr><operator>,</operator> <expr><name>and</name></expr></expr_stmt></if></if_stmt></if></if_stmt> <if_stmt><if>if false an exception will be thrown.
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>)</argument_list></call></expr></argument></throws>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
    return create<condition>(<expr><name>f</name></expr><operator>,</operator> <expr><name>overwrite</name></expr><operator>,</operator></condition></if></if_stmt> 
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>,
                   <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
                       <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getDefaultReplication</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">822</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">950</literal></expr></argument>,<argument><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>Files</name> <name>are</name> <name>overwritten</name> <name>by</name> default<operator>.</operator>
    <operator>*</operator> @<name>param</name> <name>f</name> <name>the</name> <name>file</name> <name>to</name> <name>create</name>
    <operator>*</operator> @<name>param</name> <name>progress</name> <name>to</name> <name>report</name> <name>progress</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call> 
  <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call></expr></argument></throws>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></return>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                   <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
                       <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getDefaultReplication</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">837</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">966</literal></expr></argument>,<argument><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>Files</name> <name>are</name> <name>overwritten</name> <name>by</name> default<operator>.</operator>
    <operator>*</operator> @<name>param</name> <name>f</name> <name>the</name> <name>file</name> <name>to</name> <name>create</name>
    <operator>*</operator> @<name>param</name> <name>replication</name> <name>the</name> <name>replication</name> <name>factor</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>)</argument_list></call></expr></argument></throws>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></return>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                   <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
                       <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>replication</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">854</literal></expr></argument>,<argument><expr><literal type="number">65</literal> <operator>+</operator><literal type="number">984</literal></expr></argument>,<argument><expr><literal type="number">70</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>)</argument_list></call>
    <operator>*</operator> @<name>param</name> <name>f</name> <name>the</name> <name>file</name> <name>to</name> <name>create</name>
    <operator>*</operator> @<name>param</name> <name>replication</name> <name>the</name> <name>replication</name> <name>factor</name>
    <operator>*</operator> @<name>param</name> <name>progress</name> <name>to</name> <name>report</name> <name>progress</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>,
       <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call></expr></argument></argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></return>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                   <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
                       <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>replication</name></expr></argument>, <argument><expr><call><name>getDefaultBlockSize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>
   </block_content>}</block></function>
 
    

   <comment type="block" format="javadoc">/**
    * Create an FSDataOutputStream at the indicated Path.
   * @param f the file name to create
   * @param overwrite if a file with this name already exists, then if true,
   * @param f the file to create
   * @param overwrite if a path with this name already exists, then if true,
    *   the file will be overwritten, and if false an error will be thrown.
    * @param bufferSize the size of the buffer to be used.
   * @throws IOException IO failure
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
                                    <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>,
                                    <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>
                                    )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></decl></decl_stmt>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>,
                   <argument><expr><call><name>getDefaultReplication</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getDefaultBlockSize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>
   </block_content>}</block></function>
    

   <comment type="block" format="javadoc">/**
   * Create an FSDataOutputStream at the indicated Path with write-progress
   * reporting.
   * Create an {@link FSDataOutputStream} at the indicated Path
   * with write-progress reporting.
   *
   * The frequency of callbacks is implementation-specific; it may be "none".
    * @param f the path of the file to open
    * @param overwrite if a file with this name already exists, then if true,
    *   the file will be overwritten, and if false an error will be thrown.
    * @param bufferSize the size of the buffer to be used.
   * @throws IOException IO failure
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
                                    <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>,
                                    <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>,
                                    <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>
                                    )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></decl></decl_stmt>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>,
                   <argument><expr><call><name>getDefaultReplication</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getDefaultBlockSize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></return>
   </block_content>}</block></if></if_stmt></argument_list></decl></decl_stmt>
    
    


   <comment type="block" format="javadoc">/**
    * Create an FSDataOutputStream at the indicated Path.
    * @param f the file name to open
    * @param overwrite if a file with this name already exists, then if true,
    *   the file will be overwritten, and if false an error will be thrown.
    * @param bufferSize the size of the buffer to be used.
   * @param replication required block replication for the file. 
   * @param replication required block replication for the file.
   * @throws IOException IO failure
    */</comment>
  <function><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, 
                                   <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
                                   <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>,
                                   <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>
                                   )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>,
      <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>,
      <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
      <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">923</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1058</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
    <argument><expr><operator>*</operator> @<name>param</name> <name>overwrite</name></expr></argument> <if_stmt><if>if a file with this name already exists<operator>,</operator> <macro><name>then</name></macro> <if_stmt><if>if true<operator>,</operator>
    <expr_stmt><expr><operator>*</operator>   <name>the</name> <name>file</name> <name>will</name> <name>be</name> <name>overwritten</name></expr><operator>,</operator> <expr><name>and</name></expr></expr_stmt></if></if_stmt></if></if_stmt></argument_list></call></expr></expr_stmt> <if_stmt><if>if false an error will be thrown.
    * @param bufferSize the size of the buffer to be used.
   * @param replication required block replication for the file. 
   * @param replication required block replication for the file.
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
                                             <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>,
<argument/></argument_list></call></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">948</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1084</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
    <argument><expr><operator>*</operator> @<name>param</name> <name>replication</name> <name>required</name> <name>block</name> <name>replication</name></expr></argument></argument_list></call></expr></argument></throws></if></if_stmt> <for>for the file.
    * @param blockSize block size
    * @param progress the progress reporter
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator> <annotation>@<name>see</name></annotation> <operator>#</operator><call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>FsPermission</name></expr></argument>)</argument_list></call>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>abstract</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
<argument/></argument_list></call></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">958</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1094</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
       <argument><expr><name>short</name> <name>replication</name></expr></argument>,
       <argument><expr><name>long</name> <name>blockSize</name></expr></argument>,
       <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></throws><empty_stmt>;</empty_stmt></for>
  

   <comment type="block" format="javadoc">/**
    * Create an FSDataOutputStream at the indicated Path with write-progress
    * reporting.
@@ -969,7 +1105,7 @@ public abstract FSDataOutputStream create(Path f,
    * @param replication required block replication for the file.
    * @param blockSize block size
    * @param progress the progress reporter
   * @throws IOException
   * @throws IOException IO failure
    * @see #setPermission(Path, FsPermission)
    */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">982</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1118</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
     return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>,
         <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></decl></decl_stmt>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Create an FSDataOutputStream at the indicated Path with a custom
   * checksum option
   * checksum option.
    * @param f the file name to open
    * @param permission file permission
    * @param flags {@link CreateFlag}s to use for this stream.
@@ -995,7 +1131,7 @@ public FSDataOutputStream create(Path f,
    * @param progress the progress reporter
    * @param checksumOpt checksum parameter. If null, the values
    *        found in conf will be used.
   * @throws IOException
   * @throws IOException IO failure
    * @see #setPermission(Path, FsPermission)
    */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">1009</literal></expr></argument>,<argument><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">1145</literal></expr></argument>,<argument><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>create</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
     <comment type="line">// Checksum options are ignored by default. The file systems that</comment>
     <comment type="line">// implement checksum need to override this method. The full</comment>
     <comment type="line">// support is currently only available in DFS.</comment>
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr></argument>, 
    return <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>, <argument><expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></decl></decl_stmt>
   }
 
  <comment type="block">/*.
  /**
    * This create has been added to support the FileContext that processes
   * the permission
   * with umask before calling this method.
   * the permission with umask before calling this method.
    * This a temporary method added to support the transition from FileSystem
    * to FileContext for user applications.
   * @throws IOException IO failure
    */</comment>
   @<function><type><name>Deprecated</name>
   <specifier>protected</specifier> <name>FSDataOutputStream</name></type> <name>primitiveCreate</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>,
     <parameter><decl><type><name>FsPermission</name></type> <name>absolutePermission</name></decl></parameter>, <parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
     <parameter><decl><type><name>short</name></type> <name>replication</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSize</name></decl></parameter>, <parameter><decl><type><name>Progressable</name></type> <name>progress</name></decl></parameter>,
     <parameter><decl><type><name>ChecksumOpt</name></type> <name>checksumOpt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>absolutePermission</name></decl>,
      <decl><type ref="prev"/><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>CreateFlag</name></argument>&gt;</argument_list></name> <name>flag</name></decl>,
      <decl><type ref="prev"/><name>int</name> <name>bufferSize</name></decl>,
      <decl><type ref="prev"/><name>short</name> <name>replication</name></decl>,
      <decl><type ref="prev"/><name>long</name> <name>blockSize</name></decl>,
      <decl><type ref="prev"/><name>Progressable</name> <name>progress</name></decl>,
      <decl><type ref="prev"/><name>ChecksumOpt</name> <name>checksumOpt</name></decl>) <throws>throws <argument><expr><name>IOException</name> <block>{
 
     <expr><name>boolean</name> <name>pathExists</name> <operator>=</operator> <call><name>exists</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>;</decl_stmt>
     <expr_stmt><expr><call><name><name>CreateFlag</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pathExists</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// Default impl  assumes that permissions do not matter and </comment>

    <comment type="line">// Default impl  assumes that permissions do not matter and</comment>
     <comment type="line">// nor does the bytesPerChecksum  hence</comment>
     <comment type="line">// calling the regular create is good enough.</comment>
     <comment type="line">// FSs that implement permissions should override this.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1037</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">1177</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>protected</specifier> <name>FSDataOutputStream</name> <call><name>primitiveCreate</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
     if <argument><expr><operator>(</operator><name>pathExists</name> <operator>&amp;&amp;</operator> <call><name><name>flag</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>APPEND</name></name></expr></argument>)</argument_list></call><operator>)</operator> <block>{
       <return>return <expr><call><name>append</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></argument></argument_list></call></expr></expr_stmt>
    

     <return>return <expr><call><name><name>this</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>absolutePermission</name></expr></argument>,
         <argument><expr><call><name><name>flag</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>CreateFlag</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>,
         <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * This version of the mkdirs method assumes that the permission is absolute.
    * It has been added to support the FileContext that processes the permission
    * with umask before calling this method.
    * This a temporary method added to support the transition from FileSystem
    * to FileContext for user applications.
   * @param f path
   * @param absolutePermission permissions
   * @return true if the directory was actually created.
   * @throws IOException IO failure
   * @see #mkdirs(Path, FsPermission)
    */</comment>
   <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>protected</specifier> <name>boolean</name></type> <name>primitiveMkdir</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>FsPermission</name></type> <name>absolutePermission</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Default impl is to assume that permissions do not matter and hence</comment>
    <comment type="line">// calling the regular mkdirs is good enough.</comment>
    <comment type="line">// FSs that implement permissions should override this.</comment>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>absolutePermission</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1068</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1210</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>protected</specifier> <name>boolean</name> <call><name>primitiveMkdir</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>absolutePermission</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>to</name> <name>FileContext</name></expr></expr_stmt> <for>for user applications.
    */
   @Deprecated
  protected void primitiveMkdir<control>(<init><decl><type><name>Path</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>FsPermission</name> <name>absolutePermission</name></decl>, 
  protected <decl><type ref="prev"/><name>void</name> <name>primitiveMkdir</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>absolutePermission</name></expr></argument>,
                     <argument><expr><name>boolean</name> <name>createParent</name></expr></argument>)</argument_list>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
    

     if <argument_list>(<argument><expr><operator>!</operator><name>createParent</name></expr></argument>)</argument_list> <block>{<block_content> <comment type="line">// parent must exist.</comment>
       <comment type="line">// since the this.mkdirs makes parent dirs automatically</comment>
       <comment type="line">// we must throw exception if parent does not exist.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1103</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>primitiveMkdir</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>absolutePermission</name></expr></argument>,
    <argument><expr><operator>*</operator> @<name>param</name> <name>replication</name> <name>required</name> <name>block</name> <name>replication</name></expr></argument> <for>for the file.
    * @param blockSize block size
    * @param progress the progress reporter
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator> <annotation>@<name>see</name></annotation> <operator>#</operator><call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>FsPermission</name></expr></argument>)</argument_list></call>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
<argument/></argument_list></call></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">1126</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1268</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>,
    <argument><expr><operator>*</operator> @<name>param</name> <name>replication</name> <name>required</name> <name>block</name> <name>replication</name></expr></argument> <for>for the file.
    * @param blockSize block size
    * @param progress the progress reporter
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator> <annotation>@<name>see</name></annotation> <operator>#</operator><call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>FsPermission</name></expr></argument>)</argument_list></call>
    <operator>*</operator><operator>/</operator>
    <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
<argument/></argument_list></call></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">1149</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1291</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
     <argument><expr><operator>*</operator> @<name>param</name> <name>replication</name> <name>required</name> <name>block</name> <name>replication</name></expr></argument> <for>for the file.
     * @param blockSize block size
     * @param progress the progress reporter
    * @<throws>throws <argument><expr><name>IOException</name>
    <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
     <operator>*</operator> <annotation>@<name>see</name></annotation> <operator>#</operator><call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>FsPermission</name></expr></argument>)</argument_list></call>
     <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
<argument/></argument_list></call></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">1162</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1304</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>createNonRecursive</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>,
   <comment type="block" format="javadoc">/**
    * Creates the given Path as a brand-new zero-length file.  If
    * create fails, or if it already existed, return false.
   *
   * &lt;i&gt;Important: the default implementation is not atomic&lt;/i&gt;
    * @param f path to use for create
   * @throws IOException IO failure
    */</comment>
   <argument><expr><specifier>public</specifier> <name>boolean</name> <call><name>createNewFile</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <if_stmt><if>if <condition>(<expr><call><name>exists</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1177</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">1320</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>createNewFile</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Append to an existing file (optional operation).
   * Same as append(f, getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,
   *     IO_FILE_BUFFER_SIZE_DEFAULT), null)
   * Same as
   * {@code append(f, getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,
   *     IO_FILE_BUFFER_SIZE_DEFAULT), null)}
    * @param f the existing file to be appended.
   * @throws IOException
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default).
    */</comment>
   <expr><specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>append</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name>append</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>IO_FILE_BUFFER_SIZE_KEY</name></expr></argument>,
         <argument><expr><name>IO_FILE_BUFFER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt></argument_list></call></expr></argument></throws></throws></for></argument_list></call></expr></argument></throws></throws></for></argument_list></call></expr></argument></throws></throws></for></argument_list></call></expr></expr_stmt>

   <comment type="block" format="javadoc">/**
    * Append to an existing file (optional operation).
    * Same as append(f, bufferSize, null).
    * @param f the existing file to be appended.
    * @param bufferSize the size of the buffer to be used.
   * @throws IOException
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default).
    */</comment>
   <function><type><specifier>public</specifier> <name>FSDataOutputStream</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>append</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1202</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1351</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>FSDataOutputStream</name> <call><name>append</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <annotation>@<name>param</name></annotation> <name>f</name> <name>the</name> <name>existing</name> <name>file</name> <name>to</name> <name>be</name> <name><name>appended</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument><expr><annotation>@<name>param</name></annotation> <name>bufferSize</name> <name>the</name> <name>size</name> <name>of</name> <name>the</name> <name>buffer</name> <name>to</name> <name>be</name> <name><name>used</name><operator>.</operator></name>
    * @<name>param</name> <name>progress</name></expr></argument></throws></expr></expr_stmt> <for>for reporting progress if it is not null.
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default<operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>abstract</specifier> <name>FSDataOutputStream</name> <call><name>append</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>,
       <argument><expr><name>Progressable</name> <name>progress</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></throws><empty_stmt>;</empty_stmt></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1211</literal></expr><operator>,</operator><expr><literal type="number">34</literal> <operator>+</operator><literal type="number">1362</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>FSDataOutputStream</name> <call><name>append</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>bufferSize</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Concat</name> <name>existing</name> <name>files</name> <name><name>together</name><operator>.</operator></name>
    * @<name>param</name> <name>trg</name> <name>the</name> <name>path</name> <name>to</name> <name>the</name> <name>target</name> <name><name>destination</name><operator>.</operator></name>
    * @<name>param</name> <name>psrcs</name> <name>the</name> <name>paths</name> <name>to</name> <name>the</name> <name>sources</name> <name>to</name> <name>use</name></expr></argument> <for>for the concatenation.
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default<operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>concat</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>trg</name></expr></argument>, <argument><expr><name>final</name> <name><name>Path</name> <index>[]</index></name> <name>psrcs</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not implemented by the "</literal> <operator>+</operator> 
    <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not implemented by the "</literal> <operator>+</operator>
         <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" FileSystem implementation"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr></argument>;</argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></throws></for></argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * Get replication.
   * 
   * @deprecated Use getFileStatus() instead
   * Get the replication factor.
   *
   * @deprecated Use {@link #getFileStatus(Path)} instead
    * @param src file name
    * @return file replication
   * @throws IOException
   */</comment> 
   <expr_stmt><expr><operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if the path does not resolve.
   * @<throws>throws <argument><expr><name>IOException</name> <name>an</name> <name>IO</name> <name>failure</name>
   <operator>*</operator><operator>/</operator>
   <annotation>@<name>Deprecated</name></annotation>
   <specifier>public</specifier> <name>short</name> <call><name>getReplication</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     return getFileStatus<condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator><call><name>getReplication</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   </block_content>}</block></decl></init>
 
   <comment type="block" format="javadoc">/**
   * Set replication for an existing file.
   * 
   * Set the replication for an existing file.
   * If a filesystem does not support replication, it will always
   * return true: the check for a file existing may be bypassed.
   * This is the default behavior.
    * @param src file name
    * @param replication new replication
    * @throws IOException
   * @return true if successful;
   *         false if file does not exist or is a directory
   * @return true if successful, or the feature in unsupported;
   *         false if replication is supported but the file does not exist,
   *         or is a directory
    */</comment>
   <condition><expr><specifier>public</specifier> <name>boolean</name> <call><name>setReplication</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">1246</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1403</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>setReplication</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>short</name> <name>replication</name></expr></argument>)</argument_list></call></expr></argument></throws></expr></condition>
   }</control></for>
 
   <comment type="block" format="javadoc">/**
   * Renames Path src to Path dst.  Can take place on local fs
   * or remote DFS.
   * Renames Path src to Path dst.
    * @param src path to be renamed
    * @param dst new path after rename
    * @throws IOException on failure
@@ -1258,9 +1414,9 @@ public boolean setReplication(Path src, short replication)
   /**
    * Renames Path src to Path dst
    * &lt;ul&gt;
   * &lt;li&gt;Fails if src is a file and dst is a directory.
   * &lt;li&gt;Fails if src is a directory and dst is a file.
   * &lt;li&gt;Fails if the parent of dst does not exist or is a file.
   *   &lt;li&gt;Fails if src is a file and dst is a directory.&lt;/li&gt;
   *   &lt;li&gt;Fails if src is a directory and dst is a file.&lt;/li&gt;
   *   &lt;li&gt;Fails if the parent of dst does not exist or is a file.&lt;/li&gt;
    * &lt;/ul&gt;
    * &lt;p&gt;
    * If OVERWRITE option is not passed as an argument, rename fails
@@ -1274,12 +1430,17 @@ public boolean setReplication(Path src, short replication)
    * implementation. Please refer to the file system documentation for
    * details. This default implementation is non atomic.
    * &lt;p&gt;
   * This method is deprecated since it is a temporary method added to 
   * support the transition from FileSystem to FileContext for user 
   * This method is deprecated since it is a temporary method added to
   * support the transition from FileSystem to FileContext for user
    * applications.
   * 
   *
    * @param src path to be renamed
    * @param dst new path after rename
   * @throws FileNotFoundException src path does not exist, or the parent
   * path of dst does not exist.
   * @throws FileAlreadyExistsException dest path exists and is a file
   * @throws ParentNotDirectoryException if the parent path of dest is not
   * a directory
    * @throws IOException on failure
    */</comment>
   <annotation>@<name>Deprecated</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1344</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1505</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>rename</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>final</name> <name>Path</name> <name>dst</name></expr></argument>,
   <comment type="block" format="javadoc">/**
    * Truncate the file in the indicated path to the indicated size.
    * &lt;ul&gt;
   * &lt;li&gt;Fails if path is a directory.
   * &lt;li&gt;Fails if path does not exist.
   * &lt;li&gt;Fails if path is not closed.
   * &lt;li&gt;Fails if new size is greater than current size.
   *   &lt;li&gt;Fails if path is a directory.&lt;/li&gt;
   *   &lt;li&gt;Fails if path does not exist.&lt;/li&gt;
   *   &lt;li&gt;Fails if path is not closed.&lt;/li&gt;
   *   &lt;li&gt;Fails if new size is greater than current size.&lt;/li&gt;
    * &lt;/ul&gt;
    * @param f The path to the file to be truncated
    * @param newLength The size the file is to be truncated to
@@ -1358,44 +1519,61 @@ protected void rename(final Path src, final Path dst,
    * &lt;code&gt;false&lt;/code&gt; if a background process of adjusting the length of
    * the last block has been started, and clients should wait for it to
    * complete before proceeding with further file updates.
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default).
    */</comment>
   <argument><expr><specifier>public</specifier> <name>boolean</name> <call><name>truncate</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>long</name> <name>newLength</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not implemented by the "</literal> <operator>+</operator>
         <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" FileSystem implementation"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr></argument>;</argument_list></call></expr></expr_stmt>
   }
  

   <comment type="block" format="javadoc">/**
   * Delete a file 
   * Delete a file/directory.
    * @deprecated Use {@link #delete(Path, boolean)} instead.
    */</comment>
   @<function><type><name>Deprecated</name>
   <specifier>public</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>delete</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/** Delete a file.
    *
    * @param f the path to delete.
   * @param recursive if path is a directory and set to 
   * @param recursive if path is a directory and set to
    * true, the directory is deleted else throws an exception. In
   * case of a file the recursive can be set to either true or false. 
   * @return  true if delete is successful else false. 
   * @throws IOException
   * case of a file the recursive can be set to either true or false.
   * @return  true if delete is successful else false.
   * @throws IOException IO failure
    */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
 
   <comment type="block" format="javadoc">/**
   * Mark a path to be deleted when FileSystem is closed.
   * When the JVM shuts down,
   * all FileSystem objects will be closed automatically.
   * Then,
   * the marked path will be deleted as a result of closing the FileSystem.
   * Mark a path to be deleted when its FileSystem is closed.
   * When the JVM shuts down cleanly, all cached FileSystem objects will be
   * closed automatically âthese the marked paths will be deleted as a result.
   *
   * If a FileSystem instance is not cached, i.e. has been created with
   * {@link #createFileSystem(URI, Configuration)}, then the paths will
   * be deleted in when {@link #close()} is called on that instance.
    *
   * The path has to exist in the file system.
   * 
   * The path must exist in the filesystem at the time of the method call;
   * it does not have to exist at the time of JVM shutdown.
   *
   * Notes
   * &lt;ol&gt;
   *   &lt;li&gt;Clean shutdown of the JVM cannot be guaranteed.&lt;/li&gt;
   *   &lt;li&gt;The time to shut down a FileSystem will depends on the number of
   *   files to delete. For filesystems where the cost of checking
   *   for the existence of a file/directory and the actual delete operation
   *   (for example: object stores) is high, the time to shutdown the JVM can be
   *   significantly extended by over-use of this feature.&lt;/li&gt;
   *   &lt;li&gt;Connectivity problems with a remote filesystem may delay shutdown
   *   further, and may cause the files to not be deleted.&lt;/li&gt;
   * &lt;/ol&gt;
    * @param f the path to delete.
    * @return  true if deleteOnExit is successful, otherwise false.
   * @throws IOException
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>deleteOnExit</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1406</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1584</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>deleteOnExit</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     }</block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   </block_content>}</block></if></if_stmt>
  

   <comment type="block" format="javadoc">/**
   * Cancel the deletion of the path when the FileSystem is closed
   * Cancel the scheduled deletion of the path when the FileSystem is closed.
    * @param f the path to cancel deletion
   * @return true if the path was found in the delete-on-exit list.
    */</comment>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cancelDeleteOnExit</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <synchronized>synchronized <init>(<expr><name>deleteOnExit</name></expr>)</init> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1418</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1597</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>cancelDeleteOnExit</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Delete all files that were marked as delete-on-exit. This recursively
   * deletes all files in the specified paths.
   * Delete all paths that were marked as delete-on-exit. This recursively
   * deletes all files and directories in the specified paths.
   *
   * The time to process this operation is {@code O(paths)}, with the actual
   * time dependent on the time for existence and deletion operations to
   * complete, successfully or not.
    */</comment>
   <specifier>protected</specifier> <name>void</name> <call><name>processDeleteOnExit</name><argument_list>()</argument_list></call> <block>{
     <synchronized>synchronized <init>(<expr><name>deleteOnExit</name></expr>)</init> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1431</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1614</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>processDeleteOnExit</name><argument_list>()</argument_list></call> <block>{
           }</block></expr></expr_stmt></block_content></block></synchronized>
         }</block></expr></expr_stmt>
         <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring failure to deleteOnExit for path "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring failure to deleteOnExit for path {}"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></catch>
         <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></synchronized>
     </block_content>}</block></function>
   </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** Check if exists.
   * @param f source file

  /** Check if a path exists.
   * @param f source path
   * @return true if the path exists
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1450</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1635</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>exists</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** True iff the named path is a directory.
   * Note: Avoid using this method. Instead reuse the FileStatus 
   * Note: Avoid using this method. Instead reuse the FileStatus
    * returned by getFileStatus() or listStatus() methods.
    * @param f path to check
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>boolean</name> <call><name>isDirectory</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1463</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1649</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>isDirectory</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/** True iff the named path is a regular file.
   * Note: Avoid using this method. Instead reuse the FileStatus 
   * returned by getFileStatus() or listStatus() methods.
   * Note: Avoid using this method. Instead reuse the FileStatus
   * returned by {@link #getFileStatus(Path)} or listStatus() methods.
    * @param f path to check
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>boolean</name> <call><name>isFile</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1474</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1661</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>isFile</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <return>return <expr><literal type="boolean">false</literal></expr>;</return>               <comment type="line">// f does not exist</comment>
     </block_content>}</block></try>
   </block_content>}</block></try>
  
  <comment type="block" format="javadoc">/** The number of bytes in a file. */</comment>
  <comment type="block" format="javadoc">/** @deprecated Use getFileStatus() instead */</comment>

  <comment type="block" format="javadoc">/**
   * The number of bytes in a file.
   * @return the number of bytes; 0 for a directory
   * @deprecated Use {@link #getFileStatus(Path)} instead.
   * @throws FileNotFoundException if the path does not resolve
   * @throws IOException IO failure
   */</comment>
   <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <name>long</name></type> <name>getLength</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>getFileStatus</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLen</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
    

   <comment type="block" format="javadoc">/** Return the {@link ContentSummary} of a given {@link Path}.
  * @param f path to use
  */</comment>
   <expr_stmt><expr><operator>*</operator> @<name>param</name> <name>f</name> <name>path</name> <name>to</name> <name>use</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if the path does not resolve
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>ContentSummary</name> <call><name>getContentSummary</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>FileStatus</name> <name>status</name> <operator>=</operator> <call><name>getFileStatus</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1511</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">1705</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>ContentSummary</name> <call><name>getContentSummary</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <comment type="block" format="javadoc">/** Return the {@link QuotaUsage} of a given {@link Path}.
    * @param f path to use
   * @return the quota usage
   * @throws IOException IO failure
    */</comment>
   <expr><specifier>public</specifier> <name>QuotaUsage</name> <call><name>getQuotaUsage</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name>getContentSummary</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <specifier>static</specifier> <name>PathFilter</name></type> <name>DEFAULT_FILTER</name> <init>= <expr><operator>new</operator> <class><super><name>PathFilter</name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>
    
  <comment type="block" format="javadoc">/**
   * The default filter accepts all paths.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PathFilter</name></type> <name>DEFAULT_FILTER</name> <init>= <expr><operator>new</operator> <class><super><name>PathFilter</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/**
    * List the statuses of the files/directories in the given path if the path is
    * a directory.
@@ -1536,7 +1735,8 @@ public boolean accept(Path file) {
    * @throws FileNotFoundException when the path does not exist
    * @throws IOException see specific implementation
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>,
                                                         <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
    * Represents a batch of directory entries when iteratively listing a
@@ -1599,9 +1799,11 @@ protected DirectoryEntries listStatusBatch(Path f, byte[] token) throws
     return new DirectoryEntries(listing, null, false);
   }
 
  /*
  /**
    * Filter files/directories in the given path using the user-supplied path
    * filter. Results are added to the given array &lt;code&gt;results&lt;/code&gt;.
   * @throws FileNotFoundException when the path does not exist
   * @throws IOException see specific implementation
    */</comment>
   <function><type><specifier>private</specifier> <name>void</name></type> <name>listStatus</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></type> <name>results</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>f</name></decl></parameter>,
       <parameter><decl><type><name>PathFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1615</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1817</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name> <name>results</name></expr></argument>, <argument><expr><name>Path</name> <name>f</name></expr></argument>,</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * List corrupted file blocks.
    * @return an iterator over the corrupt files under the given path
    * (may contain duplicates if a file has more than one corrupt block)
   * @throws IOException
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default).
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name><name>RemoteIterator</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>listCorruptFileBlocks</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalName</name><argument_list>()</argument_list></call> <operator>+</operator>
                                            <literal type="string">" does not support"</literal> <operator>+</operator>
                                            <literal type="string">" listCorruptFileBlocks"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        <expr_stmt><expr><literal type="string">" does not support listCorruptFileBlocks"</literal></expr></expr_stmt>)</block_content></block>;</function>
   </block_content>}</block></try>
 
   <comment type="block" format="javadoc">/**
@@ -1632,19 +1836,19 @@ private void listStatus(ArrayList&lt;FileStatus&gt; results, Path f,
    * &lt;p&gt;
    * Does not guarantee to return the List of files/directories status in a
    * sorted order.
   * 
   *
    * @param f
    *          a path name
    * @param filter
    *          the user-supplied path filter
    * @return an array of FileStatus objects for the files under the given path
    *         after applying the filter
   * @throws FileNotFoundException when the path does not exist;
   *         IOException see specific implementation   
   * @throws FileNotFoundException when the path does not exist
   * @throws IOException see specific implementation
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name></type> <name>listStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>PathFilter</name> <name>filter</name></expr></argument>)</argument_list> 
  public <name><name>FileStatus</name><index>[]</index></name> <name>listStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>PathFilter</name> <name>filter</name></expr></argument>)</argument_list>
                                    <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name> <block>{
    <expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name> <name>results</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>listStatus</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>results</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>FileStatus</name><index>[<expr><call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1655</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">1859</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name> <name>results</name></expr></argument>, <argument><expr><name>Path</name> <name>f</name></expr></argument>,
    <argument><expr><operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Does</name> <name>not</name> <name>guarantee</name> <name>to</name></expr></argument> <return>return <expr><name>the</name> <name>List</name> <name>of</name> <name>files</name><operator>/</operator><name>directories</name> <name>status</name> <name>in</name> <name>a</name>
    <operator>*</operator> <name>sorted</name> <name><name>order</name><operator>.</operator></name>
   * 
   <operator>*</operator>
    <operator>*</operator> @<name>param</name> <name>files</name>
    <operator>*</operator>          <name>a</name> <name>list</name> <name>of</name> <name>paths</name>
    <operator>*</operator> @</expr></return></argument_list></call></expr></expr_stmt><return>return <expr><name>a</name> <name>list</name> <name>of</name> <name>statuses</name></expr></return> <for>for the files under the given paths after
    *         applying the filter default Path filter
   * @<throws>throws <argument><expr><name>FileNotFoundException</name> <name>when</name> <name>the</name> <name>path</name> <name>does</name> <name>not</name> <name>exist</name></expr></argument></throws><empty_stmt>;</empty_stmt></for>
   <expr_stmt><expr><operator>*</operator>         <name>IOException</name> <name>see</name> <name>specific</name> <name>implementation</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name> <name>when</name> <name>the</name> <name>path</name> <name>does</name> <name>not</name> <name>exist</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>see</name> <name>specific</name> <name>implementation</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name> <name>files</name></expr></argument>)</argument_list></call></expr></argument></throws>
       <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">1674</literal></expr></argument>,<argument><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1878</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name> <name>results</name></expr></argument>, <argument><expr><name>Path</name> <name>f</name></expr></argument>,
    <argument><expr><operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Does</name> <name>not</name> <name>guarantee</name> <name>to</name></expr></argument> <return>return <expr><name>the</name> <name>List</name> <name>of</name> <name>files</name><operator>/</operator><name>directories</name> <name>status</name> <name>in</name> <name>a</name>
    <operator>*</operator> <name>sorted</name> <name><name>order</name><operator>.</operator></name>
   * 
   <operator>*</operator>
    <operator>*</operator> @<name>param</name> <name>files</name>
    <operator>*</operator>          <name>a</name> <name>list</name> <name>of</name> <name>paths</name>
    <operator>*</operator> @<name>param</name> <name>filter</name>
    <operator>*</operator>          <name>the</name> <name>user</name><operator>-</operator><name>supplied</name> <name>path</name> <name>filter</name>
    <operator>*</operator> @</expr></return></argument_list></call></expr></argument></throws></throws></expr></expr_stmt><return>return <expr><name>a</name> <name>list</name> <name>of</name> <name>statuses</name></expr></return> <for>for the files under the given paths after
    *         applying the filter
   * @<throws>throws <argument><expr><name>FileNotFoundException</name> <name>when</name> <name>the</name> <name>path</name> <name>does</name> <name>not</name> <name>exist</name></expr></argument></throws><empty_stmt>;</empty_stmt></for>
   <expr_stmt><expr><operator>*</operator>         <name>IOException</name> <name>see</name> <name>specific</name> <name>implementation</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name> <name>when</name> <name>the</name> <name>path</name> <name>does</name> <name>not</name> <name>exist</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>see</name> <name>specific</name> <name>implementation</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name> <name>files</name></expr></argument>, <argument><expr><name>PathFilter</name> <name>filter</name></expr></argument>)</argument_list></call></expr></argument></throws>
       <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">1696</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1900</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>listStatus</name><argument_list>(<argument><expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name> <name>results</name></expr></argument>, <argument><expr><name>Path</name> <name>f</name></expr></argument>,
   <comment type="block" format="javadoc">/**
    * &lt;p&gt;Return all the files that match filePattern and are not checksum
    * files. Results are sorted by their names.
   * 
   *
    * &lt;p&gt;
    * A filename pattern is composed of &lt;i&gt;regular&lt;/i&gt; characters and
    * &lt;i&gt;special pattern matching&lt;/i&gt; characters, which are:
@@ -1736,7 +1940,7 @@ private void listStatus(ArrayList&lt;FileStatus&gt; results, Path f,
    *    &lt;p&gt;
    *    &lt;dt&gt; &lt;tt&gt; {ab,cd} &lt;/tt&gt;
    *    &lt;dd&gt; Matches a string from the string set &lt;tt&gt;{&lt;i&gt;ab, cd&lt;/i&gt;} &lt;/tt&gt;
   *    
   *
    *    &lt;p&gt;
    *    &lt;dt&gt; &lt;tt&gt; {ab,c{de,fh}} &lt;/tt&gt;
    *    &lt;dd&gt; Matches a string from the string set &lt;tt&gt;{&lt;i&gt;ab, cde, cfh&lt;/i&gt;}&lt;/tt&gt;
@@ -1748,17 +1952,17 @@ private void listStatus(ArrayList&lt;FileStatus&gt; results, Path f,
    * @param pathPattern a regular expression specifying a pth pattern
 
    * @return an array of paths that match the path pattern
   * @throws IOException
   * @throws IOException IO failure
    */</comment>
   <argument><expr><specifier>public</specifier> <name><name>FileStatus</name><index>[]</index></name> <call><name>globStatus</name><argument_list>(<argument><expr><name>Path</name> <name>pathPattern</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <return>return <expr><operator>new</operator> <call><name>Globber</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pathPattern</name></expr></argument>, <argument><expr><name>DEFAULT_FILTER</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>glob</name><argument_list>()</argument_list></call></expr>;</return></argument_list></call></expr></argument></throws></throws></expr></expr_stmt>
   }
  

   <comment type="block" format="javadoc">/**
   * Return an array of FileStatus objects whose path names match
   * Return an array of {@link FileStatus} objects whose path names match
    * {@code pathPattern} and is accepted by the user-supplied path filter.
    * Results are sorted by their path names.
   * 
   *
    * @param pathPattern a regular expression specifying the path pattern
    * @param filter a user-supplied path filter
    * @return null if {@code pathPattern} has no glob and the path does not exist
@@ -1771,17 +1975,17 @@ private void listStatus(ArrayList&lt;FileStatus&gt; results, Path f,
       throws IOException {
     return new Globber(this, pathPattern, filter).glob();
   }
  

   /**
    * List the statuses of the files/directories in the given path if the path is
   * a directory. 
   * a directory.
    * Return the file's status and block locations If the path is a file.
   * 
   *
    * If a returned status is a file, it contains the file's block locations.
   * 
   *
    * @param f is the path
    *
   * @return an iterator that traverses statuses of the files/directories 
   * @return an iterator that traverses statuses of the files/directories
    *         in the given path
    *
    * @throws FileNotFoundException If &lt;code&gt;f&lt;/code&gt; does not exist
@@ -1793,12 +1997,12 @@ private void listStatus(ArrayList&lt;FileStatus&gt; results, Path f,
   }
 
   /**
   * Listing a directory
   * List a directory.
    * The returned results include its block location if it is a file
    * The results are filtered by the given path filter
    * @param f a path
    * @param filter a path filter
   * @return an iterator that traverses statuses of the files/directories 
   * @return an iterator that traverses statuses of the files/directories
    *         in the given path
    * @throws FileNotFoundException if &lt;code&gt;f&lt;/code&gt; does not exist
    * @throws IOException if any I/O error occurred
@@ -1876,14 +2080,17 @@ public T next() throws IOException {
 
   /**
    * Returns a remote iterator so that followup calls are made on demand
   * while consuming the entries. Each file system implementation should
   * while consuming the entries. Each FileSystem implementation should
    * override this method and provide a more efficient implementation, if
   * possible. 
   * possible.
   *
    * Does not guarantee to return the iterator that traverses statuses
    * of the files in a sorted order.
    *
    * @param p target path
    * @return remote iterator
   * @throws FileNotFoundException if &lt;code&gt;p&lt;/code&gt; does not exist
   * @throws IOException if any I/O error occurred
    */</comment>
   public <function><type><name><name>RemoteIterator</name><argument_list type="generic">&lt;<argument><name>FileStatus</name></argument>&gt;</argument_list></name></type> <name>listStatusIterator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Path</name></type> <name>p</name></decl></parameter>)</parameter_list>
   <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1894</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">2101</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>T</name> <call><name>next</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>List</name> <name>the</name> <name>statuses</name> <name>and</name> <name>block</name> <name>locations</name> <name>of</name> <name>the</name> <name>files</name> <name>in</name> <name>the</name> <name>given</name> <name><name>path</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument><expr><name>Does</name> <name>not</name> <name>guarantee</name> <name>to</name></expr></argument></throws></expr></expr_stmt> <return>return <expr><name>the</name> <name>iterator</name> <name>that</name> <name>traverses</name> <name>statuses</name>
    <operator>*</operator> <name>of</name> <name>the</name> <name>files</name> <name>in</name> <name>a</name> <name>sorted</name> <name><name>order</name><operator>.</operator></name>
   * 
   <operator>*</operator> <name>If</name> <name>the</name> <name>path</name> <name>is</name> <name>a</name> <name>directory</name></expr><operator>,</operator> 
   <expr><operator>*</operator> <operator>&lt;</operator><name>pre</name><operator>&gt;</operator>
   <operator>*</operator> <name>If</name> <name>the</name> <name>path</name> <name>is</name> <name>a</name> <name>directory</name></expr><operator>,</operator>
    <expr><operator>*</operator></expr></return>   <if_stmt><if>if recursive is false<operator>,</operator> <decl_stmt><decl><type><name>returns</name> <name>files</name> <name>in</name> <name>the</name></type> <name>directory</name></decl>;</decl_stmt></if></if_stmt>
    <expr_stmt><expr><operator>*</operator></expr></expr_stmt>   <if_stmt><if>if recursive is true<operator>,</operator> <return>return <expr><name>files</name> <name>in</name> <name>the</name> <name>subtree</name> <name>rooted</name> <name>at</name> <name>the</name> <name><name>path</name><operator>.</operator></name>
    * <name>If</name> <name>the</name> <name>path</name> <name>is</name> <name>a</name> <name>file</name></expr><operator>,</operator></return></if></if_stmt> <return>return <expr><name>the</name> <name>file</name><literal type="char">'s status and block locations.
   * 
   * &lt;/pre&gt;
    * @param f is the path
    * @param recursive if the subdirectories need to be traversed recursively
    *
    * @return an iterator that traverses statuses of the files
    *
    * @throws FileNotFoundException when the path does not exist;
   *         IOException see specific implementation
   * @throws IOException see specific implementation
    */
   public RemoteIterator&lt;LocatedFileStatus&gt; listFiles(
       final Path f, final boolean recursive)
   throws FileNotFoundException, IOException {
     return new RemoteIterator&lt;LocatedFileStatus&gt;() {
      private Stack&lt;RemoteIterator&lt;LocatedFileStatus&gt;&gt; itors = 
        new Stack&lt;RemoteIterator&lt;LocatedFileStatus&gt;&gt;();
      private Stack&lt;RemoteIterator&lt;LocatedFileStatus&gt;&gt; itors = new Stack&lt;&gt;();
       private RemoteIterator&lt;LocatedFileStatus&gt; curItor =
         listLocatedStatus(f);
       private LocatedFileStatus curFile;
     

       @Override
       public boolean hasNext() throws IOException {
         while (curFile == null) {
@@ -1955,14 +2161,14 @@ public LocatedFileStatus next() throws IOException {
           LocatedFileStatus result = curFile;
           curFile = null;
           return result;
        } 
        }
         throw new java.util.NoSuchElementException("No more entry in " + f);
       }
     };
   }
  
  /** Return the current user'</literal><name>s</name> <name>home</name> <name>directory</name> <name>in</name> <name>this</name> <name><name>filesystem</name><operator>.</operator></name>
   * <name>The</name> default <name>implementation</name> <name>returns</name> <literal type="string">"/user/$USER/"</literal><operator>.</operator>

  <comment type="block" format="javadoc">/** Return the current user's home directory in this FileSystem.
   * The default implementation returns {@code "/user/$USER/"}.
    */</comment>
   <specifier>public</specifier> <name>Path</name> <call><name>getHomeDirectory</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><call><name><name>this</name><operator>.</operator><name>makeQualified</name></name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">1971</literal></expr></argument>,<argument><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">2177</literal></expr></argument>,<argument><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>Path</name> <call><name>getHomeDirectory</name><argument_list>()</argument_list></call> <block>{
 
 
   <comment type="block" format="javadoc">/**
   * Set the current working directory for the given file system. All relative
   * Set the current working directory for the given FileSystem. All relative
    * paths will be resolved relative to it.
   * 
   *
    * @param new_dir Path of new working directory
    */</comment>
   <expr><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name> <call><name>setWorkingDirectory</name><argument_list>(<argument><expr><name>Path</name> <name>new_dir</name></expr></argument>)</argument_list></call></expr>;
    

   <comment type="block" format="javadoc">/**
   * Get the current working directory for the given file system
   * Get the current working directory for the given FileSystem
    * @return the directory pathname
    */</comment>
   <expr><specifier>public</specifier> <specifier>abstract</specifier> <name>Path</name> <call><name>getWorkingDirectory</name><argument_list>()</argument_list></call></expr>;
  
  
  <comment type="block" format="javadoc">/**
   * Note: with the new FilesContext class, getWorkingDirectory()
   * will be removed. 
   * The working directory is implemented in FilesContext.
   * 
   * Some file systems like LocalFileSystem have an initial workingDir

  /**
   * Note: with the new FileContext class, getWorkingDirectory()
   * will be removed.
   * The working directory is implemented in FileContext.
   *
   * Some FileSystems like LocalFileSystem have an initial workingDir
    * that we use as the starting workingDir. For other file systems
    * like HDFS there is no built in notion of an initial workingDir.
   * 
   *
    * @return if there is built in notion of workingDir then it
    * is returned; else a null is returned.
    */</comment>
@@ <expr><operator>-</operator><literal type="number">2003</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2208</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>protected</specifier> <name>Path</name> <call><name>getInitialWorkingDirectory</name><argument_list>()</argument_list></call> <block>{
 
   <comment type="block" format="javadoc">/**
    * Call {@link #mkdirs(Path, FsPermission)} with default permission.
   * @param f path
   * @return true if the directory was created
   * @throws IOException IO failure
    */</comment>
   <expr><specifier>public</specifier> <name>boolean</name> <call><name>mkdirs</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
     <return>return <expr><call><name>mkdirs</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getDirDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
@@ <operator>-</operator><literal type="number">2010</literal><operator>,</operator><literal type="number">19</literal> <operator>+</operator><literal type="number">2218</literal><operator>,</operator><literal type="number">21</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>mkdirs</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Make the given file and all non-existent parents into
   * directories. Has the semantics of Unix 'mkdir -p'.
   * directories. Has roughly the semantics of Unix @{code mkdir -p}.
    * Existence of the directory hierarchy is not an error.
    * @param f path to create
    * @param permission to apply to f
   * @throws IOException IO failure
    */</comment>
   <expr><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name> <call><name>mkdirs</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>
       )</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></block></expr>;
 
   <comment type="block" format="javadoc">/**
   * The src file is on the local disk.  Add it to FS at
   * The src file is on the local disk.  Add it to filesystem at
    * the given dst name and the source is kept intact afterwards
    * @param src path
    * @param dst path
   * @throws IOException IO failure
    */</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2030</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2240</literal></expr></argument>,<argument><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call></expr></argument>
   }</throws>
 
   <comment type="block" format="javadoc">/**
   * The src files is on the local disk.  Add it to FS at
   * The src files is on the local disk.  Add it to filesystem at
    * the given dst name, removing the source afterwards.
   * @param srcs path
   * @param srcs source paths
    * @param dst path
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>moveFromLocalFile</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name> <name>srcs</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2041</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2252</literal></expr></argument>,<argument><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>moveFromLocalFile</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name> <name>srcs</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call></expr></argument>
   }</throws>
 
   <comment type="block" format="javadoc">/**
   * The src file is on the local disk.  Add it to FS at
   * The src file is on the local disk.  Add it to the filesystem at
    * the given dst name, removing the source afterwards.
   * @param src path
   * @param src local path
    * @param dst path
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>moveFromLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2052</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2264</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>moveFromLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call></expr></argument>
   }</throws>
 
   <comment type="block" format="javadoc">/**
   * The src file is on the local disk.  Add it to FS at
   * The src file is on the local disk.  Add it to the filesystem at
    * the given dst name.
    * delSrc indicates if the source should be removed
    * @param delSrc whether to delete the src
@@ -2063,80 +2275,83 @@ public void copyFromLocalFile(boolean delSrc, Path src, Path dst)
     throws IOException {
     copyFromLocalFile(delSrc, true, src, dst);
   }
  

   /**
   * The src files are on the local disk.  Add it to FS at
   * The src files are on the local disk.  Add it to the filesystem at
    * the given dst name.
    * delSrc indicates if the source should be removed
    * @param delSrc whether to delete the src
    * @param overwrite whether to overwrite an existing file
    * @param srcs array of paths which are source
    * @param dst path
   * @throws IOException IO failure
    */</comment>
  <specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>,
                                 <argument><expr><name><name>Path</name><index>[]</index></name> <name>srcs</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <call><name>getConf</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <argument><expr><call><name><name>FileUtil</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>getLocal</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcs</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>;
   }</argument_list></call>
  

   <comment type="block" format="javadoc">/**
   * The src file is on the local disk.  Add it to FS at
   * The src file is on the local disk.  Add it to the filesystem at
    * the given dst name.
    * delSrc indicates if the source should be removed
    * @param delSrc whether to delete the src
    * @param overwrite whether to overwrite an existing file
    * @param src path
    * @param dst path
   * @throws IOException IO failure
    */</comment>
  <specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>, 
  <argument><expr><specifier>public</specifier> <name>void</name> <call><name>copyFromLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>boolean</name> <name>overwrite</name></expr></argument>,
                                 <argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call>
     <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <call><name>getConf</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <argument><expr><call><name><name>FileUtil</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name>getLocal</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>;
   }</argument_list></call>
    

   <comment type="block" format="javadoc">/**
   * The src file is under FS, and the dst is on the local disk.
   * Copy it from FS control to the local dst name.
   * @param src path
   * @param dst path
   * Copy it a file from the remote filesystem to the local one.
   * @param src path src file in the remote filesystem
   * @param dst path local destination
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>copyToLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>copyToLocalFile</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
   }</block>
    

   <comment type="block" format="javadoc">/**
   * The src file is under FS, and the dst is on the local disk.
   * Copy it from FS control to the local dst name.
   * Remove the source afterwards
   * @param src path
   * @param dst path
   * Copy a file to the local filesystem, then delete it from the
   * remote filesystem (if successfully copied).
   * @param src path src file in the remote filesystem
   * @param dst path local destination
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>moveToLocalFile</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>copyToLocalFile</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
   }</argument_list></call>
 
   <comment type="block" format="javadoc">/**
   * The src file is under FS, and the dst is on the local disk.
   * Copy it from FS control to the local dst name.
   * Copy it a file from a remote filesystem to the local one.
    * delSrc indicates if the src will be removed or not.
    * @param delSrc whether to delete the src
   * @param src path
   * @param dst path
   */</comment>   
   <operator>*</operator> @<name>param</name> <name>src</name> <name>path</name> <name>src</name> <name>file</name> <name>in</name> <name>the</name> <name>remote</name> <name>filesystem</name>
   <operator>*</operator> @<name>param</name> <name>dst</name> <name>path</name> <name>local</name> <name>destination</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>copyToLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call></expr></argument></throws>
     <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>copyToLocalFile</name><argument_list>(<argument><expr><name>delSrc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</return>
   }</block></expr></return>
  
    <comment type="block" format="javadoc">/**
   * The src file is under FS, and the dst is on the local disk. Copy it from FS
   * control to the local dst name. delSrc indicates if the src will be removed

  /**
   * The src file is under this filesystem, and the dst is on the local disk.
   * Copy it from the remote filesystem to the local dst name.
   * delSrc indicates if the src will be removed
    * or not. useRawLocalFileSystem indicates whether to use RawLocalFileSystem
   * as local file system or not. RawLocalFileSystem is non crc file system.So,
   * It will not create any crc files at local.
   * 
   * as the local file system or not. RawLocalFileSystem is non checksumming,
   * So, It will not create any crc files at local.
   *
    * @param delSrc
    *          whether to delete the src
    * @param src
@@ -2145,9 +2360,8 @@ public void copyToLocalFile(boolean delSrc, Path src, Path dst)
    *          path
    * @param useRawLocalFileSystem
    *          whether to use RawLocalFileSystem as local file system or not.
   * 
   * @throws IOException
   *           - if any IO error
   *
   * @throws IOException for any IO error
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>copyToLocalFile</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delSrc</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>dst</name></decl></parameter>,
       <parameter><decl><type><name>boolean</name></type> <name>useRawLocalFileSystem</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2162</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">2376</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>copyToLocalFile</name><argument_list>(<argument><expr><name>boolean</name> <name>delSrc</name></expr></argument>, <argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>,</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Returns a local File that the user can write output to.  The caller
   * provides both the eventual FS target name and the local working
   * file.  If the FS is local, we write directly into the target.  If
   * the FS is remote, we write into the tmp local area.
   * Returns a local file that the user can write output to.  The caller
   * provides both the eventual target name in this FileSystem
   * and the local working file path.
   * If this FileSystem is local, we write directly into the target.  If
   * the FileSystem is not local, we write into the tmp local area.
    * @param fsOutputFile path of output file
    * @param tmpLocalFile path of local tmp file
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>Path</name></type> <name>startLocalOutput</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>fsOutputFile</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>tmpLocalFile</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2175</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">2391</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>Path</name> <call><name>startLocalOutput</name><argument_list>(<argument><expr><name>Path</name> <name>fsOutputFile</name></expr></argument>, <argument><expr><name>Path</name> <name>tmpLocalFile</name></expr></argument>)</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Called when we're all done writing to the target.  A local FS will
   * do nothing, because we've written to exactly the right place.  A remote
   * FS will copy the contents of tmpLocalFile to the correct target at
   * Called when we're all done writing to the target.
   * A local FS will do nothing, because we've written to exactly the
   * right place.
   * A remote FS will copy the contents of tmpLocalFile to the correct target at
    * fsOutputFile.
    * @param fsOutputFile path of output file
    * @param tmpLocalFile path to local tmp file
   * @throws IOException IO failure
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>completeLocalOutput</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>fsOutputFile</name></decl></parameter>, <parameter><decl><type><name>Path</name></type> <name>tmpLocalFile</name></decl></parameter>)</parameter_list>
     <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2188</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2406</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>completeLocalOutput</name><argument_list>(<argument><expr><name>Path</name> <name>fsOutputFile</name></expr></argument>, <argument><expr><name>Path</name> <name>tmpLocalFile</name></expr></argument>)</argument_list></call></expr></expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * No more filesystem operations are needed.  Will
   * release any held locks.
   * Close this FileSystem instance.
   * Will release any held locks, delete all files queued for deletion
   * through calls to {@link #deleteOnExit(Path)}, and remove this FS instance
   * from the cache, if cached.
   *
   * After this operation, the outcome of any method call on this FileSystem
   * instance, or any input/output stream created by it is &lt;i&gt;undefined&lt;/i&gt;.
   * @throws IOException IO failure
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2198</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">2422</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>CACHE</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return the total size of all files in the filesystem. */</comment>
  <comment type="block" format="javadoc">/**
   * Return the total size of all files in the filesystem.
   * @throws IOException IO failure
   */</comment>
   <function><type><specifier>public</specifier> <name>long</name></type> <name>getUsed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><call><name>getUsed</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return the total size of all files from a specified path. */</comment>
  <comment type="block" format="javadoc">/**
   * Return the total size of all files from a specified path.
   * @throws IOException IO failure
   */</comment>
   <function><type><specifier>public</specifier> <name>long</name></type> <name>getUsed</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name>getContentSummary</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLength</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2213</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2443</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>long</name> <call><name>getUsed</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>Get</name> <name>the</name> <name>block</name> <name>size</name></expr></block></expr></argument></throws></expr></expr_stmt> <for>for a particular file.
    * @param f the filename
    * @return the number of bytes in a block
   * @deprecated Use <block>{<block_content><annotation>@<name>link</name></annotation> <expr><operator>#</operator><call><name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr></block_content>}</block></for> <expr_stmt><expr><name>instead</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if the path is not present
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
  <comment type="block" format="javadoc">/** @deprecated Use getFileStatus() instead */</comment>
   <annotation>@<name>Deprecated</name></annotation>
   <specifier>public</specifier> <name>long</name> <call><name>getBlockSize</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     return getFileStatus<condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator><call><name>getBlockSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2222</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2454</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>long</name> <call><name>getBlockSize</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * Return the number of bytes that large input files should be optimally
   * be split into to minimize i/o time.
   * be split into to minimize I/O time.
    * @deprecated use {@link #getDefaultBlockSize(Path)} instead
    */</comment>
   <expr><annotation>@<name>Deprecated</name></annotation></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2230</literal></expr></argument>,<argument><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">2462</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>long</name> <call><name>getDefaultBlockSize</name><argument_list>()</argument_list></call></expr></argument></throws> <block>{<block_content>
     <comment type="line">// default to 32MB: large enough to minimize the impact of seeks</comment>
     <return>return <expr><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><literal type="string">"fs.local.block.size"</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></expr></expr_stmt>
    
  <comment type="block" format="javadoc">/** Return the number of bytes that large input files should be optimally
   * be split into to minimize i/o time.  The given path will be used to

  /**
   * Return the number of bytes that large input files should be optimally
   * be split into to minimize I/O time.  The given path will be used to
    * locate the actual filesystem.  The full path does not have to exist.
    * @param f path of file
    * @return the default block size for the path's filesystem
@@ -2243,27 +2476,29 @@ public long getDefaultBlockSize(Path f) {
 
   /**
    * Get the default replication.
   * @return the replication; the default value is "1".
    * @deprecated use {@link #getDefaultReplication(Path)} instead
    */</comment>
   <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <name>short</name></type> <name>getDefaultReplication</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Get the default replication for a path.   The given path will be used to
   * locate the actual filesystem.  The full path does not have to exist.
   * Get the default replication for a path.
   * The given path will be used to locate the actual FileSystem to query.
   * The full path does not have to exist.
    * @param path of the file
   * @return default replication for the path's filesystem 
   * @return default replication for the path's filesystem
    */</comment>
   <function><type><specifier>public</specifier> <name>short</name></type> <name>getDefaultReplication</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name>getDefaultReplication</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Return a file status object that represents the path.
    * @param f The path we want information from
    * @return a FileStatus object
   * @throws FileNotFoundException when the path does not exist;
   *         IOException see specific implementation
   * @throws FileNotFoundException when the path does not exist
   * @throws IOException see specific implementation
    */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>FileStatus</name></type> <name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name> <name>f</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2272</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2507</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>short</name> <call><name>getDefaultReplication</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
    <expr><operator>*</operator> <name>checks</name> <name>to</name> <name><name>perform</name><operator>.</operator>  <name>If</name></name> <name>the</name> <name>requested</name> <name>permissions</name> <name>are</name> <name>granted</name></expr>, <expr><name>then</name> <name>the</name>
    <operator>*</operator> <name>method</name> <name>returns</name> <name><name>normally</name><operator>.</operator>  <name>If</name></name> <name>access</name> <name>is</name> <name>denied</name></expr>, <expr><name>then</name> <name>the</name> <name>method</name> <throws>throws <argument><expr><name>an</name>
    <operator>*</operator> <block>{<expr><annotation>@<name>link</name></annotation> <name>AccessControlException</name></expr>}</block><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>/</operator><operator>&gt;</operator>
   <operator>*</operator> <name>The</name></expr></argument> default <argument><expr><name>implementation</name> <name>of</name> <name>this</name> <name>method</name> <name>calls</name></expr></argument></throws> <block>{<block_content><annotation>@<name>link</name></annotation> <expr_stmt><expr><operator>#</operator><call><name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></expr>}</block>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
   <operator>*</operator> <name>The</name> default <name>implementation</name> <name>calls</name> <block>{@<expr><name>link</name> <operator>#</operator><call><name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>}</block>
    <operator>*</operator> <name>and</name> <name>checks</name> <name>the</name> <name>returned</name> <name>permissions</name> <name>against</name> <name>the</name> <name>requested</name> <name><name>permissions</name><operator>.</operator></name>
   * <name>Note</name> <name>that</name> <name>the</name> <name>getFileStatus</name> <name>call</name> <name>will</name> <name>be</name> <name>subject</name> <name>to</name> <name>authorization</name> <name><name>checks</name><operator>.</operator></name>
   *
   <operator>*</operator> <name>Note</name> <name>that</name> <name>the</name> <block>{@<expr><name>link</name> <operator>#</operator><call><name>getFileStatus</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>}</block> <name>call</name> <name>will</name> <name>be</name> <name>subject</name> <name>to</name>
   <operator>*</operator> <name>authorization</name> <name><name>checks</name><operator>.</operator></name>
    * <name>Typically</name></expr><operator>,</operator> <expr><name>this</name> <name>requires</name> <call><name>search</name> <argument_list>(<argument><expr><name>execute</name></expr></argument>)</argument_list></call> <name>permissions</name> <name>on</name> <name>each</name> <name>directory</name> <name>in</name>
    <operator>*</operator> <name>the</name> <name>path</name><literal type="char">'s prefix, but this is implementation-defined.  Any file system
    * that provides a richer authorization model (such as ACLs) may override the
@@ -2305,11 +2542,12 @@ public void access(Path path, FsAction mode) throws AccessControlException,
    *
    * @param stat FileStatus to check
    * @param mode type of access to check
   * @throws AccessControlException if access is denied
    * @throws IOException for any error
    */
   @InterfaceAudience.Private
   static void checkAccessPermissions(FileStatus stat, FsAction mode)
      throws IOException {
      throws AccessControlException, IOException {
     FsPermission perm = stat.getPermission();
     UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
     String user = ugi.getShortUserName();
@@ -2332,7 +2570,7 @@ static void checkAccessPermissions(FileStatus stat, FsAction mode)
   }
 
   /**
   * See {@link FileContext#fixRelativePart}
   * See {@link FileContext#fixRelativePart}.
    */
   protected Path fixRelativePart(Path p) {
     if (p.isUriPathAbsolute()) {
@@ -2343,12 +2581,12 @@ protected Path fixRelativePart(Path p) {
   }
 
   /**
   * See {@link FileContext#createSymlink(Path, Path, boolean)}
   * See {@link FileContext#createSymlink(Path, Path, boolean)}.
    */
   public void createSymlink(final Path target, final Path link,
       final boolean createParent) throws AccessControlException,
       FileAlreadyExistsException, FileNotFoundException,
      ParentNotDirectoryException, UnsupportedFileSystemException, 
      ParentNotDirectoryException, UnsupportedFileSystemException,
       IOException {
     // Supporting filesystems should override this method
     throw new UnsupportedOperationException(
@@ -2356,7 +2594,9 @@ public void createSymlink(final Path target, final Path link,
   }
 
   /**
   * See {@link FileContext#getFileLinkStatus(Path)}
   * See {@link FileContext#getFileLinkStatus(Path)}.
   * @throws FileNotFoundException when the path does not exist
   * @throws IOException see specific implementation
    */
   public FileStatus getFileLinkStatus(final Path f)
       throws AccessControlException, FileNotFoundException,
@@ -2366,14 +2606,16 @@ public FileStatus getFileLinkStatus(final Path f)
   }
 
   /**
   * See {@link AbstractFileSystem#supportsSymlinks()}
   * See {@link AbstractFileSystem#supportsSymlinks()}.
    */
   public boolean supportsSymlinks() {
     return false;
   }
 
   /**
   * See {@link FileContext#getLinkTarget(Path)}
   * See {@link FileContext#getLinkTarget(Path)}.
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */
   public Path getLinkTarget(Path f) throws IOException {
     // Supporting filesystems should override this method
@@ -2382,7 +2624,9 @@ public Path getLinkTarget(Path f) throws IOException {
   }
 
   /**
   * See {@link AbstractFileSystem#getLinkTarget(Path)}
   * See {@link AbstractFileSystem#getLinkTarget(Path)}.
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */
   protected Path resolveLink(Path f) throws IOException {
     // Supporting filesystems should override this method
@@ -2391,12 +2635,13 @@ protected Path resolveLink(Path f) throws IOException {
   }
 
   /**
   * Get the checksum of a file.
   * Get the checksum of a file, if the FS supports checksums.
    *
    * @param f The file path
    * @return The file checksum.  The default return value is null,
    *  which indicates that no checksum algorithm is implemented
    *  in the corresponding FileSystem.
   * @throws IOException IO failure
    */
   public FileChecksum getFileChecksum(Path f) throws IOException {
     return getFileChecksum(f, Long.MAX_VALUE);
@@ -2407,7 +2652,8 @@ public FileChecksum getFileChecksum(Path f) throws IOException {
    * specific length.
    * @param f The file path
    * @param length The length of the file range for checksum calculation
   * @return The file checksum.
   * @return The file checksum or null if checksums are not supported.
   * @throws IOException IO failure
    */
   public FileChecksum getFileChecksum(Path f, final long length)
       throws IOException {
@@ -2415,8 +2661,9 @@ public FileChecksum getFileChecksum(Path f, final long length)
   }
 
   /**
   * Set the verify checksum flag. This is only applicable if the 
   * corresponding FileSystem supports checksum. By default doesn'</literal><name>t</name></expr></expr_stmt> <do>do<block type="pseudo"><block_content> <expr_stmt><expr><name><name>anything</name><operator>.</operator></name>
   * <name>Set</name> <name>the</name> <name>verify</name> <name>checksum</name> <name><name>flag</name><operator>.</operator> <name>This</name></name> <name>is</name> <name>only</name> <name>applicable</name></expr></expr_stmt></block_content></block> <if_stmt><if>if the
   * corresponding filesystem supports checksums.
   * By default doesn't do anything.
    * @param verifyChecksum Verify checksum flag
    */
   public void setVerifyChecksum(boolean verifyChecksum) {
@@ -2424,9 +2671,10 @@ public void setVerifyChecksum(boolean verifyChecksum) {
   }
 
   /**
   * Set the write checksum flag. This is only applicable if the 
   * corresponding FileSystem supports checksum. By default doesn't do anything.
   * @param writeChecksum Write checsum flag
   * Set the write checksum flag. This is only applicable if the
   * corresponding filesystem supports checksums.
   * By default doesn't do anything.
   * @param writeChecksum Write checksum flag
    */
   public void setWriteChecksum(boolean writeChecksum) {
     //doesn't do anything
@@ -2434<operator>,</operator><expr_stmt><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">2682</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setWriteChecksum</name><argument_list>(<argument><expr><name>boolean</name> <name>writeChecksum</name></expr></argument>)</argument_list></call> <block>{
 
   <comment type="block" format="javadoc">/**
    * Returns a status object describing the use and capacity of the
   * file system. If the file system has multiple partitions, the
   * filesystem. If the filesystem has multiple partitions, the
    * use and capacity of the root partition is reflected.
   * 
   *
    * @return a FsStatus object
    * @throws IOException
    *           see specific implementation
@@ -2447,11 +2695,11 @@ public FsStatus getStatus() throws IOException {
 
   /**
    * Returns a status object describing the use and capacity of the
   * file system. If the file system has multiple partitions, the
   * filesystem. If the filesystem has multiple partitions, the
    * use and capacity of the partition pointed to by the specified
    * path is reflected.
    * @param p Path for which status should be obtained. null means
   * the default partition. 
   * the default partition.
    * @return a FsStatus object
    * @throws IOException
    *           see specific implementation
@@ -2464,6 +2712,7 @@ public FsStatus getStatus(Path p) throws IOException {
    * Set permission of a path.
    * @param p The path
    * @param permission permission
   * @throws IOException IO failure
    */</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name></expr></argument>
       )</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2475</literal></expr></argument>,<argument><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">2724</literal></expr></argument>,<argument><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setPermission</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>FsPermission</name> <name>permission</name>
    <operator>*</operator> @<name>param</name> <name>p</name> <name>The</name> <name>path</name>
    <operator>*</operator> @<name>param</name> <name>username</name> <name>If</name> <name>it</name> <name>is</name> <literal type="null">null</literal></expr></argument>, <argument><expr><name>the</name> <name>original</name> <name>username</name> <name>remains</name> <name><name>unchanged</name><operator>.</operator></name>
    * @<name>param</name> <name>groupname</name> <name>If</name> <name>it</name> <name>is</name> <literal type="null">null</literal></expr></argument>, <argument><expr><name>the</name> <name>original</name> <name>groupname</name> <name>remains</name> <name><name>unchanged</name><operator>.</operator></name>
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setOwner</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>String</name> <name>username</name></expr></argument>, <argument><expr><name>String</name> <name>groupname</name></expr></argument>
       )</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Set access time of a file
   * Set access time of a file.
    * @param p The path
    * @param mtime Set the modification time of this file.
   *              The number of milliseconds since Jan 1, 1970. 
   *              The number of milliseconds since Jan 1, 1970.
    *              A value of -1 means that this call should not set modification time.
    * @param atime Set the access time of this file.
   *              The number of milliseconds since Jan 1, 1970. 
   *              The number of milliseconds since Jan 1, 1970.
    *              A value of -1 means that this call should not set access time.
   * @throws IOException IO failure
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>setTimes</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>long</name> <name>mtime</name></expr></argument>, <argument><expr><name>long</name> <name>atime</name></expr></argument>
       )</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2498</literal></expr></argument>,<argument><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">2749</literal></expr></argument>,<argument><expr><literal type="number">56</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setTimes</name><argument_list>(<argument><expr><name>Path</name> <name>p</name></expr></argument>, <argument><expr><name>long</name> <name>mtime</name></expr></argument>, <argument><expr><name>long</name> <name>atime</name>
    <operator>*</operator> <name>Create</name> <name>a</name> <name>snapshot</name> <name>with</name> <name>a</name> default <name><name>name</name><operator>.</operator></name>
    * @<name>param</name> <name>path</name> <name>The</name> <name>directory</name> <name>where</name> <name>snapshots</name> <name>will</name> <name>be</name> <name><name>taken</name><operator>.</operator></name>
    * @</expr></argument></argument_list></call></expr></argument></throws></expr></argument></argument_list></call></expr></argument></throws></expr><return>return <expr><name>the</name> <name>snapshot</name> <name><name>path</name><operator>.</operator></name>
   * @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>final</name> <name>Path</name> <call><name>createSnapshot</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></throws></expr></return>
     <return>return <expr><call><name>createSnapshot</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt></if></if_stmt>
 
   <comment type="block" format="javadoc">/**
   * Create a snapshot
   * Create a snapshot.
    * @param path The directory where snapshots will be taken.
    * @param snapshotName The name of the snapshot
    * @return the snapshot path.
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
    */</comment>
   public Path createSnapshot(Path path<operator>,</operator> String snapshotName</do>)</block_content>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
         <operator>+</operator> <literal type="string">" doesn't support createSnapshot"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></block>;</function>
   }
  

   <comment type="block" format="javadoc">/**
   * Rename a snapshot
   * Rename a snapshot.
    * @param path The directory path where the snapshot was taken
    * @param snapshotOldName Old name of the snapshot
    * @param snapshotNewName New name of the snapshot
   * @throws IOException
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */</comment>
   public <function><type><name>void</name></type> <name>renameSnapshot</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotOldName</name></decl></parameter>,
       <parameter><decl><type><name>String</name></type> <name>snapshotNewName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
         <operator>+</operator> <literal type="string">" doesn't support renameSnapshot"</literal></expr></argument>)</argument_list></call></expr>;</throw>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
   * Delete a snapshot of a directory
   * Delete a snapshot of a directory.
    * @param path  The directory that the to-be-deleted snapshot belongs to
    * @param snapshotName The name of the snapshot
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteSnapshot</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
       <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
         <operator>+</operator> <literal type="string">" doesn't support deleteSnapshot"</literal></expr></argument>)</argument_list></call></expr>;</throw>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Modifies ACL entries of files and directories.  This method can add new ACL
    * entries or modify the permissions on existing ACL entries.  All existing
@@ -2548,6 +2808,8 @@ public void deleteSnapshot(Path path, String snapshotName)
    * @param path Path to modify
    * @param aclSpec List&lt;AclEntry&gt; describing modifications
    * @throws IOException if an ACL could not be modified
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>modifyAclEntries</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name></type> <name>aclSpec</name></decl></parameter>)</parameter_list>
       <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2560</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2822</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>modifyAclEntries</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>aclSpec</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name><name>retained</name><operator>.</operator></name>
    *
    <operator>*</operator> @<name>param</name> <name>path</name> <name>Path</name> <name>to</name> <name>modify</name>
   <operator>*</operator> @<name>param</name> <name>aclSpec</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>describing</name> <name>entries</name> <name>to</name> <name>remove</name>
   <operator>*</operator> @<name>param</name> <name>aclSpec</name> <name>List</name> <name>describing</name> <name>entries</name> <name>to</name> <name>remove</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></expr_stmt> <if_stmt><if>if an ACL could not be modified
   * @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if the operation is unsupported
   *         <condition>(<expr>default <name>outcome</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>removeAclEntries</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>aclSpec</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2574</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2838</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>removeAclEntries</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>aclSpec</name></expr></argument>)</argument_list></call>
    <operator>*</operator>
    <operator>*</operator> @<name>param</name> <name>path</name> <name>Path</name> <name>to</name> <name>modify</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if an ACL could not be modified
   * @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if the operation is unsupported
   *         <condition>(<expr>default <name>outcome</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>removeDefaultAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2588</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2854</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>removeDefaultAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call>
    <operator>*</operator>
    <operator>*</operator> @<name>param</name> <name>path</name> <name>Path</name> <name>to</name> <name>modify</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if an ACL could not be removed
   * @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if the operation is unsupported
   *         <condition>(<expr>default <name>outcome</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>removeAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2600</literal></expr></argument>,<argument><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">2868</literal></expr></argument>,<argument><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>removeAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name><name>entries</name><operator>.</operator></name>
    *
    <operator>*</operator> @<name>param</name> <name>path</name> <name>Path</name> <name>to</name> <name>modify</name>
   <operator>*</operator> @<name>param</name> <name>aclSpec</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>describing</name> <name>modifications</name></expr></argument>, <argument><expr><name>must</name> <name>include</name> <name>entries</name>
   <operator>*</operator> @<name>param</name> <name>aclSpec</name> <name>List</name> <name>describing</name> <name>modifications</name></expr></argument>, <argument><expr><name>which</name> <name>must</name> <name>include</name> <name>entries</name>
    <operator>*</operator></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt>   <for>for user<operator>,</operator> <expr_stmt><expr><name>group</name></expr><operator>,</operator> <expr><name>and</name> <name>others</name></expr></expr_stmt></for> <for>for compatibility with permission bits.
    * @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws> if an ACL could not be modified
   * @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if the operation is unsupported
   *         <control>(<init><expr>default <name>outcome</name></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>aclSpec</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2615</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2885</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setAcl</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>AclEntry</name></argument>&gt;</argument_list></name> <name>aclSpec</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <annotation>@<name>param</name></annotation> <name>path</name> <name>Path</name> <name>to</name> <name>get</name>
    <operator>*</operator></expr></block></expr></argument> @return <argument><expr><name>AclStatus</name> <name>describing</name> <name>the</name> <name>ACL</name> <name>of</name> <name>the</name> <name>file</name> <name>or</name> <name>directory</name>
    <operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></argument></throws></expr></argument> <if_stmt><if>if an ACL could not be read
   * @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if the operation is unsupported
   *         <condition>(<expr>default <name>outcome</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>AclStatus</name> <call><name>getAclStatus</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2625</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">2897</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>AclStatus</name> <call><name>getAclStatus</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>Set</name> <name>an</name> <name>xattr</name> <name>of</name> <name>a</name> <name>file</name> <name>or</name> <name><name>directory</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument><expr><name>The</name> <name>name</name> <name>must</name> <name>be</name> <name>prefixed</name> <name>with</name> <name>the</name> <name>namespace</name> <name>followed</name> <name>by</name> <literal type="string">"."</literal><operator>.</operator> <name>For</name> <name>example</name></expr></argument>,
    <argument><expr><operator>*</operator> <literal type="string">"user.attr"</literal><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>/</operator><operator>&gt;</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Refer</name> <name>to</name> <name>the</name> <name>HDFS</name> <name>extended</name> <name>attributes</name> <name>user</name> <name>documentation</name></expr></argument></throws></expr></argument></argument_list></call></expr></argument></argument_list></throw></expr></expr_stmt></block_content></block></if></if_stmt></argument_list></call></expr></argument></argument_list></throw></expr></expr_stmt></block_content></block></for> <for>for details.
    *
    * @param path Path to modify
    * @param name xattr name.
    * @param value xattr value.
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2643</literal></expr></argument>,<argument><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">2917</literal></expr></argument>,<argument><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>Set</name> <name>an</name> <name>xattr</name> <name>of</name> <name>a</name> <name>file</name> <name>or</name> <name><name>directory</name><operator>.</operator></name>
    * <name>The</name> <name>name</name> <name>must</name> <name>be</name> <name>prefixed</name> <name>with</name> <name>the</name> <name>namespace</name> <name>followed</name> <name>by</name> <literal type="string">"."</literal><operator>.</operator> <name>For</name> <name>example</name></expr></argument>,
    <argument><expr><operator>*</operator> <literal type="string">"user.attr"</literal><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>/</operator><operator>&gt;</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Refer</name> <name>to</name> <name>the</name> <name>HDFS</name> <name>extended</name> <name>attributes</name> <name>user</name> <name>documentation</name></expr></argument></throws></expr></argument></throws></throws></for> <for>for details.
    *
    * @param path Path to modify
    * @param name xattr name.
    * @param value xattr value.
    * @param flag xattr set flag
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
       <argument><expr><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>XAttrSetFlag</name></argument>&gt;</argument_list></name> <name>flag</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2662</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">2938</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Get</name> <name>an</name> <name>xattr</name> <name>name</name> <name>and</name> <name>value</name></expr></argument> <for>for a file or directory.
    * The name must be prefixed with the namespace followed by ".". For example<operator>,</operator>
    <expr_stmt><expr><operator>*</operator> <literal type="string">"user.attr"</literal><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>/</operator><operator>&gt;</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Refer</name> <name>to</name> <name>the</name> <name>HDFS</name> <name>extended</name> <name>attributes</name> <name>user</name> <name>documentation</name></expr></expr_stmt></for></argument_list></call></expr></argument></throws></expr></argument></throws></throws></for> <for>for details.
    *
    * @param path Path to get extended attribute
    * @param name xattr name.
    * @return byte[] xattr value.
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>byte</name><index>[]</index></name> <call><name>getXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2679</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">2957</literal></expr></argument>,<argument><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Get</name> <name>all</name> <name>of</name> <name>the</name> <name>xattr</name> <name>name</name><operator>/</operator><name>value</name> <name>pairs</name></expr></argument> <for>for a file or directory.
    * Only those xattrs which the logged-in user has permissions to view
    * are returned.
   * &lt;p/&gt;
   * &lt;p&gt;
    * Refer to the HDFS extended attributes user documentation for details.
    *
    * @param path Path to get extended attributes
    * @return Map describing the XAttrs of the file or directory
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name> <call><name>getXAttrs</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2695</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">2975</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Get</name> <name>all</name> <name>of</name> <name>the</name> <name>xattrs</name> <name>name</name><operator>/</operator><name>value</name> <name>pairs</name></expr></argument> <for>for a file or directory.
    * Only those xattrs which the logged-in user has permissions to view
    * are returned.
   * &lt;p/&gt;
   * &lt;p&gt;
    * Refer to the HDFS extended attributes user documentation for details.
    *
    * @param path Path to get extended attributes
    * @param names XAttr names.
    * @return Map describing the XAttrs of the file or directory
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name> <call><name>getXAttrs</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>names</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2713</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">2995</literal></expr></argument>,<argument><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Get</name> <name>all</name> <name>of</name> <name>the</name> <name>xattr</name> <name>names</name></expr></argument> <for>for a file or directory.
    * Only those xattr names which the logged-in user has permissions to view
    * are returned.
   * &lt;p/&gt;
   * &lt;p&gt;
    * Refer to the HDFS extended attributes user documentation for details.
    *
    * @param path Path to get extended attributes
    * @return List&lt;String&gt; of the XAttr names of the file or directory
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>listXAttrs</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2729</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">3013</literal></expr></argument>,<argument><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name> <name>value</name></expr></argument>,
    <argument><expr><operator>*</operator> <name>Remove</name> <name>an</name> <name>xattr</name> <name>of</name> <name>a</name> <name>file</name> <name>or</name> <name><name>directory</name><operator>.</operator></name>
    * <name>The</name> <name>name</name> <name>must</name> <name>be</name> <name>prefixed</name> <name>with</name> <name>the</name> <name>namespace</name> <name>followed</name> <name>by</name> <literal type="string">"."</literal><operator>.</operator> <name>For</name> <name>example</name></expr></argument>,
    <argument><expr><operator>*</operator> <literal type="string">"user.attr"</literal><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>/</operator><operator>&gt;</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
    <operator>*</operator> <name>Refer</name> <name>to</name> <name>the</name> <name>HDFS</name> <name>extended</name> <name>attributes</name> <name>user</name> <name>documentation</name></expr></argument> <for>for details.
    *
    * @param path Path to remove extended attribute
    * @param name xattr name
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>removeXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2748</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3034</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>removeXAttr</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>, <argument><expr><name>String</name> <name>name</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <annotation>@<name>param</name></annotation> <name>policyName</name> <name>the</name> <name>name</name> <name>of</name> <name>the</name> <name>target</name> <name>storage</name> <name><name>policy</name><operator>.</operator> <name>The</name></name> <name>list</name>
    <operator>*</operator>                   <name>of</name> <name>supported</name> <name>Storage</name> <name>policies</name> <name>can</name> <name>be</name> <name>retrieved</name>
    <operator>*</operator>                   <name>via</name> <block>{<expr><annotation>@<name>link</name></annotation> <operator>#</operator><name>getAllStoragePolicies</name></expr>}</block><operator>.</operator>
   <operator>*</operator></expr></block></expr></argument> @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>setStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>policyName</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2759</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3047</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>policyName</name></expr></argument>)</argument_list></call>
   <comment type="block" format="javadoc">/**
    * Unset the storage policy set for a given file or directory.
    * @param src file or directory path.
   * @throws IOException
   * @throws IOException IO failure
   * @throws UnsupportedOperationException if the operation is unsupported
   *         (default outcome).
    */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>unsetStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">2771</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3061</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>unsetStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator>
    <operator>*</operator> <annotation>@<name>param</name></annotation> <name>src</name> <name>file</name> <name>or</name> <name>directory</name> <name><name>path</name><operator>.</operator></name></expr></block></expr></argument>
    * <argument>@</argument></throws></expr></argument><return>return <expr><name>storage</name> <name>policy</name></expr></return></argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></expr></argument></throws></throws></throws></expr></argument></argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></throws></for></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></throws></for></argument_list></call></expr></argument></throws></expr></argument></throws></throws></for></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></throws></for></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></throw></expr></argument></throws></throws></for> <for>for give file.
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>BlockStoragePolicySpi</name> <call><name>getStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2783</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3075</literal></expr></argument>,<argument><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>BlockStoragePolicySpi</name> <call><name>getStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>Retrieve</name> <name>all</name> <name>the</name> <name>storage</name> <name>policies</name> <name>supported</name> <name>by</name> <name>this</name> <name>file</name> <name><name>system</name><operator>.</operator></name>
    *
    <operator>*</operator> @</expr></argument></throws></expr></argument></throws></throws></for><return>return <expr><name>all</name> <name>storage</name> <name>policies</name> <name>supported</name> <name>by</name> <name>this</name> <name><name>filesystem</name><operator>.</operator></name>
   * @<throws>throws <argument><expr><name>IOException</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>IOException</name> <name>IO</name> <name>failure</name>
   <operator>*</operator></expr></argument> @<throws>throws <argument><expr><name>UnsupportedOperationException</name></expr></argument></throws> if <argument><expr><name>the</name> <name>operation</name> <name>is</name> <name>unsupported</name>
   <operator>*</operator>         <operator>(</operator>default <name>outcome</name><operator>)</operator><operator>.</operator>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>BlockStoragePolicySpi</name></extends></argument>&gt;</argument_list></name> <call><name>getAllStoragePolicies</name><argument_list>()</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">2796</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3090</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>BlockStoragePolicySpi</name> <call><name>getStoragePolicy</name><argument_list>(<argument><expr><name>final</name> <name>Path</name> <name>src</name></expr></argument>)</argument_list></call>
    <operator>*</operator> <name>is</name> <name><name>deleted</name><operator>.</operator></name>
    *
    <operator>*</operator> @<name>param</name> <name>path</name> <name>the</name> <name>trash</name> <name>root</name> <name>of</name> <name>the</name> <name>path</name> <name>to</name> <name>be</name> <name><name>determined</name><operator>.</operator></name>
   * @</expr></argument></throws></expr></argument></throws></throws></expr></return><return>return <expr><name>the</name> default <name>implementation</name> <name>returns</name> <literal type="string">"/user/$USER/.Trash"</literal><operator>.</operator>
   <operator>*</operator> @</expr></return><return>return <expr><name>the</name> default <name>implementation</name> <name>returns</name> <block>{@<expr><name>code</name> <operator>/</operator><name>user</name><operator>/</operator><name>$USER</name><operator>/</operator><operator>.</operator><name>Trash</name></expr>}</block>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>Path</name> <call><name>getTrashRoot</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
     <return>return <expr><call><name><name>this</name><operator>.</operator><name>makeQualified</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>getHomeDirectory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUri</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">2809</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3103</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>Path</name> <call><name>getTrashRoot</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
    <expr><operator>*</operator> @<name>param</name> <name>allUsers</name></expr> <return>return <expr><name>trash</name> <name>roots</name></expr></return> <for>for all users if true.
    * @return all the trash root directories.
    *         Default FileSystem returns .Trash under users' home directories if
   *         /user/$USER/.Trash exists.
   *         {@code /user/$USER/.Trash} exists.
    */
   public Collection&lt;FileStatus&gt; getTrashRoots(boolean allUsers) {
     Path userHome = new Path(getHomeDirectory().toUri().getPath());
@@ -2834,7 +3128,7 @@ public Path getTrashRoot(Path path) {
         }
       }
     } catch (IOException e) {
      LOG.warn("Cannot get all trash roots", e);
      LOGGER.warn("Cannot get all trash roots", e);
     }
     return ret;
   }
@@ -2842,23 +3136,37 @@ public Path getTrashRoot(Path path) {
   // making it volatile to be able to do a double checked locking
   private volatile static boolean FILE_SYSTEMS_LOADED = false;
 
  /**
   * Filesystems listed as services.
   */
   private static final Map&lt;String, Class&lt;? extends FileSystem&gt;&gt;
    SERVICE_FILE_SYSTEMS = new HashMap&lt;String, Class&lt;? extends FileSystem&gt;&gt;();
      SERVICE_FILE_SYSTEMS = new HashMap&lt;&gt;();
 
  /**
   * Load the filesystem declarations from service resources.
   * This is a synchronized operation.
   */
   private static void loadFileSystems() {
    LOGGER.debug("Loading filesystems");
     synchronized (FileSystem.class) {
       if (!FILE_SYSTEMS_LOADED) {
         ServiceLoader&lt;FileSystem&gt; serviceLoader = ServiceLoader.load(FileSystem.class);
         Iterator&lt;FileSystem&gt; it = serviceLoader.iterator();
         while (it.hasNext()) {
          FileSystem fs = null;
          FileSystem fs;
           try {
             fs = it.next();
             try {
               SERVICE_FILE_SYSTEMS.put(fs.getScheme(), fs.getClass());
              if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("{}:// = {} from {}",
                    fs.getScheme(), fs.getClass(),
                    ClassUtil.findContainingJar(fs.getClass()));
              }
             } catch (Exception e) {
              LOG.warn("Cannot load: " + fs + " from " +
                  ClassUtil.findContainingJar(fs.getClass()), e);
              LOGGER.warn("Cannot load: {} from {}", fs,
                  ClassUtil.findContainingJar(fs.getClass()));
              LOGGER.info("Full exception loading: {}", fs, e);
             }
           } catch (ServiceConfigurationError ee) {
             LOG.warn("Cannot load filesystem: " + ee);
@@ -2877,47 +3185,75 @@ private static void loadFileSystems() {
     }
   }
 
  /**
   * Get the FileSystem implementation class of a filesystem.
   * This triggers a scan and load of all FileSystem implementations listed as
   * services and discovered via the {@link ServiceLoader}
   * @param scheme URL scheme of FS
   * @param conf configuration: can be null, in which case the check for
   * a filesystem binding declaration in the configuration is skipped.
   * @return the filesystem
   * @throws UnsupportedFileSystemException if there was no known implementation
   *         for the scheme.
   * @throws IOException if the filesystem could not be loaded
   */
   public static Class&lt;? extends FileSystem&gt; getFileSystemClass(String scheme,
       Configuration conf) throws IOException {
     if (!FILE_SYSTEMS_LOADED) {
       loadFileSystems();
     }
    LOGGER.debug("Looking for FS supporting {}", scheme);
     Class&lt;? extends FileSystem&gt; clazz = null;
     if (conf != null) {
      clazz = (Class&lt;? extends FileSystem&gt;) conf.getClass("fs." + scheme + ".impl", null);
      String property = "fs." + scheme + ".impl";
      LOGGER.debug("looking for configuration option {}", property);
      clazz = (Class&lt;? extends FileSystem&gt;) conf.getClass(
          property, null);
    } else {
      LOGGER.debug("No configuration: skipping check for fs.{}.impl", scheme);
     }
     if (clazz == null) {
      LOGGER.debug("Looking in service filesystems for implementation class");
       clazz = SERVICE_FILE_SYSTEMS.get(scheme);
    } else {
      LOGGER.debug("Filesystem {} defined in configuration option", scheme);
     }
     if (clazz == null) {
      throw new IOException("No FileSystem for scheme: " + scheme);
      throw new UnsupportedFileSystemException("No FileSystem for scheme "
          + "\"" + scheme + "\"");
     }
    LOGGER.debug("FS for {} is {}", scheme, clazz);
     return clazz;
   }
 
  private static FileSystem createFileSystem(URI uri, Configuration conf
      ) throws IOException {
  /**
   * Create and initialize a new instance of a FileSystem.
   * @param uri URI containing the FS schema and FS details
   * @param conf configuration to use to look for the FS instance declaration
   * and to pass to the {@link FileSystem#initialize(URI, Configuration)}.
   * @return the initialized filesystem.
   * @throws IOException problems loading or initializing the FileSystem
   */
  private static FileSystem createFileSystem(URI uri, Configuration conf)
      throws IOException {
     Tracer tracer = FsTracer.get(conf);
    TraceScope scope = tracer.newScope("FileSystem#createFileSystem");
    scope.addKVAnnotation("scheme", uri.getScheme());
    try {
    try(TraceScope scope = tracer.newScope("FileSystem#createFileSystem")) {
      scope.addKVAnnotation("scheme", uri.getScheme());
       Class&lt;?&gt; clazz = getFileSystemClass(uri.getScheme(), conf);
       FileSystem fs = (FileSystem)ReflectionUtils.newInstance(clazz, conf);
       fs.initialize(uri, conf);
       return fs;
    } finally {
      scope.close();
     }
   }
 
  /** Caching FileSystem objects */
  /** Caching FileSystem objects. */
   static class Cache {
     private final ClientFinalizer clientFinalizer = new ClientFinalizer();
 
    private final Map&lt;Key, FileSystem&gt; map = new HashMap&lt;Key, FileSystem&gt;();
    private final Set&lt;Key&gt; toAutoClose = new HashSet&lt;Key&gt;();
    private final Map&lt;Key, FileSystem&gt; map = new HashMap&lt;&gt;();
    private final Set&lt;Key&gt; toAutoClose = new HashSet&lt;&gt;();
 
    /** A variable that makes all objects in the cache unique */
    /** A variable that makes all objects in the cache unique. */
     private static AtomicLong unique = new AtomicLong(1);
 
     FileSystem get(URI uri, Configuration conf) throws IOException{
@@ -2925,13 +3261,27 @@ FileSystem get(URI uri, Configuration conf) throws IOException{
       return getInternal(uri, conf, key);
     }
 
    /** The objects inserted into the cache using this method are all unique */
    /** The objects inserted into the cache using this method are all unique. */
     FileSystem getUnique(URI uri, Configuration conf) throws IOException{
       Key key = new Key(uri, conf, unique.getAndIncrement());
       return getInternal(uri, conf, key);
     }
 
    private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{
    /**
     * Get the FS instance if the key maps to an instance, creating and
     * initializing the FS if it is not found.
     * If this is the first entry in the map and the JVM is not shutting down,
     * this registers a shutdown hook to close filesystems, and adds this
     * FS to the {@code toAutoClose} set if {@code "fs.automatic.close"}
     * is set in the configuration (default: true).
     * @param uri filesystem URI
     * @param conf configuration
     * @param key key to store/retrieve this FileSystem in the cache
     * @return a cached or newly instantiated FileSystem.
     * @throws IOException
     */
    private FileSystem getInternal(URI uri, Configuration conf, Key key)
        throws IOException{
       FileSystem fs;
       synchronized (this) {
         fs = map.get(key);
@@ -2947,7 +3297,7 @@ private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOEx
           fs.close(); // close the new file system
           return oldfs;  // return the old file system
         }
        

         // now insert the new file system into the map
         if (map.isEmpty()
                 &amp;&amp; !ShutdownHookManager.get().isShutdownInProgress()) {
@@ -2972,6 +3322,11 @@ synchronized void remove(Key key, FileSystem fs) {
       }
     }
 
    /**
     * Close all FileSystems in the cache, whether they are marked for
     * automatic closing or not.
     * @throws IOException a problem arose closing one or more FileSystem.
     */
     synchronized void closeAll() throws IOException {
       closeAll(false);
     }
@@ -2979,13 +3334,14 @@ synchronized void closeAll() throws IOException {
     /**
      * Close all FileSystem instances in the Cache.
      * @param onlyAutomatic only close those that are marked for automatic closing
     * @throws IOException a problem arose closing one or more FileSystem.
      */
     synchronized void closeAll(boolean onlyAutomatic) throws IOException {
      List&lt;IOException&gt; exceptions = new ArrayList&lt;IOException&gt;();
      List&lt;IOException&gt; exceptions = new ArrayList&lt;&gt;();
 
       // Make a copy of the keys in the map since we'll be modifying
       <comment type="line">// the map while iterating over it, which isn't safe.</comment>
      List&lt;Key&gt; keys = new ArrayList&lt;Key&gt;<control>(<init><expr/></init>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <name><name>List</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>&gt;</argument_list></name> <name>keys</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr></argument>;
       <argument><expr><call><name><name>keys</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
       for <argument><expr><operator>(</operator><name>Key</name> <name>key</name> <operator>:</operator> <name>keys</name><operator>)</operator> <block>{
@@ <expr><operator>-</operator><literal type="number">3020</literal></expr>,<expr><literal type="number">23</literal> <operator>+</operator><literal type="number">3376</literal></expr>,<expr><literal type="number">23</literal> @@ <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name> <call><name>run</name><argument_list>()</argument_list></call> <block>{
         <try>try <block>{<block_content>
           <expr_stmt><expr><call><name>closeAll</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content> catch (IOException e</block></try>) <block>{
          <expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"FileSystem.Cache.closeAll() threw an exception:\n"</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;
          <expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"FileSystem.Cache.closeAll() threw an exception:\n"</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;
         }</block></block></expr>
       }</block></expr></argument>
     }</argument_list></call>
 
     <specifier>synchronized</specifier> <name>void</name> <call><name>closeAll</name><argument_list>(<argument><expr><name>UserGroupInformation</name> <name>ugi</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileSystem</name></argument>&gt;</argument_list></name> <name>targetFSList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>FileSystem</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
      <comment type="line">//Make a pass over the list and collect the filesystems to close</comment>
      <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileSystem</name></argument>&gt;</argument_list></name> <name>targetFSList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
      <comment type="line">//Make a pass over the list and collect the FileSystems to close</comment>
       <comment type="line">//we cannot close inline since close() removes the entry from the Map</comment>
       for <argument><expr><operator>(</operator><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>, <argument><name>FileSystem</name></argument>&gt;</argument_list></name></name> <name>entry</name> <operator>:</operator> <call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
         <expr><name>final</name> <name>Key</name> <name>key</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>final</name> <name>FileSystem</name> <name>fs</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
         <if_stmt><if>if <condition>(<expr><call><name><name>ugi</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>ugi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>fs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>targetFSList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
          <expr_stmt><expr><call><name><name>targetFSList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content>
       }
      List&lt;IOException&gt; exceptions = new ArrayList&lt;IOException&gt;(</block></if></if_stmt>)</block></expr></argument>;
      <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IOException</name></argument>&gt;</argument_list></name> <name>exceptions</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>;
       <comment type="line">//now make a pass over the target list and close each</comment>
       for <argument><expr><operator>(</operator><name>FileSystem</name> <name>fs</name> <operator>:</operator> <name>targetFSList</name><operator>)</operator> <block>{
         <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3068</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3424</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>synchronized</specifier> <name>void</name> <call><name>closeAll</name><argument_list>(<argument><expr><name>UserGroupInformation</name> <name>ugi</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>authority</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="null">null</literal> <operator>?</operator>
             <literal type="string">""</literal></expr></block></expr></argument></throws> <operator>:</operator> <call><name><name>StringUtils</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unique</name></name> <operator>=</operator> <name>unique</name></expr>;</expr_stmt>
        

         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ugi</name></name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>getCurrentUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
 
@@ -3078</block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3434</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>int</name> <call><name>hashCode</name><argument_list>()</argument_list></call> <block>{
       }</block>
 
       <specifier>static</specifier> <name>boolean</name> <call><name>isEqual</name><argument_list>(<argument><expr><name>Object</name> <name>a</name></expr></argument>, <argument><expr><name>Object</name> <name>b</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><name>a</name> <operator>==</operator> <name>b</name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></expr></expr_stmt></try>        
        <return>return <expr><name>a</name> <operator>==</operator> <name>b</name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
       }</block>
 
       @<name>Override</name>
@@ <operator>-</operator><literal type="number">3086</literal></expr></argument>,<argument><expr><literal type="number">42</literal> <operator>+</operator><literal type="number">3442</literal></expr></argument>,<argument><expr><literal type="number">42</literal> @@ <specifier>public</specifier> <name>boolean</name> <call><name>equals</name><argument_list>(<argument><expr><name>Object</name> <name>obj</name></expr></argument>)</argument_list></call> <block>{
         <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
           <return>return <expr><literal type="boolean">true</literal></expr>;</return>
         <expr_stmt/>}</block_content>
        if (obj != null &amp;&amp; obj instanceof Key</block></if></if_stmt>) <block>{
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>Key</name></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>Key</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>Key</name><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
           <return>return <expr><call><name>isEqual</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>scheme</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call>
                  <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>authority</name></name></expr></argument>)</argument_list></call>
                  <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>ugi</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>ugi</name></name></expr></argument>)</argument_list></call>
                  <operator>&amp;&amp;</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>unique</name></name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>unique</name></name><operator>)</operator></expr>;</return>
         <expr_stmt/>}</block_content>
        return false</block><empty_stmt>;</empty_stmt></if></if_stmt></block></block></expr></argument>        
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></argument_list></call></expr></return>
       }</block></expr></return>
 
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"("</literal><operator>+</operator><call><name><name>ugi</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")@"</literal> <operator>+</operator> <name>scheme</name> <operator>+</operator> <literal type="string">"://"</literal> <operator>+</operator> <name>authority</name></expr>;</return>        
        <return>return <expr><literal type="string">"("</literal><operator>+</operator><call><name><name>ugi</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")@"</literal> <operator>+</operator> <name>scheme</name> <operator>+</operator> <literal type="string">"://"</literal> <operator>+</operator> <name>authority</name></expr>;</return>
       </block_content>}</block></function>
     </block_content>}</block></function>
   }
  

   <comment type="block" format="javadoc">/**
    * Tracks statistics about how many reads, writes, and so forth have been
    * done in a FileSystem.
   * 
   * Since there is only one of these objects per FileSystem, there will 
   *
   * Since there is only one of these objects per FileSystem, there will
    * typically be many threads writing to this object.  Almost every operation
    * on an open file will involve a write to this object.  In contrast, reading
    * statistics is done infrequently by most programs, and not at all by others.
    * Hence, this is optimized for writes.
   * 
   * Each thread writes to its own thread-local area of memory.  This removes 
   *
   * Each thread writes to its own thread-local area of memory.  This removes
    * contention and allows us to scale up to many, many threads.  To read
   * statistics, the reader thread totals up the contents of all of the 
   * statistics, the reader thread totals up the contents of all of the
    * thread-local data areas.
    */</comment>
   public <class><specifier>static</specifier> <specifier>final</specifier> class <name>Statistics</name> <block>{
     <comment type="block" format="javadoc">/**
      * Statistics data.
     * 
     *
      * There is only a single writer to thread-local StatisticsData objects.
      * Hence, volatile is adequate here-- we do not need AtomicLong or similar
      * to prevent lost updates.
@@ -3180,23 +3536,23 @@ public String toString() {
             + readOps + " read ops, " + largeReadOps + " large read ops, "
             + writeOps + " write ops";
       }
      

       public long getBytesRead() {
         return bytesRead;
       }
      

       public long getBytesWritten() {
         return bytesWritten;
       }
      

       public int getReadOps() {
         return readOps;
       }
      

       public int getLargeReadOps() {
         return largeReadOps;
       }
      

       public int getWriteOps() {
         return writeOps;
       }
@@ -3236,6 +3592,7 @@ public long getBytesReadDistanceOfFiveOrLarger() {
     /**
      * Thread-local data.
      */</comment>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ThreadLocalNotStaticFinal"</literal></expr></argument>)</argument_list></annotation>
     <type><specifier>private</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>StatisticsData</name></argument>&gt;</argument_list></name></type> <name>threadData</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -3254,7 +3611,7 @@ public long getBytesReadDistanceOfFiveOrLarger() {
     private static final Thread STATS_DATA_CLEANER;
 
     static {
      STATS_DATA_REF_QUEUE = new ReferenceQueue&lt;Thread&gt;();
      STATS_DATA_REF_QUEUE = new ReferenceQueue&lt;&gt;();
       // start a single daemon cleaner thread
       STATS_DATA_CLEANER = new Thread(new StatisticsDataReferenceCleaner());
       STATS_DATA_CLEANER.
@@ -3266,13 +3623,13 @@ public long getBytesReadDistanceOfFiveOrLarger() {
     public Statistics(String scheme) {
       this.scheme = scheme;
       this.rootData = new StatisticsData();
      this.threadData = new ThreadLocal&lt;StatisticsData&gt;();
      this.allData = new HashSet&lt;StatisticsDataReference&gt;();
      this.threadData = new ThreadLocal&lt;&gt;();
      this.allData = new HashSet&lt;&gt;();
     }
 
     /**
      * Copy constructor.
     * 
     *
      * @param other    The input Statistics object which is cloned.
      */</comment>
     <constructor><specifier>public</specifier> <name>Statistics</name><parameter_list>(<parameter><decl><type><name>Statistics</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3288</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">3645</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>Void</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></expr></expr_stmt>
       </block_content>}</block></constructor>)</block>;</class>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadData</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>StatisticsData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allData</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>StatisticsDataReference</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadData</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allData</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
 
     <comment type="block" format="javadoc">/**
@@ -3297,10 +3654,10 @@ public Void aggregate() {
      * with that thread. On the thread being garbage collected, it is enqueued
      * to the reference queue for clean-up.
      */</comment>
    private <class>class <name>StatisticsDataReference</name> <super_list><extends>extends <super><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Thread</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
    <class><specifier>private</specifier> <specifier>final</specifier> class <name>StatisticsDataReference</name> <super_list><extends>extends <super><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Thread</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StatisticsData</name></type> <name>data</name></decl>;</decl_stmt>
 
      <constructor><specifier>public</specifier> <name>StatisticsDataReference</name><parameter_list>(<parameter><decl><type><name>StatisticsData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Thread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <constructor><specifier>private</specifier> <name>StatisticsDataReference</name><parameter_list>(<parameter><decl><type><name>StatisticsData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Thread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>STATS_DATA_REF_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
       </block_content>}</block></constructor>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3339</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">3696</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>()</argument_list></call> <block>{
                 <expr><operator>(</operator><name>StatisticsDataReference</name><operator>)</operator><call><name><name>STATS_DATA_REF_QUEUE</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;
             <expr><call><name><name>ref</name><operator>.</operator><name>cleanUp</name></name><argument_list>()</argument_list></call></expr>;
           }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Cleaner thread interrupted, will stop"</literal></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Cleaner thread interrupted, will stop"</literal></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception in the cleaner thread but it will continue to "</literal>
                <operator>+</operator> <literal type="string">"run"</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception in the cleaner thread but it will"</literal> <operator>+</operator>
                <literal type="string">" continue to run"</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></catch>
         </block_content>}</block></constructor>
       }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3367</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">3724</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>StatisticsData</name> <call><name>getThreadStatistics</name><argument_list>()</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Increment the bytes read in the statistics
     * Increment the bytes read in the statistics.
      * @param newBytes the additional bytes read
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>incrementBytesRead</name><argument_list>(<argument><expr><name>long</name> <name>newBytes</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>getThreadStatistics</name><argument_list>()</argument_list></call><operator>.</operator><name>bytesRead</name> <operator>+=</operator> <name>newBytes</name></expr>;
     }</block>
    

     <comment type="block" format="javadoc">/**
     * Increment the bytes written in the statistics
     * Increment the bytes written in the statistics.
      * @param newBytes the additional bytes written
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>incrementBytesWritten</name><argument_list>(<argument><expr><name>long</name> <name>newBytes</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>getThreadStatistics</name><argument_list>()</argument_list></call><operator>.</operator><name>bytesWritten</name> <operator>+=</operator> <name>newBytes</name></expr>;
     }</block>
    

     <comment type="block" format="javadoc">/**
     * Increment the number of read operations
     * Increment the number of read operations.
      * @param count number of read operations
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>incrementReadOps</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3391</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3748</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>incrementReadOps</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Increment the number of large read operations
     * Increment the number of large read operations.
      * @param count number of large read operations
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>incrementLargeReadOps</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3399</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3756</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>incrementLargeReadOps</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Increment the number of write operations
     * Increment the number of write operations.
      * @param count number of write operations
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>incrementWriteOps</name><argument_list>(<argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3438</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3795</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>incrementBytesReadByDistance</name><argument_list>(<argument><expr><name>int</name> <name>distance</name></expr></argument>, <argument><expr><name>long</name> <name>newBytes</name></expr></argument>)</argument_list></call> <block>{
      <expr><operator>*</operator> <name>this</name> <name>Statistics</name> <name><name>object</name><operator>.</operator></name>
      *
      <operator>*</operator> <name>For</name> <name>each</name> <name>StatisticsData</name> <name>object</name></expr>, <expr><name>we</name> <name>will</name> <name>call</name> <name>accept</name> <name>on</name> <name>the</name> <name><name>visitor</name><operator>.</operator></name>
     * <name>Finally</name></expr>, <expr><name>at</name> <name>the</name> <name>end</name></expr>, <expr><name>we</name> <name>will</name> <name>call</name> <name>aggregate</name> <name>to</name> <name>get</name> <name>the</name> <name>final</name> <name><name>total</name><operator>.</operator></name> 
     * <name>Finally</name></expr>, <expr><name>at</name> <name>the</name> <name>end</name></expr>, <expr><name>we</name> <name>will</name> <name>call</name> <name>aggregate</name> <name>to</name> <name>get</name> <name>the</name> <name>final</name> <name><name>total</name><operator>.</operator></name>
      *
      <operator>*</operator> @<name>param</name>         <name>visitor</name> <name>to</name> <name><name>use</name><operator>.</operator></name>
      * @</expr><return>return        <expr><name>The</name> <name><name>total</name><operator>.</operator></name>
@@ <operator>-</operator><literal type="number">3453</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3810</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>incrementBytesReadByDistance</name><argument_list>(<argument><expr><name>int</name> <name>distance</name></expr></argument>, <argument><expr><name>long</name> <name>newBytes</name></expr></argument>)</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Get the total number of bytes read
     * Get the total number of bytes read.
      * @return the number of bytes
      */</comment>
     <specifier>public</specifier> <name>long</name> <call><name>getBytesRead</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3470</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">3827</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>Long</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
         }</block></expr>
       }</block></expr></return>)</block></expr>;
     }</block>
    

     <comment type="block" format="javadoc">/**
     * Get the total number of bytes written
     * Get the total number of bytes written.
      * @return the number of bytes
      */</comment>
     <specifier>public</specifier> <name>long</name> <call><name>getBytesWritten</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3489</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">3846</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>Long</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
         }</block></expr>
       }</block></expr>)</block></expr>;
     }</block>
    

     <comment type="block" format="javadoc">/**
     * Get the number of file system read operations such as list files
     * Get the number of file system read operations such as list files.
      * @return number of read operations
      */</comment>
     <specifier>public</specifier> <name>int</name> <call><name>getReadOps</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3512</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3869</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>Integer</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
 
     <comment type="block" format="javadoc">/**
      * Get the number of large file system read operations such as list files
     * under a large directory
     * under a large directory.
      * @return number of large read operations
      */</comment>
     <expr><specifier>public</specifier> <name>int</name> <call><name>getLargeReadOps</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">3531</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3888</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>Integer</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Get the number of file system write operations such as create, append 
     * Get the number of file system write operations such as create, append
      * rename etc.
      * @return number of write operations
      */</comment>
@@ <operator>-</operator><literal type="number">3581</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3938</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>long</name> <call><name>getBytesReadByDistance</name><argument_list>(<argument><expr><name>int</name> <name>distance</name></expr></argument>)</argument_list></call> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Get all statistics data
     * Get all statistics data.
      * MR or other frameworks can use the method to get all statistics at once.
      * @return the StatisticsData
      */</comment>
@@ <operator>-</operator><literal type="number">3650</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">4007</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>Void</name> <call><name>aggregate</name><argument_list>()</argument_list></call> <block>{
         }</block></expr>
       }</block></expr>)</block></expr>;
     }</block>
    

     <comment type="block" format="javadoc">/**
      * Get the uri scheme associated with this statistics object.
      * @return the schema associated with this set of statistics
@@ -3664,7 +4021,7 @@ synchronized int getAllThreadLocalDataSize() {
       return allData.size();
     }
   }
  

   /**
    * Get the Map of Statistics object indexed by URI Scheme.
    * @return a Map having a key as URI scheme and value as Statistics object
@@ -3672,7 +4029,7 @@ synchronized int getAllThreadLocalDataSize() {
    */</comment>
   @<name>Deprecated</name>
   <specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name> <call><name>getStatistics</name><argument_list>()</argument_list></call> <block>{
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <for>for<control>(<init><decl><type><name>Statistics</name></type> <name>stat</name><range>: <expr><call><name><name>statisticsTable</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>stat</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block>
@@ <operator>-</operator><literal type="number">3685</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">4042</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>synchronized</specifier> <name>int</name> <call><name>getAllThreadLocalDataSize</name><argument_list>()</argument_list></call> <block>{
    <expr><operator>*</operator><operator>/</operator>
   @<name>Deprecated</name>
   <specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Statistics</name></argument>&gt;</argument_list></name> <call><name>getAllStatistics</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Statistics</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>statisticsTable</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
    <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>statisticsTable</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
  

   <comment type="block" format="javadoc">/**
   * Get the statistics for a particular file system
   * Get the statistics for a particular file system.
    * @param cls the class to lookup
    * @return a statistics object
    * @deprecated use {@link #getGlobalStorageStatistics()}
@@ -3714,22 +4071,22 @@ public StorageStatistics provide() {
     }
     return result;
   }
  

   /**
   * Reset all statistics for all file systems
   * Reset all statistics for all file systems.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clearStatistics</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>GlobalStorageStatistics</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
   * Print all statistics for all file systems
   * Print all statistics for all file systems to {@code System.out}
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier>
   <name>void</name></type> <name>printStatistics</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FileSystem</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name></name></type> <name>pair</name><range>:</range></decl></init> 
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FileSystem</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>Statistics</name></argument>&gt;</argument_list></name></name></type> <name>pair</name><range>:
             <expr><call><name><name>statisticsTable</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  FileSystem "</literal> <operator>+</operator> <call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> 
      <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  FileSystem "</literal> <operator>+</operator> <call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator>
                          <literal type="string">": "</literal> <operator>+</operator> <call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block></for>
   }</control></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3737</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">4094</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <name>void</name> <call><name>printStatistics</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <comment type="line">// Symlinks are temporarily disabled - see HADOOP-10020 and HADOOP-10052</comment>
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <name>symlinksEnabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Configuration</name></type> <name>conf</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

   <function><annotation>@<name>VisibleForTesting</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>areSymlinksEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>symlinksEnabled</name></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>site</name><operator>/</operator><name>markdown</name><operator>/</operator><name>filesystem</name><operator>/</operator><name><name>filesystem</name><operator>.</operator><name>md</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>site</name><operator>/</operator><name>markdown</name><operator>/</operator><name>filesystem</name><operator>/</operator><name><name>filesystem</name><operator>.</operator><name>md</name></name>
<name>index</name> <name>b18b5f60353</name><operator>..</operator><literal type="number">201d3974fd3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>site</name><operator>/</operator><name>markdown</name><operator>/</operator><name>filesystem</name><operator>/</operator><name><name>filesystem</name><operator>.</operator><name>md</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>site</name><operator>/</operator><name>markdown</name><operator>/</operator><name>filesystem</name><operator>/</operator><name><name>filesystem</name><operator>.</operator><name>md</name></name>
@@ <operator>-</operator><literal type="number">419</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">419</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>If</name> <name>the</name> <name>filesystem</name> <name>is</name> <name>not</name> <name>location</name> <name>aware</name></expr><operator>,</operator> <expr><name>it</name> <name>SHOULD</name></expr></expr_stmt> <return>return
         <expr><call><name>BlockLocation</name><argument_list>(<argument><expr><index>[<expr><literal type="string">"localhost:9866"</literal></expr>]</index></expr></argument> ,
                   <argument><expr><index>[<expr><literal type="string">"localhost"</literal></expr>]</index></expr></argument>,
                   <argument><expr><index>[<expr><literal type="string">"/default/localhost"</literal></expr>]</index>
                   <literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>F</name><operator>.</operator><name>getLen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                   <literal type="number">0</literal></expr><operator>,</operator> <expr><call><name><name>f</name><operator>.</operator><name>getLen</name></name><argument_list>()</argument_list></call></expr></return>)</block_content>
        ]</block> ;</function>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestDefaultUri</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestDefaultUri</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f2327353a67</name><operator>..</operator><name>b84d66aa4ce</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestDefaultUri</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestDefaultUri</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt>
 <import>import static <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>CoreMatchers</name><operator>.</operator><name>instanceOf</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>CoreMatchers</name><operator>.</operator><name>is</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertThat</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>fail</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>test</name><operator>.</operator><name>GenericTestUtils</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>test</name><operator>.</operator><name>LambdaTestUtils</name><operator>.</operator><name>*</name></name>;</import></block_content></block></function></block></class>
 
 <comment type="block" format="javadoc">/**
  * Test default URI related APIs in {@link FileSystem}.
@@ -69,15 +69,12 @@ public void tetGetDefaultUriNoScheme() {
   }
 
   @Test
  public void tetGetDefaultUriNoSchemeTrailingSlash() {
  public void tetGetDefaultUriNoSchemeTrailingSlash() throws Exception {
     conf.set(FS_DEFAULT_NAME_KEY, "nn_host/");
    try {
      FileSystem.getDefaultUri(conf);
      fail("Expect IAE: No scheme in default FS");
    } catch (IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains(
          "No scheme in default FS", e);
    }
    intercept(IllegalArgumentException.class,
        "No scheme in default FS",
        () -&gt; FileSystem.getDefaultUri(conf));

   }
 
   @Test
@@ -88,28 +85,19 @@ public void tetFsGet() throws IOException {
   }
 
   @Test
  public void tetFsGetNoScheme() throws IOException {
  public void tetFsGetNoScheme() throws Exception {
     // Bare host name or address indicates hdfs scheme
     conf.set(FS_DEFAULT_NAME_KEY, "nn_host");
    try {
      FileSystem.get(conf);
      fail("Expect IOE: No FileSystem for scheme: hdfs");
    } catch (IOException e) {
      GenericTestUtils.assertExceptionContains(
          "No FileSystem for scheme: hdfs", e);
    }
    intercept(UnsupportedFileSystemException.class, "hdfs",
        () -&gt; FileSystem.get(conf));
   }
 
   @Test
  public void tetFsGetNoSchemeTrailingSlash() throws IOException {
  public void tetFsGetNoSchemeTrailingSlash() throws Exception {
     // Bare host name or address with trailing slash is invalid
     conf.set(FS_DEFAULT_NAME_KEY, "nn_host/");
    try {
      FileSystem.get(conf);
      fail("Expect IAE: No scheme in default FS");
    } catch (IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains(
          "No scheme in default FS", e);
    }
    intercept(IllegalArgumentException.class,
        "No scheme in default FS",
        () -&gt; FileSystem.get(conf));
   }
 }
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
index 07b07dc8bc4..69ef71e7985 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
@@ -95,16 +95,14 @@ public void testDefaultFsUris() throws Exception {
     try {
       fs = FileSystem.get(URI.create("//host"), conf);
       fail("got fs with auth but no scheme");
    } catch (Exception e) {
      assertEquals("No FileSystem for scheme: null", e.getMessage());
    } catch (UnsupportedFileSystemException e) {
     }
    

     // no scheme, different auth
     try {
       fs = FileSystem.get(URI.create("//host2"), conf);
       fail("got fs with auth but no scheme");
    } catch (Exception e) {
      assertEquals("No FileSystem for scheme: null", e.getMessage());
    } catch (UnsupportedFileSystemException e) {
     }
   }
   
- 
2.19.1.windows.1

</comment></unit>
