<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/c59af2fdf8f.java"><expr_stmt><expr><name>From</name> <name>c59af2fdf8f7f53117c626a895dab7fd78cf08ec</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Steve</name> <name><name>Loughran</name> <argument_list type="generic">&lt;<argument><name>stevel</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">13</literal> <name>Oct</name> <literal type="number">2015</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">29</literal><operator>:</operator><literal type="number">50</literal> <operator>+</operator><literal type="number">0100</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">10775.</literal> <name>Shell</name> <name>operations</name> <name>to</name> <name>fail</name> <name>with</name> <name>meaningful</name> <name>errors</name>
 <name>on</name> <name>windows</name></expr></expr_stmt> <if_stmt><if>if winutils.exe not found. <condition>(<expr><name>stevel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileUtil</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">29</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>HardLink</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DataChecksum</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NativeLibraryChecker</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">730</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SysInfoWindows</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>SymlinkBaseTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">30</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileUtil</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkLocalFS</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">11</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestShell</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">265</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestWinUtils</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">124</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>yarn</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WindowsBasedProcessTree</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>ContainerExecutor</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>WindowsSecureContainerExecutor</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>launcher</name><operator>/</operator><name><name>ContainerLaunch</name><operator>.</operator><name>java</name></name>             <operator>|</operator>  <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>TestContainerExecutor</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>launcher</name><operator>/</operator><name><name>TestContainerLaunch</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">31</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">19</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">918</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">386</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>f3c341c7232</name><operator>..</operator><literal type="number">4b6683077a4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">885</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">885</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Release</name> <literal type="number">2.8.0</literal> <operator>-</operator> <name>UNRELEASED</name>
     <name>HADOOP</name><operator>-</operator><literal type="number">12344.</literal> <name>Improve</name> <name>validateSocketPathSecurity0</name> <name>error</name> <call><name>message</name> <argument_list>(<argument><expr><name>Casey</name>
     <name>Brotherton</name> <name>via</name> <name>Colin</name> <name><name>P</name><operator>.</operator> <name>McCabe</name></name></expr></argument>)</argument_list></call>
 
    <name>HADOOP</name><operator>-</operator><literal type="number">10775.</literal> <name>Shell</name> <name>operations</name> <name>to</name> <name>fail</name> <name>with</name> <name>meaningful</name> <name>errors</name> <name>on</name> <name>windows</name></expr></expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if
    winutils.exe not found. <condition>(<expr><name>stevel</name></expr>)</condition><block type="pseudo"><block_content>

   <expr_stmt><expr><name>OPTIMIZATIONS</name>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">11785.</literal> <name>Reduce</name> <name>the</name> <name>number</name> <name>of</name> <name>listStatus</name> <name>operation</name> <name>in</name> <name>distcp</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3c0e90da2d9</literal><operator>..</operator><name>e74c41c8290</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>FileUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">784</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">784</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>int</name> <call><name>symLink</name><argument_list>(<argument><expr><name>String</name> <name>target</name></expr></argument>, <argument><expr><name>String</name> <name>linkname</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name><block>{
     <expr><name>File</name> <name>linkFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(
         <argument><expr><call><name><name>Path</name><operator>.</operator><name>getPathWithoutSchemeAndAuthority</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>linkname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
    <comment type="line">// If not on Java7+, copy a file instead of creating a symlink since</comment>
    <comment type="line">// Java6 has close to no support for symlinks on Windows. Specifically</comment>
    <comment type="line">// File#length and File#renameTo do not work as expected.</comment>
    <comment type="line">// (see HADOOP-9061 for additional details)</comment>
    <comment type="line">// We still create symlinks for directories, since the scenario in this</comment>
    <comment type="line">// case is different. The directory content could change in which</comment>
    <comment type="line">// case the symlink loses its purpose (for example task attempt log folder</comment>
    <comment type="line">// is symlinked under userlogs and userlogs are generated afterwards).</comment>
    <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Shell</name><operator>.</operator><name>isJava7OrAbove</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>targetFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"FileUtil#symlink: On Windows+Java6, copying file instead "</literal> <operator>+</operator>
            <literal type="string">"of creating a symlink. Copying "</literal> <operator>+</operator> <name>target</name> <operator>+</operator> <literal type="string">" -&gt; "</literal> <operator>+</operator> <name>linkname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>linkFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Parent directory "</literal> <operator>+</operator> <call><name><name>linkFile</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>+</operator>
              <literal type="string">" does not exist."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>, <argument><expr><name>linkFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"FileUtil#symlink failed to copy the file with error: "</literal>
            <operator>+</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Exit with non-zero exit code</comment>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></catch></try>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>getSymlinkCommand</name></name><argument_list>(
         <argument><expr><call><name><name>targetFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>linkFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>HardLink</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>HardLink</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">209ba6997ae</literal><operator>..</operator><literal type="number">0de019d34a1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>HardLink</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>HardLink</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>void</name> <call><name>setLinkCountCmdTemplate</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>template</name></expr></argument>)</argument_list></call> <block>{
   @<expr><name>VisibleForTesting</name>
   <specifier>static</specifier> <name>class</name> <name>HardLinkCGWin</name> extends <name>HardLinkCommandGetter</name> <block>{
 
    <comment type="block" format="javadoc">/**
     * Build the windows link command. This must not
     * use an exception-raising reference to WINUTILS, as
     * some tests examine the command.
     */</comment>
    @<expr><call><name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></call>
     <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <name>getLinkCountCommand</name> <operator>=</operator> <block>{
         <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"hardlink"</literal></expr>, <expr><literal type="string">"stat"</literal></expr>, <expr><literal type="null">null</literal></expr>}</block></expr>;
 
@@ <expr><operator>-</operator><literal type="number">130</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">136</literal></expr>,<expr><literal type="number">8</literal> @@ <name>void</name> <call><name>setLinkCountCmdTemplate</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>template</name></expr></argument>)</argument_list></call> <block>{
      <expr><operator>*</operator><operator>/</operator>
     @<name>Override</name>
     <name><name>String</name><index>[]</index></name> <call><name>linkCount</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <comment type="line">// trigger the check for winutils</comment>
      <expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsFile</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
       <expr><name><name>String</name><index>[]</index></name> <name>buf</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><name><name>getLinkCountCommand</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;
       <expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>getLinkCountCommand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
                        <argument><expr><name><name>getLinkCountCommand</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DataChecksum</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DataChecksum</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a38ec325fec</name><operator>..</operator><name>d9dc7af1fc2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DataChecksum</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>DataChecksum</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">75</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">75</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>Type</name> <call><name>valueOf</name><argument_list>(<argument><expr><name>int</name> <name>id</name></expr></argument>)</argument_list></call> <block>{
    <expr><operator>*</operator> <name>is</name> <name>chosen</name> <name>depending</name> <name>on</name> <name>the</name> <name><name>platform</name><operator>.</operator></name>
    *<operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>Checksum</name> <call><name>newCrc32</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><call><name><name>Shell</name><operator>.</operator><name>isJava7OrAbove</name></name><argument_list>()</argument_list></call><operator>?</operator> <operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call><operator>:</operator> <operator>new</operator> <call><name>PureJavaCrc32</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
    <return>return <expr><operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>
 
   <specifier>public</specifier> <specifier>static</specifier> <name>DataChecksum</name> <call><name>newDataChecksum</name><argument_list>(<argument><expr><name>Type</name> <name>type</name></expr></argument>, <argument><expr><name>int</name> <name>bytesPerChecksum</name></expr></argument> )</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NativeLibraryChecker</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NativeLibraryChecker</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">81448ab2d4d</literal><operator>..</operator><literal type="number">9d84ced8569</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NativeLibraryChecker</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NativeLibraryChecker</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">6</literal> @@</expr>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name></name>;</package></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>NativeCodeLoader</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>crypto</name><operator>.</operator><name>OpensslCipher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>Lz4Codec</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>zlib</name><operator>.</operator><name>ZlibFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceAudience</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceStability</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <class><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>Private</name></name></annotation>
 <annotation>@<name><name>InterfaceStability</name><operator>.</operator><name>Unstable</name></name></annotation>
 <specifier>public</specifier> class <name>NativeLibraryChecker</name> <block>{
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>=
      <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>NativeLibraryChecker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/**
    * A tool to test native library availability, 
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <block>{
       }</block></expr></expr_stmt>
     }</block></class>
 
    <comment type="line">// winutils.exe is required on Windows</comment>
    <expr_stmt><expr><name>winutilsPath</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>getWinUtilsPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>winutilsPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>winutilsExists</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>winutilsPath</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// winutils.exe is required on Windows</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>winutilsPath</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>getWinutilsFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutilsExists</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"No Winutils: "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutilsPath</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutilsExists</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"winutils: %b %s%n"</literal></expr></argument>, <argument><expr><name>winutilsExists</name></expr></argument>, <argument><expr><name>winutilsPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Native library checking:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ca70ef30fd6</name><operator>..</operator><literal type="number">4370d89ec89</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Shell</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@</expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimerTask</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>LogFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceAudience</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>classification</name><operator>.</operator><name>InterfaceStability</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<comment type="block" format="javadoc">/** 
 * A base class for running a Unix command.
 * 
 * &lt;code&gt;Shell&lt;/code&gt; can be used to run unix commands like &lt;code&gt;du&lt;/code&gt; or
/**
 * A base class for running a Shell command.
 *
 * &lt;code&gt;Shell&lt;/code&gt; can be used to run shell commands like &lt;code&gt;du&lt;/code&gt; or
  * &lt;code&gt;df&lt;/code&gt;. It also offers facilities to gate commands by 
  * time-intervals.
  */</comment>
<class><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>LimitedPrivate</name></name><argument_list>(<argument><expr><block>{<expr><literal type="string">"HDFS"</literal></expr>, <argument><expr><literal type="string">"MapReduce"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
<annotation>@<name><name>InterfaceStability</name><operator>.</operator><name>Unstable</name></name></annotation>
<specifier>abstract</specifier> <specifier>public</specifier> class <name>Shell</name> <block>{
  
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Log</name></type> <name>LOG</name> <init>= <expr><call><name><name>LogFactory</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>IS_JAVA7_OR_ABOVE</name> <init>=
      <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.version"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><literal type="string">"1.7"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<class><annotation>@<name><name>InterfaceAudience</name><operator>.</operator><name>Public</name></name></annotation>
<annotation>@<name><name>InterfaceStability</name><operator>.</operator><name>Evolving</name></name></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>Shell</name> <block>{
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Text to include when there are windows-specific problems.
   * {@value}
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WINDOWS_PROBLEMS</name> <init>=
      <expr><literal type="string">"https://wiki.apache.org/hadoop/WindowsProblems"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Name of the windows utils binary: {@value}.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WINUTILS_EXE</name> <init>= <expr><literal type="string">"winutils.exe"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * System property for the Hadoop home directory: {@value}.
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SYSPROP_HADOOP_HOME_DIR</name> <init>= <expr><literal type="string">"hadoop.home.dir"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * Environment variable for Hadoop's home dir: {@value}.
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENV_HADOOP_HOME</name> <init>= <expr><literal type="string">"HADOOP_HOME"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * query to see if system is Java 7 or later.
   * Now that Hadoop requires Java 7 or later, this always returns true.
   * @deprecated This call isn't needed any more: please remove uses of it.
   * @return true, always.
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isJava7OrAbove</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>IS_JAVA7_OR_ABOVE</name></expr>;</return>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * Maximum command line length in Windows
    * KB830473 documents this as 8191
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WINDOWS_MAX_SHELL_LENGHT</name> <init>= <expr><literal type="number">8191</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WINDOWS_MAX_SHELL_LENGTH</name> <init>= <expr><literal type="number">8191</literal></expr></init></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
   * Checks if a given command (String[]) fits in the Windows maximum command line length
   * Note that the input is expected to already include space delimiters, no extra count
   * will be added for delimiters.
   * mis-spelling of {@link #WINDOWS_MAX_SHELL_LENGTH}.
   * @deprecated use the correctly spelled constant.
   */</comment>
  <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WINDOWS_MAX_SHELL_LENGHT</name> <init>= <expr><name>WINDOWS_MAX_SHELL_LENGTH</name></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Checks if a given command (String[]) fits in the Windows maximum command
   * line length Note that the input is expected to already include space
   * delimiters, no extra count will be added for delimiters.
    *
    * @param commands command parts, including any space delimiters
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>checkWindowsCommandLineLength</name><argument_list>(<argument><expr><name>String</name><operator>...</operator><name>commands</name></expr></argument>)</argument_list></call></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name><range>: <expr><name>commands</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>WINDOWS_MAX_SHELL_LENGHT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>WINDOWS_MAX_SHELL_LENGTH</name></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
          <argument><expr><literal type="string">"The command line has a length of %d exceeds maximum allowed length of %d. "</literal> <operator>+</operator>
          <literal type="string">"Command starts with: %s"</literal></expr></argument>,
          <argument><expr><name>len</name></expr></argument>, <argument><expr><name>WINDOWS_MAX_SHELL_LENGHT</name></expr></argument>,
          <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        <expr_stmt><expr><literal type="string">"The command line has a length of %d exceeds maximum allowed length"</literal> <operator>+</operator>
            <literal type="string">" of %d. Command starts with: %s"</literal></expr><operator>,</operator>
        <expr><name>len</name></expr><operator>,</operator> <expr><name>WINDOWS_MAX_SHELL_LENGTH</name></expr><operator>,</operator>
        <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
     }</block></class>
   }</block></class>
 
  <comment type="block" format="javadoc">/** a Unix command to get the current user's name */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>USER_NAME_COMMAND</name> <init>= <expr><literal type="string">"whoami"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** a Unix command to get the current user's name: {@value}. */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_NAME_COMMAND</name> <init>= <expr><literal type="string">"whoami"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/** Windows CreateProcess synchronization object */</comment>
  <comment type="block" format="javadoc">/** Windows &lt;code&gt;CreateProcess&lt;/code&gt; synchronization object. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Object</name></type> <name>WindowsProcessLaunchLock</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <comment type="line">// OSType detection</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">100</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>checkWindowsCommandLineLength</name><argument_list>(<argument><expr><name>String</name><operator>...</operator><name>commands</name></expr></argument>)</argument_list></call>
     <name>OS_TYPE_OTHER</name></expr></expr_stmt>
   </block_content>}</block></else></if_stmt>
 
  <comment type="block" format="javadoc">/**
   * Get the type of the operating system, as determined from parsing
   * the &lt;code&gt;os.name&lt;/code&gt; property.
   */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OSType</name></type> <name>osType</name> <init>= <expr><call><name>getOSType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>OSType</name></type> <name>getOSType</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>OSType</name></type> <name>getOSType</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>osName</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>osName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return <expr><name><name>OSType</name><operator>.</operator><name>OS_TYPE_WIN</name></name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">49</literal> @@ <specifier>static</specifier> <specifier>private</specifier> <name>OSType</name> <call><name>getOSType</name><argument_list>()</argument_list></call> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>boolean</name> <name>PPC_64</name>
                 <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><literal type="string">"os.arch"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"ppc64"</literal></expr></argument>)</argument_list></call></expr>;
 
  <comment type="block" format="javadoc">/** a Unix command to get the current user's groups list */</comment>
  <comment type="block" format="javadoc">/** a Unix command to get the current user's groups list. */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getGroupsCommand</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><operator>(</operator><name>WINDOWS</name><operator>)</operator><operator>?</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"cmd"</literal></expr>, <expr><literal type="string">"/c"</literal></expr>, <expr><literal type="string">"groups"</literal></expr>}</block>
                     <operator>:</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"groups"</literal></expr>}</block></expr>;</return>
   }</block>
 
   <comment type="block" format="javadoc">/**
   * a Unix command to get a given user's groups list.
   * A command to get a given user's groups list.
    * If the OS is not WINDOWS, the command will get the user's primary group
    * first and finally get the groups list which includes the primary group.
    * i.e. the user's primary group will be included twice.
    */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getGroupsForUserCommand</name><argument_list>(<argument><expr><name>final</name> <name>String</name> <name>user</name></expr></argument>)</argument_list></call> <block>{
    <comment type="line">//'groups username' command return is non-consistent across different unixes</comment>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr>?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>WINUTILS</name></expr>, <expr><literal type="string">"groups"</literal></expr>, <expr><literal type="string">"-F"</literal></expr>, <expr><literal type="string">"\""</literal> <operator>+</operator> <name>user</name> <operator>+</operator> <literal type="string">"\""</literal></expr>}</block></expr>
                    </then><else>: <expr><operator>new</operator> <name><name>String</name> <index>[]</index></name> <block>{<expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"id -gn "</literal> <operator>+</operator> <name>user</name>
                                     <operator>+</operator> <literal type="string">"&amp;&amp; id -Gn "</literal> <operator>+</operator> <name>user</name></expr>}</block></expr></else></ternary></expr>;</return></block></block></expr></expr_stmt>
    <comment type="line">//'groups username' command return is inconsistent across different unixes</comment>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then>
      <expr><operator>new</operator> <name><name>String</name><index>[]</index></name>
          <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"groups"</literal></expr>, <expr><literal type="string">"-F"</literal></expr>, <expr><literal type="string">"\""</literal> <operator>+</operator> <name>user</name> <operator>+</operator> <literal type="string">"\""</literal></expr> }</block></expr>
      </then><else>: <expr><operator>new</operator> <name><name>String</name> <index>[]</index></name> <block>{<expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"id -gn "</literal> <operator>+</operator> <name>user</name> <operator>+</operator> <literal type="string">"&amp;&amp; id -Gn "</literal> <operator>+</operator> <name>user</name></expr>}</block></expr></else></ternary></expr>;</return>
   </block_content>}</block></if></if_stmt>
 
  <comment type="block" format="javadoc">/** a Unix command to get a given netgroup's user list */</comment>
  <comment type="block" format="javadoc">/** A command to get a given netgroup's user list. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getUsersForNetgroupCommand</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>netgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <comment type="line">//'groups username' command return is non-consistent across different unixes</comment>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr>?</condition><then> <expr><ternary><condition><expr><operator>new</operator> <name><name>String</name> <index>[]</index></name></expr></condition> <block>{<block_content><expr><literal type="string">"cmd"</literal></expr><operator>,</operator> <expr><literal type="string">"/c"</literal></expr><operator>,</operator> <expr><literal type="string">"getent netgroup "</literal> <operator>+</operator> <name>netgroup</name></expr></block_content>}</block></ternary></expr></then></ternary></expr></return>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name> <index>[]</index></name> <block>{<expr><literal type="string">"cmd"</literal></expr>, <expr><literal type="string">"/c"</literal></expr>, <expr><literal type="string">"getent netgroup "</literal> <operator>+</operator> <name>netgroup</name></expr>}</block></expr>
                     </then><else>: <expr><operator>new</operator> <name><name>String</name> <index>[]</index></name> <block>{<expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"getent netgroup "</literal> <operator>+</operator> <name>netgroup</name></expr>}</block></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** Return a command to get permission information. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getGetPermissionCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then> <expr><ternary><condition><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></condition> <block>{<block_content> <expr_stmt><expr><name>WINUTILS</name></expr><operator>,</operator> <expr><literal type="string">"ls"</literal></expr><operator>,</operator> <expr><literal type="string">"-F"</literal></expr></expr_stmt> </block_content>}</block></ternary></expr></then></ternary></expr></return>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"-F"</literal></expr> }</block></expr>
                      </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"/bin/ls"</literal></expr>, <expr><literal type="string">"-ld"</literal></expr> }</block></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return a command to set permission */</comment>
  <comment type="block" format="javadoc">/** Return a command to set permission. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getSetPermissionCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>recursive</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>WINUTILS</name></expr>, <expr><literal type="string">"chmod"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>, <expr><name>perm</name></expr> }</block></expr>
                         </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chmod"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>, <expr><name>perm</name></expr> }</block></expr></else></ternary></expr>;</return>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then>
          <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"chmod"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>, <expr><name>perm</name></expr> }</block></expr>
          </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chmod"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>, <expr><name>perm</name></expr> }</block></expr></else></ternary></expr>;</return>
     </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>WINUTILS</name></expr>, <expr><literal type="string">"chmod"</literal></expr>, <expr><name>perm</name></expr> }</block></expr>
                       </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chmod"</literal></expr>, <expr><name>perm</name></expr> }</block></expr></else></ternary></expr>;</return>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then>
          <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"chmod"</literal></expr>, <expr><name>perm</name></expr> }</block></expr>
          </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chmod"</literal></expr>, <expr><name>perm</name></expr> }</block></expr></else></ternary></expr>;</return>
     </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">182</literal></expr><operator>,</operator><expr><literal type="number">45</literal> <operator>+</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">52</literal> @@ <specifier>static</specifier> <specifier>private</specifier> <name>OSType</name> <call><name>getOSType</name><argument_list>()</argument_list></call> <block>{
    <expr><operator>*</operator> @<name>param</name> <name>file</name> <name>String</name> <name>file</name> <name>to</name> <name>set</name>
    <operator>*</operator> @</expr><return>return <expr><name><name>String</name><index>[]</index></name> <name>containing</name> <name>command</name> <name>and</name> <name>arguments</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getSetPermissionCommand</name><argument_list>(<argument><expr><name>String</name> <name>perm</name></expr></argument>, <argument><expr><name>boolean</name> <name>recursive</name></expr></argument>,
                                                 <argument><expr><name>String</name> <name>file</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getSetPermissionCommand</name><argument_list>(<argument><expr><name>String</name> <name>perm</name></expr></argument>,
      <argument><expr><name>boolean</name> <name>recursive</name></expr></argument>, <argument><expr><name>String</name> <name>file</name></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>String</name><index>[]</index></name> <name>baseCmd</name> <operator>=</operator> <call><name>getSetPermissionCommand</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>String</name><index>[]</index></name> <name>cmdWithFile</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>baseCmd</name></expr></argument>, <argument><expr><name><name>baseCmd</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>cmdWithFile</name><index>[<expr><name><name>cmdWithFile</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>file</name></expr>;
     <return>return <expr><name>cmdWithFile</name></expr>;</return></block></expr>
   }</block>
 
  <comment type="block" format="javadoc">/** Return a command to set owner */</comment>
  <comment type="block" format="javadoc">/** Return a command to set owner. */</comment>
   <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getSetOwnerCommand</name><argument_list>(<argument><expr><name>String</name> <name>owner</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><operator>(</operator><name>WINDOWS</name><operator>)</operator> <operator>?</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>WINUTILS</name></expr>, <expr><literal type="string">"chown"</literal></expr>, <expr><literal type="string">"\""</literal> <operator>+</operator> <name>owner</name> <operator>+</operator> <literal type="string">"\""</literal></expr> }</block>
                     <operator>:</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chown"</literal></expr>, <expr><name>owner</name></expr> }</block></expr>;</return></block></expr></return>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr> ?</condition><then>
        <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"chown"</literal></expr>, <expr><literal type="string">"\""</literal> <operator>+</operator> <name>owner</name> <operator>+</operator> <literal type="string">"\""</literal></expr> }</block></expr>
        </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"chown"</literal></expr>, <expr><name>owner</name></expr> }</block></expr></else></ternary></expr>;</return>
   }</block></expr></expr_stmt>
  
  <comment type="block" format="javadoc">/** Return a command to create symbolic links */</comment>

  <comment type="block" format="javadoc">/** Return a command to create symbolic links. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getSymlinkCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>WINUTILS</name></expr>, <expr><literal type="string">"symlink"</literal></expr>, <expr><name>link</name></expr>, <expr><name>target</name></expr> }</block></expr>
                   </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"ln"</literal></expr>, <expr><literal type="string">"-s"</literal></expr>, <expr><name>target</name></expr>, <expr><name>link</name></expr> }</block></expr></else></ternary></expr>;</return>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then>
       <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"symlink"</literal></expr>, <expr><name>link</name></expr>, <expr><name>target</name></expr> }</block></expr>
       </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"ln"</literal></expr>, <expr><literal type="string">"-s"</literal></expr>, <expr><name>target</name></expr>, <expr><name>link</name></expr> }</block></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return a command to read the target of the a symbolic link*/</comment>
  <comment type="block" format="javadoc">/** Return a command to read the target of the a symbolic link. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getReadlinkCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><ternary><condition><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></condition> <block>{<block_content> <expr_stmt><expr><name>WINUTILS</name></expr><operator>,</operator> <expr><literal type="string">"readlink"</literal></expr><operator>,</operator> <expr><name>link</name></expr></expr_stmt> </block_content>}</block></ternary></expr></then></ternary></expr></return>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then>
        <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"readlink"</literal></expr>, <expr><name>link</name></expr> }</block></expr>
         </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"readlink"</literal></expr>, <expr><name>link</name></expr> }</block></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return a command for determining if process with specified pid is alive. */</comment>
  <comment type="block" format="javadoc">/**
   * Return a command for determining if process with specified pid is alive.
   * @param pid process ID
   * @return a &lt;code&gt;kill -0&lt;/code&gt; command or equivalent
   */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getCheckProcessIsAliveCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name>getSignalKillCommand</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Return a command to send a signal to a given pid */</comment>
  <comment type="block" format="javadoc">/** Return a command to send a signal to a given pid. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getSignalKillCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <comment type="line">// Code == 0 means check alive</comment>
     <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"isAlive"</literal></expr>, <expr><name>pid</name></expr> }</block></expr>;</return>
        <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"isAlive"</literal></expr>, <expr><name>pid</name></expr> }</block></expr>;</return>
       </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"kill"</literal></expr>, <expr><name>pid</name></expr> }</block></expr>;</return>
        <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"kill"</literal></expr>, <expr><name>pid</name></expr> }</block></expr>;</return>
       </block_content>}</block></else></if_stmt>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">232</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>static</specifier> <specifier>private</specifier> <name>OSType</name> <call><name>getOSType</name><argument_list>()</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Regular expression for environment variables: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENV_NAME_REGEX</name> <init>= <expr><literal type="string">"[A-Za-z_][A-Za-z0-9_]*"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Return a regular expression string that match environment variables */</comment>

  <comment type="block" format="javadoc">/** Return a regular expression string that match environment variables. */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getEnvironmentVariableRegex</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><ternary><condition><expr><operator>(</operator><name>WINDOWS</name><operator>)</operator></expr>
         ?</condition><then> <expr><literal type="string">"%("</literal> <operator>+</operator> <name>ENV_NAME_REGEX</name> <operator>+</operator> <literal type="string">"?)%"</literal></expr>
         </then><else>: <expr><literal type="string">"\\$("</literal> <operator>+</operator> <name>ENV_NAME_REGEX</name> <operator>+</operator> <literal type="string">")"</literal></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
  

   <comment type="block" format="javadoc">/**
    * Returns a File referencing a script with the given basename, inside the
   * given parent directory.  The file extension is inferred by platform: ".cmd"
   * on Windows, or ".sh" otherwise.
   * given parent directory.  The file extension is inferred by platform:
   * &lt;code&gt;".cmd"&lt;/code&gt; on Windows, or &lt;code&gt;".sh"&lt;/code&gt; otherwise.
    * 
    * @param parent File parent directory
    * @param basename String script file basename
@@ -254,9 +304,11 @@ public static File appendScriptExtension(File parent, String basename) {
   }
 
   /**
   * Returns a script file name with the given basename.  The file extension is
   * inferred by platform: ".cmd" on Windows, or ".sh" otherwise.
   * 
   * Returns a script file name with the given basename.
   *
   * The file extension is inferred by platform:
   * &lt;code&gt;".cmd"&lt;/code&gt; on Windows, or &lt;code&gt;".sh"&lt;/code&gt; otherwise.
   *
    * @param basename String script file basename
    * @return String script file name
    */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">267</literal></expr><operator>,</operator><expr><literal type="number">129</literal> <operator>+</operator><literal type="number">319</literal></expr><operator>,</operator><expr><literal type="number">372</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>appendScriptExtension</name><argument_list>(<argument><expr><name>String</name> <name>basename</name></expr></argument>)</argument_list></call> <block>{
   <comment type="block" format="javadoc">/**
    * Returns a command to run the given script.  The script interpreter is
    * inferred by platform: cmd on Windows or bash otherwise.
   * 
   *
    * @param script File script to run
    * @return String[] command to run the script
    */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>getRunScriptCommand</name><argument_list>(<argument><expr><name>File</name> <name>script</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>String</name> <name>absolutePath</name> <operator>=</operator> <call><name><name>script</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"cmd"</literal></expr>, <expr><literal type="string">"/c"</literal></expr>, <expr><name>absolutePath</name></expr> }</block></expr> </then><else>:
      <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"/bin/bash"</literal></expr>, <expr><name>absolutePath</name></expr> }</block></expr></else></ternary></expr>;</return></block></expr>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then>
      <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"cmd"</literal></expr>, <expr><literal type="string">"/c"</literal></expr>, <expr><name>absolutePath</name></expr> }</block></expr>
      </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"/bin/bash"</literal></expr>, <expr><name>absolutePath</name></expr> }</block></expr></else></ternary></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** a Unix command to set permission */</comment>
  <comment type="block" format="javadoc">/** a Unix command to set permission: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SET_PERMISSION_COMMAND</name> <init>= <expr><literal type="string">"chmod"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** a Unix command to set owner */</comment>
  <comment type="block" format="javadoc">/** a Unix command to set owner: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SET_OWNER_COMMAND</name> <init>= <expr><literal type="string">"chown"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/** a Unix command to set the change user's groups list */</comment>
  <comment type="block" format="javadoc">/** a Unix command to set the change user's groups list: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SET_GROUP_COMMAND</name> <init>= <expr><literal type="string">"chgrp"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** a Unix command to create a link */</comment>
  <comment type="block" format="javadoc">/** a Unix command to create a link: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LINK_COMMAND</name> <init>= <expr><literal type="string">"ln"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** a Unix command to get a link target */</comment>
  <comment type="block" format="javadoc">/** a Unix command to get a link target: {@value}. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>READ_LINK_COMMAND</name> <init>= <expr><literal type="string">"readlink"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**Time after which the executing script would be timedout*/</comment>
  <comment type="block" format="javadoc">/**Time after which the executing script would be timedout. */</comment>
   <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>timeOutInterval</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
   <comment type="block" format="javadoc">/** If or not script timed out*/</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicBoolean</name></type> <name>timedOut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>timedOut</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 

  <comment type="block" format="javadoc">/** Centralized logic to discover and validate the sanity of the Hadoop 
   *  home directory. Returns either NULL or a directory that exists and 
   *  was specified via either -Dhadoop.home.dir or the HADOOP_HOME ENV 
   *  variable.  This does a lot of work so it should only be called 
  /**
   *  Centralized logic to discover and validate the sanity of the Hadoop
   *  home directory.
   *
   *  This does a lot of work so it should only be called
    *  privately for initialization once per process.
   **/</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>checkHadoopHome</name><parameter_list>()</parameter_list> <block>{<block_content>
   <expr_stmt><expr><operator>*</operator>
   <operator>*</operator> @</expr></expr_stmt><return>return <expr><name>A</name> <name>directory</name> <name>that</name> <name>exists</name> <name>and</name> <name>via</name> <name>was</name> <name>specified</name> <name>on</name> <name>the</name> <name>command</name> <name>line</name>
   <operator>*</operator> <name><name>via</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><operator>-</operator><name><name>Dhadoop</name><operator>.</operator><name>home</name><operator>.</operator><name><name>dir</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name></name> <name>or</name> <name><name>the</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>HADOOP_HOME</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
   <operator>*</operator> <name>environment</name> <name><name>variable</name><operator>.</operator></name>
   * @<throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws></expr></return> <if_stmt><if>if the properties are absent or the specified
   * path is not a reference to a valid directory.
   */
  private static File checkHadoopHome<condition>()</condition><block type="pseudo"><block_content> <throws>throws <argument><expr><name>FileNotFoundException</name> <block>{
 
     <comment type="line">// first check the Dflag hadoop.home.dir with JVM scope</comment>
    <expr><name>String</name> <name>home</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"hadoop.home.dir"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>home</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>SYSPROP_HADOOP_HOME_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// fall back to the system/user-global env variable</comment>
     <if_stmt><if>if <condition>(<expr><name>home</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getenv</name></name><argument_list>(<argument><expr><literal type="string">"HADOOP_HOME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getenv</name></name><argument_list>(<argument><expr><name>ENV_HADOOP_HOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>checkHadoopHomeInner</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
    <try>try <block>{<block_content>
       <comment type="line">// couldn't find either setting for hadoop's home directory</comment>
       <if_stmt><if>if <condition>(<expr><name>home</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"HADOOP_HOME or hadoop.home.dir are not set."</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
  <comment type="block">/*
  A set of exception strings used to construct error messages;
  these are referred to in tests
  */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_DOES_NOT_EXIST</name> <init>= <expr><literal type="string">"does not exist"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_IS_RELATIVE</name> <init>= <expr><literal type="string">"is not an absolute path."</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_NOT_DIRECTORY</name> <init>= <expr><literal type="string">"is not a directory."</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_NO_EXECUTABLE</name> <init>= <expr><literal type="string">"Could not locate Hadoop executable"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_NOT_EXECUTABLE_FILE</name> <init>= <expr><literal type="string">"Not an executable file"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_HADOOP_PROPS_UNSET</name> <init>= <expr><name>ENV_HADOOP_HOME</name> <operator>+</operator> <literal type="string">" and "</literal>
      <operator>+</operator> <name>SYSPROP_HADOOP_HOME_DIR</name> <operator>+</operator> <literal type="string">" are unset."</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_HADOOP_PROPS_EMPTY</name> <init>= <expr><name>ENV_HADOOP_HOME</name> <operator>+</operator> <literal type="string">" or "</literal>
      <operator>+</operator> <name>SYSPROP_HADOOP_HOME_DIR</name> <operator>+</operator> <literal type="string">" set to an empty string"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E_NOT_A_WINDOWS_SYSTEM</name> <init>= <expr><literal type="string">"Not a Windows system"</literal></expr></init></decl>;</decl_stmt>
 
       <if_stmt><if>if <condition>(<expr><call><name><name>home</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>home</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>home</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>home</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
  <comment type="block" format="javadoc">/**
   *  Validate the accessibility of the Hadoop home directory.
   *
   * @return A directory that is expected to be the hadoop home directory
   * @throws FileNotFoundException if the specified
   * path is not a reference to a valid directory.
   */</comment>
  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><specifier>static</specifier> <name>File</name></type> <name>checkHadoopHomeInner</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>home</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// couldn't find either setting for hadoop's home directory</comment>
    <if_stmt><if>if <condition>(<expr><name>home</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name>E_HADOOP_PROPS_UNSET</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// strip off leading and trailing double quotes</comment>
    <while>while <condition>(<expr><call><name><name>home</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>home</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while>while <condition>(<expr><call><name><name>home</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>home</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>home</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
 
       <comment type="line">// check that the home setting is actually a directory that exists</comment>
       <decl_stmt><decl><type><name>File</name></type> <name>homedir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Hadoop home directory "</literal> <operator>+</operator> <name>homedir</name>
           <operator>+</operator> <literal type="string">" does not exist, is not a directory, or is not an absolute path."</literal></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></if></if_stmt>
    <comment type="line">// after stripping any quotes, check for home dir being non-empty</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>home</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name>E_HADOOP_PROPS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check that the hadoop home dir value</comment>
    <comment type="line">// is an absolute reference to a directory</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>homedir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"Hadoop home directory "</literal> <operator>+</operator> <name>homedir</name>
          <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>E_IS_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"Hadoop home directory "</literal> <operator>+</operator> <name>homedir</name>
          <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>E_DOES_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>homedir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"Hadoop home directory "</literal> <operator>+</operator> <name>homedir</name>
          <operator>+</operator> <literal type="string">" "</literal><operator>+</operator> <name>E_NOT_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>homedir</name></expr>;</return>
  </block_content>}</block></function>
 
       <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name><name>homedir</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/**
   * The Hadoop home directory.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>File</name></type> <name>HADOOP_HOME_FILE</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Rethrowable cause for the failure to determine the hadoop
   * home directory
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IOException</name></type> <name>HADOOP_HOME_DIR_FAILURE_CAUSE</name></decl>;</decl_stmt>
 
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>home</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IOException</name></type> <name>ex</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name>checkHadoopHome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ex</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to detect a valid hadoop home directory"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>ex</name> <operator>=</operator> <name>ioe</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>home</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
    
    <return>return <expr><name>home</name></expr>;</return>
    <expr_stmt><expr><name>HADOOP_HOME_FILE</name> <operator>=</operator> <name>home</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>HADOOP_HOME_DIR_FAILURE_CAUSE</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt>
   </block_content>}</block></static>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>HADOOP_HOME_DIR</name> <init>= <expr><call><name>checkHadoopHome</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <comment type="line">// Public getter, throws an exception if HADOOP_HOME failed validation</comment>
  <comment type="line">// checks and is being referenced downstream.</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>getHadoopHome</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>HADOOP_HOME_DIR</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Misconfigured HADOOP_HOME cannot be referenced."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  <comment type="block" format="javadoc">/**
   * Optionally extend an error message with some OS-specific text.
   * @param message core error message
   * @return error message, possibly with some extra text
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>addOsText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><operator>(</operator><name>message</name> <operator>+</operator> <literal type="string">" -see "</literal> <operator>+</operator> <name>WINDOWS_PROBLEMS</name><operator>)</operator></expr> </then><else>: <expr><name>message</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
 
    <return>return <expr><name>HADOOP_HOME_DIR</name></expr>;</return>
  <comment type="block" format="javadoc">/**
   * Create a {@code FileNotFoundException} with the inner nested cause set
   * to the given exception. Compensates for the fact that FNFE doesn't
   * have an initializer that takes an exception.
   * @param text error text
   * @param ex inner exception
   * @return a new exception to throw.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>FileNotFoundException</name></type> <name>fileNotFoundException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>,
      <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>FileNotFoundException</name><operator>)</operator> <operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>initCause</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the Hadoop home directory. Raises an exception if not found
   * @return the home dir
   * @throws IOException if the home directory cannot be located.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getHadoopHome</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getHadoopHomeDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** fully qualify the path to a binary that should be in a known hadoop 
  /**
   * Get the Hadoop home directory. If it is invalid,
   * throw an exception.
   * @return a path referring to hadoop home.
   * @throws FileNotFoundException if the directory doesn't exist.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>getHadoopHomeDir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>HADOOP_HOME_DIR_FAILURE_CAUSE</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><call><name>fileNotFoundException</name><argument_list>(
          <argument><expr><call><name>addOsText</name><argument_list>(<argument><expr><call><name><name>HADOOP_HOME_DIR_FAILURE_CAUSE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>HADOOP_HOME_DIR_FAILURE_CAUSE</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>HADOOP_HOME_FILE</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   *  Fully qualify the path to a binary that should be in a known hadoop
    *  bin location. This is primarily useful for disambiguating call-outs 
    *  to executable sub-components of Hadoop to avoid clashes with other 
    *  executables that may be in the path.  Caveat:  this call doesn't 
    *  just format the path to the bin directory.  It also checks for file 
    *  existence of the composed path. The output of this call should be 
    *  cached by callers.
   * */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>getQualifiedBinPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>executable</name></decl></parameter>)</parameter_list> 
  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
   <expr_stmt><expr><operator>*</operator>
   <operator>*</operator> @<name>param</name> <name>executable</name> <name>executable</name>
   <operator>*</operator> @</expr></expr_stmt><return>return <expr><name>executable</name> <name>file</name> <name>reference</name>
   <operator>*</operator> @<throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws></expr></return> <if_stmt><if>if the path does not exist
   */
  public static File getQualifiedBin<condition>(<expr><name>String</name> <name>executable</name></expr>)</condition><block type="pseudo"><block_content>
      <throws>throws <argument><expr><name>FileNotFoundException</name> <block>{
     <comment type="line">// construct hadoop bin path to the specified executable</comment>
    <expr><name>String</name> <name>fullExeName</name> <operator>=</operator> <name>HADOOP_HOME_DIR</name> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"bin"</literal> 
      <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <name>executable</name></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <return>return <expr><call><name>getQualifiedBinInner</name><argument_list>(<argument><expr><call><name>getHadoopHomeDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>executable</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Inner logic of {@link #getQualifiedBin(String)}, accessible
   * for tests.
   * @param hadoopHomeDir home directory (assumed to be valid)
   * @param executable executable
   * @return path to the binary
   * @throws FileNotFoundException if the executable was not found/valid
   */</comment>
  <function><type><specifier>static</specifier> <name>File</name></type> <name>getQualifiedBinInner</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>hadoopHomeDir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>executable</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>binDirText</name> <init>= <expr><literal type="string">"Hadoop bin directory "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>bin</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>hadoopHomeDir</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bin</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><call><name>addOsText</name><argument_list>(<argument><expr><name>binDirText</name> <operator>+</operator> <name>E_DOES_NOT_EXIST</name>
          <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bin</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><call><name>addOsText</name><argument_list>(<argument><expr><name>binDirText</name> <operator>+</operator> <name>E_NOT_DIRECTORY</name>
          <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>File</name></type> <name>exeFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fullExeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>exeFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>executable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>exeFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Could not locate executable "</literal> <operator>+</operator> <name>fullExeName</name>
        <operator>+</operator> <literal type="string">" in the Hadoop binaries."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(
          <argument><expr><call><name>addOsText</name><argument_list>(<argument><expr><name>E_NO_EXECUTABLE</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>exeFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>exeFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(
          <argument><expr><call><name>addOsText</name><argument_list>(<argument><expr><name>E_NOT_EXECUTABLE_FILE</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>exeFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>exeFile</name><operator>.</operator><name>getCanonicalFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// this isn't going to happen, because of all the upfront checks.</comment>
      <comment type="line">// so if it does, it gets converted to a FNFE and rethrown</comment>
      <throw>throw <expr><call><name>fileNotFoundException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
 
    <return>return <expr><call><name><name>exeFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr>;</return>
  <comment type="block" format="javadoc">/**
   *  Fully qualify the path to a binary that should be in a known hadoop
   *  bin location. This is primarily useful for disambiguating call-outs
   *  to executable sub-components of Hadoop to avoid clashes with other
   *  executables that may be in the path.  Caveat:  this call doesn't
   *  just format the path to the bin directory.  It also checks for file
   *  existence of the composed path. The output of this call should be
   *  cached by callers.
   *
   * @param executable executable
   * @return executable file reference
   * @throws FileNotFoundException if the path does not exist
   * @throws IOException on path canonicalization failures
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getQualifiedBinPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>executable</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getQualifiedBin</name><argument_list>(<argument><expr><name>executable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** a Windows utility to emulate Unix commands */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WINUTILS</name> <init>= <expr><call><name>getWinUtilsPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Location of winutils as a string; null if not found.
   * &lt;p&gt;
   * &lt;i&gt;Important: caller must check for this value being null&lt;/i&gt;.
   * The lack of such checks has led to many support issues being raised.
   * &lt;p&gt;
   * @deprecated use one of the exception-raising getter methods,
   * specifically {@link #getWinutilsPath()} or {@link #getWinutilsFile()}
   */</comment>
  <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WINUTILS</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Canonical path to winutils, private to Shell. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WINUTILS_PATH</name></decl>;</decl_stmt>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>getWinUtilsPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>winUtilsPath</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** file reference to winutils. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>File</name></type> <name>WINUTILS_FILE</name></decl>;</decl_stmt>
 
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>WINDOWS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>winUtilsPath</name> <operator>=</operator> <call><name>getQualifiedBinPath</name><argument_list>(<argument><expr><literal type="string">"winutils.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="javadoc">/** the exception raised on a failure to init the WINUTILS fields. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IOException</name></type> <name>WINUTILS_FAILURE</name></decl>;</decl_stmt>

  <comment type="block">/*
   * Static WINUTILS_* field initializer.
   * On non-Windows systems sets the paths to null, and
   * adds a specific exception to the failure cause, so
   * that on any attempt to resolve the paths will raise
   * a meaningful exception.
   */</comment>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name>IOException</name></type> <name>ioe</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// invariant: either there's a valid file and path,</comment>
    <comment type="line">// or there is a cached IO exception.</comment>
    <if_stmt><if>if <condition>(<expr><name>WINDOWS</name></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>getQualifiedBin</name><argument_list>(<argument><expr><name>WINUTILS_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ioe</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Did not find {}: {}"</literal></expr></argument>, <argument><expr><name>WINUTILS_EXE</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// stack trace comes at debug level</comment>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to find "</literal> <operator>+</operator> <name>WINUTILS_EXE</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ioe</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
       </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to locate the winutils binary in the hadoop binary path"</literal></expr></argument>,
         <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <if_stmt><else>else <block>{<block_content>
      <comment type="line">// on a non-windows system, the invariant is kept</comment>
      <comment type="line">// by adding an explicit exception.</comment>
      <expr_stmt><expr><name>ioe</name> <operator>=</operator> <operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name>E_NOT_A_WINDOWS_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>WINUTILS_PATH</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>WINUTILS_FILE</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>WINUTILS</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>WINUTILS_FAILURE</name> <operator>=</operator> <name>ioe</name></expr>;</expr_stmt>
  </block_content>}</block></static>

  <comment type="block" format="javadoc">/**
   * Predicate to indicate whether or not the path to winutils is known.
   *
   * If true, then {@link #WINUTILS} is non-null, and both
   * {@link #getWinutilsPath()} and {@link #getWinutilsFile()}
   * will successfully return this value. Always false on non-windows systems.
   * @return true if there is a valid path to the binary
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasWinutilsPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>WINUTILS_PATH</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Locate the winutils binary, or fail with a meaningful
   * exception and stack trace as an RTE.
   * This method is for use in methods which don't explicitly throw
   * an &lt;code&gt;IOException&lt;/code&gt;.
   * @return the path to {@link #WINUTILS_EXE}
   * @throws RuntimeException if the path is not resolvable
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getWinutilsPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>WINUTILS_FAILURE</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WINUTILS_PATH</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>WINUTILS_FAILURE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>WINUTILS_FAILURE</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
 
    <return>return <expr><name>winUtilsPath</name></expr>;</return>
  <comment type="block" format="javadoc">/**
   * Get a file reference to winutils.
   * Always raises an exception if there isn't one
   * @return the file instance referring to the winutils bin.
   * @throws FileNotFoundException on any failure to locate that file.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getWinutilsFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>WINUTILS_FAILURE</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WINUTILS_FILE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// raise a new exception to generate a new stack trace</comment>
      <throw>throw <expr><call><name>fileNotFoundException</name><argument_list>(<argument><expr><call><name><name>WINUTILS_FAILURE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>WINUTILS_FAILURE</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isBashSupported</name> <init>= <expr><call><name>checkIsBashSupported</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">412</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">707</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>checkIsBashSupported</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>supported</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Flag which is true if setsid exists.
   */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isSetsidAvailable</name> <init>= <expr><call><name>isSetsidSupported</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Look for &lt;code&gt;setsid&lt;/code&gt;.
   * @return true if &lt;code&gt;setsid&lt;/code&gt; was present
   */</comment>
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSetsidSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
       <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">427</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">730</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>isSetsidSupported</name><argument_list>()</argument_list></call> <block>{
       <expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"setsid is not available on this machine. So not using it."</literal></expr></argument>)</argument_list></call></expr>;
       <name>setsidSupported</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>  <catch>catch <parameter_list>(<parameter><decl><type><name>Error</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>err</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"posix_spawn is not "</literal> <operator>+</operator></expr></argument>
      <if_stmt><if>if <condition>(<expr><call><name><name>err</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
          <operator>&amp;&amp;</operator> <call><name><name>err</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"posix_spawn is not "</literal> <operator>+</operator>
           <literal type="string">"a supported process launch mechanism"</literal></expr></argument>)</argument_list></call>
           <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Shell</name><operator>.</operator><name>FREEBSD</name></name> <operator>||</operator> <name><name>Shell</name><operator>.</operator><name>MAC</name></name><operator>)</operator></expr>)</condition></if></if_stmt></argument_list></call></expr></condition> <block>{<block_content>
         <comment type="line">// HADOOP-11924: This is a workaround to avoid failure of class init</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">444</literal></expr><operator>,</operator><expr><literal type="number">69</literal> <operator>+</operator><literal type="number">748</literal></expr><operator>,</operator><expr><literal type="number">86</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>isSetsidSupported</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>setsidSupported</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** Token separator regex used to parse Shell tool outputs */</comment>
  <comment type="block" format="javadoc">/** Token separator regex used to parse Shell tool outputs. */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOKEN_SEPARATOR_REGEX</name>
                 <init>= <expr><ternary><condition><expr><name>WINDOWS</name></expr> ?</condition><then> <expr><literal type="string">"[|\n\r]"</literal></expr> </then><else>: <expr><literal type="string">"[ \t\n\r\f]"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type>    <name>interval</name></decl>;</decl_stmt>   <comment type="line">// refresh interval in msec</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type>    <name>lastTime</name></decl>;</decl_stmt>   <comment type="line">// last time the command was performed</comment>
  <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>boolean</name></type> <name>redirectErrorStream</name></decl>;</decl_stmt> <comment type="line">// merge stdout and stderr</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>interval</name></decl>;</decl_stmt>   <comment type="line">// refresh interval in msec</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastTime</name></decl>;</decl_stmt>   <comment type="line">// last time the command was performed</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>redirectErrorStream</name></decl>;</decl_stmt> <comment type="line">// merge stdout and stderr</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>environment</name></decl>;</decl_stmt> <comment type="line">// env for the command execution</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>Process</name></type> <name>process</name></decl>;</decl_stmt> <comment type="line">// sub process used to execute the command</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>exitCode</name></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**If or not script finished executing*/</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>AtomicBoolean</name></type> <name>completed</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>Shell</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="block" format="javadoc">/** Flag to indicate whether or not the script has finished executing. */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>completed</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Create an instance with no minimum interval between runs; stderr is
   * not merged with stdout.
   */</comment>
  <constructor><specifier>protected</specifier> <name>Shell</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  
  <constructor><specifier>public</specifier> <name>Shell</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <comment type="block" format="javadoc">/**
   * Create an instance with a minimum interval between executions; stderr is
   * not merged with stdout.
   * @param interval interval in milliseconds between command executions.
   */</comment>
  <constructor><specifier>protected</specifier> <name>Shell</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <comment type="block" format="javadoc">/**
   * @param interval the minimum duration to wait before re-executing the 
   *        command.
   * Create a shell instance which can be re-executed when the {@link #run()}
   * method is invoked with a given elapsed time between calls.
   *
   * @param interval the minimum duration in milliseconds to wait before
   *        re-executing the command. If set to 0, there is no minimum.
   * @param redirectErrorStream should the error stream be merged with
   *        the normal output stream?
    */</comment>
  <constructor><specifier>public</specifier> <name>Shell</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>redirectErrorStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <constructor><specifier>protected</specifier> <name>Shell</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>redirectErrorStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastTime</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>interval</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><name>interval</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastTime</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>interval</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><name>interval</name></expr></else></ternary></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>redirectErrorStream</name></name> <operator>=</operator> <name>redirectErrorStream</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  
  <comment type="block" format="javadoc">/** set the environment for the command 

  /**
   * Set the environment for the command.
    * @param env Mapping of environment variables
    */</comment>
   <function><type><specifier>protected</specifier> <name>void</name></type> <name>setEnvironment</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>environment</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** set the working directory 
   * @param dir The directory where the command would be executed
  /**
   * Set the working directory.
   * @param dir The directory where the command will be executed
    */</comment>
   <function><type><specifier>protected</specifier> <name>void</name></type> <name>setWorkingDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** check to see if a command needs to be executed and execute if needed */</comment>
  <comment type="block" format="javadoc">/** Check to see if a command needs to be executed and execute if needed. */</comment>
   <function><type><specifier>protected</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lastTime</name> <operator>+</operator> <name>interval</name> <operator>&gt;</operator> <call><name><name>Time</name><operator>.</operator><name>monotonicNow</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>lastTime</name> <operator>+</operator> <name>interval</name> <operator>&gt;</operator> <call><name><name>Time</name><operator>.</operator><name>monotonicNow</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return;</return>
    </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
     <expr_stmt><expr><name>exitCode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// reset for next run</comment>
     <expr_stmt><expr><call><name>runCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Run a command */</comment>
  <comment type="block" format="javadoc">/** Run the command. */</comment>
   <function><type><specifier>private</specifier> <name>void</name></type> <name>runCommand</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content> 
     <decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>ProcessBuilder</name><argument_list>(<argument><expr><call><name>getExecString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Timer</name></type> <name>timeOutTimer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ShellTimeoutTimerTask</name></type> <name>timeoutTimerTask</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>timedOut</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>completed</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>timedOut</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>completed</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <if_stmt><if>if <condition>(<expr><name>environment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>environment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putAll</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>environment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">539</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">860</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>runCommand</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>final</name> <name>BufferedReader</name> <name>errReader</name> <operator>=</operator> 
             <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(
                 <argument><expr><call><name><name>process</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charset</name><operator>.</operator><name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>inReader</name> <init>= 
    <expr><name>BufferedReader</name> <name>inReader</name> <operator>=</operator>
             <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(
                 <argument><expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charset</name><operator>.</operator><name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>errMsg</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    

     <comment type="line">// read error and input streams as this would free up the buffers</comment>
     <comment type="line">// free the error stream buffer</comment>
     <decl_stmt><decl><type><name>Thread</name></type> <name>errThread</name> <init>= <expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">641</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">962</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>void</name> <call><name>joinThread</name><argument_list>(<argument><expr><name>Thread</name> <name>t</name></expr></argument>)</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <comment type="block" format="javadoc">/** return an array containing the command name &amp; its parameters */</comment> 
  <comment type="block" format="javadoc">/** return an array containing the command name and its parameters. */</comment>
   <specifier>protected</specifier> <specifier>abstract</specifier> <name><name>String</name><index>[]</index></name> <call><name>getExecString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  

   <comment type="block" format="javadoc">/** Parse the execution result */</comment>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>parseExecResult</name><argument_list>(<argument><expr><name>BufferedReader</name> <name>lines</name></expr></argument>)</argument_list>
   <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/** 
   * Get the environment variable
  /**
   * Get an environment variable.
   * @param env the environment var
   * @return the value or null if it was unset.
    */</comment>
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getEnvironment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><call><name><name>environment</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/** get the current sub-process executing the given command 

  /** get the current sub-process executing the given command.
    * @return process executing the command
    */</comment>
   <function><type><specifier>public</specifier> <name>Process</name></type> <name>getProcess</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>process</name></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** get the exit code 
  /** get the exit code.
    * @return the exit code of the process
    */</comment>
   <function><type><specifier>public</specifier> <name>int</name></type> <name>getExitCode</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">674</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">997</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>int</name> <call><name>getExitCode</name><argument_list>()</argument_list></call> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>class</name> <name>ExitCodeException</name> extends <name>IOException</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>int</name> <name>exitCode</name></expr>;
    

     <specifier>public</specifier> <call><name>ExitCodeException</name><argument_list>(<argument><expr><name>int</name> <name>exitCode</name></expr></argument>, <argument><expr><name>String</name> <name>message</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;
       <name><name>this</name><operator>.</operator><name>exitCode</name></name> <operator>=</operator> <name>exitCode</name></block></block></expr>;
     }</block></expr></expr_stmt>
    

     <function><type><specifier>public</specifier> <name>int</name></type> <name>getExitCode</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name>exitCode</name></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">694</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1017</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
  

   <interface><specifier>public</specifier> interface <name>CommandExecutor</name> <block>{
 
     <function_decl><type><name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">704</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">1027</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{
     <expr><name>String</name> <call><name>getOutput</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
 
     <name>void</name> <call><name>close</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    

   }</block></interface>
  

   <comment type="block" format="javadoc">/**
    * A simple shell command executor.
    * 
   * &lt;code&gt;ShellCommandExecutor&lt;/code&gt;should be used in cases where the output 
   * of the command needs no explicit parsing and where the command, working 
   * directory and the environment remains unchanged. The output of the command 
   * &lt;code&gt;ShellCommandExecutor&lt;/code&gt;should be used in cases where the output
   * of the command needs no explicit parsing and where the command, working
   * directory and the environment remains unchanged. The output of the command
    * is stored as-is and is expected to be small.
    */</comment>
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>ShellCommandExecutor</name> <super_list><extends>extends <super><name>Shell</name></super></extends> 
       <implements>implements <super><name>CommandExecutor</name></super></implements></super_list> <block>{
    

     <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>command</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>output</name></decl>;</decl_stmt>
    
    


     <constructor><specifier>public</specifier> <name>ShellCommandExecutor</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>execString</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>execString</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
    

     <constructor><specifier>public</specifier> <name>ShellCommandExecutor</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>execString</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>execString</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></constructor>
   
    <expr_stmt><expr><specifier>public</specifier> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>execString</name></expr></argument>, <argument><expr><name>File</name> <name>dir</name></expr></argument>, 

    <argument><expr><specifier>public</specifier> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>execString</name></expr></argument>, <argument><expr><name>File</name> <name>dir</name></expr></argument>,
                                  <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>env</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>this</name><argument_list>(<argument><expr><name>execString</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>env</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;
     }</block></expr></argument></argument_list></call></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">746</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1069</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>execString</name></expr></argument>, <argument><expr><name>File</name> <name>dir</name></expr></argument>,
      <argument><expr><operator>*</operator>            <name>key</name><operator>-</operator><name>value</name> <name>pairs</name> <name>specified</name> <name>in</name> <name>the</name> <name><name>map</name><operator>.</operator> <name>If</name></name> <literal type="null">null</literal></expr></argument>, <argument><expr><name>the</name> <name>current</name>
      <operator>*</operator>            <name>environment</name> <name>is</name> <name>not</name> <name><name>modified</name><operator>.</operator></name>
      * @<name>param</name> <name>timeout</name> <name>Specifies</name> <name>the</name> <name>time</name> <name>in</name> <name>milliseconds</name></expr></argument>, <argument><expr><name>after</name> <name>which</name> <name>the</name>
     <operator>*</operator>                <name>command</name> <name>will</name> <name>be</name> <name>killed</name> <name>and</name> <name>the</name> <name>status</name> <name>marked</name> <name>as</name> <name><name>timedout</name><operator>.</operator></name>
     *                <name>command</name> <name>will</name> <name>be</name> <name>killed</name> <name>and</name> <name>the</name> <name>status</name> <name>marked</name> <name>as</name> <name>timed</name><operator>-</operator><name><name>out</name><operator>.</operator></name>
      *                <name>If</name> <literal type="number">0</literal></expr></argument>, <argument><expr><name>the</name> <name>command</name> <name>will</name> <name>not</name> <name>be</name> <name>timed</name> <name><name>out</name><operator>.</operator></name> 
      *<operator>/</operator>
     <specifier>public</specifier> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>execString</name></expr></argument>, <argument><expr><name>File</name> <name>dir</name></expr></argument>, 
<argument>@@ <expr><operator>-</operator><literal type="number">760</literal></expr></argument>,<argument><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1083</literal></expr></argument>,<argument><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>execString</name></expr></argument>, <argument><expr><name>File</name> <name>dir</name></expr></argument>,</argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
       }</block></class>
       <expr_stmt><expr><name>timeOutInterval</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
     </block_content>}</block></function>
        
 
    <comment type="block" format="javadoc">/** Execute the shell command. */</comment>
    <comment type="block" format="javadoc">/**
     * Execute the shell command.
     * @throws IOException if the command fails, or if the command is
     * not well constructed.
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>command</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"(null) entry in command string: "</literal>
              <operator>+</operator> <call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
       <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">781</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1113</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>parseExecResult</name><argument_list>(<argument><expr><name>BufferedReader</name> <name>lines</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       </block_content>}</block></constructor>
     </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/** Get the output of the shell command.*/</comment>

    <comment type="block" format="javadoc">/** Get the output of the shell command. */</comment>
     <function><type><specifier>public</specifier> <name>String</name></type> <name>getOutput</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><ternary><condition><expr><operator>(</operator><name>output</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>output</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">813</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1145</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>close</name><argument_list>()</argument_list></call> <block>{
     }</block></expr>
   }</block>
  

   <comment type="block" format="javadoc">/**
    * To check if the passed script to shell command executor timed out or
    * not.
@@ -823,15 +1155,15 @@ public void close() {
   public boolean isTimedOut() {
     return timedOut.get();
   }
  

   /**
   * Set if the command has timed out.
   * Declare that the command has timed out.
    * 
    */</comment>
   <specifier>private</specifier> <name>void</name> <call><name>setTimedOut</name><argument_list>()</argument_list></call> <block>{
     <expr><call><name><name>this</name><operator>.</operator><name>timedOut</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
  

   <comment type="block" format="javadoc">/** 
    * Static method to execute a shell command. 
    * Covers most of the simple cases without requiring the user to implement  
@@ -842,17 +1174,18 @@ private void setTimedOut() {
   public static String execCommand(String ... cmd) throws IOException {
     return execCommand(null, cmd, 0L);
   }
  
  /** 
   * Static method to execute a shell command. 
   * Covers most of the simple cases without requiring the user to implement  

  /**
   * Static method to execute a shell command.
   * Covers most of the simple cases without requiring the user to implement
    * the &lt;code&gt;Shell&lt;/code&gt; interface.
    * @param env the map of environment key=value
    * @param cmd shell command to execute.
    * @param timeout time in milliseconds after which script should be marked timeout
   * @return the output of the executed command.o
   * @return the output of the executed command.
   * @throws IOException on any problem.
    */</comment>
  

   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>execCommand</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></parameter>,
       <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>ShellCommandExecutor</name></type> <name>exec</name> <init>= <expr><operator>new</operator> <call><name>ShellCommandExecutor</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, 
<argument>@@ <expr><operator>-</operator><literal type="number">861</literal></expr></argument>,<argument><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">1194</literal></expr></argument>,<argument><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>String</name> <call><name>execCommand</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>env</name></expr></argument>, <argument><expr><name><name>String</name><index>[]</index></name> <name>cmd</name></expr></argument>,
     return <argument><expr><call><name><name>exec</name><operator>.</operator><name>getOutput</name></name><argument_list>()</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></init></decl></decl_stmt>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** 
   * Static method to execute a shell command. 
   * Covers most of the simple cases without requiring the user to implement  
  /**
   * Static method to execute a shell command.
   * Covers most of the simple cases without requiring the user to implement
    * the &lt;code&gt;Shell&lt;/code&gt; interface.
    * @param env the map of environment key=value
    * @param cmd shell command to execute.
    * @return the output of the executed command.
   * @throws IOException on any problem.
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>execCommand</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>env</name></expr></argument>, <argument><expr><name>String</name> <operator>...</operator> <name>cmd</name></expr></argument>)</argument_list> 
  public static <name>String</name> <name>execCommand</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>env</name></expr></argument>, <argument><expr><name>String</name> <operator>...</operator> <name>cmd</name></expr></argument>)</argument_list>
   <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws>
     return <name>execCommand</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
   </block_content>}</block></constructor>
  

   <comment type="block" format="javadoc">/**
    * Timer which is used to timeout scripts spawned off by shell.
    */</comment>
   <class><specifier>private</specifier> <specifier>static</specifier> class <name>ShellTimeoutTimerTask</name> <super_list><extends>extends <super><name>TimerTask</name></super></extends></super_list> <block>{
 
    <decl_stmt><decl><type><specifier>private</specifier> <name>Shell</name></type> <name>shell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Shell</name></type> <name>shell</name></decl>;</decl_stmt>
 
     <constructor><specifier>public</specifier> <name>ShellTimeoutTimerTask</name><parameter_list>(<parameter><decl><type><name>Shell</name></type> <name>shell</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shell</name></name> <operator>=</operator> <name>shell</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SysInfoWindows</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SysInfoWindows</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f3fb364bf30</name><operator>..</operator><literal type="number">1fd036e41d0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SysInfoWindows</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>SysInfoWindows</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>void</name> <call><name>reset</name><argument_list>()</argument_list></call> <block>{
   }</block>
 
   <name>String</name> <call><name>getSystemInfoInfoFromShell</name><argument_list>()</argument_list></call> <block>{
    <expr><name>ShellCommandExecutor</name> <name>shellExecutor</name> <operator>=</operator> <operator>new</operator> <call><name>ShellCommandExecutor</name><argument_list>(
        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"systeminfo"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>ShellCommandExecutor</name></type> <name>shellExecutor</name> <init>= <expr><operator>new</operator> <call><name>ShellCommandExecutor</name><argument_list>(
          <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>,
              <expr><literal type="string">"systeminfo"</literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>shellExecutor</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>shellExecutor</name><operator>.</operator><name>getOutput</name></name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>SymlinkBaseTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>SymlinkBaseTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8018946e60a</literal><operator>..</operator><literal type="number">9d66732b4ec</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>SymlinkBaseTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>SymlinkBaseTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
   <specifier>abstract</specifier> <specifier>protected</specifier> <name>String</name> <call><name>testBaseDir2</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;</expr_stmt>
   <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>URI</name></type> <name>testURI</name><parameter_list>()</parameter_list>;</function_decl>
 
  <comment type="line">// Returns true if the filesystem is emulating symlink support. Certain</comment>
  <comment type="line">// checks will be bypassed if that is the case.</comment>
  <comment type="line">//</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>emulatingSymlinksOnWindows</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>protected</specifier> <name>IOException</name></type> <name>unwrapException</name><parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <return>return <expr><name>e</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testOpenResolvesLinks</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <comment type="block" format="javadoc">/** Stat a link to a file */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testStatLinkToFile</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"/file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>linkToFile</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"/linkToFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">362</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRecursiveLinks</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><specifier>private</specifier> <name>void</name> <call><name>checkLink</name><argument_list>(<argument><expr><name>Path</name> <name>linkAbs</name></expr></argument>, <argument><expr><name>Path</name> <name>expectedTarget</name></expr></argument>, <argument><expr><name>Path</name> <name>targetQual</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>
       <throws>throws <argument><expr><name>IOException</name> <block>{
 
    <comment type="line">// If we are emulating symlinks then many of these checks will fail</comment>
    <comment type="line">// so we skip them.</comment>
    <comment type="line">//</comment>
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

     <decl_stmt><decl><type><name>Path</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// isFile/Directory</comment>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>isFile</name></name><argument_list>(<argument><expr><name>linkAbs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">663</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">650</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testCreateDirViaSymlink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <comment type="block" format="javadoc">/** Create symlink through a symlink */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testCreateLinkViaLink</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>dir1</name>        <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>file</name>        <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>linkToDir</name>   <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir2</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"linkToDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">706</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">692</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testListStatusUsingLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <comment type="block" format="javadoc">/** Test create symlink using the same path */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testCreateLinkTwice</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"linkToFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">895</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">880</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlinkViaSymlink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>linkViaLink</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <comment type="line">// Check that we didn't rename the link target</comment>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>linkNewViaLink</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call> <operator>||</operator>
        <call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>linkNewViaLink</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>readFile</name><argument_list>(<argument><expr><name>linkNewViaLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></catch></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1034</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1018</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlinkNonExistantDest</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>createAndWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>createSymlink</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>link1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>link1</name></expr></argument>, <argument><expr><name>link2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>link2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call> <operator>||</operator>
        <call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>link2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>readFile</name><argument_list>(<argument><expr><name>link2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>readFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>link1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1059</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1042</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlinkToExistingFile</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     }</block>
     <call><name><name>wrapper</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>file1</name></expr></argument>, <argument><expr><name><name>Rename</name><operator>.</operator><name>OVERWRITE</name></name></expr></argument>)</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>file2</name></expr></argument>, <argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getLinkTarget</name></name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getFileLinkStatus</name></name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSymlink</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>file2</name></expr></argument>, <argument><expr><call><name><name>wrapper</name><operator>.</operator><name>getLinkTarget</name></name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1125</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1105</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlinkToItself</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <comment type="block" format="javadoc">/** Rename a symlink */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlink</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>file</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>link1</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"linkToFile1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>link2</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"linkToFile2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1223</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1202</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testRenameSymlinkToDirItLinksTo</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <comment type="block" format="javadoc">/** Test rename the symlink's target */</comment>
   <specifier>public</specifier> <name>void</name> <call><name>testRenameLinkTarget</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>file</name>    <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>fileNew</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fileNew"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>link</name>    <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"linkToFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3418adeb6b1</literal><operator>..</operator><literal type="number">5fc0b2dc2aa</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestFileUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">983</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">983</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testSymlinkLength</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Shell</name><operator>.</operator><name>isJava7OrAbove</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// On Java6 on Windows, we copied the file</comment>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>link</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Otherwise, the target file size is zero</comment>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>link</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>link</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <constructor_decl><name><name>link</name><operator>.</operator><name>delete</name></name><parameter_list>()</parameter_list>;</constructor_decl>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>link</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkLocalFS</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkLocalFS</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">602af97f360</literal><operator>..</operator><name>ab55f003ae4</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkLocalFS</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestSymlinkLocalFS</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>protected</specifier> <name>URI</name> <call><name>testURI</name><argument_list>()</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>emulatingSymlinksOnWindows</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Java 6 on Windows has very poor symlink support. Specifically</comment>
    <comment type="line">// Specifically File#length and File#renameTo do not work as expected.</comment>
    <comment type="line">// (see HADOOP-9061 for additional details)</comment>
    <comment type="line">// Hence some symlink tests will be skipped.</comment>
    <comment type="line">//</comment>
    <return>return <expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Shell</name><operator>.</operator><name>isJava7OrAbove</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testCreateDanglingLink</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Dangling symlinks are not supported on Windows local file system.</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">176</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testDanglingLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><operator>*</operator> <name>file</name> <call><name>scheme</name> <argument_list>(<argument><expr><name>eg</name> <name>file</name></expr></argument></argument_list></call></expr></block></expr></argument></throws><operator>:</operator><comment type="line">//host/tmp/test).</comment>
    <operator>*</operator><operator>/</operator>  
   <specifier>public</specifier> <name>void</name> <call><name>testGetLinkStatusPartQualTarget</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assumeTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>emulatingSymlinksOnWindows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>fileAbs</name>  <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"/file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>fileQual</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testURI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileAbs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>dir</name>      <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>testBaseDir1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5b8eac60f9e</literal><operator>..</operator><literal type="number">6e279643840</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>security</name><operator>/</operator><name><name>TestUserGroupInformation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testGetServerSideGroups</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
     <argument/>}
     <comment type="line">// get the groups</comment>
     <argument><expr><name>pp</name> <operator>=</operator> <call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr> ?</condition><then>
      <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name> <operator>+</operator> <literal type="string">" groups -F"</literal></expr> </then><else>: <expr><literal type="string">"id -Gn"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" groups -F"</literal>
      <operator>:</operator> <literal type="string">"id -Gn"</literal></expr></expr_stmt>)</block_content></block>;</function>
     <expr_stmt><expr><name>br</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>pp</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestShell</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestShell</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fc202da6cf7</name><operator>..</operator><literal type="number">138d0255ac6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestShell</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestShell</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name></name>;</package>
 
<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@</expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ThreadMXBean</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileUtil</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>Shell</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assume</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>TestName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>Timeout</name></name>;</import>
 
<class><specifier>public</specifier> class <name>TestShell</name> <super_list><extends>extends <super><name>TestCase</name></super></extends></super_list> <block>{
<class><specifier>public</specifier> class <name>TestShell</name> <super_list><extends>extends <super><name>Assert</name></super></extends></super_list> <block>{
  <comment type="block" format="javadoc">/**
   * Set the timeout for every test
   */</comment>
  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>Timeout</name></type> <name>testTimeout</name> <init>= <expr><operator>new</operator> <call><name>Timeout</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>TestName</name></type> <name>methodName</name> <init>= <expr><operator>new</operator> <call><name>TestName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>rootTestDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"test.build.data"</literal></expr></argument>, <argument><expr><literal type="string">"target/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * A filename generated uniquely for each test method. The file
   * itself is neither created nor deleted during test setup/teardown.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>methodDir</name></decl>;</decl_stmt>
 
   <class><specifier>private</specifier> <specifier>static</specifier> class <name>Command</name> <super_list><extends>extends <super><name>Shell</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>runCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <call><name>Command</name><argument_list>(<argument><expr><name>long</name> <name>interval</name></expr></argument>)</argument_list></call> <block>{
       <comment type="line">// There is no /bin/echo equivalent on Windows so just launch it as a</comment>
       <comment type="line">// shell built-in.</comment>
       <comment type="line">//</comment>
      <return>return <expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name> <operator>?</operator></expr></return>
      <return>return <expr><name>WINDOWS</name> <operator>?</operator>
           <operator>(</operator><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"cmd.exe"</literal></expr>, <expr><literal type="string">"/c"</literal></expr>, <expr><literal type="string">"echo"</literal></expr>, <expr><literal type="string">"hello"</literal></expr>}</block><operator>)</operator> <operator>:</operator>
           <operator>(</operator><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"echo"</literal></expr>, <expr><literal type="string">"hello"</literal></expr>}</block><operator>)</operator></expr>;</return>
     }</block></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>int</name> <call><name>getRunCount</name><argument_list>()</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>rootTestDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Not a directory "</literal> <operator>+</operator> <name>rootTestDir</name></expr></argument>, <argument><expr><call><name><name>rootTestDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>methodDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>rootTestDir</name></expr></argument>, <argument><expr><call><name><name>methodName</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testInterval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>testInterval</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>/</operator> <literal type="number">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// test a negative interval</comment>
     <expr_stmt><expr><call><name>testInterval</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// test a zero interval</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>assertInString</name><argument_list>(<argument><expr><name>String</name> <name>string</name></expr></argument>, <argument><expr><name>String</name> <name>search</name></expr></argument>)</argument_list></call> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testShellCommandExecutorToString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name></type> <name>sce</name><init>=<expr><operator>new</operator> <call><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name><argument_list>(
             <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">".."</literal></expr>,<expr><literal type="string">"arg 2"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testShellCommandExecutorToString</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Throwable</name> <block>{
     <expr><call><name>assertInString</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" .. "</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertInString</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"\"arg 2\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
  

  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testShellCommandTimeout</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// setExecutable does not work on Windows</comment>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>rootDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(
        <argument><expr><literal type="string">"test.build.data"</literal></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Assume</name><operator>.</operator><name>assumeFalse</name></name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>rootDir</name> <init>= <expr><call><name><name>rootTestDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>shellFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>rootDir</name></expr></argument>, <argument><expr><literal type="string">"timeout.sh"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>timeoutCommand</name> <init>= <expr><literal type="string">"sleep 4; echo \"hello\""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>shellFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>timeoutCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name></type> <name>shexc</name></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>shellFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>timeoutCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
     <expr_stmt><expr><call><name><name>FileUtil</name><operator>.</operator><name>setExecutable</name></name><argument_list>(<argument><expr><name>shellFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name></type> <name>shexc</name> 
    <init>= <expr><operator>new</operator> <call><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>shellFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>,
                                      <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>shexc</name> <operator>=</operator> <operator>new</operator> <call><name><name>Shell</name><operator>.</operator><name>ShellCommandExecutor</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>shellFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>shexc</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <comment type="line">//When timing out exception is thrown.</comment>
     </block_content>}</block></catch></try>
     <expr_stmt><expr><call><name><name>shellFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Script didnt not timeout"</literal></expr></argument> , <argument><expr><call><name><name>shexc</name><operator>.</operator><name>isTimedOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Script did not timeout"</literal></expr></argument> , <argument><expr><call><name><name>shexc</name><operator>.</operator><name>isTimedOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>countTimerThreads</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>private</specifier> <specifier>static</specifier> <name>int</name> <call><name>countTimerThreads</name><argument_list>()</argument_list></call> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>count</name></expr>;</return>
   </block_content>}</block></function>
  

  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testShellCommandTimerLeak</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name><name>quickCommand</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"/bin/sleep"</literal></expr>, <expr><literal type="string">"100"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
     
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testShellCommandTimerLeak</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>timersBefore</name></expr></argument>, <argument><expr><name>timersAfter</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGetCheckProcessIsAliveCommand</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>anyPid</name> <init>= <expr><literal type="string">"9999"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>checkProcessAliveCommand</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>getCheckProcessIsAliveCommand</name></name><argument_list>(
    <argument><expr><name><name>String</name><index>[]</index></name> <name>checkProcessAliveCommand</name> <operator>=</operator> <call><name>getCheckProcessIsAliveCommand</name><argument_list>(
         <argument><expr><name>anyPid</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
 
     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedCommand</name></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>expectedCommand</name> <operator>=</operator>
          <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"isAlive"</literal></expr>, <expr><name>anyPid</name></expr> }</block></expr>;</expr_stmt>
          <expr_stmt><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"isAlive"</literal></expr>, <expr><name>anyPid</name></expr> }</block></expr>;</expr_stmt>
     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>isSetsidAvailable</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>expectedCommand</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"kill -0 -- -"</literal> <operator>+</operator> <name>anyPid</name></expr> }</block></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">170</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testGetCheckProcessIsAliveCommand</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><name>expectedCommand</name></expr></argument>, <argument><expr><name>checkProcessAliveCommand</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></else></if_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testGetSignalKillCommand</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>String</name></type> <name>anyPid</name> <init>= <expr><literal type="string">"9999"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>anySignal</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>checkProcessAliveCommand</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>getSignalKillCommand</name></name><argument_list>(<argument><expr><name>anySignal</name></expr></argument>,
    <argument><expr><name><name>String</name><index>[]</index></name> <name>checkProcessAliveCommand</name> <operator>=</operator> <call><name>getSignalKillCommand</name><argument_list>(<argument><expr><name>anySignal</name></expr></argument>,
         <argument><expr><name>anyPid</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
 
     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedCommand</name></decl>;</decl_stmt>
 
     <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>expectedCommand</name> <operator>=</operator>
          <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"isAlive"</literal></expr>, <expr><name>anyPid</name></expr> }</block></expr>;</expr_stmt>
          <expr_stmt><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"kill"</literal></expr>, <expr><name>anyPid</name></expr> }</block></expr>;</expr_stmt>
     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>isSetsidAvailable</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>expectedCommand</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"bash"</literal></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><literal type="string">"kill -9 -- -"</literal> <operator>+</operator> <name>anyPid</name></expr> }</block></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testGetSignalKillCommand</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     }</block>
     <call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><name>expectedCommand</name></expr></argument>, <argument><expr><name>checkProcessAliveCommand</name></expr></argument>)</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></else></if_stmt>
  
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>testInterval</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Command</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Command</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">236</literal></expr><operator>,</operator><expr><literal type="number">190</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>testInterval</name><argument_list>(<argument><expr><name>long</name> <name>interval</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>getRunCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     </block_content>}</block></function>
   </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeUnset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>E_HADOOP_PROPS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeEmptyDoubleQuotes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>, <argument><expr><name>E_HADOOP_PROPS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeEmptySingleQuote</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>E_HADOOP_PROPS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeValid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name>checkHadoopHomeInner</name><argument_list>(<argument><expr><call><name><name>rootTestDir</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>rootTestDir</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeValidQuoted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name>checkHadoopHomeInner</name><argument_list>(<argument><expr><literal type="char">'"'</literal><operator>+</operator> <call><name><name>rootTestDir</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>rootTestDir</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeNoDir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><call><name><name>methodDir</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>E_DOES_NOT_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeNotADir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>touched</name> <init>= <expr><call><name>touch</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><call><name><name>touched</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>E_NOT_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteQuietly</name></name><argument_list>(<argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopHomeRelative</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertHomeResolveFailed</name><argument_list>(<argument><expr><literal type="string">"./target"</literal></expr></argument>, <argument><expr><name>E_IS_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBinDirMissing</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>FileNotFoundException</name></type> <name>ex</name> <init>= <expr><call><name>assertWinutilsResolveFailed</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>,
        <argument><expr><name>E_DOES_NOT_EXIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertInString</name><argument_list>(<argument><expr><call><name><name>ex</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Hadoop bin directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testHadoopBinNotADir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>bin</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>assertWinutilsResolveFailed</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><name>E_NOT_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteQuietly</name></name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBinWinUtilsFound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>bin</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>winutils</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>WINUTILS_EXE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><name>winutils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>winutils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name>getQualifiedBinInner</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><name>WINUTILS_EXE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteQuietly</name></name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBinWinUtilsNotAFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>bin</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>winutils</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>WINUTILS_EXE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>winutils</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertWinutilsResolveFailed</name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>, <argument><expr><name>E_NOT_EXECUTABLE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectory</name></name><argument_list>(<argument><expr><name>methodDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This test takes advantage of the invariant winutils path is valid
   * or access to it will raise an exception holds on Linux, and without
   * any winutils binary even if HADOOP_HOME points to a real hadoop
   * directory, the exception reporting can be validated
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNoWinutilsOnUnix</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Assume</name><operator>.</operator><name>assumeFalse</name></name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>getWinutilsFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertExContains</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>E_NOT_A_WINDOWS_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>getWinutilsPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertExContains</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>E_NOT_A_WINDOWS_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>( <expr><call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
          <operator>||</operator> <operator>!</operator><operator>(</operator><call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>FileNotFoundException</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name>ex</name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Touch a file; creating parent dirs on demand.
   * @param path path of file
   * @return the file created
   * @throws IOException on any failure to write
   */</comment>
  <function><type><specifier>private</specifier> <name>File</name></type> <name>touch</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mkdirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>writeByteArrayToFile</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>path</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Assert that an attept to resolve the hadoop home dir failed with
   * an expected text in the exception string value.
   * @param path input
   * @param expectedText expected exception text
   * @return the caught exception
   * @throws FileNotFoundException any FileNotFoundException that was thrown
   * but which did not contain the expected text
   */</comment>
  <function><type><specifier>private</specifier> <name>FileNotFoundException</name></type> <name>assertHomeResolveFailed</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>expectedText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name>checkHadoopHomeInner</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expected an exception with the text `"</literal> <operator>+</operator> <name>expectedText</name> <operator>+</operator> <literal type="string">"`"</literal>
          <operator>+</operator> <literal type="string">" -but got the path "</literal> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// unreachable</comment>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertExContains</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>expectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ex</name></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Assert that an attept to resolve the {@code bin/winutils.exe} failed with
   * an expected text in the exception string value.
   * @param hadoopHome hadoop home directory
   * @param expectedText expected exception text
   * @return the caught exception
   * @throws Exception any Exception that was thrown
   * but which did not contain the expected text
   */</comment>
  <function><type><specifier>private</specifier> <name>FileNotFoundException</name></type> <name>assertWinutilsResolveFailed</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>hadoopHome</name></decl></parameter>,
      <parameter><decl><type><name>String</name></type> <name>expectedText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name>getQualifiedBinInner</name><argument_list>(<argument><expr><name>hadoopHome</name></expr></argument>, <argument><expr><name>WINUTILS_EXE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Expected an exception with the text `"</literal> <operator>+</operator> <name>expectedText</name> <operator>+</operator> <literal type="string">"`"</literal>
          <operator>+</operator> <literal type="string">" -but got the path "</literal> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// unreachable</comment>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertExContains</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>expectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ex</name></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertExContains</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectedText</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ex</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>expectedText</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><name>ex</name></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestWinUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestWinUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">987c7068a82</literal><operator>..</operator><literal type="number">6fc8969819e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestWinUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>util</name><operator>/</operator><name><name>TestWinUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@
 
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Log</name> <name>LOG</name> <operator>=</operator> <call><name><name>LogFactory</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>TestWinUtils</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>TEST_DIR</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"test.build.data"</literal></expr></argument>,
      <argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>TestWinUtils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><literal type="string">"target"</literal><operator>+</operator><name><name>File</name><operator>.</operator><name>pathSeparator</name></name> <operator>+</operator> <literal type="string">"tmp"</literal></expr></expr_stmt>)</block><operator>,</operator> <constructor><name><name>TestWinUtils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><parameter_list>()</parameter_list></constructor></class>)</block>;</class>

  <decl_stmt><decl><type><name>String</name></type> <name>winutils</name></decl>;</decl_stmt>
 
   <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Not supported on non-Windows platforms</comment>
     <expr_stmt><expr><call><name>assumeTrue</name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>TEST_DIR</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Failed to create Test directory "</literal> <operator>+</operator> <name>TEST_DIR</name></expr></argument>,
        <argument><expr><call><name><name>TEST_DIR</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>winutils</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>After</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">55</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>tearDown</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>FileUtil</name><operator>.</operator><name>fullyDelete</name></name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>private</specifier> <name>void</name></type> <name>requireWinutils</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="line">// Helper routine that writes the given content to the file.</comment>
   <function><type><specifier>private</specifier> <name>void</name></type> <name>writeFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>content</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>content</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>os</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <init>(<decl><type><name>FileOutputStream</name></type> <name>os</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
   </block_content>}</block></function>
 
   <comment type="line">// Helper routine that reads the first 100 bytes from the file.</comment>
   <function><type><specifier>private</specifier> <name>String</name></type> <name>readFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>b</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>FileInputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>fos</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
    <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name> <init>= <expr><literal type="string">"6bytes"</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>contentSize</name> <init>= <expr><call><name><name>content</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>testFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>writeFile</name><argument_list>(<argument><expr><name>testFile</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Verify permissions and file name return tokens</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>testPath</name> <init>= <expr><call><name><name>testFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><call><name><name>testFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"ls"</literal></expr><operator>,</operator> <expr><name>testPath</name></expr></expr_stmt>)</block_content></block>;</function>
     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>outputArgs</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"[ \r\n]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-rwx------"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><name><name>outputArgs</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
        <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>testFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"-rwx------"</literal></expr></argument>, <argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><name><name>outputArgs</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Verify most tokens when using a formatted output (other tokens</comment>
     <comment type="line">// will be verified with chmod/chown)</comment>
     <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><literal type="string">"-F"</literal></expr></argument>, <argument><expr><call><name><name>testFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"ls"</literal></expr><operator>,</operator> <expr><literal type="string">"-F"</literal></expr><operator>,</operator> <expr><name>testPath</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
     <expr_stmt><expr><name>outputArgs</name> <operator>=</operator> <call><name><name>output</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"[|\r\n]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>outputArgs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-rwx------"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"-rwx------"</literal></expr></argument>, <argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>contentSize</name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>testFile</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>outputArgs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>testFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>testFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLs</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testGroups</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>currentUser</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// Verify that groups command returns information about the current user</comment>
     <comment type="line">// groups when invoked with no args</comment>
     <decl_stmt><decl><type><name>String</name></type> <name>outputNoArgs</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"groups"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"groups"</literal></expr></expr_stmt>)</block_content>.trim(</block></catch>)</block_content></block>;</function>
     <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><name>currentUser</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"groups"</literal></expr><operator>,</operator> <expr><name>currentUser</name></expr></expr_stmt>)</block_content>.trim(</block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputNoArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Verify that groups command with the -F flag returns the same information</comment>
     <decl_stmt><decl><type><name>String</name></type> <name>outputFormat</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><literal type="string">"-F"</literal></expr></argument>, <argument><expr><name>currentUser</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"groups"</literal></expr><operator>,</operator> <expr><literal type="string">"-F"</literal></expr><operator>,</operator> <expr><name>currentUser</name></expr></expr_stmt>)</block_content>.trim(</block></function>)</block_content></block>;</function>
     <expr_stmt><expr><name>outputFormat</name> <operator>=</operator> <call><name><name>outputFormat</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></try>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>chmod</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"chmod"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"chmod"</literal></expr><operator>,</operator> <expr><name>mask</name></expr><operator>,</operator> <expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>chmodR</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"chmod"</literal></expr></argument>, <argument><expr><literal type="string">"-R"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"chmod"</literal></expr><operator>,</operator> <expr><literal type="string">"-R"</literal></expr><operator>,</operator> <expr><name>mask</name></expr><operator>,</operator> <expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>String</name></type> <name>ls</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"ls"</literal></expr><operator>,</operator> <expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
   }
 
   private <function><type><name>String</name></type> <name>lsF</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <return>return <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>, <argument><expr><literal type="string">"-F"</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"ls"</literal></expr><operator>,</operator> <expr><literal type="string">"-F"</literal></expr><operator>,</operator> <expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
   }
 
   private <decl_stmt><decl><type><name>void</name></type> <name>assertPermissions</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>, <argument><expr><name>String</name> <name>expected</name></expr></argument>)</argument_list>
@@ -151</decl>,6 +166,7 @@ private <decl><type ref="prev"/><name>void</name> <name>assertPermissions</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>, <argument><expr><name>String</name> <name>expected</name></expr></argument>)</argument_list>
 
   private <name>void</name> <name>testChmodInternal</name><argument_list>(<argument><expr><name>String</name> <name>mode</name></expr></argument>, <argument><expr><name>String</name> <name>expectedPerm</name></expr></argument>)</argument_list>
       <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"file1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>testChmodInternal</name><argument_list>(<argument><expr><name>String</name> <name>mode</name></expr></argument>, <argument><expr><name>String</name> <name>expectedPerm</name></expr></argument>)</argument_list></call></expr></expr_stmt>
   }
 
   private <function><type><name>void</name></type> <name>testNewFileChmodInternal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expectedPerm</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// Create a new directory</comment>
     <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"dir1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>testNewFileChmodInternal</name><argument_list>(<argument><expr><name>String</name> <name>expectedPerm</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><specifier>private</specifier> <name>void</name> <call><name>testChmodInternalR</name><argument_list>(<argument><expr><name>String</name> <name>mode</name></expr></argument>, <argument><expr><name>String</name> <name>expectedPerm</name></expr></argument>,
       <argument><expr><name>String</name> <name>expectedPermx</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <comment type="line">// Setup test folder hierarchy</comment>
     <decl_stmt><decl><type><name>File</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>mkdir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">226</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>testChmodInternalR</name><argument_list>(<argument><expr><name>String</name> <name>mode</name></expr></argument>, <argument><expr><name>String</name> <name>expectedPerm</name></expr></argument>,
 
   <argument><expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testBasicChmod</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <comment type="line">// - Create a file.</comment>
     <comment type="line">// - Change mode to 377 so owner does not have read permission.</comment>
     <comment type="line">// - Verify the owner truly does not have the permissions to read.</comment>
<argument>@@ <expr><operator>-</operator><literal type="number">249</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">268</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmod</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
  
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name>writeFile</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"writeFile should have failed!"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"writeFile should have failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Expected: Failed write to a file with permissions 577"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try></argument_list></call></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">280</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmod</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// - Change mode to 677 so owner does not have execute permission.</comment>
     <comment type="line">// - Verify the owner truly does not have the permissions to execute the file.</comment>
 
    <expr><name>File</name> <name>winutilsFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>winutilsFile</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>aExe</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"a.exe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>winutilsFile</name></expr></argument>, <argument><expr><name>aExe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><literal type="string">"677"</literal></expr></argument>, <argument><expr><name>aExe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><call><name><name>aExe</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"executing "</literal> <operator>+</operator> <name>aExe</name> <operator>+</operator> <literal type="string">" should have failed!"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"executing "</literal> <operator>+</operator> <name>aExe</name> <operator>+</operator> <literal type="string">" should have failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Expected: Failed to execute a file with permissions 677"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmod</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <comment type="block" format="javadoc">/** Validate behavior of chmod commands on directories on Windows. */</comment>
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testBasicChmodOnDir</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <comment type="line">// Validate that listing a directory with no read permission fails</comment>
     <decl_stmt><decl><type><name>File</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">307</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmodOnDir</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// Remove read permissions on directory a</comment>
     <expr><call><name>chmod</name><argument_list>(<argument><expr><literal type="string">"300"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Listing a directory without read permission should fail"</literal></expr></argument>,
        <argument><expr><literal type="null">null</literal> <operator>==</operator> <name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Listing a directory without read permission should fail"</literal></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// restore permissions</comment>
     <expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><literal type="string">"700"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">306</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">325</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmodOnDir</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <comment type="line">// FILE_WRITE_DATA/FILE_ADD_FILE privilege is denied on</comment>
       <comment type="line">// the dir.</comment>
       <expr><call><name><name>c</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"writeFile should have failed!"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"writeFile should have failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Expected: Failed to create a file when directory "</literal>
           <operator>+</operator> <literal type="string">"permissions are 577"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">356</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">375</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testBasicChmodOnDir</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testChmod</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>testChmodInternal</name><argument_list>(<argument><expr><literal type="string">"7"</literal></expr></argument>, <argument><expr><literal type="string">"-------rwx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>testChmodInternal</name><argument_list>(<argument><expr><literal type="string">"70"</literal></expr></argument>, <argument><expr><literal type="string">"----rwx---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>testChmodInternal</name><argument_list>(<argument><expr><literal type="string">"u-x,g+r,o=g"</literal></expr></argument>, <argument><expr><literal type="string">"-rw-r--r--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">376</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">396</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testChmod</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><specifier>private</specifier> <name>void</name> <call><name>chown</name><argument_list>(<argument><expr><name>String</name> <name>userGroup</name></expr></argument>, <argument><expr><name>File</name> <name>file</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"chown"</literal></expr></argument>, <argument><expr><name>userGroup</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"chown"</literal></expr><operator>,</operator> <expr><name>userGroup</name></expr><operator>,</operator> <expr><call><name><name>file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch>
   }
 
   private <decl_stmt><decl><type><name>void</name></type> <name>assertOwners</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>, <argument><expr><name>String</name> <name>expectedUser</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">390</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">410</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>assertOwners</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>, <argument><expr><name>String</name> <name>expectedUser</name></expr></argument>,
 
   <argument><expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testChown</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <argument><expr><name>File</name> <name>a</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><name>String</name> <name>username</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.name"</literal></expr></argument>)</argument_list></call></expr></argument>;
<argument>@@ <expr><operator>-</operator><literal type="number">415</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">436</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testChown</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testSymlinkRejectsForwardSlashesInLink</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <argument><expr><name>File</name> <name>newFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>newFile</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><name>String</name> <name>target</name> <operator>=</operator> <call><name><name>newFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>;
     <argument><expr><name>String</name> <name>link</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>;
     try <block>{<block_content>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"did not receive expected failure creating symlink "</literal>
         <operator>+</operator> <literal type="string">"with forward slashes in link: link = %s, target = %s"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></argument_list></call></expr></argument></argument_list></decl></decl_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">431</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">453</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testSymlinkRejectsForwardSlashesInLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testSymlinkRejectsForwardSlashesInTarget</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>newFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>newFile</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>target</name> <init>= <expr><call><name><name>newFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>link</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"did not receive expected failure creating symlink "</literal>
         <operator>+</operator> <literal type="string">"with forward slashes in target: link = %s, target = %s"</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">447</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">470</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testSymlinkRejectsForwardSlashesInTarget</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <comment type="line">// Create TEST_DIR\dir1\file1.txt</comment>
     <comment type="line">//</comment>
     <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"dir1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">462</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">486</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// symlink to file1.txt.</comment>
     <comment type="line">//</comment>
     <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><call><name><name>dirLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dir1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"symlink"</literal></expr><operator>,</operator> <expr><call><name><name>dirLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>dir1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch></try>
     <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(
        <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>, <argument><expr><call><name><name>fileLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>winutils</name></expr><operator>,</operator> <expr><literal type="string">"symlink"</literal></expr><operator>,</operator> <expr><call><name><name>fileLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>file1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></catch>
 
     <comment type="line">// Read back the two links and ensure we get what we expected.</comment>
     <comment type="line">//</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>readLinkOutput</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>,
    <argument><expr><name>String</name> <name>readLinkOutput</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>,
         <argument><expr><literal type="string">"readlink"</literal></expr></argument>,
         <argument><expr><call><name><name>dirLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>readLinkOutput</name></expr></argument>, <argument><expr><call><name>equalTo</name><argument_list>(<argument><expr><call><name><name>dir1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><name>readLinkOutput</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>,
    <argument><expr><name>readLinkOutput</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>,
         <argument><expr><literal type="string">"readlink"</literal></expr></argument>,
         <argument><expr><call><name><name>fileLink</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertThat</name><argument_list>(<argument><expr><name>readLinkOutput</name></expr></argument>, <argument><expr><call><name>equalTo</name><argument_list>(<argument><expr><call><name><name>file1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
<argument>@@ <expr><operator>-</operator><literal type="number">483</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">507</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument>
     <try>try <block>{<block_content>
       <comment type="line">// No link name specified.</comment>
       <comment type="line">//</comment>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException when reading bad symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>ece</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">492</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">516</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <comment type="line">// Bad link name.</comment>
       <comment type="line">//</comment>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">"ThereIsNoSuchLink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">"ThereIsNoSuchLink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException when reading bad symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>ece</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">501</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">525</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <comment type="line">// Non-symlink directory target.</comment>
       <comment type="line">//</comment>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><call><name><name>dir1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><call><name><name>dir1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException when reading bad symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>ece</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">510</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">534</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <comment type="line">// Non-symlink file target.</comment>
       <comment type="line">//</comment>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><call><name><name>file1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><call><name><name>file1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException when reading bad symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>ece</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">519</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">543</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <try>try <block>{<block_content>
       <comment type="line">// Too many parameters.</comment>
       <comment type="line">//</comment>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException with bad parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>ece</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">529</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">553</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testReadLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
   <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name><operator>=</operator><literal type="number">10000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testTaskCreate</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>batch</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"testTaskCreate.cmd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>File</name></type> <name>proof</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>TEST_DIR</name></expr></argument>, <argument><expr><literal type="string">"testTaskCreate.out"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>FileWriter</name></type> <name>fw</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">538</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">563</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTaskCreate</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>proof</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"testTaskCreate"</literal> <operator>+</operator> <name>testNumber</name></expr></argument>, 
    <argument><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"testTaskCreate"</literal> <operator>+</operator> <name>testNumber</name></expr></argument>,
         <argument><expr><call><name><name>batch</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
     
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>proof</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
<argument>@@ <expr><operator>-</operator><literal type="number">550</literal></expr></argument>,<argument><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">575</literal></expr></argument>,<argument><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTaskCreate</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><annotation>@<name>Test</name> <argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <specifier>public</specifier> <name>void</name> <call><name>testTaskCreateWithLimits</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>requireWinutils</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <comment type="line">// Generate a unique job id</comment>
     <argument><expr><name>String</name> <name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
     <comment type="line">// Run a task without any options</comment>
    <argument><expr><name>String</name> <name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>,
    <argument><expr><name>String</name> <name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>,
         <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
     <comment type="line">// Run a task without any limits</comment>
     <argument><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
    <argument><expr><name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
         <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
     <comment type="line">// Run a task with limits (128MB should be enough for a cmd)</comment>
     <argument><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"10000"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
    <argument><expr><name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"10000"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
         <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
     <argument><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
     <comment type="line">// Run a task without enough memory</comment>
     try <block>{<block_content>
       <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal>
      <name>out</name> <operator>=</operator> <call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal>
           <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"java -Xmx256m -version"</literal></expr></argument>)</argument_list></call></expr></argument>;
       <argument><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException with insufficient memory"</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">584</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">610</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTaskCreateWithLimits</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <comment type="line">//</comment>
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
      <argument><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>,
           <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
       <argument><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException with bad parameters"</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">593</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">619</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTaskCreateWithLimits</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
 
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>,
      <argument><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>,
           <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
       <argument><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException with bad parameters"</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">602</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">628</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testTaskCreateWithLimits</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
 
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>,
      <argument><expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>winutils</name></expr></argument>, <argument><expr><literal type="string">"task"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>,
           <argument><expr><literal type="string">"job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>, <argument><expr><literal type="string">"cmd /c echo job"</literal> <operator>+</operator> <name>jobId</name></expr></argument>)</argument_list></call></expr></argument>;
       <argument><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Failed to get Shell.ExitCodeException with bad parameters"</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Shell</name><operator>.</operator><name>ExitCodeException</name></name></type> <name>ece</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WindowsBasedProcessTree</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WindowsBasedProcessTree</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ebe8df12547</name><operator>..</operator><literal type="number">41b26f418c6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WindowsBasedProcessTree</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WindowsBasedProcessTree</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
     
   <specifier>public</specifier> <specifier>static</specifier> <name>boolean</name> <call><name>isAvailable</name><argument_list>()</argument_list></call> <block>{
     <if_stmt><if>if <condition>(<expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Shell</name><operator>.</operator><name>hasWinutilsPath</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      <expr_stmt/>}</block_content>
       ShellCommandExecutor shellExecutor = new ShellCommandExecutor(
          new String[] <block>{<block_content> <expr_stmt><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr><operator>,</operator> <expr><literal type="string">"help"</literal></expr></expr_stmt> }</block_content></block></block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
          <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"help"</literal></expr> }</block></block></expr></expr_stmt></block_content></block></catch></try></block_content></block></catch></try></block_content></block></catch></try></block_content></block></catch></block_content></block></catch></try></block_content></block></catch></try></block_content></block></catch></try></block_content></block></catch></try></block_content></block></catch></try>)</argument_list></call></expr></argument>;
       try <block>{<block_content>
         <expr_stmt><expr><call><name><name>shellExecutor</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></argument_list></call></expr></init></decl></decl_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <call><name>WindowsBasedProcessTree</name><argument_list>(<argument><expr><name>String</name> <name>pid</name></expr></argument>)</argument_list></call> <block>{
 
   <comment type="line">// helper method to override while testing</comment>
   <expr><name>String</name> <call><name>getAllProcessInfoFromShell</name><argument_list>()</argument_list></call> <block>{
    <expr><name>ShellCommandExecutor</name> <name>shellExecutor</name> <operator>=</operator> <operator>new</operator> <call><name>ShellCommandExecutor</name><argument_list>(
        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"processList"</literal></expr>, <expr><name>taskProcessId</name></expr> }</block></expr></argument>)</argument_list></call></expr>;
     <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>ShellCommandExecutor</name></type> <name>shellExecutor</name> <init>= <expr><operator>new</operator> <call><name>ShellCommandExecutor</name><argument_list>(
          <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>,
              <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"processList"</literal></expr>, <expr><name>taskProcessId</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>shellExecutor</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>shellExecutor</name><operator>.</operator><name>getOutput</name></name><argument_list>()</argument_list></call></expr>;</return>
     <expr_stmt/></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>ContainerExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>ContainerExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">68bfbbfdd14</literal><operator>..</operator><name>a83ef844de8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>ContainerExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>ContainerExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">401</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">401</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>protected</specifier> <name>Path</name> <call><name>getPidFilePath</name><argument_list>(<argument><expr><name>ContainerId</name> <name>containerId</name></expr></argument>)</argument_list></call> <block>{
           <expr><name>cpuRate</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>containerCpuPercentage</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt></block_content></block></catch>
       }</block></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"create"</literal></expr>, <expr><literal type="string">"-m"</literal></expr>,
      <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"create"</literal></expr>, <expr><literal type="string">"-m"</literal></expr>,
           <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>memory</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>cpuRate</name></expr></argument>)</argument_list></call></expr>, <expr><name>groupId</name></expr>,
           <expr><literal type="string">"cmd /c "</literal> <operator>+</operator> <name>command</name></expr> }</block></expr>;</return>
     }</block></expr></return> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>WindowsSecureContainerExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>WindowsSecureContainerExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fd2e31b7b48</name><operator>..</operator><literal type="number">70fdcdaa5db</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>WindowsSecureContainerExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>WindowsSecureContainerExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">578</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">578</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>setConf</name><argument_list>(<argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"getRunCommand: %s exists:%b"</literal></expr></argument>, 
           <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
    <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr>, <expr><literal type="string">"task"</literal></expr>, <expr><literal type="string">"createAsUser"</literal></expr>, <expr><name>groupId</name></expr>, 
    <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"task"</literal></expr>,
        <expr><literal type="string">"createAsUser"</literal></expr>, <expr><name>groupId</name></expr>,
         <expr><name>userName</name></expr>, <expr><call><name><name>pidFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"cmd /c "</literal> <operator>+</operator> <name>command</name></expr> }</block></expr>;</return>
   }</block></expr></return>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>ContainerLaunch</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>ContainerLaunch</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9718098a6be</literal><operator>..</operator><literal type="number">43493327ef7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>ContainerLaunch</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>ContainerLaunch</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">747</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">746</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>protected</specifier> <name>void</name> <call><name>link</name><argument_list>(<argument><expr><name>Path</name> <name>src</name></expr></argument>, <argument><expr><name>Path</name> <name>dst</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>File</name> <name>srcFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>src</name><operator>.</operator><name>toUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>srcFileStr</name> <init>= <expr><call><name><name>srcFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>dstFileStr</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dst</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// If not on Java7+ on Windows, then copy file instead of symlinking.</comment>
      <comment type="line">// See also FileUtil#symLink for full explanation.</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Shell</name><operator>.</operator><name>isJava7OrAbove</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>srcFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lineWithLenCheck</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"@copy \"%s\" \"%s\""</literal></expr></argument>, <argument><expr><name>srcFileStr</name></expr></argument>, <argument><expr><name>dstFileStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>errorCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>lineWithLenCheck</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"@%s symlink \"%s\" \"%s\""</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name></expr></argument>,
          <argument><expr><name>dstFileStr</name></expr></argument>, <argument><expr><name>srcFileStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>errorCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>lineWithLenCheck</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"@%s symlink \"%s\" \"%s\""</literal></expr></argument>,
          <argument><expr><call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dstFileStr</name></expr></argument>, <argument><expr><name>srcFileStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>errorCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
 
     <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>TestContainerExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>TestContainerExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2ebf4ec289b</literal><operator>..</operator><name>bc87b0331b6</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>TestContainerExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name><name>TestContainerExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assume</name><operator>.</operator><name>assumeTrue</name></name>;</import>
 
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
 <specifier>public</specifier> class <name>TestContainerExecutor</name> <block>{
   
   <decl_stmt><decl><type><specifier>private</specifier> <name>ContainerExecutor</name></type> <name>containerExecutor</name> <init>= <expr><operator>new</operator> <call><name>DefaultContainerExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>TestContainerLaunch</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>TestContainerLaunch</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ea6bb1dc19d</name><operator>..</operator><name>f85b01e31f0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>TestContainerLaunch</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>yarn</name><operator>-</operator><name>server</name><operator>-</operator><name>nodemanager</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>nodemanager</name><operator>/</operator><name>containermanager</name><operator>/</operator><name>launcher</name><operator>/</operator><name><name>TestContainerLaunch</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">978</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">978</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderCommand</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>Assume</name><operator>.</operator><name>assumeTrue</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
     <comment type="line">// The tests are built on assuming 8191 max command line length</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>ShellScriptBuilder</name></type> <name>builder</name> <init>= <expr><call><name><name>ShellScriptBuilder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">987</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">987</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderCommand</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></expr_stmt>)</block></class>)</block_content></block><empty_stmt>;</empty_stmt></catch>
     <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>command</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
         <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
            <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>callCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><literal type="string">"E"</literal></expr><operator>,</operator> <expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>callCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)))<empty_stmt>;</empty_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>command</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
           <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
              <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator><call><name><name>callCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><literal type="string">"X"</literal></expr><operator>,</operator> <expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator><call><name><name>callCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></expr_stmt>)</block_content></block></try>))<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"longCommand was expected to throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>IOException</name> <name>e</name><operator>)</operator> <block>{
       <expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>containsString</name><argument_list>(<argument><expr><name>expectedMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">1026</literal></expr>,<expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1026</literal></expr>,<expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderEnv</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>Assume</name><operator>.</operator><name>assumeTrue</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
 
     <comment type="line">// The tests are built on assuming 8191 max command line length</comment>
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>ShellScriptBuilder</name> <name>builder</name> <operator>=</operator> <call><name><name>ShellScriptBuilder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;
 
     <comment type="line">// test env</comment>
     <expr><call><name><name>builder</name><operator>.</operator><name>env</name></name><argument_list>(<argument><expr><literal type="string">"somekey"</literal></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>builder</name><operator>.</operator><name>env</name></name><argument_list>(<argument><expr><literal type="string">"somekey"</literal></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
        <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <operator>(</operator><literal type="string">"@set somekey="</literal><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><literal type="string">"A"</literal></expr>, <expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <operator>(</operator><literal type="string">"@set somekey="</literal><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>))</block></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>env</name></name><argument_list>(<argument><expr><literal type="string">"somekey"</literal></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
          <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <operator>(</operator><literal type="string">"@set somekey="</literal><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><literal type="string">"A"</literal></expr><operator>,</operator> <expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <operator>(</operator><literal type="string">"@set somekey="</literal><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content> + 1</block></try>)<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"long env was expected to throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>IOException</name> <name>e</name><operator>)</operator> <block>{
       <expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>containsString</name><argument_list>(<argument><expr><name>expectedMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">1051</literal></expr>,<expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1051</literal></expr>,<expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderMkdir</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>Assume</name><operator>.</operator><name>assumeTrue</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
 
     <comment type="line">// The tests are built on assuming 8191 max command line length</comment>
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>ShellScriptBuilder</name> <name>builder</name> <operator>=</operator> <call><name><name>ShellScriptBuilder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;
 
     <comment type="line">// test mkdir</comment>
     <expr><call><name><name>builder</name><operator>.</operator><name>mkdir</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>builder</name><operator>.</operator><name>mkdir</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
        <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>mkDirCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><literal type="string">"E"</literal></expr>, <expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>mkDirCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>))</block></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>mkdir</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
          <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>mkDirCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><literal type="string">"X"</literal></expr><operator>,</operator> <expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>mkDirCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator><literal type="number">1</literal></expr></expr_stmt>)</block_content></block></try>))<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"long mkdir was expected to throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>IOException</name> <name>e</name><operator>)</operator> <block>{
       <expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>containsString</name><argument_list>(<argument><expr><name>expectedMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">1072</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1072</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderMkdir</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderLink</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <comment type="line">// Test is only relevant on Windows</comment>
     <expr><call><name><name>Assume</name><operator>.</operator><name>assumeTrue</name></name><argument_list>(<argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;

    <expr><name>String</name> <name>linkCmd</name> <operator>=</operator> <literal type="string">"@"</literal> <operator>+</operator><name><name>Shell</name><operator>.</operator><name>WINUTILS</name></name> <operator>+</operator> <literal type="string">" symlink \"\" \"\""</literal></expr>;
    <expr><name>String</name> <name>linkCmd</name> <operator>=</operator> <literal type="string">"@"</literal> <operator>+</operator> <call><name><name>Shell</name><operator>.</operator><name>getWinutilsPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" symlink \"\" \"\""</literal></expr>;
 
     <comment type="line">// The tests are built on assuming 8191 max command line length</comment>
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8191</literal></expr></argument>, <argument><expr><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>ShellScriptBuilder</name> <name>builder</name> <operator>=</operator> <call><name><name>ShellScriptBuilder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1085</literal></expr>,<expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1084</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testWindowsShellScriptBuilderLink</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>)</block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>link</name></name><argument_list>(
         <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
            <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)<operator>,</operator>
         <expr_stmt><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
            <argument><expr><literal type="string">"F"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
            <expr_stmt><expr><literal type="string">"F"</literal></expr><operator>,</operator> <expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></expr_stmt>)))<empty_stmt>;</empty_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>link</name></name><argument_list>(
           <argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
              <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><operator>,</operator>
           <expr_stmt><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(
              <argument><expr><literal type="string">"Y"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGHT</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></expr_stmt></try>)<empty_stmt>;</empty_stmt>
              <expr_stmt><expr><literal type="string">"Y"</literal></expr><operator>,</operator> <expr><operator>(</operator><name><name>Shell</name><operator>.</operator><name>WINDOWS_MAX_SHELL_LENGTH</name></name> <operator>-</operator> <call><name><name>linkCmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></expr_stmt>) <expr_stmt><expr><operator>+</operator> <literal type="number">1</literal></expr></expr_stmt>))<empty_stmt>;</empty_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"long link was expected to throw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>IOException</name> <name>e</name><operator>)</operator> <block>{
       <expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>containsString</name><argument_list>(<argument><expr><name>expectedMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></expr_stmt>

</unit>
