<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/76be82bc041.java"><expr_stmt><expr><name>From</name> <literal type="number">76be82bc0419affbe0103bc4f45c90926f08d0cc</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Steve</name> <name><name>Loughran</name> <argument_list type="generic">&lt;<argument><name>stevel</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <name>Jul</name> <literal type="number">2016</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">38</literal><operator>:</operator><literal type="number">35</literal> <operator>+</operator><literal type="number">0100</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">13073</literal> <name>RawLocalFileSystem</name> <name>does</name> <name>not</name> <name>react</name> <name>on</name> <name>changing</name>
 <name><name>umask</name><operator>.</operator> <name>Contributed</name></name> <name>by</name> <name>Andras</name> <name>Bokor</name>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>fs</name><operator>/</operator><name><name>TestLocalFileSystemPermission</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">102</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">78</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">31</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cc41f4a41e8</name><operator>..</operator><literal type="number">0fcddcf0986</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name><name>RawLocalFileSystem</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
   <comment type="line">// Temporary workaround for HADOOP-9652.</comment>
   <specifier>private</specifier> <specifier>static</specifier> <name>boolean</name> <name>useDeprecatedFileStatus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>FsPermission</name></type> <name>umask</name></decl>;</decl_stmt>

   <function><annotation>@<name>VisibleForTesting</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>useStatIfAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>useDeprecatedFileStatus</name> <operator>=</operator> <operator>!</operator><call><name><name>Stat</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>File</name> <call><name>pathToFile</name><argument_list>(<argument><expr><name>Path</name> <name>path</name></expr></argument>)</argument_list></call> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name>URI</name> <name>uri</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name><name>super</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name>setConf</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>umask</name> <operator>=</operator> <call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
   }</block>
   
   <comment type="block" format="javadoc">/*******************************************************
@@ -233,7 +230,7 @@ private LocalFSFileOutputStream(Path f, boolean append,
       if (permission == null) {
         this.fos = new FileOutputStream(file, append);
       } else {
        permission = permission.applyUMask(umask);
        permission = permission.applyUMask(FsPermission.getUMask(getConf()));
         if (Shell.WINDOWS &amp;&amp; NativeIO.isAvailable()) {
           this.fos = NativeIO.Windows.createFileOutputStreamWithMode(file,
               append, permission.toShort());
@@ -510,7 +507,7 @@ protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)
     if (permission == null) {
       permission = FsPermission.getDirDefault();
     }
    permission = permission.applyUMask(umask);
    permission = permission.applyUMask(FsPermission.getUMask(getConf()));
     if (Shell.WINDOWS &amp;&amp; NativeIO.isAvailable()) {
       try {
         NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
index e37de1957bb..11e94a78c8b 100644
-- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystemPermission.java
@@ -20,7 +20,6 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.permission.*;
 import org.apache.hadoop.test.GenericTestUtils;
import org.apache.hadoop.util.StringUtils;
 import org.apache.log4j.Level;
 import org.apache.hadoop.util.Shell;
 
@@ -28,11 +27,21 @@
 import java.util.*;
 
 import junit.framework.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.assertThat;
 
 /**
  * This class tests the local file system via the FileSystem abstraction.
  */</comment>
 <specifier>public</specifier> <name>class</name> <name>TestLocalFileSystemPermission</name> extends <name>TestCase</name> <block>{

  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>LOGGER</name> <operator>=</operator>
      <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TestFcLocalFsPermission</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;

   <expr><specifier>static</specifier> <name>final</name> <name>String</name> <name>TEST_PATH_PREFIX</name> <operator>=</operator> <call><name><name>GenericTestUtils</name><operator>.</operator><name>getTempPath</name></name><argument_list>(
       <argument><expr><call><name><name>TestLocalFileSystemPermission</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">64</literal></expr>,<expr><literal type="number">12</literal> <operator>+</operator><literal type="number">73</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>cleanup</name><argument_list>(<argument><expr><name>FileSystem</name> <name>fs</name></expr></argument>, <argument><expr><name>Path</name> <name>name</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
   <expr><specifier>public</specifier> <name>void</name> <call><name>testLocalFSDirsetPermission</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
     <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     <expr_stmt/></block_content></block></if></if_stmt>}</block>
    <name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>localfs</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"044"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Path</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_PATH_PREFIX</name> <operator>+</operator> <literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>localfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSDirsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
           <expr><call><name><name>FsPermission</name><operator>.</operator><name>getDirDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyUMask</name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
           <argument><expr><name>initialPermission</name></expr></argument></block></expr></argument></throws></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
     </block_content>}</block></function> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></catch>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSDirsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>FsPermission</name> <name>initialPermission</name> <operator>=</operator> <call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>dir1</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>perm</name><operator>.</operator><name>applyUMask</name></name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <return>return;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSDirsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>copyPermission</name></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><name>dir2</name> <operator>=</operator> <name>copyPath</name></expr>;</expr_stmt>
     } catch <expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <return>return;</return>
     }</block></expr></expr_stmt> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSDirsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
   <comment type="block" format="javadoc">/** Test LocalFileSystem.setPermission */</comment>
   <expr><specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
     <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
           <expr><call><name><name>FsPermission</name><operator>.</operator><name>getFileDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyUMask</name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
           <argument><expr><name>initialPermission</name></expr></argument></block></expr></argument></throws></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></finally>
     } catch<expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <return>return;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name>assertEquals</name><argument_list>(
           <argument><expr><call><name><name>perm</name><operator>.</operator><name>applyUMask</name></name><argument_list>(<argument><expr><call><name><name>FsPermission</name><operator>.</operator><name>getUMask</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     } catch<expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <return>return;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetPermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>copyPermission</name></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><name>f2</name> <operator>=</operator> <name>copyPath</name></expr>;</expr_stmt>
     } catch <expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
       <return>return;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>FsPermission</name> <call><name>getPermission</name><argument_list>(<argument><expr><name>LocalFileSystem</name> <name>fs</name></expr></argument>, <argument><expr><name>Path</name> <name>p</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name><name>fs</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPermission</name><argument_list>()</argument_list></call></expr>;</return>
   }
 
  <comment type="block" format="javadoc">/** Test LocalFileSystem.setOwner */</comment>
  <comment type="block" format="javadoc">/** Test LocalFileSystem.setOwner. */</comment>
   public <function><type><name>void</name></type> <name>testLocalFSsetOwner</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetOwner</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>groups</name> <operator>=</operator> <literal type="null">null</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>groups</name> <operator>=</operator> <call><name>getGroups</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{}: {}"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block>
     <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>stringifyException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></catch></try>
     <if_stmt><if>if <condition>(<expr><name>groups</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test: need at least one group.  groups="</literal>
                         <operator>+</operator> <name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test: need at least one group. groups={}"</literal></expr></argument>,
          <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">230</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">232</literal></expr><operator>,</operator><expr><literal type="number">61</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testLocalFSsetOwner</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><call><name><name>localfs</name><operator>.</operator><name>setOwner</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>g1</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>g1</name></expr></argument>, <argument><expr><call><name>getGroup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Not testing changing the group since user "</literal> <operator>+</operator>
                           <literal type="string">"belongs to only one group."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not testing changing the group since user "</literal> <operator>+</operator>
            <literal type="string">"belongs to only one group."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
     } 
     finally <block>{<block_content><expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
   }
 
  <comment type="block" format="javadoc">/**
   * Steps:
   * 1. Create a directory with default permissions: 777 with umask 022
   * 2. Check the directory has good permissions: 755
   * 3. Set the umask to 062.
   * 4. Create a new directory with default permissions.
   * 5. For this directory we expect 715 as permission not 755
   * @throws Exception we can throw away all the exception.
   */</comment>
  public <function><type><name>void</name></type> <name>testSetUmaskInRealTime</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>Path</name><operator>.</operator><name>WINDOWS</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cannot run test for Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>LocalFileSystem</name></type> <name>localfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>localfs</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"022"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Current umask is {}"</literal></expr></argument>,
        <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_PATH_PREFIX</name> <operator>+</operator> <literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>dir2</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_PATH_PREFIX</name> <operator>+</operator> <literal type="string">"dir2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>localfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>initialPermission</name> <init>= <expr><call><name>getPermission</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
          <argument><expr><literal type="string">"With umask 022 permission should be 755 since the default "</literal> <operator>+</operator>
              <literal type="string">"permission is 777"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FsPermission</name><argument_list>(<argument><expr><literal type="string">"755"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initialPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Modify umask and create a new directory</comment>
      <comment type="line">// and check if new umask is applied</comment>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"062"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>localfs</name><operator>.</operator><name>mkdirs</name></name><argument_list>(<argument><expr><name>dir2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>FsPermission</name></type> <name>finalPermission</name> <init>= <expr><call><name><name>localfs</name><operator>.</operator><name>getFileStatus</name></name><argument_list>(<argument><expr><name>dir2</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>getPermission</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><literal type="string">"With umask 062 permission should not be 755 since the "</literal> <operator>+</operator>
          <literal type="string">"default permission is 777"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FsPermission</name><argument_list>(<argument><expr><literal type="string">"755"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>is</name><argument_list>(<argument><expr><call><name>not</name><argument_list>(<argument><expr><name>finalPermission</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
          <argument><expr><literal type="string">"With umask 062 we expect 715 since the default permission is 777"</literal></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>FsPermission</name><argument_list>(<argument><expr><literal type="string">"715"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finalPermission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeys</name><operator>.</operator><name>FS_PERMISSIONS_UMASK_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"022"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>localfs</name></expr></argument>, <argument><expr><name>dir2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

   <function><type><specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getGroups</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>Shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><call><name><name>Shell</name><operator>.</operator><name>getGroupsCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function>

</unit>
