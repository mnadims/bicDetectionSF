<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/06d0109314b.java"><expr_stmt><expr><name>From</name> <literal type="number">06d0109314b39675a205ee6f0898ebde23284d5d</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Harsh</name> <name><name>J</name> <argument_list type="generic">&lt;<argument><name>harsh</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">30</literal> <name>Jun</name> <literal type="number">2012</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">04</literal><operator>:</operator><literal type="number">23</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">8449.</literal> <name>hadoop</name> <name>fs</name> <operator>-</operator><name>text</name> <name>fails</name> <name>with</name> <name>compressed</name> <name>sequence</name>
 <name>files</name> <name>with</name> <name>the</name> <name>codec</name> <name>file</name> <name><name>extension</name><operator>.</operator></name> (<name>harsh</name></expr></expr_stmt>)

<expr_stmt><expr><name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1355636 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                 <operator>|</operator>  <literal type="number">3</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Display</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">23</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDFSShell</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">28</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">42</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">12</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>a093a2301e4</name><operator>..</operator><literal type="number">964e379529e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Branch</name><operator>-</operator><literal type="number">2</literal> <operator>(</operator> <name>Unreleased</name> <name>changes</name> <operator>)</operator>
     <name>HADOOP</name><operator>-</operator><literal type="number">8524.</literal> <name>Allow</name> <name>users</name> <name>to</name> <name>get</name> <name>source</name> <name>of</name> <name>a</name> <name>Configuration</name>
     <call><name>parameter</name> <argument_list>(<argument><expr><name>harsh</name></expr></argument>)</argument_list></call>
 
    <name>HADOOP</name><operator>-</operator><literal type="number">8449.</literal> <name>hadoop</name> <name>fs</name> <operator>-</operator><name>text</name> <name>fails</name> <name>with</name> <name>compressed</name> <name>sequence</name> <name>files</name>
    <name>with</name> <name>the</name> <name>codec</name> <name>file</name> <call><name>extension</name> <argument_list>(<argument><expr><name>harsh</name></expr></argument>)</argument_list></call>

   <name>BUG</name> <name>FIXES</name>
 
     <name>HADOOP</name><operator>-</operator><literal type="number">8372.</literal> <call><name><name>NetUtils</name><operator>.</operator><name>normalizeHostName</name></name><argument_list>()</argument_list></call> <name>incorrectly</name> <name>handles</name> <name>hostname</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Display</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Display</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">59358632a77</literal><operator>..</operator><literal type="number">5ae0d67c574</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Display</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>fs</name><operator>/</operator><name>shell</name><operator>/</operator><name><name>Display</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>protected</specifier> <name>InputStream</name> <call><name>getInputStream</name><argument_list>(<argument><expr><name>PathData</name> <name>item</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><annotation>@<name>Override</name></annotation>
     <specifier>protected</specifier> <name>InputStream</name> <call><name>getInputStream</name><argument_list>(<argument><expr><name>PathData</name> <name>item</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>FSDataInputStream</name> <name>i</name> <operator>=</operator> <operator>(</operator><name>FSDataInputStream</name><operator>)</operator><call><name><name>super</name><operator>.</operator><name>getInputStream</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
      
      <comment type="line">// check codecs</comment>
      <decl_stmt><decl><type><name>CompressionCodecFactory</name></type> <name>cf</name> <init>= <expr><operator>new</operator> <call><name>CompressionCodecFactory</name><argument_list>(<argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CompressionCodec</name></type> <name>codec</name> <init>= <expr><call><name><name>cf</name><operator>.</operator><name>getCodec</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>codec</name><operator>.</operator><name>createInputStream</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
 
      <comment type="line">// Check type of stream first</comment>
       <switch>switch<condition>(<expr><call><name><name>i</name><operator>.</operator><name>readShort</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <case>case <expr><literal type="number">0x1f8b</literal></expr>:</case> <block>{<block_content> <comment type="line">// RFC 1952</comment>
          <comment type="line">// Must be gzip</comment>
           <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return>return <expr><operator>new</operator> <call><name>GZIPInputStream</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block>
         <case>case <expr><literal type="number">0x5345</literal></expr>:</case> <block>{<block_content> <comment type="line">// 'S' 'E'</comment>
          <comment type="line">// Might be a SequenceFile</comment>
           <if_stmt><if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <return>return <expr><operator>new</operator> <call><name>TextRecordInputStream</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>stat</name></name></expr></argument>)</argument_list></call></expr>;</return>
           </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>
          <comment type="line">// Check the type of compression instead, depending on Codec class's</comment>
          <comment type="line">// own detection methods, based on the provided path.</comment>
          <decl_stmt><decl><type><name>CompressionCodecFactory</name></type> <name>cf</name> <init>= <expr><operator>new</operator> <call><name>CompressionCodecFactory</name><argument_list>(<argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>CompressionCodec</name></type> <name>codec</name> <init>= <expr><call><name><name>cf</name><operator>.</operator><name>getCodec</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>codec</name><operator>.</operator><name>createInputStream</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
           <break>break;</break>
         </block_content>}</block>
       </block_content>}</block></switch>

      <comment type="line">// File is non-compressed, or not a file container we know.</comment>
       <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>i</name></expr>;</return>
    }    
    }
   }
 
   protected <class>class <name>TextRecordInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDFSShell</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDFSShell</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e5cf21fea5b</name><operator>..</operator><name>f1aa7b32168</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDFSShell</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>-</operator><name>project</name><operator>/</operator><name>hadoop</name><operator>-</operator><name>hdfs</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>hdfs</name><operator>/</operator><name><name>TestDFSShell</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>server</name><operator>.</operator><name>datanode</name><operator>.</operator><name>DataNodeTestUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>hdfs</name><operator>.</operator><name>tools</name><operator>.</operator><name>DFSAdmin</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>SequenceFile</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>ToolRunner</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">545</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">547</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testText</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
       <expr><call><name>textTest</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><literal type="string">"/texttest"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>makeQualified</name><argument_list>(<argument><expr><call><name><name>dfs</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>dfs</name><operator>.</operator><name>getWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"fs.default.name"</literal></expr></argument>, <argument><expr><call><name><name>dfs</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"fs.defaultFS"</literal></expr></argument>, <argument><expr><call><name><name>dfs</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>FileSystem</name></type> <name>lfs</name> <init>= <expr><call><name><name>FileSystem</name><operator>.</operator><name>getLocal</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>textTest</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>TEST_ROOT_DIR</name></expr></argument>, <argument><expr><literal type="string">"texttest"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>makeQualified</name><argument_list>(<argument><expr><call><name><name>lfs</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>lfs</name><operator>.</operator><name>getWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">564</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">566</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>textTest</name><argument_list>(<argument><expr><name>Path</name> <name>root</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
       <expr><name>OutputStream</name> <name>zout</name> <operator>=</operator> <operator>new</operator> <call><name>GZIPOutputStream</name><argument_list>(
           <argument><expr><call><name><name>fs</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>bak</name> <operator>=</operator> <name><name>System</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>forDigit</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">572</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">575</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>textTest</name><argument_list>(<argument><expr><name>Path</name> <name>root</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
       }</block>
       <call><name><name>zout</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr></argument></throws></expr>;</expr_stmt>
 
      <expr_stmt><expr><name>bak</name> <operator>=</operator> <name><name>System</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">581</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">583</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>private</specifier> <name>void</name> <call><name>textTest</name><argument_list>(<argument><expr><name>Path</name> <name>root</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
       <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>ToolRunner</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FsShell</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"'-text "</literal> <operator>+</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" returned "</literal> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Output doesn't match input"</literal></expr></argument>,
           <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Create a sequence file with a gz extension, to test proper</comment>
      <comment type="line">// container detection</comment>
      <decl_stmt><decl><type><name><name>SequenceFile</name><operator>.</operator><name>Writer</name></name></type> <name>writer</name> <init>= <expr><call><name><name>SequenceFile</name><operator>.</operator><name>createWriter</name></name><argument_list>(
          <argument><expr><name>conf</name></expr></argument>,
          <argument><expr><call><name><name>SequenceFile</name><operator>.</operator><name>Writer</name><operator>.</operator><name>file</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>SequenceFile</name><operator>.</operator><name>Writer</name><operator>.</operator><name>keyClass</name></name><argument_list>(<argument><expr><name><name>Text</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>SequenceFile</name><operator>.</operator><name>Writer</name><operator>.</operator><name>valueClass</name></name><argument_list>(<argument><expr><name><name>Text</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"Foo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"Bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"-text"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ToolRunner</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FsShell</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"'-text "</literal> <operator>+</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" returned "</literal> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Output doesn't match input"</literal></expr></argument>,
          <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Foo\tBar\n"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for> <finally>finally <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>bak</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><name>bak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></finally></block></class>

</unit>
