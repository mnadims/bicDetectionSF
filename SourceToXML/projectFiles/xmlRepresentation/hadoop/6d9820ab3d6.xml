<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/hadoop/6d9820ab3d6.java"><expr_stmt><expr><name>From</name> <literal type="number">6d9820ab3d6d7ff025fca7c218bfd951ba859775</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Tsz</name><operator>-</operator><name>wo</name> <name><name>Sze</name> <argument_list type="generic">&lt;<argument><name>szetszwo</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">4</literal> <name>Jul</name> <literal type="number">2011</literal> <literal type="number">02</literal><operator>:</operator><literal type="number">39</literal><operator>:</operator><literal type="number">14</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>HADOOP</name><operator>-</operator><literal type="number">7437.</literal> <name><name>IOUtils</name><operator>.</operator><name>copybytes</name></name> <name>will</name> <name>suppress</name> <name>the</name> <name>stream</name>
 <name>closure</name> <name><name>exceptions</name><operator>.</operator>  <name>Contributed</name></name> <name>by</name> <name>Uma</name> <name>Maheswara</name> <name>Rao</name> <name>G</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/hadoop/common/trunk@1142535 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>  <literal type="number">3</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">6</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>TestIOUtils</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">45</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">54</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">4bdc0a720dc</literal><operator>..</operator><literal type="number">69f961c115e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <call><name>Trunk</name> <argument_list>(<argument><expr><name>unreleased</name> <name>changes</name></expr></argument>)</argument_list></call>
     <name>HADOOP</name><operator>-</operator><literal type="number">7428.</literal> <name>IPC</name> <name>connection</name> <name>is</name> <name>orphaned</name> <name>with</name> <literal type="null">null</literal> <literal type="char">'out'</literal> <name><name>member</name><operator>.</operator></name>
     (<name>todd</name> <name>via</name> <name>eli</name></expr></expr_stmt>)
 
    <expr_stmt><expr><name>HADOOP</name><operator>-</operator><literal type="number">7437.</literal> <name><name>IOUtils</name><operator>.</operator><name>copybytes</name></name> <name>will</name> <name>suppress</name> <name>the</name> <name>stream</name> <name>closure</name> <name><name>exceptions</name><operator>.</operator></name>
    (<name>Uma</name> <name>Maheswara</name> <name>Rao</name> <name>G</name> <name>via</name> <name>szetszwo</name></expr></expr_stmt>)

 <expr_stmt><expr><name>Release</name> <literal type="number">0.22.0</literal> <operator>-</operator> <name>Unreleased</name>
 
   <name>INCOMPATIBLE</name> <name>CHANGES</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c60b95befec</name><operator>..</operator><name>f5875d8d96b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>IOUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>copyBytes</name><argument_list>(<argument><expr><name>InputStream</name> <name>in</name></expr></argument>, <argument><expr><name>OutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>long</name> <name>count</name></expr></argument>,
         <argument><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytesRead</name></expr></argument>)</argument_list></call></expr></argument>;
         <argument><expr><name>bytesRemaining</name> <operator>-=</operator> <name>bytesRead</name></expr></argument>;</argument_list></call></expr></expr_stmt>
       }
      if <expr_stmt><expr><operator>(</operator><name>close</name><operator>)</operator> <block>{
        <expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>out</name> <operator>=</operator> <literal type="null">null</literal></expr>;
        <expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>in</name> <operator>=</operator> <literal type="null">null</literal></expr>;
      }</block></expr></expr_stmt>
     } finally <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>close</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>closeStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>TestIOUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>TestIOUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">44d03ea4538</literal><operator>..</operator><name>d4f5057f7ce</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>TestIOUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>core</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>io</name><operator>/</operator><name><name>TestIOUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name></name>;</package>
 
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>fail</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">46</literal> @@ <specifier>public</specifier> <name>void</name> <call><name>testCopyBytesShouldNotCloseStreamsWhenCloseIsFalse</name><argument_list>()</argument_list></call>
     <call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atMost</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atMost</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
  
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCopyBytesWithCountShouldCloseStreamsWhenCloseIsTrue</name><parameter_list>()</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>InputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>OutputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>doReturn</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atLeastOnce</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atLeastOnce</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCopyBytesWithCountShouldNotCloseStreamsWhenCloseIsFalse</name><parameter_list>()</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>InputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>OutputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>doReturn</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atMost</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atMost</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCopyBytesWithCountShouldThrowOutTheStreamClosureExceptions</name><parameter_list>()</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>InputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><call><name><name>Mockito</name><operator>.</operator><name>mock</name></name><argument_list>(<argument><expr><name><name>OutputStream</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>doReturn</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>doThrow</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Exception in closing the stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(
        <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should throw out the exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Not throwing the expected exception."</literal></expr></argument>,
          <argument><expr><literal type="string">"Exception in closing the stream"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atLeastOnce</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Mockito</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>Mockito</name><operator>.</operator><name>atLeastOnce</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
 </block_content>}</block>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
