<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/b653ee0a59.java"><expr_stmt><expr><name>From</name> <name>b653ee0a5967a8255f087f43a1cb6a878e765833</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Sandor</name> <name><name>Magyari</name> <argument_list type="generic">&lt;<argument><name>smagyari</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">22</literal> <name>Sep</name> <literal type="number">2017</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">48</literal><operator>:</operator><literal type="number">54</literal> <operator>+</operator><literal type="number">0200</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">22012.</literal> <name>BP</name> <name>deploys</name> <name>failing</name> <name>intermittently</name> <name>with</name> <call><name>error</name> 
 <argument_list>(<argument><expr><name>magyari_sandor</name></expr></argument>)</argument_list></call>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>events</name><operator>/</operator><name><name>ClusterConfigFinishedEvent</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">15</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>TopologyManager</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">88</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>topology</name><operator>/</operator><name>tasks</name><operator>/</operator><name><name>ConfigureClusterTask</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">13</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tasks</name><operator>/</operator><name><name>ConfigureClusterTaskFactory</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutor</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">83</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>ClusterDeployWithStartOnlyTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><name><name>stallWithoutStartOnComponentLevelTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>ClusterInstallWithoutStartTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>topology</name><operator>/</operator><name><name>ConfigureClusterTaskTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">18</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutorTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">51</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <literal type="number">10</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">236</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">41</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutor</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutorTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>ClusterConfigFinishedEvent</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>ClusterConfigFinishedEvent</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cdb86ac953</name><operator>..</operator><name>f0574d054b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>ClusterConfigFinishedEvent</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>ClusterConfigFinishedEvent</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>cluster</name> <name>configuration</name> <name>is</name> <name>successfully</name> <name><name>updated</name><operator>.</operator></name>
  *<operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>ClusterConfigFinishedEvent</name> extends <name>AmbariEvent</name> <block>{

  <expr><specifier>private</specifier> <name>final</name> <name>long</name> <name>clusterId</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>String</name> <name>clusterName</name></expr>;
 
 
  <expr><specifier>public</specifier> <call><name>ClusterConfigFinishedEvent</name><argument_list>(<argument><expr><name>String</name> <name>clusterName</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <call><name>ClusterConfigFinishedEvent</name><argument_list>(<argument><expr><name>long</name> <name>clusterId</name></expr></argument>, <argument><expr><name>String</name> <name>clusterName</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name><name>AmbariEventType</name><operator>.</operator><name>CLUSTER_CONFIG_FINISHED</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>this</name><operator>.</operator><name>clusterId</name></name> <operator>=</operator> <name>clusterId</name></expr>;
     <expr><name><name>this</name><operator>.</operator><name>clusterName</name></name> <operator>=</operator> <name>clusterName</name></expr>;
   }</block>
 
  <comment type="block" format="javadoc">/**
   * Get the cluster id
   * @return
   */</comment>
  <specifier>public</specifier> <name>long</name> <call><name>getClusterId</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>clusterId</name></expr>;</return></block></expr>
  }</block>

   <comment type="block" format="javadoc">/**
    * Get the cluster name
   *
    * @return
    */</comment>
   <specifier>public</specifier> <name>String</name> <call><name>getClusterName</name><argument_list>()</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">46</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">56</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClusterConfigFinishedEvent</name> extends <name>AmbariEvent</name> <block>{
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>String</name> <call><name>toString</name><argument_list>()</argument_list></call> <block>{
     <expr><name>StringBuilder</name> <name>buffer</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"ClusterConfigChangedEvent{"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"clusterId="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getClusterId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"clusterName="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getClusterName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>TopologyManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>TopologyManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3af62e819e</literal><operator>..</operator><literal type="number">9769fae4b8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>TopologyManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>TopologyManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal><operator>,</operator><literal type="number">9</literal> <operator>+</operator><literal type="number">29</literal><operator>,</operator><literal type="number">10</literal> @@</block></expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LinkedBlockingQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>actionmanager</name><operator>.</operator><name>HostRoleCommand</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>quicklinksprofile</name><operator>.</operator><name>QuickLinksProfile</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>topology</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ConfigureClusterTask</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>topology</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ConfigureClusterTaskFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>topology</name><operator>.</operator><name>validators</name><operator>.</operator><name>TopologyValidatorService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>utils</name><operator>.</operator><name>ManagedThreadPoolExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>utils</name><operator>.</operator><name>RetryHelper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>TopologyManager</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CLUSTER_CONFIG_TASK_MAX_TIME_IN_MILLIS_PROPERTY_NAME</name> <operator>=</operator> <literal type="string">"cluster_configure_task_timeout"</literal></expr>;
 
   <expr><specifier>private</specifier> <name>PersistedState</name> <name>persistedState</name></expr>;

  <comment type="block" format="javadoc">/**
   * Single threaded executor to execute async tasks. At the moment it's only used to execute ConfigureClusterTask.
   */</comment>
   <expr><specifier>private</specifier> <name>final</name> <name>ExecutorService</name> <name>executor</name> <operator>=</operator> <call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name>Executor</name> <name>taskExecutor</name></expr>; <comment type="line">// executes TopologyTasks</comment>
  <expr><specifier>private</specifier> <name>final</name> <name>boolean</name> <name>parallelTaskCreationEnabled</name></expr>;

  <comment type="block" format="javadoc">/**
   * Thread pool size for topology task executors.
   */</comment>
  <expr><specifier>private</specifier> <name>int</name> <name>topologyTaskExecutorThreadPoolSize</name></expr>;
  <comment type="block" format="javadoc">/**
   * There is one ExecutorService for each cluster to execute TopologyTasks.
   * TopologyTasks are submitted into ExecutorService for each cluster,
   * however the ExecutorService is started only after cluster configuration is finished.
   */</comment>
  <expr><specifier>private</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>ManagedThreadPoolExecutor</name></argument>&gt;</argument_list></name> <name>topologyTaskExecutorServiceMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

   <expr><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>hostsToIgnore</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name><name>List</name><argument_list type="generic">&lt;<argument><name>HostImpl</name></argument>&gt;</argument_list></name> <name>availableHosts</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>LogicalRequest</name></argument>&gt;</argument_list></name> <name>reservedHosts</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">158</literal></expr>,<expr><literal type="number">17</literal> <operator>+</operator><literal type="number">174</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TopologyManager</name> <block>{
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name> <name>clusterProvisionWithBlueprintCreationFinished</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
   <expr><specifier>public</specifier> <call><name>TopologyManager</name><argument_list>()</argument_list></call> <block>{
    <expr><name>parallelTaskCreationEnabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
    <expr><name>taskExecutor</name> <operator>=</operator> <name>executor</name></expr>;
    <expr><name>topologyTaskExecutorThreadPoolSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;
   }</block>
 
   @<name>Inject</name>
   <specifier>public</specifier> <call><name>TopologyManager</name><argument_list>(<argument><expr><name>Configuration</name> <name>configuration</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>int</name> <name>threadPoolSize</name> <operator>=</operator> <call><name><name>configuration</name><operator>.</operator><name>getParallelTopologyTaskCreationThreadPoolSize</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>parallelTaskCreationEnabled</name> <operator>=</operator> <call><name><name>configuration</name><operator>.</operator><name>isParallelTopologyTaskCreationEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>threadPoolSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;
    <expr><name>taskExecutor</name> <operator>=</operator> <ternary><condition><expr><name>parallelTaskCreationEnabled</name></expr>
      ?</condition><then> <expr><call><name><name>Executors</name><operator>.</operator><name>newFixedThreadPool</name></name><argument_list>(<argument><expr><name>threadPoolSize</name></expr></argument>)</argument_list></call></expr>
      </then><else>: <expr><name>executor</name></expr></else></ternary></expr>;
    <expr><name>topologyTaskExecutorThreadPoolSize</name> <operator>=</operator> <call><name><name>configuration</name><operator>.</operator><name>getParallelTopologyTaskCreationThreadPoolSize</name></name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>configuration</name><operator>.</operator><name>isParallelTopologyTaskCreationEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>topologyTaskExecutorThreadPoolSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
   }</block>
 
   <comment type="line">// executed by the IoC framework after creating the object (guice)</comment>
@@ <operator>-</operator><literal type="number">310</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">324</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TopologyManager</name> <block>{
     <comment type="line">// set provision action requested</comment>
     <expr><call><name><name>topology</name><operator>.</operator><name>setProvisionAction</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getProvisionAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 

    <comment type="line">// create task executor for TopologyTasks</comment>
    <expr><call><name>getOrCreateTopologyTaskExecutor</name><argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;

     <comment type="line">// persist request</comment>
     <expr><name>LogicalRequest</name> <name>logicalRequest</name> <operator>=</operator> <call><name><name>RetryHelper</name><operator>.</operator><name>executeWithRetry</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>LogicalRequest</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
         <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">325</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>TopologyManager</name> <block>{
     <expr><call><name>addClusterConfigRequest</name><argument_list>(<argument><expr><name>topology</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ClusterConfigurationRequest</name><argument_list>(<argument><expr><name>ambariContext</name></expr></argument>, <argument><expr><name>topology</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
       <argument><expr><name>stackAdvisorBlueprintProcessor</name></expr></argument>, <argument><expr><name>securityType</name> <operator>==</operator> <name><name>SecurityType</name><operator>.</operator><name>KERBEROS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <comment type="line">// Notify listeners that cluster configuration finished</comment>
    <expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>call</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ambariEventPublisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ClusterConfigFinishedEvent</name><argument_list>(<argument><expr><name>clusterName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
      <expr_stmt/>}</block_content>
    }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>

     <comment type="line">// Process the logical request</comment>
     <call><name>processRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>topology</name></expr></argument>, <argument><expr><name>logicalRequest</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">345</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>TopologyManager</name> <block>{
     <return>return <expr><call><name>getRequestStatus</name><argument_list>(<argument><expr><call><name><name>logicalRequest</name><operator>.</operator><name>getRequestId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block>
 
  @<name>Subscribe</name>
  <specifier>public</specifier> <name>void</name> <call><name>onClusterConfigFinishedEvent</name><argument_list>(<argument><expr><name>ClusterConfigFinishedEvent</name> <name>event</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>ManagedThreadPoolExecutor</name> <name>taskExecutor</name> <operator>=</operator> <call><name><name>topologyTaskExecutorServiceMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getClusterId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>taskExecutor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Can't find executor service taskQueue not found for cluster: {} "</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> else <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Starting topology task ExecutorService for cluster: {}"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>taskExecutor</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

 
   <comment type="block" format="javadoc">/**
    * Saves the quick links profile to the DB as an Ambari setting. Creates a new setting entity or updates the existing
@@ -941,16 +961,8 @@ public class TopologyManager {
     }
 
     LOG.info("TopologyManager.processAcceptedHostOffer: queue tasks for host = {} which responded {}", hostName, response.getAnswer());
    if (parallelTaskCreationEnabled) {
      executor.execute(new Runnable() { // do not start until cluster config done
        @Override
        public void run() {
          queueHostTasks(topology, response, hostName);
        }
      });
    } else {
      queueHostTasks(topology, response, hostName);
    }
    queueHostTasks(topology, response, hostName);

   }
 
   @Transactional
@@ -959,9 +971,23 @@ public class TopologyManager {
     persistedState.registerInTopologyHostInfo(host);
   }
 
  private ExecutorService getOrCreateTopologyTaskExecutor(Long clusterId) {
    ManagedThreadPoolExecutor topologyTaskExecutor = this.topologyTaskExecutorServiceMap.get(clusterId);
    if (topologyTaskExecutor == null) {
      LOG.info("Creating TopologyTaskExecutorService for clusterId: {}", clusterId);

      topologyTaskExecutor = new ManagedThreadPoolExecutor(topologyTaskExecutorThreadPoolSize,
              topologyTaskExecutorThreadPoolSize, 0L, TimeUnit.MILLISECONDS,
              new LinkedBlockingQueue&lt;Runnable&gt;());
      topologyTaskExecutorServiceMap.put(clusterId, topologyTaskExecutor);
    }
    return topologyTaskExecutor;
  }

   private void queueHostTasks(ClusterTopology topology, HostOfferResponse response, String hostName) {
     LOG.info("TopologyManager.processAcceptedHostOffer: queueing tasks for host = {}", hostName);
    response.executeTasks(taskExecutor, hostName, topology, ambariContext);
    ExecutorService executorService = getOrCreateTopologyTaskExecutor(topology.getClusterId());
    response.executeTasks(executorService, hostName, topology, ambariContext);
   }
 
   private void updateHostWithRackInfo(ClusterTopology topology, HostOfferResponse response, HostImpl host) {
@@ -1108,7 +1134,7 @@ public class TopologyManager {
     }
 
     ConfigureClusterTask configureClusterTask = configureClusterTaskFactory.createConfigureClusterTask(topology,
      configurationRequest);
      configurationRequest, ambariEventPublisher);
 
     AsyncCallableService&lt;Boolean&gt; asyncCallableService = new AsyncCallableService&lt;&gt;(configureClusterTask, timeout, delay,
         Executors.newScheduledThreadPool(1));
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java b/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java
index 0ce59822c6..60eaa591b9 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java
@@ -22,6 +22,8 @@ import java.util.Collections;
 import java.util.Map;
 import java.util.concurrent.Callable;
 
import org.apache.ambari.server.events.ClusterConfigFinishedEvent;
import org.apache.ambari.server.events.publishers.AmbariEventPublisher;
 import org.apache.ambari.server.security.authorization.internal.RunWithInternalSecurityContext;
 import org.apache.ambari.server.topology.ClusterConfigurationRequest;
 import org.apache.ambari.server.topology.ClusterTopology;
@@ -39,11 +41,14 @@ public class ConfigureClusterTask implements Callable&lt;Boolean&gt; {
 
   private ClusterConfigurationRequest configRequest;
   private ClusterTopology topology;
  private AmbariEventPublisher ambariEventPublisher;
 
   @AssistedInject
  public ConfigureClusterTask(@Assisted ClusterTopology topology, @Assisted ClusterConfigurationRequest configRequest) {
  public ConfigureClusterTask(@Assisted ClusterTopology topology, @Assisted ClusterConfigurationRequest configRequest,
                              @Assisted AmbariEventPublisher ambariEventPublisher) {
     this.configRequest = configRequest;
     this.topology = topology;
    this.ambariEventPublisher = ambariEventPublisher;
   }
 
   @Override
@@ -72,6 +77,12 @@ public class ConfigureClusterTask implements Callable&lt;Boolean&gt; {
       throw new Exception(e);
     }
 
    LOG.info("Cluster configuration finished successfully!");
    // Notify listeners that cluster configuration finished
    long clusterId = topology.getClusterId();
    ambariEventPublisher.publish(new ClusterConfigFinishedEvent(clusterId,
            topology.getAmbariContext().getClusterName(clusterId)));

     LOG.info("TopologyManager.ConfigureClusterTask: Exiting");
     return true;
   }
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTaskFactory.java b/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTaskFactory.java
index 9e3c15189e..558af308f7 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTaskFactory.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTaskFactory.java
@@ -18,6 +18,7 @@
 
 package org.apache.ambari.server.topology.tasks;
 
import org.apache.ambari.server.events.publishers.AmbariEventPublisher;
 import org.apache.ambari.server.topology.ClusterConfigurationRequest;
 import org.apache.ambari.server.topology.ClusterTopology;
 
@@ -25,6 +26,6 @@ import org.apache.ambari.server.topology.ClusterTopology;
 public interface ConfigureClusterTaskFactory {
 
    ConfigureClusterTask createConfigureClusterTask(ClusterTopology topology, ClusterConfigurationRequest
    configRequest);
    configRequest, AmbariEventPublisher ambariEventPublisher);
 
 }
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/utils/ManagedThreadPoolExecutor.java b/ambari-server/src/main/java/org/apache/ambari/server/utils/ManagedThreadPoolExecutor.java
new file mode 100644
index 0000000000..167c9cb23e
-- /dev/null
++ b/ambari-server/src/main/java/org/apache/ambari/server/utils/ManagedThreadPoolExecutor.java
@@ -0,0 +1,83 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distribut
 * ed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

package org.apache.ambari.server.utils</block></block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr></expr_stmt>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>BlockingQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Condition</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ThreadPoolExecutor extension which is stopped by default and can be started &amp; stopped.
 */</comment>
<class><specifier>public</specifier> class <name>ManagedThreadPoolExecutor</name> <super_list><extends>extends <super><name>ThreadPoolExecutor</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isStopped</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReentrantLock</name></type> <name>pauseLock</name> <init>= <expr><operator>new</operator> <call><name>ReentrantLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Condition</name></type> <name>unpaused</name> <init>= <expr><call><name><name>pauseLock</name><operator>.</operator><name>newCondition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ManagedThreadPoolExecutor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>corePoolSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maximumPoolSize</name></decl></parameter>,
                            <parameter><decl><type><name>long</name></type> <name>keepAliveTime</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>,
                            <parameter><decl><type><name><name>BlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>workQueue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>corePoolSize</name></expr></argument>, <argument><expr><name>maximumPoolSize</name></expr></argument>, <argument><expr><name>keepAliveTime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>workQueue</name></expr></argument>,
            <argument><expr><call><name><name>Executors</name><operator>.</operator><name>defaultThreadFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isStopped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  <expr_stmt/>}</block_content>

  protected void beforeExecute(Thread t</block><operator>,</operator> Runnable r</constructor>)</block> <block>{<block_content>
    <constructor_decl><name><name>super</name><operator>.</operator><name>beforeExecute</name></name><parameter_list>(<parameter><decl><type><name>t</name></type></decl></parameter>, <parameter><decl><type><name>r</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    <constructor_decl><name><name>pauseLock</name><operator>.</operator><name>lock</name></name><parameter_list>()</parameter_list>;</constructor_decl>
    <try>try <block>{<block_content>
      <while>while <condition>(<expr><name>isStopped</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>unpaused</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
    } catch (InterruptedException ie</block></while>)</block_content> <block>{<block_content>
      <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>pauseLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

  public void start(</block></block></block></try>)</block_content> <block>{<block_content>
    <constructor_decl><name><name>pauseLock</name><operator>.</operator><name>lock</name></name><parameter_list>()</parameter_list>;</constructor_decl>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>isStopped</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>unpaused</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>pauseLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

  public void stop(</block></block></try>)</block_content> <block>{<block_content>
    <constructor_decl><name><name>pauseLock</name><operator>.</operator><name>lock</name></name><parameter_list>()</parameter_list>;</constructor_decl>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>isStopped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>pauseLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

  public boolean isRunning(</block></block></try>)</block_content> <block>{<block_content>
    <return>return <expr><operator>!</operator><name>isStopped</name></expr>;</return>
  <expr_stmt/>}</block_content>

}
diff --git a/ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java b/ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java
index c3248a381f..0daa20fc5e 100644
-- a/ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java
++ b/ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java
@@ -391</block></block></block></block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">391</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>ClusterDeployWithStartOnlyTest</name> extends <name>EasyMockSupport</name> <block>{
     <expr><call><name><name>ambariContext</name><operator>.</operator><name>persistInstallStateForUI</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME</name></expr></argument>, <argument><expr><name>STACK_NAME</name></expr></argument>, <argument><expr><name>STACK_VERSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
 
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>persistedTopologyRequest</name> <operator>=</operator> <operator>new</operator> <call><name>PersistedTopologyRequest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>persistedState</name><operator>.</operator><name>getAllRequests</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartOnComponentLevelTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartOnComponentLevelTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">372d0a14a0</literal><operator>..</operator><name>bbf4fdbf01</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartOnComponentLevelTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartOnComponentLevelTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">368</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">368</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>ClusterInstallWithoutStartOnComponentLevelTest</name> extends <name>EasyMockSupp</name>
     <call><name><name>ambariContext</name><operator>.</operator><name>persistInstallStateForUI</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME</name></expr></argument>, <argument><expr><name>STACK_NAME</name></expr></argument>, <argument><expr><name>STACK_VERSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
 
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>persistedTopologyRequest</name> <operator>=</operator> <operator>new</operator> <call><name>PersistedTopologyRequest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>persistedState</name><operator>.</operator><name>getAllRequests</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9620507240..059a8be735</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ClusterInstallWithoutStartTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">363</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">363</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>ClusterInstallWithoutStartTest</name> extends <name>EasyMockSupport</name> <block>{
     <expr><call><name><name>ambariContext</name><operator>.</operator><name>persistInstallStateForUI</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME</name></expr></argument>, <argument><expr><name>STACK_NAME</name></expr></argument>, <argument><expr><name>STACK_VERSION</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
 
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>AsyncCallableService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>mockFuture</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>persistedTopologyRequest</name> <operator>=</operator> <operator>new</operator> <call><name>PersistedTopologyRequest</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>persistedState</name><operator>.</operator><name>getAllRequests</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ConfigureClusterTaskTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ConfigureClusterTaskTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>feefcab842</name><operator>..</operator><name>b2dac8f01a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ConfigureClusterTaskTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>topology</name><operator>/</operator><name><name>ConfigureClusterTaskTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">7</literal> @@</expr>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>topology</name></name>;</package></block></expr>
 
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>anyObject</name></name>;</import></block></expr></expr_stmt></class>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>reset</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>publishers</name><operator>.</operator><name>AmbariEventPublisher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>topology</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ConfigureClusterTask</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockRule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Mock</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> class <name>ConfigureClusterTaskTest</name> <block>{
   @<expr><call><name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></call>
   <specifier>private</specifier> <name>ClusterTopology</name> <name>clusterTopology</name></expr>;
 
  @<expr><call><name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></call>
  <specifier>private</specifier> <name>AmbariContext</name> <name>ambariContext</name></expr>;

  @<expr><call><name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>NICE</name></name></expr></argument>)</argument_list></call>
  <specifier>private</specifier> <name>AmbariEventPublisher</name> <name>ambariEventPublisher</name></expr>;

   <expr><specifier>private</specifier> <name>ConfigureClusterTask</name> <name>testSubject</name></expr>;
 
   @<expr><name>Before</name>
   <specifier>public</specifier> <name>void</name> <call><name>before</name><argument_list>()</argument_list></call> <block>{
    <expr><call><name>reset</name><argument_list>(<argument><expr><name>clusterConfigurationRequest</name></expr></argument>, <argument><expr><name>clusterTopology</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>testSubject</name> <operator>=</operator> <operator>new</operator> <call><name>ConfigureClusterTask</name><argument_list>(<argument><expr><name>clusterTopology</name></expr></argument>, <argument><expr><name>clusterConfigurationRequest</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>reset</name><argument_list>(<argument><expr><name>clusterConfigurationRequest</name></expr></argument>, <argument><expr><name>clusterTopology</name></expr></argument>, <argument><expr><name>ambariContext</name></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>testSubject</name> <operator>=</operator> <operator>new</operator> <call><name>ConfigureClusterTask</name><argument_list>(<argument><expr><name>clusterTopology</name></expr></argument>, <argument><expr><name>clusterConfigurationRequest</name></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<name>Test</name>
@@ <operator>-</operator><literal type="number">75</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">83</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> class <name>ConfigureClusterTaskTest</name> <block>{
     <comment type="line">// is it OK to handle the non existence of hostgroups as a success?!</comment>
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusterConfigurationRequest</name><operator>.</operator><name>getRequiredHostGroups</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusterTopology</name><operator>.</operator><name>getHostGroupInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusterTopology</name><operator>.</operator><name>getClusterId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusterTopology</name><operator>.</operator><name>getAmbariContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ambariContext</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>ambariContext</name><operator>.</operator><name>getClusterName</name></name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"testCluster"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// this is only called if the "prerequisites" are satisfied</comment>
     <expr><call><name><name>clusterConfigurationRequest</name><operator>.</operator><name>process</name></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>ambariEventPublisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>replay</name><argument_list>(<argument><expr><name>clusterConfigurationRequest</name></expr></argument>, <argument><expr><name>clusterTopology</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>replay</name><argument_list>(<argument><expr><name>clusterConfigurationRequest</name></expr></argument>, <argument><expr><name>clusterTopology</name></expr></argument>, <argument><expr><name>ambariContext</name></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// WHEN</comment>
     <expr><name>Boolean</name> <name>result</name> <operator>=</operator> <call><name><name>testSubject</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutorTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..e94b25c809</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>utils</name><operator>/</operator><name><name>ManagedThreadPoolExecutorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">51</literal> @@</expr>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>utils</name></name>;</package></block></expr>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LinkedBlockingQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>

<class><specifier>public</specifier> class <name>ManagedThreadPoolExecutorTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testGetHostAndPortFromProperty</name><parameter_list>()</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>ManagedThreadPoolExecutor</name></type>  <name>topologyTaskExecutor</name> <init>= <expr><operator>new</operator> <call><name>ManagedThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
            <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>,
            <argument><expr><operator>new</operator> <call><name><name>LinkedBlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>feature</name> <init>= <expr><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>call</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
      <expr_stmt/>}</block_content>
    }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr></init></decl></decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>topologyTaskExecutor</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block>
}
- 
2.19.1.windows.1</function></block></class></block></class></expr></argument></argument_list></call></expr></block></expr></block></expr></expr_stmt>

</unit>
