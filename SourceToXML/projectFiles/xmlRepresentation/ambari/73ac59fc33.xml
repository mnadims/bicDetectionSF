<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/73ac59fc33.java"><expr_stmt><expr><name>From</name> <literal type="number">73ac59fc33e64cc1443fc19ba5360d047b0e348a</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Jonathan</name> <name><name>Hurley</name> <argument_list type="generic">&lt;<argument><name>jhurley</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">26</literal> <name>Feb</name> <literal type="number">2016</literal> <literal type="number">12</literal><operator>:</operator><literal type="number">04</literal><operator>:</operator><literal type="number">23</literal> <operator>-</operator><literal type="number">0500</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">15173</literal> <operator>-</operator> <name>Express</name> <name>Upgrade</name> <name>Stuck</name> <name>At</name> <name>Manual</name> <name>Prompt</name> <name>Due</name> <name>To</name>
 <name>HRC</name> <name>Status</name> <name>Calculation</name> <name>Cache</name> <call><name>Problem</name> <argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call> <operator>(</operator><name>jonathanhurley</name><operator>)</operator>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>persist</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">9</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessorImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>orm</name><operator>/</operator><name><name>AmbariJpaLocalTxnInterceptor</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">193</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>orm</name><operator>/</operator><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">84</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TransactionalLockInterceptorTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">209</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">84</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <literal type="number">7</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">404</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">191</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockInterceptorTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>com</name><operator>/</operator><name>google</name><operator>/</operator><name>inject</name><operator>/</operator><name>persist</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>com</name><operator>/</operator><name>google</name><operator>/</operator><name>inject</name><operator>/</operator><name>persist</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">604546ca05</literal><operator>..</operator><literal type="number">35b0758583</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>com</name><operator>/</operator><name>google</name><operator>/</operator><name>inject</name><operator>/</operator><name>persist</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>com</name><operator>/</operator><name>google</name><operator>/</operator><name>inject</name><operator>/</operator><name>persist</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManagerFactory</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>aopalliance</name><operator>.</operator><name>intercept</name><operator>.</operator><name>MethodInterceptor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>aopalliance</name><operator>.</operator><name>intercept</name><operator>.</operator><name>MethodInvocation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>AmbariJpaLocalTxnInterceptor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>AmbariLocalSessionInterceptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>TransactionalLockInterceptor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>RequiresSession</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariJpaPersistModule</name> extends <name>PersistModule</name> <block>{
 
     <expr><call><name>bindInterceptor</name><argument_list>(<argument><expr><call><name>annotatedWith</name><argument_list>(<argument><expr><name><name>RequiresSession</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sessionInterceptor</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>bindInterceptor</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>annotatedWith</name><argument_list>(<argument><expr><name><name>RequiresSession</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sessionInterceptor</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// method-level binding for cross-cutting locks</comment>
    <comment type="line">// this runs before the base class binds Transactional, so it always runs</comment>
    <comment type="line">// first</comment>
    <expr><name>MethodInterceptor</name> <name>lockAwareInterceptor</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionalLockInterceptor</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>requestInjection</name><argument_list>(<argument><expr><name>lockAwareInterceptor</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>bindInterceptor</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>annotatedWith</name><argument_list>(<argument><expr><name><name>TransactionalLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockAwareInterceptor</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7f69a31e9a</literal><operator>..</operator><literal type="number">9aba4c95a6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>agent</name><operator>.</operator><name>CommandReport</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>agent</name><operator>.</operator><name>ExecutionCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>RequestEntity</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>Transactional</name></name>;</import>

 <interface><specifier>public</specifier> interface <name>ActionDBAccessor</name> <block>{
 
   <comment type="block" format="javadoc">/**
@@ -88,21 +86,19 @@ public interface ActionDBAccessor {
 
   /**
    * Persists all tasks for a given request
   * @param request request object
   * 
   * @param request
   *          request object
    */</comment>
  <function_decl><annotation>@<name>Transactional</name></annotation>
   <type><name>void</name></type> <name>persistActions</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument></throws>;</function_decl>
 
  <function_decl><annotation>@<name>Transactional</name></annotation>
   <type><name>void</name></type> <name>startRequest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestId</name></decl></parameter>)</parameter_list>;</function_decl>
 
  <function_decl><annotation>@<name>Transactional</name></annotation>
   <type><name>void</name></type> <name>endRequest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestId</name></decl></parameter>)</parameter_list>;</function_decl>
 
   <comment type="block" format="javadoc">/**
    * Updates request with link to source schedule
    */</comment>
  <function_decl><annotation>@<name>Transactional</name></annotation>
   <type><name>void</name></type> <name>setSourceScheduleForRequest</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>requestId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scheduleId</name></decl></parameter>)</parameter_list>;</function_decl>
 
   <comment type="block" format="javadoc">/**
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
index 3f4ffeb4a2..003e2e6b1b 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
@@ -29,6 +29,9 @@ import java.util.concurrent.TimeUnit;
 
 import org.apache.ambari.annotations.Experimental;
 import org.apache.ambari.annotations.ExperimentalFeature;
import org.apache.ambari.annotations.TransactionalLock;
import org.apache.ambari.annotations.TransactionalLock.LockArea;
import org.apache.ambari.annotations.TransactionalLock.LockType;
 import org.apache.ambari.server.AmbariException;
 import org.apache.ambari.server.agent.CommandReport;
 import org.apache.ambari.server.agent.ExecutionCommand;
@@ -282,6 +285,7 @@ public class ActionDBAccessorImpl implements ActionDBAccessor {
 
   @Override
   @Transactional
  @TransactionalLock(lockArea = LockArea.HRC_STATUS_CACHE, lockType = LockType.WRITE)
   public void persistActions(Request request) throws AmbariException {
 
     RequestEntity requestEntity = request.constructNewPersistenceEntity();
@@ -376,6 +380,7 @@ public class ActionDBAccessorImpl implements ActionDBAccessor {
   }
 
   @Override
  @Transactional
   public void startRequest(long requestId) {
     RequestEntity requestEntity = getRequestEntity(requestId);
     if (requestEntity != null &amp;&amp; requestEntity.getStartTime() == -1L) {
@@ -385,6 +390,7 @@ public class ActionDBAccessorImpl implements ActionDBAccessor {
   }
 
   @Override
  @Transactional
   public void endRequest(long requestId) {
     RequestEntity requestEntity = getRequestEntity(requestId);
     if (requestEntity != null &amp;&amp; requestEntity.getEndTime() == -1L) {
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java b/ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java
index 3c953cacc6..b5442c2d42 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java
@@ -20,6 +20,10 @@ package org.apache.ambari.server.orm;
 
 import java.lang.reflect.Method;
 import java.sql.SQLException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
@@ -27,6 +31,9 @@ import javax.persistence.PersistenceException;
 
 import org.aopalliance.intercept.MethodInterceptor;
 import org.aopalliance.intercept.MethodInvocation;
import org.apache.ambari.annotations.TransactionalLock;
import org.apache.ambari.annotations.TransactionalLock.LockArea;
import org.apache.ambari.annotations.TransactionalLock.LockType;
 import org.eclipse.persistence.exceptions.EclipseLinkException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -36,10 +43,49 @@ import com.google.inject.persist.Transactional;
 import com.google.inject.persist.UnitOfWork;
 import com.google.inject.persist.jpa.AmbariJpaPersistService;
 
/**
 * The {@link AmbariJpaLocalTxnInterceptor} is used to intercept method calls
 * annotated with the {@link Transactional} annotation. If a transaction is not
 * already in progress, then a new transaction is automatically started.
 * Otherwise, the currently active transaction will be reused.
 * &lt;p/&gt;
 * This interceptor also works with {@link TransactionalLock}s to lock on
 * {@link LockArea}s. If this interceptor encounters a {@link TransactionalLock}
 * it will acquire the lock and then add the {@link LockArea} to a collection of
 * areas which need to be released when the transaction is committed or rolled
 * back. This ensures that transactional methods invoke from an already running
 * transaction can have their lock invoked for the lifespan of the outer
 * "parent" transaction.
 */</comment>
 <class><specifier>public</specifier> class <name>AmbariJpaLocalTxnInterceptor</name> <super_list><implements>implements <super><name>MethodInterceptor</name></super></implements></super_list> <block>{
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariJpaLocalTxnInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * A list of all of the {@link TransactionalLock}s that this interceptor is
   * responsible for. As a thread moves through the system encountering
   * {@link Transactional} and {@link TransactionalLock} methods, this will keep
   * track of which locks the outer-most interceptor will need to release.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>s_transactionalLocks</name> <init>= <expr><operator>new</operator> <class><super><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Used to ensure that methods which rely on the completion of
   * {@link Transactional} can detect when they are able to run.
   *
   * @see TransactionalLock
   */</comment>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <specifier>final</specifier> <name>TransactionalLocks</name></type> <name>transactionLocks</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

   <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
   <type><specifier>private</specifier> <specifier>final</specifier> <name>AmbariJpaPersistService</name></type> <name>emProvider</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariJpaLocalTxnInterceptor</name> implements <name>MethodInterceptor</name> <block>{
   <comment type="line">// Tracks if the unit of work was begun implicitly by this transaction.</comment>
   <expr><specifier>private</specifier> <name>final</name> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name> <name>didWeStartWork</name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>Object</name> <call><name>invoke</name><argument_list>(<argument><expr><name>MethodInvocation</name> <name>methodInvocation</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Throwable</name> <block>{</block></expr></argument>
 
@<argument>@ <expr><operator>-</operator><literal type="number">61</literal></expr></argument>,<argument><expr><literal type="number">56</literal> <operator>+</operator><literal type="number">110</literal></expr></argument>,<argument><expr><literal type="number">64</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariJpaLocalTxnInterceptor</name> implements <name>MethodInterceptor</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Transactional</name></type> <name>transactional</name> <init>= <expr><call><name>readTransactionMetadata</name><argument_list>(<argument><expr><name>methodInvocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>EntityManager</name></type> <name>em</name> <init>= <expr><call><name><name>emProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <comment type="line">// lock the transaction if needed</comment>
    <expr_stmt><expr><call><name>lockTransaction</name><argument_list>(<argument><expr><name>methodInvocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="line">// Allow 'joining' of transactions if there is an enclosing @Transactional method.</comment>
     <if_stmt><if>if <condition>(<expr><call><name><name>em</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isActive</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <return>return <expr><call><name><name>methodInvocation</name><operator>.</operator><name>proceed</name></name><argument_list>()</argument_list></call></expr>;</return>
     <expr_stmt/></block_content></block></if></if_stmt></block_content></block></expr>}</block>
 
    <name>Object</name> <name>result</name></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <comment type="line">// this is the outer-most transactional, begin a transaction</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>EntityTransaction</name></type> <name>txn</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Object</name></type> <name>result</name></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>methodInvocation</name><operator>.</operator><name>proceed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// commit transaction only if rollback didn't occur</comment>
        <if_stmt><if>if <condition>(<expr><call><name>rollbackIfNecessary</name><argument_list>(<argument><expr><name>transactional</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>EntityTransaction</name></type> <name>txn</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>detailedLogForPersistenceError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>methodInvocation</name><operator>.</operator><name>proceed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// propagate whatever exception is thrown anyway</comment>
        <throw>throw <expr><name>e</name></expr>;</throw>
      </block_content>}</block> <finally>finally <block>{<block_content>
        <comment type="line">// Close the em if necessary (guarded so this code doesn't run unless</comment>
        <comment type="line">// catch fired).</comment>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>didWeStartWork</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>txn</name><operator>.</operator><name>isActive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>didWeStartWork</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>unitOfWork</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>
 
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// commit transaction only if rollback didn't occur</comment>
      <if_stmt><if>if <condition>(<expr><call><name>rollbackIfNecessary</name><argument_list>(<argument><expr><name>transactional</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// everything was normal so commit the txn (do not move into try block</comment>
      <comment type="line">// above as it</comment>
      <comment type="line">// interferes with the advised method's throwing semantics)</comment>
      <try>try <block>{<block_content>
         <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>detailedLogForPersistenceError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><name>e</name></expr>;</throw>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <comment type="line">// close the em if necessary</comment>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>didWeStartWork</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>didWeStartWork</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>unitOfWork</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></finally></try>
 
      <expr_stmt><expr><call><name>detailedLogForPersistenceError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// propagate whatever exception is thrown anyway</comment>
      <throw>throw <expr><name>e</name></expr>;</throw>
      <comment type="line">// or return result</comment>
      <return>return <expr><name>result</name></expr>;</return>
     </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
      <comment type="line">// Close the em if necessary (guarded so this code doesn't run unless</comment>
      <comment type="line">// catch fired).</comment>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>didWeStartWork</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>txn</name><operator>.</operator><name>isActive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>didWeStartWork</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unitOfWork</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// unlock all lock areas for this transaction</comment>
      <expr_stmt><expr><call><name>unlockTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>

    <comment type="line">// everything was normal so commit the txn (do not move into try block</comment>
    <comment type="line">// above as it</comment>
    <comment type="line">// interferes with the advised method's throwing semantics)</comment>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>detailedLogForPersistenceError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <comment type="line">// close the em if necessary</comment>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>didWeStartWork</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>didWeStartWork</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unitOfWork</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></finally></try>

    <comment type="line">// or return result</comment>
    <return>return <expr><name>result</name></expr>;</return>
   </block_content>}</block></catch></try>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>detailedLogForPersistenceError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">256</literal></expr><operator>,</operator><expr><literal type="number">68</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariJpaLocalTxnInterceptor</name> implements <name>MethodInterceptor</name> <block>{
     <return>return <expr><name>commit</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Locks the {@link LockArea} specified on the {@link TransactionalLock}
   * annotation if it exists. If the annotation does not exist, then no work is
   * done.
   * &lt;p/&gt;
   * If a lock is acquired, then {@link #s_transactionalLocks} is updated with
   * the lock so that the outer-most interceptor can release all locks when the
   * transaction has completed.
   *
   * @param methodInvocation
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>lockTransaction</name><parameter_list>(<parameter><decl><type><name>MethodInvocation</name></type> <name>methodInvocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TransactionalLock</name></type> <name>annotation</name> <init>= <expr><call><name><name>methodInvocation</name><operator>.</operator><name>getMethod</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAnnotation</name><argument_list>(
        <argument><expr><name><name>TransactionalLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// no work to do if the annotation is not present</comment>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>annotation</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// there is a lock area, so acquire the lock</comment>
    <decl_stmt><decl><type><name>LockArea</name></type> <name>lockArea</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockType</name></type> <name>lockType</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>rwLock</name> <init>= <expr><call><name><name>transactionLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name>lockArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name><name>LockType</name><operator>.</operator><name>READ</name></name></expr> ?</condition><then> <expr><call><name><name>rwLock</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>rwLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ensure that we add this lock area, otherwise it will never be released</comment>
    <comment type="line">// when the outer most transaction is committed</comment>
    <expr_stmt><expr><call><name><name>s_transactionalLocks</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Unlocks all {@link LockArea}s associated with this transaction or any of
   * the child transactions which were joined. The order that the locks are
   * released is inverted from the order in which they were acquired.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>unlockTransaction</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></type> <name>annotations</name> <init>= <expr><call><name><name>s_transactionalLocks</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>annotations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// iterate through all locks which were encountered during the course of</comment>
    <comment type="line">// this transaction and release them all now that the transaction is</comment>
    <comment type="line">// committed; iterate reverse to unlock the most recently locked areas</comment>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>annotations</name><operator>.</operator><name>descendingIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TransactionalLock</name></type> <name>annotation</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LockArea</name></type> <name>lockArea</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LockType</name></type> <name>lockType</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>rwLock</name> <init>= <expr><call><name><name>transactionLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name>lockArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name><name>LockType</name><operator>.</operator><name>READ</name></name></expr> ?</condition><then> <expr><call><name><name>rwLock</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>rwLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

   <class><annotation>@<name>Transactional</name></annotation>
   <specifier>private</specifier> <specifier>static</specifier> class <name>Internal</name> <block>{
   }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0cf73cb440</literal><operator>..</operator><literal type="number">0000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">84</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReadWriteLock</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>aopalliance</name><operator>.</operator><name>intercept</name><operator>.</operator><name>MethodInterceptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>aopalliance</name><operator>.</operator><name>intercept</name><operator>.</operator><name>MethodInvocation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>Transactional</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The {@link TransactionalLockInterceptor} is a method level intercept which
 * will use the properties of {@link TransactionalLock} to acquire a
 * {@link ReadWriteLock} around a particular {@link LockArea}.
 * &lt;p/&gt;
 * It is mainly used to provide a lock around an method annotated with
 * {@link Transactional}. Consider the case where an action must happen after a
 * method has completed and the transaction has been committed.
 */</comment>
<class><specifier>public</specifier> class <name>TransactionalLockInterceptor</name> <super_list><implements>implements <super><name>MethodInterceptor</name></super></implements></super_list> <block>{

  <comment type="block" format="javadoc">/**
   * Logger.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Used to ensure that methods which rely on the completion of
   * {@link Transactional} can detect when they are able to run.
   *
   * @see TransactionalLock
   */</comment>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <specifier>final</specifier> <name>TransactionalLocks</name></type> <name>transactionLocks</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(<parameter><decl><type><name>MethodInvocation</name></type> <name>methodInvocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>TransactionalLock</name></type> <name>annotation</name> <init>= <expr><call><name><name>methodInvocation</name><operator>.</operator><name>getMethod</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAnnotation</name><argument_list>(
        <argument><expr><name><name>TransactionalLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>LockArea</name></type> <name>lockArea</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockType</name></type> <name>lockType</name> <init>= <expr><call><name><name>annotation</name><operator>.</operator><name>lockType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>rwLock</name> <init>= <expr><call><name><name>transactionLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name>lockArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name><name>LockType</name><operator>.</operator><name>READ</name></name></expr> ?</condition><then> <expr><call><name><name>rwLock</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>rwLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>methodInvocation</name><operator>.</operator><name>proceed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>object</name></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockInterceptorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockInterceptorTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..6ebdc0b6dd</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockInterceptorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">209</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReadWriteLock</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>InMemoryDefaultTestModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>TransactionalLocks</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>HostRoleCommandDAO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>HostRoleCommandEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Binder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>PersistService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>Transactional</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>util</name><operator>.</operator><name>Modules</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests {@link TransactionalLock} and associated classes.
 */</comment>
<class><specifier>public</specifier> class <name>TransactionalLockInterceptorTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>Injector</name></type> <name>m_injector</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>m_injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(
        <argument><expr><call><name><name>Modules</name><operator>.</operator><name>override</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InMemoryDefaultTestModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>with</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>After</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>teardown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>PersistService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Tests that the {@link Transactional} and {@link TransactionalLock}
   * annotations cause the interceptors to lock the right area.
   *
   * @throws Throwable
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTransactionalLockInvocation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// create mocks</comment>
    <decl_stmt><decl><type><name>TransactionalLocks</name></type> <name>transactionalLocks</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>TransactionalLocks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>readWriteLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>ReadWriteLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>readLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>writeLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// expectations</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>transactionalLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>readWriteLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>readWriteLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>writeLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// replay</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// invoke method with annotations</comment>
    <decl_stmt><decl><type><name>HostRoleCommandDAO</name></type> <name>hostRoleCommandDAO</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>HostRoleCommandDAO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hostRoleCommandDAO</name><operator>.</operator><name>mergeAll</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>HostRoleCommandEntity</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// verify locks are called</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Tests that a {@link TransactionalLock} called within the constructs of an
   * earlier transaction will still lock.
   *
   * @throws Throwable
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNestedTransactional</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// create mocks</comment>
    <decl_stmt><decl><type><name>TransactionalLocks</name></type> <name>transactionalLocks</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>TransactionalLocks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>readWriteLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>ReadWriteLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>readLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>writeLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// expectations</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>transactionalLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>readWriteLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>readWriteLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>writeLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// replay</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// invoke method with annotations</comment>
    <decl_stmt><decl><type><name>TestObject</name></type> <name>testObject</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>TestObject</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>testObject</name><operator>.</operator><name>testNestedLockMethod</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// verify locks are called</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Tests that a {@link TransactionalLock} called within the constructs of an
   * earlier transaction will still lock.
   *
   * @throws Throwable
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testMultipleLocks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// create mocks</comment>
    <decl_stmt><decl><type><name>TransactionalLocks</name></type> <name>transactionalLocks</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>TransactionalLocks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ReadWriteLock</name></type> <name>readWriteLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>ReadWriteLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>readLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>writeLock</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createStrictMock</name></name><argument_list>(<argument><expr><name><name>Lock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// expectations</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>transactionalLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>readWriteLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>readWriteLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>writeLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// another round of expectations</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>transactionalLocks</name><operator>.</operator><name>getLock</name></name><argument_list>(<argument><expr><name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>readWriteLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>readWriteLock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>writeLock</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>times</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// replay</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// invoke method with annotations</comment>
    <decl_stmt><decl><type><name>TestObject</name></type> <name>testObject</name> <init>= <expr><call><name><name>m_injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>TestObject</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>testObject</name><operator>.</operator><name>testMultipleLocks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// verify locks are called</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>transactionalLocks</name></expr></argument>, <argument><expr><name>readWriteLock</name></expr></argument>, <argument><expr><name>readLock</name></expr></argument>, <argument><expr><name>writeLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * A test object which has methods annotated for use with this test class.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestObject</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedLockMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>transactionMethod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transactionMethodWithLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleLocks</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>transactionMethodWithLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transactionMethodWithLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Transactional</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>transactionMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Transactional</name></annotation>
    <annotation>@<name>TransactionalLock</name><argument_list>(<argument><expr><name>lockArea</name> <operator>=</operator> <name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>, <argument><expr><name>lockType</name> <operator>=</operator> <name><name>LockType</name><operator>.</operator><name>WRITE</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>transactionMethodWithLock</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
  *
  */</comment>
  <class><specifier>private</specifier> class <name>MockModule</name> <super_list><implements>implements <super><name>Module</name></super></implements></super_list> <block>{
    <comment type="block" format="javadoc">/**
    *
    */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<parameter><decl><type><name>Binder</name></type> <name>binder</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>binder</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>TransactionalLocks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInstance</name><argument_list>(
          <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name><argument_list>(<argument><expr><name><name>TransactionalLocks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fbaa343ff5</name><operator>..</operator><literal type="number">186208879f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>annotations</name><operator>/</operator><name><name>TransactionalLockTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">42</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>aopalliance</name><operator>.</operator><name>intercept</name><operator>.</operator><name>MethodInvocation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>TransactionalLock</name><operator>.</operator><name>LockType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>AmbariJpaLocalTxnInterceptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>InMemoryDefaultTestModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>TransactionalLockInterceptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>HostRoleCommandDAO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>HostRoleCommandEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runner</name><operator>.</operator><name>RunWith</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>api</name><operator>.</operator><name>easymock</name><operator>.</operator><name>PowerMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>api</name><operator>.</operator><name>mockito</name><operator>.</operator><name>PowerMockito</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>core</name><operator>.</operator><name>classloader</name><operator>.</operator><name>annotations</name><operator>.</operator><name>PowerMockIgnore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>core</name><operator>.</operator><name>classloader</name><operator>.</operator><name>annotations</name><operator>.</operator><name>PrepareForTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>modules</name><operator>.</operator><name>junit4</name><operator>.</operator><name>PowerMockRunner</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>Transactional</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>jpa</name><operator>.</operator><name>AmbariJpaPersistModule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>jpa</name><operator>.</operator><name>AmbariJpaPersistService</name></name>;</import>
 
 <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Tests {@link TransactionalLock} and associated classes.
  */</comment>
<class><annotation>@<name>RunWith</name><argument_list>(<argument><expr><name><name>PowerMockRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<annotation>@<name>PrepareForTest</name><argument_list>(
    <argument><expr><name>value</name> <operator>=</operator> <block>{ <expr><name><name>HostRoleCommandDAO</name><operator>.</operator><name>class</name></name></expr>, <argument><expr><name><name>AmbariJpaLocalTxnInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AmbariJpaPersistModule</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>AmbariJpaPersistService</name><operator>.</operator><name>class</name></name></expr></argument> }</block></expr></argument>)</argument_list></annotation>
<annotation>@<name>PowerMockIgnore</name><argument_list>(<argument><expr><literal type="string">"javax.management.*"</literal></expr></argument>)</argument_list></annotation>
 <specifier>public</specifier> class <name>TransactionalLockTest</name> <block>{
 
   <comment type="block" format="javadoc">/**
@@ -86,41 +64,39 @@ public class TransactionalLockTest {
   }
 
   /**
   * Tests that the {@link Transactional} and {@link TransactionalLock}
   * annotations cause the interceptors to be called in the correct order.
    *
   * @throws Throwable
    */</comment>
   <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTransactionLockOrdering</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AmbariJpaLocalTxnInterceptor</name></type> <name>ambariJPAInterceptor</name> <init>= <expr><call><name><name>PowerMock</name><operator>.</operator><name>createNiceMock</name></name><argument_list>(
        <argument><expr><name><name>AmbariJpaLocalTxnInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TransactionalLockInterceptor</name></type> <name>lockInterceptor</name> <init>= <expr><call><name><name>PowerMock</name><operator>.</operator><name>createNiceMock</name></name><argument_list>(
        <argument><expr><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>PowerMockito</name><operator>.</operator><name>whenNew</name></name><argument_list>(<argument><expr><name><name>AmbariJpaLocalTxnInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withAnyArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>thenReturn</name><argument_list>(
        <argument><expr><name>ambariJPAInterceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>PowerMockito</name><operator>.</operator><name>whenNew</name></name><argument_list>(<argument><expr><name><name>TransactionalLockInterceptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withAnyArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>thenReturn</name><argument_list>(
        <argument><expr><name>lockInterceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>lockInterceptor</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>MethodInvocation</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testAnnotationEquality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>TransactionalLock</name></argument>&gt;</argument_list></name></type> <name>annotations</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>annotationsFound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Method</name><index>[]</index></name></type> <name>methods</name> <init>= <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaredMethods</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Method</name></type> <name>method</name> <range>: <expr><name>methods</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TransactionalLock</name></type> <name>annotation</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getAnnotation</name></name><argument_list>(<argument><expr><name><name>TransactionalLock</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>annotation</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>annotations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>annotationsFound</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// there should be 3 discovered annotations, but only 2 in the hashset since</comment>
    <comment type="line">// they were collapsed</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>annotations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>annotationsFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(
        <argument><expr><call><name><name>ambariJPAInterceptor</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>MethodInvocation</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
            <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>ambariJPAInterceptor</name></expr></argument>, <argument><expr><name>lockInterceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><annotation>@<name>TransactionalLock</name><argument_list>(<argument><expr><name>lockArea</name> <operator>=</operator> <name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>, <argument><expr><name>lockType</name> <operator>=</operator> <name><name>LockType</name><operator>.</operator><name>READ</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>void</name></type> <name>transactionalHRCRead</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></function>
 
    <decl_stmt><decl><type><name>Injector</name></type> <name>injector</name> <init>= <expr><call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InMemoryDefaultTestModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HostRoleCommandDAO</name></type> <name>hostRoleCommandDAO</name> <init>= <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>HostRoleCommandDAO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hostRoleCommandDAO</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HostRoleCommandEntity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><annotation>@<name>TransactionalLock</name><argument_list>(<argument><expr><name>lockArea</name> <operator>=</operator> <name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>, <argument><expr><name>lockType</name> <operator>=</operator> <name><name>LockType</name><operator>.</operator><name>READ</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>void</name></type> <name>transactionalHRCRead2</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></function>
 
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>lockInterceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function><annotation>@<name>TransactionalLock</name><argument_list>(<argument><expr><name>lockArea</name> <operator>=</operator> <name><name>LockArea</name><operator>.</operator><name>HRC_STATUS_CACHE</name></name></expr></argument>, <argument><expr><name>lockType</name> <operator>=</operator> <name><name>LockType</name><operator>.</operator><name>WRITE</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>void</name></type> <name>transactionalHRCWrite</name><parameter_list>()</parameter_list> <block>{<block_content>
   </block_content>}</block></function>
 
</block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></try></block></class></block></interface>

</unit>
