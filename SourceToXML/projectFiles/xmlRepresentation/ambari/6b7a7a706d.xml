<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/6b7a7a706d.java"><expr_stmt><expr><name>From</name> <literal type="number">6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name><name>lpuskas</name> <argument_list type="generic">&lt;<argument><name>lpuskas</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">5</literal> <name>Jul</name> <literal type="number">2017</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">20</literal><operator>:</operator><literal type="number">18</literal> <operator>+</operator><literal type="number">0200</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">21307</literal> <name>Feature</name></expr></expr_stmt> <for>for supporting LDAP configuration from
 the UI

--
 ambari-funtest/pom.xml                        <operator>|</operator>  67 ----
 ambari-project/pom.xml                        <operator>|</operator>  52 +--
 ambari-server/pom.xml                         <operator>|</operator>  83 +----
 .../ResourceInstanceFactoryImpl.java          <operator>|</operator>   4 +
 .../AmbariConfigurationRequestSwagger.java    <operator>|</operator>  47 +++
 .../AmbariConfigurationResponseSwagger.java   <operator>|</operator>  40 +++
 .../services/AmbariConfigurationService.java  <operator>|</operator> 193 +++++++++++
 .../services/ldap/AmbariConfiguration.java    <operator>|</operator>  87 +++++
 .../services/ldap/LdapConfigOperation.java    <operator>|</operator>  43 +++
 .../ldap/LdapConfigurationRequest.java        <operator>|</operator>  49 +++
 .../ldap/LdapConfigurationService.java        <operator>|</operator> 185 ++++++++++
 .../api/services/ldap/LdapRequestInfo.java    <operator>|</operator>  61 ++++
 .../stackadvisor/StackAdvisorRequest.java     <operator>|</operator>  12 +
 .../commands/StackAdvisorCommand.java         <operator>|</operator>  54 +++
 .../server/controller/AmbariServer.java       <operator>|</operator>   3 +-
 .../server/controller/ControllerModule.java   <operator>|</operator>   3 +
 .../controller/ResourceProviderFactory.java   <operator>|</operator>  24 +-
 .../AbstractControllerResourceProvider.java   <operator>|</operator>   2 +
 .../internal/AbstractProviderModule.java      <operator>|</operator>   2 +-
 .../AmbariConfigurationResourceProvider.java  <operator>|</operator> 328 ++++++++++++++++++
 .../internal/DefaultProviderModule.java       <operator>|</operator>  24 +-
 .../server/controller/spi/Resource.java       <operator>|</operator>   5 +-
 .../ambari/server/events/AmbariEvent.java     <operator>|</operator>  11 +-
 .../events/AmbariLdapConfigChangedEvent.java  <operator>|</operator>  37 ++
 .../apache/ambari/server/ldap/LdapModule.java <operator>|</operator>  82 +++++
 .../ldap/domain/AmbariLdapConfigKeys.java     <operator>|</operator>  83 +++++
 .../ldap/domain/AmbariLdapConfiguration.java  <operator>|</operator> 199 +++++++++++
 .../AmbariLdapConfigurationFactory.java       <operator>|</operator>  34 ++
 .../AmbariLdapConfigurationProvider.java      <operator>|</operator> 120 +++++++
 .../ldap/service/AmbariLdapException.java     <operator>|</operator>  33 ++
 .../server/ldap/service/AmbariLdapFacade.java <operator>|</operator> 140 ++++++++
 .../ldap/service/AttributeDetector.java       <operator>|</operator>  41 +++
 .../LdapAttributeDetectionService.java        <operator>|</operator>  40 +++
 .../service/LdapConfigurationService.java     <operator>|</operator>  60 ++++
 .../service/LdapConnectionConfigService.java  <operator>|</operator>  36 ++
 .../server/ldap/service/LdapFacade.java       <operator>|</operator>  58 ++++
 .../DefaultLdapAttributeDetectionService.java <operator>|</operator> 200 +++++++++++
 .../ads/DefaultLdapConfigurationService.java  <operator>|</operator> 213 ++++++++++++
 .../DefaultLdapConnectionConfigService.java   <operator>|</operator> 113 ++++++
 .../ads/LdapConnectionTemplateFactory.java    <operator>|</operator> 111 ++++++
 .../detectors/AttributeDetectorFactory.java   <operator>|</operator>  75 ++++
 .../detectors/ChainedAttributeDetector.java   <operator>|</operator>  73 ++++
 .../detectors/GroupMemberAttrDetector.java    <operator>|</operator>  65 ++++
 .../ads/detectors/GroupNameAttrDetector.java  <operator>|</operator>  70 ++++
 .../detectors/GroupObjectClassDetector.java   <operator>|</operator>  73 ++++
 .../OccurrenceAndWeightBasedDetector.java     <operator>|</operator> 143 ++++++++
 .../UserGroupMemberAttrDetector.java          <operator>|</operator>  64 ++++
 .../ads/detectors/UserNameAttrDetector.java   <operator>|</operator>  71 ++++
 .../detectors/UserObjectClassDetector.java    <operator>|</operator>  69 ++++
 .../orm/dao/AmbariConfigurationDAO.java       <operator>|</operator>  89 +++++
 .../ambari/server/orm/dao/DaoUtils.java       <operator>|</operator>  13 +-
 .../entities/AmbariConfigurationEntity.java   <operator>|</operator>  70 ++++
 .../orm/entities/ConfigurationBaseEntity.java <operator>|</operator> 159 +++++++++
 .../authorization/RoleAuthorization.java      <operator>|</operator>  95 ++---
 .../resources/Ambari-DDL-Derby-CREATE.sql     <operator>|</operator>  21 ++
 .../resources/Ambari-DDL-MySQL-CREATE.sql     <operator>|</operator>  20 ++
 .../resources/Ambari-DDL-Oracle-CREATE.sql    <operator>|</operator>  20 ++
 .../resources/Ambari-DDL-Postgres-CREATE.sql  <operator>|</operator>  25 +-
 .../Ambari-DDL-SQLAnywhere-CREATE.sql         <operator>|</operator>  20 ++
 .../resources/Ambari-DDL-SQLServer-CREATE.sql <operator>|</operator>  20 ++
 .../main/resources/META-INF/persistence.xml   <operator>|</operator>   2 +
 .../commands/StackAdvisorCommandTest.java     <operator>|</operator> 212 +++++++++++
 .../server/checks/UpgradeCheckOrderTest.java  <operator>|</operator>   3 +-
 ...bariConfigurationResourceProviderTest.java <operator>|</operator> 251 ++++++++++++++
 .../StackAdvisorResourceProviderTest.java     <operator>|</operator>  97 +++---
 .../server/ldap/LdapModuleFunctionalTest.java <operator>|</operator> 149 ++++++++
 .../TestAmbariLdapConfigurationFactory.java   <operator>|</operator>  29 ++
 .../ldap/service/AmbariLdapFacadeTest.java    <operator>|</operator> 215 ++++++++++++
 ...aultLdapAttributeDetectionServiceTest.java <operator>|</operator> 188 ++++++++++
 .../DefaultLdapConfigurationServiceTest.java  <operator>|</operator> 221 ++++++++++++
 .../GroupMemberAttrDetectorTest.java          <operator>|</operator> 107 ++++++
 .../notifications/DispatchFactoryTest.java    <operator>|</operator>   3 +-
 .../server/orm/InMemoryDefaultTestModule.java <operator>|</operator>   2 +
 .../ambari/server/orm/JdbcPropertyTest.java   <operator>|</operator>   5 +-
 ...henticationProviderForDNWithSpaceTest.java <operator>|</operator>  35 +-
 .../AmbariLdapAuthenticationProviderTest.java <operator>|</operator>   3 +-
 .../AmbariLocalUserProviderTest.java          <operator>|</operator>   3 +-
 .../LdapServerPropertiesTest.java             <operator>|</operator>   5 +-
 78 files changed<operator>,</operator> <expr_stmt><expr><literal type="number">5409</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">355</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationRequestSwagger</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>AmbariConfiguration</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigOperation</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationRequest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapRequestInfo</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModule</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapConfigurationProvider</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapException</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacade</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AttributeDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapFacade</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>AttributeDetectorFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>ChainedAttributeDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupNameAttrDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupObjectClassDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>OccurrenceAndWeightBasedDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserGroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserNameAttrDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserObjectClassDetector</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>AmbariConfigurationDAO</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>ConfigurationBaseEntity</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProviderTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModuleFunctionalTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>TestAmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacadeTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionServiceTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationServiceTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetectorTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>funtest</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>funtest</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>bb2068d901</name><operator>..</operator><literal type="number">6466af30ae</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>funtest</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>funtest</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">73</literal> <operator>+</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>spring</name><operator>-</operator><name>ldap</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>annotations</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>core</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>jdbm</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>kerberos</name><operator>-</operator><name><name>codec</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>protocol</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>kerberos</name><operator>-</operator><name><name>client</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>shared</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>shared</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>project</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>project</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">00ba1bcb4c</literal><operator>..</operator><name>f6e3bc7611</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>project</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>project</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
     <operator>&lt;</operator><name><name>ambari</name><operator>.</operator><name>dir</name></name><operator>&gt;</operator><name>$</name><block>{<expr><name><name>project</name><operator>.</operator><name>parent</name><operator>.</operator><name>basedir</name></name></expr>}</block><operator>&lt;</operator><operator>/</operator><name><name>ambari</name><operator>.</operator><name>dir</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>powermock</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">1.6.3</literal><operator>&lt;</operator><operator>/</operator><name><name>powermock</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>jetty</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">8.1.19.v20160209</literal><operator>&lt;</operator><operator>/</operator><name><name>jetty</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
    <operator>&lt;</operator><name>ldap</name><operator>-</operator><name><name>api</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">1.0.0</literal><operator>&lt;</operator><operator>/</operator><name>ldap</name><operator>-</operator><name><name>api</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>checkstyle</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">6.19</literal><operator>&lt;</operator><operator>/</operator><name><name>checkstyle</name><operator>.</operator><name>version</name></name><operator>&gt;</operator> <operator>&lt;</operator><operator>!</operator><operator>--</operator> <name>last</name> <name>version</name> <name>that</name> <name>does</name> <name>not</name> <name>require</name> <name>Java</name> <literal type="number">8</literal> <operator>--</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>swagger</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">1.5.10</literal><operator>&lt;</operator><operator>/</operator><name><name>swagger</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
     <operator>&lt;</operator><name><name>swagger</name><operator>.</operator><name>maven</name><operator>.</operator><name>plugin</name><operator>.</operator><name>version</name></name><operator>&gt;</operator><literal type="number">3.1.4</literal><operator>&lt;</operator><operator>/</operator><name><name>swagger</name><operator>.</operator><name>maven</name><operator>.</operator><name>plugin</name><operator>.</operator><name>version</name></name><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">57</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
         <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>spring</name><operator>-</operator><name>ldap</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.4.RELEASE</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
       <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>annotations</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>core</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>jdbm</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M5</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>kerberos</name><operator>-</operator><name><name>codec</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>kerberos</name><operator>-</operator><name><name>client</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>protocol</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M19</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>jdbm</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
            <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>jdbm1</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
          <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>shared</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
        <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>shared</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">0.9.17</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
         <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
         <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>e250da7592</name><operator>..</operator><name>a86acf5390</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">1224</literal></expr><operator>,</operator><expr><literal type="number">73</literal> <operator>+</operator><literal type="number">1224</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>spring</name><operator>-</operator><name>ldap</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>annotations</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>core</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>server</name><operator>-</operator><name><name>integ</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>jdbm</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>kerberos</name><operator>-</operator><name><name>codec</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>net</name><operator>.</operator><name>sf</name><operator>.</operator><name><name>ehcache</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>ehcache</name><operator>-</operator><name><name>core</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>protocol</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>kerberos</name><operator>-</operator><name><name>client</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>shared</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>shared</name><operator>-</operator><name><name>ldap</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>test</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name><name>slf4j</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>slf4j</name><operator>-</operator><name><name>api</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
@@ <operator>-</operator><literal type="number">1622</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1555</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>hadoop</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>hadoop</name><operator>-</operator><name><name>auth</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
       <operator>&lt;</operator><name>version</name><operator>&gt;</operator><name>$</name><block>{<expr><name><name>hadoop</name><operator>.</operator><name>version</name></name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>exclusions</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>exclusion</name><operator>&gt;</operator>
          <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
          <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name>kerberos</name><operator>-</operator><name><name>codec</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>exclusion</name><operator>&gt;</operator>
      <operator>&lt;</operator><operator>/</operator><name>exclusions</name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>hadoop</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
@@ <operator>-</operator><literal type="number">1688</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1627</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>jna</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
       <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">4.2.2</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>apacheds</name><operator>-</operator><name><name>all</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M24</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name><name>server</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>kerberos</name><operator>-</operator><name><name>client</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.0.0</literal><operator>-</operator><name><name>M24</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>version</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>com</name><operator>.</operator><name><name>networknt</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>json</name><operator>-</operator><name>schema</name><operator>-</operator><name><name>validator</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>resources</name><operator>/</operator><name><name>ResourceInstanceFactoryImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>resources</name><operator>/</operator><name><name>ResourceInstanceFactoryImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d0d115d682</name><operator>..</operator><name>f5fb6e9900</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>resources</name><operator>/</operator><name><name>ResourceInstanceFactoryImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>resources</name><operator>/</operator><name><name>ResourceInstanceFactoryImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">471</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">471</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ResourceInstanceFactoryImpl</name> implements <name>ResourceInstanceFactory</name> <block>{
       <case>case <expr><name>RemoteCluster</name></expr>:</case>
         <expr><name>resourceDefinition</name> <operator>=</operator> <operator>new</operator> <call><name>RemoteClusterResourceDefinition</name><argument_list>()</argument_list></call></expr>;
         <break>break;</break></block></expr></expr_stmt></for>
      <case>case <expr><name>AmbariConfiguration</name></expr>:</case>
        <expr_stmt><expr><name>resourceDefinition</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleResourceDefinition</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><literal type="string">"ambariconfiguration"</literal></expr></argument>, <argument><expr><literal type="string">"ambariconfigurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>
 
       <default>default:</default>
         <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unsupported resource type: "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationRequestSwagger</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationRequestSwagger</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..5e8094e9c7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationRequestSwagger</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ApiModel</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiModelProperty</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Request data model for {@link org.apache.ambari.server.api.services.AmbariConfigurationService}
 */</comment>
<interface><specifier>public</specifier> interface <name>AmbariConfigurationRequestSwagger</name> <super_list><extends>extends <super><name>ApiModel</name></super></extends></super_list> <block>{

  <function_decl><annotation>@<name>ApiModelProperty</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"AmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <type><name>AmbariConfigurationRequestInfo</name></type> <name>getAmbariConfiguration</name><parameter_list>()</parameter_list>;</function_decl>

  <interface>interface <name>AmbariConfigurationRequestInfo</name> <block>{
    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name>Long</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name>String</name></type> <name>getType</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name>Long</name></type> <name>getVersion</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"version_tag"</literal></expr></argument>)</argument_list></annotation>
    <type><name>String</name></type> <name>getVersionTag</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..c55ac1dd60</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ApiModel</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiModelProperty</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Response data model for {@link org.apache.ambari.server.api.services.AmbariConfigurationService}
 */</comment>
<interface><specifier>public</specifier> interface <name>AmbariConfigurationResponseSwagger</name> <super_list><extends>extends <super><name>ApiModel</name></super></extends></super_list> <block>{

  <function_decl><annotation>@<name>ApiModelProperty</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"AmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <type><name>AmbariConfigurationResponseInfo</name></type> <name>getAmbariConfigurationResponse</name><parameter_list>()</parameter_list>;</function_decl>

  <interface>interface <name>AmbariConfigurationResponseInfo</name> <block>{
    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name>Long</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>ApiModelProperty</name></annotation>
    <type><name>String</name></type> <name>getType</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..38ae7669db</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name><name>AmbariConfigurationService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">193</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>DELETE</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>GET</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>POST</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>PUT</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>PathParam</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>Produces</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>HttpHeaders</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>MediaType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>UriInfo</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpStatus</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>Api</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiImplicitParam</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiImplicitParams</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiOperation</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiResponse</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>swagger</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiResponses</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Rest endpoint for managing ambari configurations. Supports CRUD operations.
 * Ambari configurations are resources that relate to the ambari server instance even before a cluster is provisioned.
 *
 * Ambari configuration resources may be shared with components and services in the cluster
 * (by recommending them as default values)
 *
 * Eg. LDAP configuration is stored as ambariconfiguration.
 * The request payload has the form:
 *
 * &lt;pre&gt;
 *      {
 *        "AmbariConfiguration": {
 *            "type": "ldap-configuration",
 *            "data": [
 *                {
 *                 "authentication.ldap.primaryUrl": "localhost:33389"
 *                 "authentication.ldap.secondaryUrl": "localhost:333"
 *                 "authentication.ldap.baseDn": "dc=ambari,dc=apache,dc=org"
 *                 // ......
 *         ]
 *     }
 * &lt;/pre&gt;
 */</comment>
<class><annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"/ambariconfigs/"</literal></expr></argument>)</argument_list></annotation>
<annotation>@<name>Api</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Ambari Configurations"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"Endpoint for Ambari configuration related operations"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>AmbariConfigurationService</name> <super_list><extends>extends <super><name>BaseService</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AMBARI_CONFIGURATION_REQUEST_TYPE</name> <init>=
    <expr><literal type="string">"org.apache.ambari.server.api.services.AmbariConfigurationRequestSwagger"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Creates an ambari configuration resource.
   *
   * @param body    the payload in json format
   * @param headers http headers
   * @param uri     request uri information
   * @return
   */</comment>
  <function><annotation>@<name>POST</name></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>TEXT_PLAIN</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiOperation</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Creates an ambari configuration resource"</literal></expr></argument>,
    <argument><expr><name>nickname</name> <operator>=</operator> <literal type="string">"AmbariConfigurationService#createAmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiImplicitParams</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>dataType</name> <operator>=</operator> <name>AMBARI_CONFIGURATION_REQUEST_TYPE</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_BODY</name></expr></argument>)</argument_list></annotation>
  }</block></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiResponses</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_CREATED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SUCCESSFUL_OPERATION</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_ACCEPTED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_REQUEST_ACCEPTED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_BAD_REQUEST</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_INVALID_ARGUMENTS</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_CONFLICT</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_RESOURCE_ALREADY_EXISTS</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_UNAUTHORIZED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_NOT_AUTHENTICATED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_FORBIDDEN</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_PERMISSION_DENIED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SERVER_ERROR</name></expr></argument>)</argument_list></annotation></argument>,
  <argument/>}</block></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>createAmbariConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>HttpHeaders</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>UriInfo</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>POST</name></name></expr></argument>, <argument><expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>,
      <argument><expr><name><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>GET</name></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>TEXT_PLAIN</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiOperation</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Retrieve all ambari configuration resources"</literal></expr></argument>,
    <argument><expr><name>nickname</name> <operator>=</operator> <literal type="string">"AmbariConfigurationService#getAmbariConfigurations"</literal></expr></argument>,
    <argument><expr><name>notes</name> <operator>=</operator> <literal type="string">"Returns all Ambari configurations."</literal></expr></argument>,
    <argument><expr><name>response</name> <operator>=</operator> <name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>class</name></name></expr></argument>,
    <argument><expr><name>responseContainer</name> <operator>=</operator> <name>RESPONSE_CONTAINER_LIST</name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiImplicitParams</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_FIELDS</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_FILTER_DESCRIPTION</name></expr></argument>,
      <argument><expr><name>defaultValue</name> <operator>=</operator> <literal type="string">"AmbariConfiguration/data, AmbariConfiguration/id, AmbariConfiguration/type"</literal></expr></argument>,
      <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_SORT</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_SORT_DESCRIPTION</name></expr></argument>,
      <argument><expr><name>defaultValue</name> <operator>=</operator> <literal type="string">"AmbariConfiguration/id"</literal></expr></argument>,
      <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_PAGE_SIZE</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_PAGE_SIZE_DESCRIPTION</name></expr></argument>, <argument><expr><name>defaultValue</name> <operator>=</operator> <name>DEFAULT_PAGE_SIZE</name></expr></argument>, <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_INT</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_FROM</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_FROM_DESCRIPTION</name></expr></argument>, <argument><expr><name>defaultValue</name> <operator>=</operator> <name>DEFAULT_FROM</name></expr></argument>, <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_TO</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_TO_DESCRIPTION</name></expr></argument>, <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation></argument>
  }</block></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiResponses</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <block>{
    <annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SUCCESSFUL_OPERATION</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SERVER_ERROR</name></expr></argument>)</argument_list></annotation></argument>
  }</block></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>getAmbariConfigurations</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>HttpHeaders</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>UriInfo</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>GET</name></name></expr></argument>, <argument><expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>,
      <argument><expr><name><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>GET</name></annotation>
  <annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"{configurationId}"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>TEXT_PLAIN</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiOperation</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Retrieve the details of an ambari configuration resource"</literal></expr></argument>,
    <argument><expr><name>nickname</name> <operator>=</operator> <literal type="string">"AmbariConfigurationService#getAmbariConfiguration"</literal></expr></argument>,
    <argument><expr><name>response</name> <operator>=</operator> <name><name>AmbariConfigurationResponseSwagger</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiImplicitParams</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_FIELDS</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_FILTER_DESCRIPTION</name></expr></argument>, <argument><expr><name>defaultValue</name> <operator>=</operator> <literal type="string">"AmbariConfiguration/*"</literal></expr></argument>,
      <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation>
  }</block></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiResponses</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <block>{
    <annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SUCCESSFUL_OPERATION</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_NOT_FOUND</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_RESOURCE_NOT_FOUND</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SERVER_ERROR</name></expr></argument>)</argument_list></annotation></argument>
  }</block></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>getAmbariConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>HttpHeaders</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>UriInfo</name></type> <name>uri</name></decl></parameter>,
                                         <parameter><decl><type><annotation>@<name>PathParam</name><argument_list>(<argument><expr><literal type="string">"configurationId"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>configurationId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>GET</name></name></expr></argument>, <argument><expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>,
      <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><name>configurationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>PUT</name></annotation>
  <annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"{configurationId}"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>TEXT_PLAIN</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiOperation</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Updates ambari configuration resources "</literal></expr></argument>,
    <argument><expr><name>nickname</name> <operator>=</operator> <literal type="string">"AmbariConfigurationService#updateAmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiImplicitParams</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>dataType</name> <operator>=</operator> <name>AMBARI_CONFIGURATION_REQUEST_TYPE</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_BODY</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiImplicitParam</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <name>QUERY_FIELDS</name></expr></argument>, <argument><expr><name>value</name> <operator>=</operator> <name>QUERY_FILTER_DESCRIPTION</name></expr></argument>, <argument><expr><name>defaultValue</name> <operator>=</operator> <literal type="string">"AmbariConfiguration/*"</literal></expr></argument>,
      <argument><expr><name>dataType</name> <operator>=</operator> <name>DATA_TYPE_STRING</name></expr></argument>, <argument><expr><name>paramType</name> <operator>=</operator> <name>PARAM_TYPE_QUERY</name></expr></argument>)</argument_list></annotation></argument>
  }</block></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiResponses</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SUCCESSFUL_OPERATION</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_ACCEPTED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_REQUEST_ACCEPTED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_BAD_REQUEST</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_INVALID_ARGUMENTS</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_NOT_FOUND</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_RESOURCE_NOT_FOUND</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_UNAUTHORIZED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_NOT_AUTHENTICATED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_FORBIDDEN</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_PERMISSION_DENIED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SERVER_ERROR</name></expr></argument>)</argument_list></annotation></argument>,
  <argument/>}</block></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>updateAmbariConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>HttpHeaders</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>UriInfo</name></type> <name>uri</name></decl></parameter>,
                                            <parameter><decl><type><annotation>@<name>PathParam</name><argument_list>(<argument><expr><literal type="string">"configurationId"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>configurationId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>PUT</name></name></expr></argument>, <argument><expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>,
      <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><name>configurationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>DELETE</name></annotation>
  <annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"{configurationId}"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>TEXT_PLAIN</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiOperation</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"Deletes an ambari configuration resource"</literal></expr></argument>,
    <argument><expr><name>nickname</name> <operator>=</operator> <literal type="string">"AmbariConfigurationService#deleteAmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>ApiResponses</name><argument_list>(<argument><expr><block>{
    <annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_OK</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SUCCESSFUL_OPERATION</name></expr></argument>)</argument_list></annotation>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_NOT_FOUND</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_RESOURCE_NOT_FOUND</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_UNAUTHORIZED</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_NOT_AUTHENTICATED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_FORBIDDEN</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_PERMISSION_DENIED</name></expr></argument>)</argument_list></annotation></argument>,
    <argument><annotation>@<name>ApiResponse</name><argument_list>(<argument><expr><name>code</name> <operator>=</operator> <name><name>HttpStatus</name><operator>.</operator><name>SC_INTERNAL_SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <name>MSG_SERVER_ERROR</name></expr></argument>)</argument_list></annotation></argument>,
  <argument/>}</block></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>deleteAmbariConfiguration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>HttpHeaders</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Context</name></annotation> <name>UriInfo</name></type> <name>uri</name></decl></parameter>,
                                            <parameter><decl><type><annotation>@<name>PathParam</name><argument_list>(<argument><expr><literal type="string">"configurationId"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>configurationId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>handleRequest</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>DELETE</name></name></expr></argument>, <argument><expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>,
      <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><name>configurationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>AmbariConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>AmbariConfiguration</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..b5cc9212da</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>AmbariConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">87</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ldap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Domain POJO representing generic ambari configuration data.
 */</comment>
<class><specifier>public</specifier> class <name>AmbariConfiguration</name> <block>{

  <comment type="block" format="javadoc">/**
   * The type of the configuration,  eg.: ldap-configuration
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Version tag
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>versionTag</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Version number
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>version</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Created timestamp
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>createdTs</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>type</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>data</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setData</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getVersionTag</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>versionTag</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersionTag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>versionTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>versionTag</name></name> <operator>=</operator> <name>versionTag</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>version</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getCreatedTs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>createdTs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCreatedTs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>createdTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdTs</name></name> <operator>=</operator> <name>createdTs</name></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigOperation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigOperation</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..478d4ff188</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigOperation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">43</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ldap</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Enumeration for supported operations related to LDAP configuration.
 */</comment>
<enum><specifier>public</specifier> enum <name>LdapConfigOperation</name> <block>{
  <decl><name>TEST_CONNECTION</name><argument_list>(<argument><expr><literal type="string">"test-connection"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TEST_ATTRIBUTES</name><argument_list>(<argument><expr><literal type="string">"test-attributes"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>DETECT_ATTRIBUTES</name><argument_list>(<argument><expr><literal type="string">"detect-attributes"</literal></expr></argument>)</argument_list></decl>;

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>actionStr</name></decl>;</decl_stmt>

  <constructor><name>LdapConfigOperation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>actionStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actionStr</name></name> <operator>=</operator> <name>actionStr</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LdapConfigOperation</name></type> <name>fromAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>LdapConfigOperation</name></type> <name>val</name> <range>: <expr><call><name><name>LdapConfigOperation</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>action</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>val</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Action [ "</literal> <operator>+</operator> <name>action</name> <operator>+</operator> <literal type="string">" ] is not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>action</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>actionStr</name></name></expr>;</return>
  </block_content>}</block></function>
}</block></enum>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationRequest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationRequest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..2e478c4329</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationRequest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">49</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ldap</name></name>;</package>


<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>annotations</name><operator>.</operator><name>SerializedName</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Request object wrapping information for LDAP configuration related request calls.
 */</comment>
<class><specifier>public</specifier> class <name>LdapConfigurationRequest</name> <block>{

  <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>AmbariConfiguration</name></type> <name>ambariConfiguration</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"RequestInfo"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>LdapRequestInfo</name></type> <name>requestInfo</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>LdapConfigurationRequest</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>AmbariConfiguration</name></type> <name>getAmbariConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>ambariConfiguration</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAmbariConfiguration</name><parameter_list>(<parameter><decl><type><name>AmbariConfiguration</name></type> <name>ambariConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ambariConfiguration</name></name> <operator>=</operator> <name>ambariConfiguration</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>LdapRequestInfo</name></type> <name>getRequestInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>requestInfo</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setRequestInfo</name><parameter_list>(<parameter><decl><type><name>LdapRequestInfo</name></type> <name>requestInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestInfo</name></name> <operator>=</operator> <name>requestInfo</name></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..13f8835655</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">185</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ldap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>Consumes</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>POST</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>Produces</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>MediaType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>Response</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>annotations</name><operator>.</operator><name>ApiIgnore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>StaticallyInject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>AmbariConfigurationService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>Result</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ResultImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ResultStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ResourceImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapFacade</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>ResourceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>RoleAuthorization</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name>security</name><operator>.</operator><name>core</name><operator>.</operator><name>Authentication</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Endpoint designated to LDAP specific operations.
 */</comment>
<class><annotation>@<name>StaticallyInject</name></annotation>
<annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"/ldapconfigs/"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>LdapConfigurationService</name> <super_list><extends>extends <super><name>AmbariConfigurationService</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LdapConfigurationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <specifier>static</specifier> <name>LdapFacade</name></type> <name>ldapFacade</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <specifier>static</specifier> <name>AmbariLdapConfigurationFactory</name></type> <name>ambariLdapConfigurationFactory</name></decl>;</decl_stmt>


  <function><annotation>@<name>POST</name></annotation>
  <annotation>@<name>ApiIgnore</name></annotation> <comment type="line">// until documented</comment>
  <annotation>@<name>Path</name><argument_list>(<argument><expr><literal type="string">"/validate"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Consumes</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>APPLICATION_JSON</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Produces</name><argument_list>(<argument><expr><name><name>MediaType</name><operator>.</operator><name>APPLICATION_JSON</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>Response</name></type> <name>validateConfiguration</name><parameter_list>(<parameter><decl><type><name>LdapConfigurationRequest</name></type> <name>ldapConfigurationRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// check if the user is authorized to perform the operation</comment>
    <expr_stmt><expr><call><name>authorize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>responseEntity</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ResultImpl</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ResultStatus</name><argument_list>(<argument><expr><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>OK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>

      <expr_stmt><expr><call><name>validateRequest</name><argument_list>(<argument><expr><name>ldapConfigurationRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><call><name><name>ambariLdapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(
        <argument><expr><call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getAmbariConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>LdapConfigOperation</name></type> <name>action</name> <init>= <expr><call><name><name>LdapConfigOperation</name><operator>.</operator><name>fromAction</name></name><argument_list>(<argument><expr><call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getRequestInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>

        <case>case <expr><name>TEST_CONNECTION</name></expr>:</case>

          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Testing connection to the LDAP server ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>ldapFacade</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <break>break;</break>
        <case>case <expr><name>TEST_ATTRIBUTES</name></expr>:</case>

          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Testing LDAP attributes ...."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>groups</name> <operator>=</operator> <call><name><name>ldapFacade</name><operator>.</operator><name>checkLdapAttributes</name></name><argument_list>(<argument><expr><call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getRequestInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParameters</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>responseEntity</name> <operator>=</operator> <name>groups</name></expr>;</expr_stmt>

          <break>break;</break>
        <case>case <expr><name>DETECT_ATTRIBUTES</name></expr>:</case>

          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting LDAP attributes ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ambariLdapConfiguration</name> <operator>=</operator> <call><name><name>ldapFacade</name><operator>.</operator><name>detectAttributes</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>responseEntity</name> <operator>=</operator> <name>ambariLdapConfiguration</name></expr>;</expr_stmt>

          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No action provided ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No request action provided"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></switch>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setResultStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ResultStatus</name><argument_list>(<argument><expr><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>SERVER_ERROR</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>responseEntity</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <return>return <expr><call><name><name>Response</name><operator>.</operator><name>status</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStatusCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><name>responseEntity</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setResult</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>groups</name></decl></parameter>, <parameter><decl><type><name>Result</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>getResultTree</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addChild</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><literal type="string">"payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>validateRequest</name><parameter_list>(<parameter><decl><type><name>LdapConfigurationRequest</name></type> <name>ldapConfigurationRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>errMsg</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>ldapConfigurationRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <literal type="string">"No ldap configuraiton request provided"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getRequestInfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"No request information provided. Request: [%s]"</literal></expr></argument>, <argument><expr><name>ldapConfigurationRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getAmbariConfiguration</name></name><argument_list>()</argument_list></call>
      <operator>||</operator> <call><name><name>ldapConfigurationRequest</name><operator>.</operator><name>getAmbariConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errMsg</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"No / Invalid configuration data provided. Request: [%s]"</literal></expr></argument>, <argument><expr><name>ldapConfigurationRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>authorize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Authentication</name></type> <name>authentication</name> <init>= <expr><call><name><name>AuthorizationHelper</name><operator>.</operator><name>getAuthentication</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>authentication</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>authentication</name><operator>.</operator><name>isAuthenticated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"Authentication data is not available, authorization to perform the requested operation is not granted"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthorizationHelper</name><operator>.</operator><name>isAuthorized</name></name><argument_list>(<argument><expr><name>authentication</name></expr></argument>, <argument><expr><name><name>ResourceType</name><operator>.</operator><name>AMBARI</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>requiredAuthorizations</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"The authenticated user does not have the appropriate authorizations to create the requested resource(s)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AuthorizationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unauthorized operation."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"User is not authorized to perform the operation"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleAuthorization</name></argument>&gt;</argument_list></name></type> <name>requiredAuthorizations</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>AMBARI_MANAGE_CONFIGURATION</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapRequestInfo</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapRequestInfo</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..eeecfeec38</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapRequestInfo</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">61</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ldap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>RequestPostRequest</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Bean holding LDAP request specific request information.
 */</comment>
<class><specifier>public</specifier> class <name>LdapRequestInfo</name> <super_list><implements>implements <super><name><name>RequestPostRequest</name><operator>.</operator><name>RequestInfo</name></name></super></implements></super_list> <block>{

  <comment type="line">// no-arg costructor facilitating JSON serialization</comment>
  <constructor><specifier>public</specifier> <name>LdapRequestInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>action</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getAction</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>action</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setParameters</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parameters</name></name> <operator>=</operator> <name>parameters</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>RequestPostRequest</name><operator>.</operator><name>OperationLevel</name></name></type> <name>getOperationLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>parameters</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name><name>StackAdvisorRequest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name><name>StackAdvisorRequest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3a2b488457</literal><operator>..</operator><name>cd26c5643b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name><name>StackAdvisorRequest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name><name>StackAdvisorRequest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>recommendations</name><operator>.</operator><name>Recomm</name></name>
 <name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>ChangedConfigInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Stack advisor request.
  */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorRequest</name> <block>{
   <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ChangedConfigInfo</name></argument>&gt;</argument_list></name> <name>changedConfigurations</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>RecommendationResponse</name><operator>.</operator><name>ConfigGroup</name></name></argument>&gt;</argument_list></name> <name>configGroups</name></expr>;
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>userContext</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name> <name>ldapConfig</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
   <expr><specifier>public</specifier> <name>String</name> <call><name>getStackName</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>stackName</name></expr>;</return>
@@ <operator>-</operator><literal type="number">93</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal><operator>,</operator><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorRequest</name> <block>{
     <return>return <expr><name>configurations</name></expr>;</return></block></block></expr>
   }</block>
 
  <specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name> <call><name>getLdapConfig</name><argument_list>()</argument_list></call> <block>{ <return>return <expr><name>ldapConfig</name></expr>;</return> }</block></expr></expr_stmt>

   <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ChangedConfigInfo</name></argument>&gt;</argument_list></name></type> <name>getChangedConfigurations</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>changedConfigurations</name></expr>;</return>
   </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">189</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorRequest</name> <block>{
       <return>return <expr><name>this</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><type><specifier>public</specifier> <name>StackAdvisorRequestBuilder</name></type> <name>withLdapConfig</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>ldapConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instance</name><operator>.</operator><name>ldapConfig</name></name> <operator>=</operator> <name>ldapConfig</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>


     <function><type><specifier>public</specifier> <name>StackAdvisorRequest</name></type> <name>build</name><parameter_list>()</parameter_list> <block>{<block_content>
       <return>return <expr><name><name>this</name><operator>.</operator><name>instance</name></name></expr>;</return>
     </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">356754d807</literal><operator>..</operator><literal type="number">2dc45de226</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>StackAdvisorResponse</name></extends></argument>&gt;</argument_list></name> <name>extend</name>
       <operator>+</operator> <literal type="string">",services/configurations/dependencies/StackConfigurationDependency/dependency_name"</literal>
       <operator>+</operator> <literal type="string">",services/configurations/dependencies/StackConfigurationDependency/dependency_type,services/configurations/StackConfigurations/type"</literal>
       <operator>+</operator> <literal type="string">"&amp;services/StackServices/service_name.in(%s)"</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GET_LDAP_CONFIG_URI</name> <init>= <expr><literal type="string">"/api/v1/configurations?AmbariConfiguration/type=ldap&amp;fields=AmbariConfiguration/*"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVICES_PROPERTY</name> <init>= <expr><literal type="string">"services"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVICES_COMPONENTS_PROPERTY</name> <init>= <expr><literal type="string">"components"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CONFIG_GROUPS_PROPERTY</name> <init>= <expr><literal type="string">"config-groups"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>StackAdvisorResponse</name></extends></argument>&gt;</argument_list></name> <name>extend</name>
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CHANGED_CONFIGURATIONS_PROPERTY</name> <operator>=</operator> <literal type="string">"changed-configurations"</literal></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_CONTEXT_PROPERTY</name> <init>= <expr><literal type="string">"user-context"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AMBARI_SERVER_CONFIGURATIONS_PROPERTY</name> <init>= <expr><literal type="string">"ambari-server-properties"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LDAP_CONFIGURATION_PROPERTY</name> <init>= <expr><literal type="string">"ldap-configuration"</literal></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>recommendationsDir</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>recommendationsArtifactsLifetime</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>StackAdvisorResponse</name></extends></argument>&gt;</argument_list></name> <name>extend</name>
       <call><name>populateConfigurations</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>populateConfigGroups</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>populateAmbariServerInfo</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>populateLdapConfiguration</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>data</name><operator>.</operator><name>servicesJSON</name></name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>writeValueAsString</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     } catch <expr_stmt><expr><operator>(</operator><name>Exception</name> <name>e</name><operator>)</operator> <block>{
       <comment type="line">// should not happen</comment>
@@ <expr><operator>-</operator><literal type="number">171</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">174</literal></expr>,<expr><literal type="number">52</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>StackAdvisorResponse</name></extends></argument>&gt;</argument_list></name> <name>extend</name></expr>
     <return>return <expr><name>data</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Retrieves the LDAP configuration if exists and adds it to services.json
   * @param root The JSON document that will become service.json when passed to the stack advisor engine
   * @throws StackAdvisorException
   * @throws IOException
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>populateLdapConfiguration</name><parameter_list>(<parameter><decl><type><name>ObjectNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>StackAdvisorException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>= <expr><call><name>handleRequest</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>LocalUriInfo</name><argument_list>(<argument><expr><name>GET_LDAP_CONFIG_URI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name><operator>.</operator><name>GET</name></name></expr></argument>,
        <argument><expr><call><name>createConfigResource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>Status</name><operator>.</operator><name>OK</name><operator>.</operator><name>getStatusCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
          <argument><expr><literal type="string">"Error occured during retrieving ldap configuration, status=%s, response=%s"</literal></expr></argument>,
          <argument><expr><call><name><name>response</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>response</name><operator>.</operator><name>getEntity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>StackAdvisorException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>ldapConfigJSON</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>response</name><operator>.</operator><name>getEntity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"LDAP configuration: {}"</literal></expr></argument>, <argument><expr><name>ldapConfigJSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>ldapConfigRoot</name> <init>= <expr><call><name><name>mapper</name><operator>.</operator><name>readTree</name></name><argument_list>(<argument><expr><name>ldapConfigJSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayNode</name></type> <name>ldapConfigs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ArrayNode</name><operator>)</operator><call><name><name>ldapConfigRoot</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"items"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numConfigs</name> <init>= <expr><call><name><name>ldapConfigs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Zero or one config may exist</comment>
    <switch>switch <condition>(<expr><name>numConfigs</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"No LDAP config is stored in the DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <decl_stmt><decl><type><name>ArrayNode</name></type> <name>ldapConfigData</name> <init>= <expr><operator>(</operator><name>ArrayNode</name><operator>)</operator><call><name><name>ldapConfigs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ldapConfigData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>StackAdvisorException</name><argument_list>(<argument><expr><literal type="string">"No configuration data for LDAP configuration."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ldapConfigData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>StackAdvisorException</name><argument_list>(<argument><expr><literal type="string">"Ambigous configuration data for LDAP configuration."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>LDAP_CONFIGURATION_PROPERTY</name></expr></argument>, <argument><expr><call><name><name>ldapConfigData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>StackAdvisorException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Multiple (%s) LDAP configs are found in the DB."</literal></expr></argument>, <argument><expr><name>numConfigs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
  </block_content>}</block></function>

   <function><type><specifier>protected</specifier> <name>void</name></type> <name>populateAmbariServerInfo</name><parameter_list>(<parameter><decl><type><name>ObjectNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>StackAdvisorException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>serverProperties</name> <init>= <expr><call><name><name>metaInfo</name><operator>.</operator><name>getAmbariServerProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">437</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">486</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>StackAdvisorResponse</name></extends></argument>&gt;</argument_list></name> <name>extend</name></expr></expr_stmt>
     <return>return <expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>Host</name></name></expr></argument>, <argument><expr><name>mapIds</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
  <function><type><specifier>protected</specifier> <name>ResourceInstance</name></type> <name>createConfigResource</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createResource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


   <function><type><specifier>private</specifier> <name>ResourceInstance</name></type> <name>createStackVersionResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>stackName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>stackVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapIds</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>mapIds</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>Stack</name></name></expr></argument>, <argument><expr><name>stackName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>AmbariServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>AmbariServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8988be007b</literal><operator>..</operator><literal type="number">6ceed4a780</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>AmbariServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>AmbariServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ViewPermissionResourceProvid</name></name>
 <name>import</name> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ThreadPoolEnabledPropertyProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>KerberosChecker</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>KerberosIdentityCleaner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>metrics</name><operator>.</operator><name>system</name><operator>.</operator><name>MetricsService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>PersistenceType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1061</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1062</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariServer</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>logStartup</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>AmbariServer</name> <name>server</name> <operator>=</operator> <literal type="null">null</literal></expr>;
     <try>try <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>ControllerModule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>ControllerModule</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dc97871ddc</name><operator>..</operator><literal type="number">1425e1bd32</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>ControllerModule</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name><name>ControllerModule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>ConnectionPoolType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name><operator>.</operator><name>DatabaseType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>AlertTargetResourceProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>AmbariConfigurationResourceProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ClusterStackVersionResourceProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ComponentResourceProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>CredentialResourceProvider</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">470</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">471</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ControllerModule</name> extends <name>AbstractModule</name> <block>{
         <expr><operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"credential"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>CredentialResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"kerberosDescriptor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>KerberosDescriptorResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"upgrade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UpgradeResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"ambariConfiguration"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"clusterStackVersion"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ClusterStackVersionResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"alertTarget"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>AlertTargetResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
         <operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>ResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><literal type="string">"viewInstance"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ViewInstanceResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">508</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">510</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ControllerModule</name> extends <name>AbstractModule</name> <block>{
     <expr><call><name>install</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FactoryModuleBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>implement</name><argument_list>(<argument><expr><name><name>CollectionPersisterService</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>CsvFilePersisterService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><name><name>CollectionPersisterServiceFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name>install</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FactoryModuleBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><name><name>ConfigureClusterTaskFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

   }</block>
 
   <comment type="block" format="javadoc">/**
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/ResourceProviderFactory.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/ResourceProviderFactory.java
index a1987755f7..711ae10f7e 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/ResourceProviderFactory.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/ResourceProviderFactory.java
@@ -22,6 +22,8 @@ package org.apache.ambari.server.controller;
 import java.util.Map;
 import java.util.Set;
 
import javax.inject.Named;

 import org.apache.ambari.server.controller.internal.AlertTargetResourceProvider;
 import org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider;
 import org.apache.ambari.server.controller.internal.UpgradeResourceProvider;
@@ -30,18 +32,15 @@ import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.Resource.Type;
 import org.apache.ambari.server.controller.spi.ResourceProvider;
 
import com.google.inject.name.Named;
 
 public interface ResourceProviderFactory {
   @Named("host")
  ResourceProvider getHostResourceProvider(Set&lt;String&gt; propertyIds,
      Map&lt;Type, String&gt; keyPropertyIds,
      AmbariManagementController managementController);
  ResourceProvider getHostResourceProvider(Set&lt;String&gt; propertyIds, Map&lt;Type, String&gt; keyPropertyIds,
                                           AmbariManagementController managementController);
 
   @Named("hostComponent")
  ResourceProvider getHostComponentResourceProvider(Set&lt;String&gt; propertyIds,
      Map&lt;Type, String&gt; keyPropertyIds,
      AmbariManagementController managementController);
  ResourceProvider getHostComponentResourceProvider(Set&lt;String&gt; propertyIds, Map&lt;Type, String&gt; keyPropertyIds,
                                                    AmbariManagementController managementController);
 
   @Named("service")
   ResourceProvider getServiceResourceProvider(AmbariManagementController managementController);
@@ -50,9 +49,8 @@ public interface ResourceProviderFactory {
   ResourceProvider getComponentResourceProvider(AmbariManagementController managementController);
 
   @Named("member")
  ResourceProvider getMemberResourceProvider(Set&lt;String&gt; propertyIds,
      Map&lt;Type, String&gt; keyPropertyIds,
      AmbariManagementController managementController);
  ResourceProvider getMemberResourceProvider(Set&lt;String&gt; propertyIds, Map&lt;Type, String&gt; keyPropertyIds,
                                             AmbariManagementController managementController);
 
   @Named("hostKerberosIdentity")
   ResourceProvider getHostKerberosIdentityResourceProvider(AmbariManagementController managementController);
@@ -64,13 +62,15 @@ public interface ResourceProviderFactory {
   ResourceProvider getRepositoryVersionResourceProvider();
 
   @Named("kerberosDescriptor")
  ResourceProvider getKerberosDescriptorResourceProvider(AmbariManagementController managementController,
                                                         Set&lt;String&gt; propertyIds,
  ResourceProvider getKerberosDescriptorResourceProvider(AmbariManagementController managementController, Set&lt;String&gt; propertyIds,
                                                          Map&lt;Resource.Type, String&gt; keyPropertyIds);
 
   @Named("upgrade")
   UpgradeResourceProvider getUpgradeResourceProvider(AmbariManagementController managementController);
 
  @Named("ambariConfiguration")
  ResourceProvider getAmbariConfigurationResourceProvider();

   @Named("clusterStackVersion")
   ClusterStackVersionResourceProvider getClusterStackVersionResourceProvider(AmbariManagementController managementController);
 
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java
index a98ad46150..1dc0841d19 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java
@@ -254,6 +254,8 @@ public abstract class AbstractControllerResourceProvider extends AbstractAuthori
         return new ClusterKerberosDescriptorResourceProvider(managementController);
       case LoggingQuery:
         return new LoggingResourceProvider(propertyIds, keyPropertyIds, managementController);
      case AmbariConfiguration:
        return resourceProviderFactory.getAmbariConfigurationResourceProvider();
       case AlertTarget:
         return resourceProviderFactory.getAlertTargetResourceProvider();
       case ViewInstance:
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java
index 1cd2d10507..1501a0186a 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java
@@ -224,7 +224,7 @@ public abstract class AbstractProviderModule implements ProviderModule,
    * are going to work unless refactoring is complete.
    */</comment>
   @<name>Inject</name>
  <name>AmbariManagementController</name> <name>managementController</name></expr>;
  <expr><specifier>protected</specifier> <name>AmbariManagementController</name> <name>managementController</name></expr>;
 
   @<expr><name>Inject</name>
   <name>TimelineMetricCacheProvider</name> <name>metricCacheProvider</name></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..4f4cc7070d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">328</literal> @@</expr>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name></name>;</package></block></expr></expr_stmt>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>NoSuchParentResourceException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>NoSuchResourceException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>RequestStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>ResourceAlreadyExistsException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>SystemException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>UnsupportedPropertyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PredicateHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariLdapConfigChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>publishers</name><operator>.</operator><name>AmbariEventPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>AmbariConfigurationDAO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>AmbariConfigurationEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>ConfigurationBaseEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>RoleAuthorization</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>assistedinject</name><operator>.</operator><name>AssistedInject</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Resource provider for AmbariConfiguration resources.
 */</comment>
<class><specifier>public</specifier> class <name>AmbariConfigurationResourceProvider</name> <super_list><extends>extends <super><name>AbstractAuthorizedResourceProvider</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_VERSION_TAG</name> <init>= <expr><literal type="string">"Default version"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>DEFAULT_VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Resource property id constants.
   */</comment>
  <enum><specifier>public</specifier> enum <name>ResourcePropertyId</name> <block>{

    <decl><name>ID</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration/id"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>TYPE</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration/type"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>VERSION</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration/version"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>VERSION_TAG</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration/version_tag"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>DATA</name><argument_list>(<argument><expr><literal type="string">"AmbariConfiguration/data"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>propertyId</name></decl>;</decl_stmt>

    <constructor><name>ResourcePropertyId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>propertyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertyId</name></name> <operator>=</operator> <name>propertyId</name></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></constructor></block></enum></block></class></block_content></block></try>}</block>

    <name>String</name> <call><name>getPropertyId</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>propertyId</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResourcePropertyId</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>propertyIdStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>ResourcePropertyId</name></type> <name>propertyIdFromStr</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>ResourcePropertyId</name></type> <name>id</name> <range>: <expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>propertyIdStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>propertyIdFromStr</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>propertyIdFromStr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unsupported property type: "</literal> <operator>+</operator> <name>propertyIdStr</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>propertyIdFromStr</name></expr>;</return>

    </block_content>}</block></function>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PROPERTIES</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(
    <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>TYPE</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>VERSION_TAG</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>DATA</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PK_PROPERTY_MAP</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(
    <argument><expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{<block_content>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>}</block></class></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>


  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariConfigurationDAO</name></type> <name>ambariConfigurationDAO</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariEventPublisher</name></type> <name>publisher</name></decl>;</decl_stmt>


  <decl_stmt><decl><type><specifier>private</specifier> <name>Gson</name></type> <name>gson</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>AssistedInject</name></annotation>
  <specifier>public</specifier> <name>AmbariConfigurationResourceProvider</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>PROPERTIES</name></expr></argument>, <argument><expr><name>PK_PROPERTY_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setRequiredCreateAuthorizations</name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>AMBARI_MANAGE_CONFIGURATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setRequiredDeleteAuthorizations</name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>AMBARI_MANAGE_CONFIGURATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gson</name> <operator>=</operator> <operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPKPropertyIds</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>RequestStatus</name></type> <name>createResourcesAuthorized</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SystemException</name></expr></argument>, <argument><expr><name>UnsupportedPropertyException</name></expr></argument>,
    <argument><expr><name>ResourceAlreadyExistsException</name></expr></argument>, <argument><expr><name>NoSuchParentResourceException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating new ambari configuration resource ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>ambariConfigurationEntity</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>ambariConfigurationEntity</name> <operator>=</operator> <call><name>getEntityFromRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AmbariException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NoSuchParentResourceException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Persisting new ambari configuration: {} "</literal></expr></argument>, <argument><expr><name>ambariConfigurationEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariConfigurationEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to create resource"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>ResourceAlreadyExistsException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <comment type="line">// todo filter by configuration type</comment>
    <comment type="line">// notify subscribers about the configuration changes</comment>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapConfigChangedEvent</name><argument_list>(<argument><expr><name><name>AmbariEvent</name><operator>.</operator><name>AmbariEventType</name><operator>.</operator><name>LDAP_CONFIG_CHANGED</name></name></expr></argument>,
      <argument><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>getRequestStatus</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>getResourcesAuthorized</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>Predicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SystemException</name></expr></argument>,
    <argument><expr><name>UnsupportedPropertyException</name></expr></argument>, <argument><expr><name>NoSuchResourceException</name></expr></argument>, <argument><expr><name>NoSuchParentResourceException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// retrieves allconfigurations, filtering is done at a higher level</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AmbariConfigurationEntity</name></argument>&gt;</argument_list></name></type> <name>ambariConfigurationEntities</name> <init>= <expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>findAll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>AmbariConfigurationEntity</name></type> <name>ambariConfigurationEntity</name> <range>: <expr><name>ambariConfigurationEntities</name></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>resources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>toResource</name><argument_list>(<argument><expr><name>ambariConfigurationEntity</name></expr></argument>, <argument><expr><call><name>getPropertyIds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AmbariException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error while retrieving ambari configuration"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <return>return <expr><name>resources</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>RequestStatus</name></type> <name>deleteResourcesAuthorized</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>Predicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SystemException</name></expr></argument>,
    <argument><expr><name>UnsupportedPropertyException</name></expr></argument>, <argument><expr><name>NoSuchResourceException</name></expr></argument>, <argument><expr><name>NoSuchParentResourceException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>Long</name></type> <name>idFromRequest</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>PredicateHelper</name><operator>.</operator><name>getProperties</name></name><argument_list>(<argument><expr><name>predicate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>idFromRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"No resource id provided in the request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Deleting amari configuration with id: {}"</literal></expr></argument>, <argument><expr><name>idFromRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>removeByPK</name></name><argument_list>(<argument><expr><name>idFromRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>NoSuchResourceException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>

    </block_content>}</block></else></if_stmt>

    <comment type="line">// notify subscribers about the configuration changes</comment>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapConfigChangedEvent</name><argument_list>(<argument><expr><name><name>AmbariEvent</name><operator>.</operator><name>AmbariEventType</name><operator>.</operator><name>LDAP_CONFIG_CHANGED</name></name></expr></argument>, <argument><expr><name>idFromRequest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><call><name>getRequestStatus</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>

  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>RequestStatus</name></type> <name>updateResourcesAuthorized</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>Predicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SystemException</name></expr></argument>,
    <argument><expr><name>UnsupportedPropertyException</name></expr></argument>, <argument><expr><name>NoSuchResourceException</name></expr></argument>, <argument><expr><name>NoSuchParentResourceException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Long</name></type> <name>idFromRequest</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>PredicateHelper</name><operator>.</operator><name>getProperties</name></name><argument_list>(<argument><expr><name>predicate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>persistedEntity</name> <init>= <expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>findByPK</name></name><argument_list>(<argument><expr><name>idFromRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>persistedEntity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Entity with primary key [ %s ] not found in the database."</literal></expr></argument>, <argument><expr><name>idFromRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>NoSuchResourceException</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>entityFromRequest</name> <init>= <expr><call><name>getEntityFromRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersionTag</name><argument_list>(<argument><expr><call><name><name>entityFromRequest</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersionTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersion</name><argument_list>(<argument><expr><call><name><name>entityFromRequest</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name><name>entityFromRequest</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConfigurationData</name><argument_list>(<argument><expr><call><name><name>entityFromRequest</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfigurationData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConfigurationAttributes</name><argument_list>(<argument><expr><call><name><name>entityFromRequest</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfigurationAttributes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>persistedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AmbariException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NoSuchParentResourceException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapConfigChangedEvent</name><argument_list>(<argument><expr><name><name>AmbariEvent</name><operator>.</operator><name>AmbariEventType</name><operator>.</operator><name>LDAP_CONFIG_CHANGED</name></name></expr></argument>,
      <argument><expr><call><name><name>persistedEntity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><call><name>getRequestStatus</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Resource</name></type> <name>toResource</name><parameter_list>(<parameter><decl><type><name>AmbariConfigurationEntity</name></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>requestedIds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument></throws> <block>{<block_content>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>entity</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Null entity can't be transformed into a resource"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid configuration entity can't be transformed into a resource"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>AmbariConfiguration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>configurationSet</name> <init>= <expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfigurationData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Set</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>setResourceProperty</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setResourceProperty</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>TYPE</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setResourceProperty</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>DATA</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>configurationSet</name></expr></argument>, <argument><expr><name>requestedIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setResourceProperty</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setResourceProperty</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>VERSION_TAG</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersionTag</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>resource</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>AmbariConfigurationEntity</name></type> <name>getEntityFromRequest</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>ambariConfigurationEntity</name> <init>= <expr><operator>new</operator> <call><name>AmbariConfigurationEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>setConfigurationBaseEntity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConfigurationBaseEntity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set of resource properties (eache entry in the set belongs to a different resource)</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>resourcePropertiesSet</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>resourcePropertiesSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariException</name><argument_list>(<argument><expr><literal type="string">"There must be only one resource specified in the request"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the configuration type must be set</comment>
    <if_stmt><if>if <condition>(<expr><call><name>getValueFromResourceProperties</name><argument_list>(<argument><expr><name><name>ResourcePropertyId</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>resourcePropertiesSet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariException</name><argument_list>(<argument><expr><literal type="string">"The configuration type must be set"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>


    <for>for <control>(<init><decl><type><name>ResourcePropertyId</name></type> <name>resourcePropertyId</name> <range>: <expr><call><name><name>ResourcePropertyId</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Object</name></type> <name>requestValue</name> <init>= <expr><call><name>getValueFromResourceProperties</name><argument_list>(<argument><expr><name>resourcePropertyId</name></expr></argument>, <argument><expr><call><name><name>resourcePropertiesSet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <switch>switch <condition>(<expr><name>resourcePropertyId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>DATA</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>requestValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No configuration data is provided in the request"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConfigurationData</name><argument_list>(<argument><expr><call><name><name>gson</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>requestValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TYPE</name></expr>:</case>
          <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>requestValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>VERSION</name></expr>:</case>
          <decl_stmt><decl><type><name>Integer</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>requestValue</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>DEFAULT_VERSION</name></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>requestValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersion</name><argument_list>(<argument><expr><operator>(</operator><name>version</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>VERSION_TAG</name></expr>:</case>
          <decl_stmt><decl><type><name>String</name></type> <name>versionTag</name> <init>= <expr><ternary><condition><expr><name>requestValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DEFAULT_VERSION_TAG</name></expr> </then><else>: <expr><operator>(</operator><name>String</name><operator>)</operator> <name>requestValue</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersionTag</name><argument_list>(<argument><expr><name>versionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Ignored property in the request: {}"</literal></expr></argument>, <argument><expr><name>resourcePropertyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>ambariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCreateTimestamp</name><argument_list>(<argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ambariConfigurationEntity</name></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Object</name></type> <name>getValueFromResourceProperties</name><parameter_list>(<parameter><decl><type><name>ResourcePropertyId</name></type> <name>resourcePropertyIdEnum</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>resourceProperties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Locating resource property [{}] in the resource properties map ..."</literal></expr></argument>, <argument><expr><name>resourcePropertyIdEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>requestValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>resourceProperties</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>resourcePropertyIdEnum</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>requestValue</name> <operator>=</operator> <call><name><name>resourceProperties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>resourcePropertyIdEnum</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Found resource property {} in the resource properties map, value: {}"</literal></expr></argument>, <argument><expr><name>resourcePropertyIdEnum</name></expr></argument>, <argument><expr><name>requestValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>requestValue</name></expr>;</return>
  </block_content>}</block></function>

}
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>DefaultProviderModule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>DefaultProviderModule</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">43779a3704</literal><operator>..</operator><name>c3758b3f5e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>DefaultProviderModule</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>DefaultProviderModule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>ResourceProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PropertyHelper</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * The default provider module implementation.
  */</comment>
 <class><specifier>public</specifier> class <name>DefaultProviderModule</name> <super_list><extends>extends <super><name>AbstractProviderModule</name></super></extends></super_list> <block>{
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariManagementController</name></type> <name>managementController</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DefaultProviderModule</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <comment type="line">// ----- Constructors ------------------------------------------------------</comment>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultProviderModule</name> extends <name>AbstractProviderModule</name> <block>{
    <expr><operator>*</operator> <name>Create</name> <name>a</name> default <name>provider</name> <name><name>module</name><operator>.</operator></name>
    *<operator>/</operator>
   <specifier>public</specifier> <call><name>DefaultProviderModule</name><argument_list>()</argument_list></call> <block>{
    <if_stmt><if>if <condition>(<expr><name>managementController</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>managementController</name> <operator>=</operator> <call><name><name>AmbariServer</name><operator>.</operator><name>getController</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>
    <call><name>super</name><argument_list>()</argument_list></call></expr>;
   }</block>
 
 
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultProviderModule</name> extends <name>AbstractProviderModule</name> <block>{
 
   @<expr><name>Override</name>
   <specifier>protected</specifier> <name>ResourceProvider</name> <call><name>createResourceProvider</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name></name> <name>type</name></expr></argument>)</argument_list></call> <block>{
    <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name>               <name>propertyIds</name>    <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyIds</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>keyPropertyIds</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getKeyPropertyIds</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Creating resource provider for the type: {}"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>propertyIds</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyIds</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>keyPropertyIds</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getKeyPropertyIds</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;
 
     <switch>switch <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getInternalType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>Workflow</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>DefaultProviderModule</name> extends <name>AbstractProviderModule</name> <block>{
         <return>return <expr><operator>new</operator> <call><name>ArtifactResourceProvider</name><argument_list>(<argument><expr><name>managementController</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
       <case>case <expr><name>RemoteCluster</name></expr>:</case>
         <return>return <expr><operator>new</operator> <call><name>RemoteClusterResourceProvider</name><argument_list>()</argument_list></call></expr>;</return>

       <default>default:</default>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Delegating creation of resource provider for: {} to the AbstractControllerResourceProvider"</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getInternalType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><call><name><name>AbstractControllerResourceProvider</name><operator>.</operator><name>getResourceProvider</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>propertyIds</name></expr></argument>,
            <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>managementController</name></expr></argument>)</argument_list></call></expr>;</return>
          <expr_stmt><expr><name>keyPropertyIds</name></expr><operator>,</operator> <expr><name>managementController</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></switch>
     }</block></expr>
   }</block></expr></expr_stmt>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>spi</name><operator>/</operator><name><name>Resource</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>spi</name><operator>/</operator><name><name>Resource</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">362b4e631c</literal><operator>..</operator><literal type="number">78353735ac</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>spi</name><operator>/</operator><name><name>Resource</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>spi</name><operator>/</operator><name><name>Resource</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> interface <name>Resource</name> <block>{
     <expr><name>VersionDefinition</name></expr>,
     <expr><name>ClusterKerberosDescriptor</name></expr>,
     <expr><name>LoggingQuery</name></expr>,
    <expr><name>RemoteCluster</name></expr>;
    <expr><name>RemoteCluster</name></expr>,
    <expr><name>AmbariConfiguration</name></expr>;
 
     <comment type="block" format="javadoc">/**
      * Get the {@link Type} that corresponds to this InternalType.
@@ -282,6 +283,8 @@ public interface Resource {
     public static final Type ClusterKerberosDescriptor = InternalType.ClusterKerberosDescriptor.getType();
     public static final Type LoggingQuery = InternalType.LoggingQuery.getType();
     public static final Type RemoteCluster = InternalType.RemoteCluster.getType();
    public static final Type AmbariConfiguration = InternalType.AmbariConfiguration.getType();

 
     /**
      * The type name.
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java b/ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java
index 9a5ee79913..0f9ff52147 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java
@@ -140,7 +140,13 @@ public abstract class AmbariEvent {
     /**
      * Local user has been created.
      */</comment>
    <expr><name>USER_CREATED</name></expr>;
    <expr><name>USER_CREATED</name></expr>,

    <comment type="block" format="javadoc">/**
     * LDAP config changed event;
     */</comment>
    <expr><name>LDAP_CONFIG_CHANGED</name></expr>;

   }</block>
 
   <comment type="block" format="javadoc">/**
@@ -151,8 +157,7 @@ public abstract class AmbariEvent {
   /**
    * Constructor.
    *
   * @param eventType
   *          the type of event (not {@code null}).
   * @param eventType the type of event (not {@code null}).
    */</comment>
   <specifier>public</specifier> <call><name>AmbariEvent</name><argument_list>(<argument><expr><name>AmbariEventType</name> <name>eventType</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>m_eventType</name> <operator>=</operator> <name>eventType</name></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..48799d793b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>events</name><operator>/</operator><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">37</literal> @@</expr>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Event signaling the creation or changing of an LDAP configuration entry.
 */</comment>
<specifier>public</specifier> <name>class</name> <name>AmbariLdapConfigChangedEvent</name> extends <name>AmbariEvent</name> <block>{

  <expr><specifier>private</specifier> <name>Long</name> <name>configurationId</name></expr>;

  <comment type="block" format="javadoc">/**
   * Constructor.
   *
   * @param eventType the type of event (not {@code null}).
   */</comment>
  <expr><specifier>public</specifier> <call><name>AmbariLdapConfigChangedEvent</name><argument_list>(<argument><expr><name>AmbariEventType</name> <name>eventType</name></expr></argument>, <argument><expr><name>Long</name> <name>configurationId</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>super</name><argument_list>(<argument><expr><name>eventType</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>this</name><operator>.</operator><name>configurationId</name></name> <operator>=</operator> <name>configurationId</name></expr>;
  }</block>

  <specifier>public</specifier> <name>Long</name> <call><name>getConfigurationId</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>configurationId</name></expr>;</return></block></expr>
  }</block></block></expr></expr_stmt>
}
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModule</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..089da1df7b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">82</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>


<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapConfigurationProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapFacade</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapAttributeDetectionService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConfigurationService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConnectionConfigService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapFacade</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>DefaultLdapAttributeDetectionService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>DefaultLdapConfigurationService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>DefaultLdapConnectionConfigService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>AttributeDetectorFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>GroupMemberAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>GroupNameAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>GroupObjectClassDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>UserGroupMemberAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>UserNameAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>UserObjectClassDetector</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>AbstractModule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>assistedinject</name><operator>.</operator><name>FactoryModuleBuilder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>multibindings</name><operator>.</operator><name>Multibinder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>name</name><operator>.</operator><name>Names</name></name>;</import>

<comment type="block" format="javadoc">/**
 * GUICE configuration module for setting up LDAP related infrastructure.
 */</comment>
<class><specifier>public</specifier> class <name>LdapModule</name> <super_list><extends>extends <super><name>AbstractModule</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_ATTRIBUTES_DETECTORS</name> <init>= <expr><literal type="string">"UserAttributesDetectors"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GROUP_ATTRIBUTES_DETECTORS</name> <init>= <expr><literal type="string">"GroupAttributesDetectors"</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>LdapFacade</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>AmbariLdapFacade</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>LdapConfigurationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>LdapAttributeDetectionService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>LdapConnectionConfigService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// this binding requires the JPA module!</comment>
    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toProvider</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigurationProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>AttributeDetectorFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>install</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FactoryModuleBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// binding the set of user attributes detector</comment>
    <decl_stmt><decl><type><name><name>Multibinder</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>userAttributeDetectorBinder</name> <init>= <expr><call><name><name>Multibinder</name><operator>.</operator><name>newSetBinder</name></name><argument_list>(<argument><expr><call><name>binder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AttributeDetector</name><operator>.</operator><name>class</name></name></expr></argument>,
      <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><name>USER_ATTRIBUTES_DETECTORS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>userAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>UserObjectClassDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>userAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>UserNameAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>userAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>UserGroupMemberAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">// binding the set of group attributes detector</comment>
    <decl_stmt><decl><type><name><name>Multibinder</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>groupAttributeDetectorBinder</name> <init>= <expr><call><name><name>Multibinder</name><operator>.</operator><name>newSetBinder</name></name><argument_list>(<argument><expr><call><name>binder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AttributeDetector</name><operator>.</operator><name>class</name></name></expr></argument>,
      <argument><expr><call><name><name>Names</name><operator>.</operator><name>named</name></name><argument_list>(<argument><expr><name>GROUP_ATTRIBUTES_DETECTORS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>groupAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>GroupObjectClassDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>GroupNameAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupAttributeDetectorBinder</name><operator>.</operator><name>addBinding</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to</name><argument_list>(<argument><expr><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..da655adb57</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Constants representing supported LDAP related property names
 * // todo extend this with validation information, description, defaults maybe
 */</comment>
<enum><specifier>public</specifier> enum <name>AmbariLdapConfigKeys</name> <block>{

  <decl><name>LDAP_ENABLED</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.authentication.enabled"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>SERVER_HOST</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.server.host"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>SERVER_PORT</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.server.port"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USE_SSL</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.use_ssl"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>TRUST_STORE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.trust_store"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TRUST_STORE_TYPE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.trust_store.type"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TRUST_STORE_PATH</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.trust_store.path"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TRUST_STORE_PASSWORD</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.trust_store.password"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>ANONYMOUS_BIND</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.anonymous_bind"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>BIND_DN</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.bind_dn"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>BIND_PASSWORD</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.connectivity.bind_password"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>ATTR_DETECTION</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.detection"</literal></expr></argument>)</argument_list></decl>, <comment type="line">// manual | auto</comment>

  <decl><name>DN_ATTRIBUTE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.dn_attr"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>USER_OBJECT_CLASS</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.user.object_class"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USER_NAME_ATTRIBUTE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.user.name_attr"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USER_GROUP_MEMBER_ATTRIBUTE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.user.group_member_attr"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USER_SEARCH_BASE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.user.search_base"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>GROUP_OBJECT_CLASS</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.group.object_class"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP_NAME_ATTRIBUTE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.group.name_attr"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP_MEMBER_ATTRIBUTE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.group.member_attr"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP_SEARCH_BASE</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.attributes.group.search_base"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>USER_SEARCH_FILTER</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.user_search_filter"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USER_MEMBER_REPLACE_PATTERN</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.user_member_replace_pattern"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>USER_MEMBER_FILTER</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.user_member_filter"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>GROUP_SEARCH_FILTER</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.group_search_filter"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP_MEMBER_REPLACE_PATTERN</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.group_member_replace_pattern"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP_MEMBER_FILTER</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.group_member_filter"</literal></expr></argument>)</argument_list></decl>,

  <decl><name>FORCE_LOWERCASE_USERNAMES</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.force_lowercase_usernames"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>REFERRAL_HANDLING</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.referrals"</literal></expr></argument>)</argument_list></decl>, <comment type="line">// folow</comment>
  <decl><name>PAGINATION_ENABLED</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.advanced.pagination_enabled"</literal></expr></argument>)</argument_list></decl>; <comment type="line">// true | false</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>propertyName</name></decl>;</decl_stmt>

  <constructor><name>AmbariLdapConfigKeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>propName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertyName</name></name> <operator>=</operator> <name>propName</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>key</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>propertyName</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AmbariLdapConfigKeys</name></type> <name>fromKeyStr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>AmbariLdapConfigKeys</name></type> <name>key</name> <range>: <expr><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>keyStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>key</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"invalid konfiguration key found!"</literal></expr></argument>)</argument_list></call></expr>;</throw>

  </block_content>}</block></function>
}</block></enum>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..8b26cd3e29</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">199</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>


<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>EqualsBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>assistedinject</name><operator>.</operator><name>Assisted</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is an immutable representation of all the LDAP related configurationMap entries.
 */</comment>
<class><specifier>public</specifier> class <name>AmbariLdapConfiguration</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configurationMap</name></decl>;</decl_stmt>

  <function><type><specifier>private</specifier> <name>Object</name></type> <name>configValue</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfigKeys</name></type> <name>ambariLdapConfigKeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>configurationMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfigKeys</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>configurationMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfigKeys</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Ldap configuration property [{}] hasn't been set"</literal></expr></argument>, <argument><expr><call><name><name>ambariLdapConfigKeys</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>value</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFor</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfigKeys</name></type> <name>ambariLdapConfigKeys</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>configurationMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfigKeys</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// intentionally package private, instances to be created through the factory</comment>
  <constructor><annotation>@<name>Inject</name></annotation>
  <name>AmbariLdapConfiguration</name><parameter_list>(<parameter><decl><type><annotation>@<name>Assisted</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configuration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configurationMap</name></name> <operator>=</operator> <name>configuration</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>ldapEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>LDAP_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>serverHost</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>SERVER_HOST</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>serverPort</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>SERVER_PORT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>useSSL</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USE_SSL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>trustStore</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>TRUST_STORE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>trustStoreType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>TRUST_STORE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>trustStorePath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>TRUST_STORE_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>trustStorePassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>TRUST_STORE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>anonymousBind</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>ANONYMOUS_BIND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>bindDn</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>BIND_DN</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>bindPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>BIND_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>attributeDetection</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>ATTR_DETECTION</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>dnAttribute</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>DN_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userObjectClass</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_OBJECT_CLASS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userNameAttribute</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userSearchBase</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_SEARCH_BASE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupObjectClass</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_OBJECT_CLASS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupNameAttribute</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_NAME_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupMemberAttribute</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_MEMBER_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupSearchBase</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_SEARCH_BASE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userSearchFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_SEARCH_FILTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userMemberReplacePattern</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_MEMBER_REPLACE_PATTERN</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>userMemberFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_MEMBER_FILTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupSearchFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_SEARCH_FILTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupMemberReplacePattern</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_MEMBER_REPLACE_PATTERN</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>groupMemberFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_MEMBER_FILTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>forceLowerCaseUserNames</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>FORCE_LOWERCASE_USERNAMES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>paginationEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>PAGINATION_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>referralHandling</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>configValue</name><argument_list>(<argument><expr><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>REFERRAL_HANDLING</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>configurationMap</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>AmbariLdapConfiguration</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>EqualsBuilder</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationMap</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>configurationMap</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>isEquals</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationMap</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..2b9f24be89</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Factory interface for AmbariLdapConfiguration instances.
 * It's registered as a factory in the GUICE context (so no implementations required)
 *
 * To be extended with other factory methods upon needs.
 */</comment>
<interface><specifier>public</specifier> interface <name>AmbariLdapConfigurationFactory</name> <block>{

  <comment type="block" format="javadoc">/**
   * Creates an AmbariLdapConfiguration instance with the provided map of configuration settings.
   *
   * @param configuration a map where keys are the configuration properties and values are the configuration values
   * @return an AmbariLdapConfiguration instance
   */</comment>
  <function_decl><type><name>AmbariLdapConfiguration</name></type> <name>createLdapConfiguration</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configuration</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapConfigurationProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapConfigurationProvider</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..c88d420e9a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapConfigurationProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">120</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Provider</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariLdapConfigChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>publishers</name><operator>.</operator><name>AmbariEventPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>AmbariConfigurationDAO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>AmbariConfigurationEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AmbariLdapAuthenticationProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>Subscribe</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Provider implementation for LDAP configurations.
 * It needs to be registered in the related GUICE module as a provider.
 * It's responsible for managing LDAP configurations in the application.
 * Whenever requested, this provider returns an AmbariLdapConfiguration which is always in sync with the persisted LDAP
 * configuration resource.
 *
 * The provider receives notifications on CRUD operations related to the persisted resource and reloads the cached
 * configuration instance accordingly.
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>AmbariLdapConfigurationProvider</name> <super_list><implements>implements <super><name><name>Provider</name><argument_list type="generic">&lt;<argument><name>AmbariLdapConfiguration</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariLdapAuthenticationProvider</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AmbariLdapConfiguration</name></type> <name>instance</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariEventPublisher</name></type> <name>publisher</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name><name>Provider</name><argument_list type="generic">&lt;<argument><name>AmbariConfigurationDAO</name></argument>&gt;</argument_list></name></type> <name>ambariConfigurationDAOProvider</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariLdapConfigurationFactory</name></type> <name>ldapConfigurationFactory</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Gson</name></type> <name>gson</name> <init>= <expr><operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>AmbariLdapConfigurationProvider</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Inject</name></annotation>
  <type><name>void</name></type> <name>register</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AmbariLdapConfiguration</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>instance</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>instance</name></expr> </then><else>: <expr><call><name>loadInstance</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Loads the AmbariLdapConfiguration from the database.
   *
   * @param configurationId the configuration id
   * @return the AmbariLdapConfiguration instance
   */</comment>
  <function><type><specifier>private</specifier> <name>AmbariLdapConfiguration</name></type> <name>loadInstance</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>configurationId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>configEntity</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Loading LDAP configuration ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>configurationId</name></expr>)</condition> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Initial loading of the ldap configuration ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>configEntity</name> <operator>=</operator> <call><name><name>ambariConfigurationDAOProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLdapConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Reloading configuration based on the provied id: {}"</literal></expr></argument>, <argument><expr><name>configurationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>configEntity</name> <operator>=</operator> <call><name><name>ambariConfigurationDAOProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findByPK</name><argument_list>(<argument><expr><name>configurationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>configEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Set</name></type> <name>propertyMaps</name> <init>= <expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>configEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfigurationData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Set</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>instance</name> <operator>=</operator> <call><name><name>ldapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>propertyMaps</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Loaded LDAP configuration instance: [ {} ]"</literal></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>instance</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// On changing the configuration, the provider gets updated with the fresh value</comment>
  <function><annotation>@<name>Subscribe</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>ambariLdapConfigChanged</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfigChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"LDAP config changed event received: {}"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadInstance</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getConfigurationId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Refreshed LDAP config instance."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapException</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapException</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..cb38accd2b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapException</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<class><specifier>public</specifier> class <name>AmbariLdapException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{
  <constructor><specifier>public</specifier> <name>AmbariLdapException</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AmbariLdapException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AmbariLdapException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AmbariLdapException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacade</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacade</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..0118840b73</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacade</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">140</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>


<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>AmbariLdapFacade</name> <super_list><implements>implements <super><name>LdapFacade</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariLdapFacade</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Additional parameters expected to be provided along with the configuration
   */</comment>
  <enum><specifier>public</specifier> enum <name>Parameters</name> <block>{
    <decl><name>TEST_USER_NAME</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.test.user.name"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>TEST_USER_PASSWORD</name><argument_list>(<argument><expr><literal type="string">"ambari.ldap.test.user.password"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>parameterKey</name></decl>;</decl_stmt>

    <constructor><name>Parameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parameterKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parameterKey</name></name> <operator>=</operator> <name>parameterKey</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getParameterKey</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>parameterKey</name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>LdapConfigurationService</name></type> <name>ldapConfigurationService</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>LdapAttributeDetectionService</name></type> <name>ldapAttributeDetectionService</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>AmbariLdapFacade</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>checkConnection</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>

      <expr_stmt><expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Validating LDAP connection related configuration: SUCCESS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Validating LDAP connection configuration failed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>

  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AmbariLdapConfiguration</name></type> <name>detectAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting LDAP configuration attributes ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting user attributes ...."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// decorate the configuration with detected user attributes</comment>
      <expr_stmt><expr><name>ambariLdapConfiguration</name> <operator>=</operator> <call><name><name>ldapAttributeDetectionService</name><operator>.</operator><name>detectLdapUserAttributes</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting group attributes ...."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// decorate the configuration with detected group attributes</comment>
      <expr_stmt><expr><name>ambariLdapConfiguration</name> <operator>=</operator> <call><name><name>ldapAttributeDetectionService</name><operator>.</operator><name>detectLdapGroupAttributes</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Attribute detection finished."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ambariLdapConfiguration</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error during LDAP attribute detection"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>checkLdapAttributes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>userName</name> <init>= <expr><call><name>getTestUserNameFromParameters</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>testUserPass</name> <init>= <expr><call><name>getTestUserPasswordFromParameters</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>userName</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No test user available for testing LDAP attributes"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Testing LDAP user attributes with test user: {}"</literal></expr></argument>, <argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>userDn</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkUserAttributes</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name>testUserPass</name></expr></argument>, <argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// todo handle the case where group membership is stored in the user rather than the group</comment>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Testing LDAP group attributes with test user dn: {}"</literal></expr></argument>, <argument><expr><name>userDn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkGroupAttributes</name></name><argument_list>(<argument><expr><name>userDn</name></expr></argument>, <argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>groups</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>String</name></type> <name>getTestUserNameFromParameters</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>parameterValue</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name><name>Parameters</name><operator>.</operator><name>TEST_USER_NAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>getTestUserPasswordFromParameters</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name>parameterValue</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name><name>Parameters</name><operator>.</operator><name>TEST_USER_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Object</name></type> <name>parameterValue</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>Parameters</name></type> <name>parameter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>parameters</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Parameter [{}] is missing from parameters"</literal></expr></argument>, <argument><expr><call><name><name>parameter</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>value</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AttributeDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AttributeDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..f39a1fd601</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AttributeDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Operations for detecting LDAP related settings.
 * The basis for the attribute or value detection is a set of entries returned by a search operation.
 * Individual attribute detector implementations are responsible for detecting a specific set of attributes or values
 */</comment>
<interface><specifier>public</specifier> interface <name><name>AttributeDetector</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{

  <comment type="block" format="javadoc">/**
   * Collects potential attribute names or values from a set of result entries.
   *
   * @param entry a result entry returned by a search operation
   */</comment>
  <function_decl><type><name>void</name></type> <name>collect</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Implements the decision based on which the "best" possible attribute or value is selected.
   *
   * @return a map of the form &lt;property-key, detected-value&gt;
   */</comment>
  <function_decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detect</name><parameter_list>()</parameter_list>;</function_decl>


}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapAttributeDetectionService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..c08a2e0f26</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Contract defining operations to detect user and group attributes.
 */</comment>
<interface><specifier>public</specifier> interface <name>LdapAttributeDetectionService</name> <block>{

  <comment type="block" format="javadoc">/**
   * Decorates the passed in configuration with the detected ldap user attribute values
   *
   * @param ambariLdapConfiguration configuration instance holding connection details
   * @return the configuration decorated with user related attributes
   */</comment>
  <function_decl><type><name>AmbariLdapConfiguration</name></type> <name>detectLdapUserAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Decorates the passed in configuration with the detected ldap group attribute values
   *
   * @param ambariLdapConfiguration configuration instance holding connection details
   * @return the configuration decorated with group related attributes
   */</comment>
  <function_decl><type><name>AmbariLdapConfiguration</name></type> <name>detectLdapGroupAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>
}</block></interface>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..4b82aa295f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConfigurationService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">60</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Collection of operations for validating ldap configuration.
 * It's intended to decouple implementations using different libraries.
 */</comment>
<interface><specifier>public</specifier> interface <name>LdapConfigurationService</name> <block>{

  <comment type="block" format="javadoc">/**
   * Tests the connection based on the provided configuration.
   *
   * @param configuration the ambari ldap configuration instance
   * @throws AmbariLdapException if the connection is not possible
   */</comment>
  <function_decl><type><name>void</name></type> <name>checkConnection</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>configuration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>


  <comment type="block" format="javadoc">/**
   * Implements LDAP user related configuration settings validation logic.
   * Implementers communicate with the LDAP server (search, bind) to validate attributes in the provided configuration
   * instance
   *
   * @param testUserName  the test username
   * @param testPassword  the test password
   * @param configuration the available ldap configuration
   * @return The DN of the found user entry
   * @throws AmbariException if the connection couldn't be estabilisheds
   */</comment>
  <function_decl><type><name>String</name></type> <name>checkUserAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>testUserName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>testPassword</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>configuration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Checks whether the group related LDAP attributes in the configuration are correct.
   *
   * @param userDn
   * @param ambariLdapConfiguration
   * @return
   * @throws AmbariLdapException
   */</comment>
  <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>checkGroupAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userDn</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>

}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConnectionConfigService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..a882075134</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">36</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnectionConfig</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Contract for creating connection configuration instances.
 * Implementers are in charge for implementing any required custom logic based on the ambari configuration properties.
 * (Eg.: using custom key stores etc...)
 */</comment>
<interface><specifier>public</specifier> interface <name>LdapConnectionConfigService</name> <block>{

  <comment type="block" format="javadoc">/**
   * Creates and sets up an ldap connection configuration instance based on the provided ambari ldap configuration instance.
   *
   * @param ambariLdapConfiguration instance holding configuration values
   * @return a set up ldap connection configuration instance
   * @throws AmbariLdapException if an error occurs while setting up the connection configuration
   */</comment>
  <function_decl><type><name>LdapConnectionConfig</name></type> <name>createLdapConnectionConfig</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>

}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapFacade</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapFacade</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..ef84d1bb2b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>LdapFacade</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">58</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The contract defining all the operations required by the application when communicating with an arbitrary LDAP server.
 * This interface is intended to decouple LDAP specific details from the application.
 *
 * Any operation that requires interaction with an LDAP server from within Ambari should go through this interface.
 * (LDAP)
 */</comment>
<interface><specifier>public</specifier> interface <name>LdapFacade</name> <block>{

  <comment type="block" format="javadoc">/**
   * Tests the connection to the LDAP server based on the provided configuration.
   *
   * @param ambariLdapConfiguration the available ldap related configuration
   * @throws AmbariLdapException if the connection fails or other problems occur during the operation
   */</comment>
  <function_decl><type><name>void</name></type> <name>checkConnection</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>


  <comment type="block" format="javadoc">/**
   * Runs the user and group attribute detection algorithms.
   * The method is not intended to be used as a coniguration factory, the returned instance may not be suitable for use.
   *
   * @param ambariLdapConfiguration partially filled configuration instance to be extended with detected properties
   * @return a configuration instance, with properties filled with potentially correct values
   * @throws AmbariLdapException
   */</comment>
  <function_decl><type><name>AmbariLdapConfiguration</name></type> <name>detectAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Checks user and group related LDAP configuration attributes in the configuration object with the help of the provided parameters
   *
   * @param parameters              a map of property name and value pairs holding information to facilitate checking the attributes
   * @param ambariLdapConfiguration configutration instance with available attributes
   * @throws AmbariLdapException if the attribute checking fails
   */</comment>
  <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>checkLdapAttributes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws>;</function_decl>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..a9a9b539f2</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">200</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapAttributeDetectionService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>AttributeDetectorFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>exception</name><operator>.</operator><name>LdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>util</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>search</name><operator>.</operator><name>FilterBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>EntryMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Service implementation that performs user and group attribute detection based on a sample set of entries returned by
 * an ldap search operation. A accuracy of detected values may depend on the size of the sample result set
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>DefaultLdapAttributeDetectionService</name> <super_list><implements>implements <super><name>LdapAttributeDetectionService</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DefaultLdapAttributeDetectionService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * The maximum size of the entry set the detection is performed on
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SAMPLE_RESULT_SIZE</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>AttributeDetectorFactory</name></type> <name>attributeDetectorFactory</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplateFactory</name></type> <name>ldapConnectionTemplateFactory</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>DefaultLdapAttributeDetectionService</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AmbariLdapConfiguration</name></type> <name>detectLdapUserAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting LDAP user attributes ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// perform a search using the user search base</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>Strings</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>userSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No user search base provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ambariLdapConfiguration</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name> <init>= <expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>AttributeDetector</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>userAttributeDetector</name> <init>= <expr><call><name><name>attributeDetectorFactory</name><operator>.</operator><name>userAttributDetector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SearchRequest</name></type> <name>searchRequest</name> <init>= <expr><call><name>assembleUserSearchRequest</name><argument_list>(<argument><expr><name>ldapConnectionTemplate</name></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// do the search</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>searchRequest</name></expr></argument>, <argument><expr><call><name>getEntryMapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>Entry</name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Collecting user attribute information from the sample entry with dn: [{}]"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userAttributeDetector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// select attributes based on the collected information</comment>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedUserAttributes</name> <init>= <expr><call><name><name>userAttributeDetector</name><operator>.</operator><name>detect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// setting the attributes into the configuration</comment>
      <expr_stmt><expr><call><name>setDetectedAttributes</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>, <argument><expr><name>detectedUserAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Decorated ambari ldap config : [{}]"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Ldap operation failed while detecting user attributes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>

    <return>return <expr><name>ambariLdapConfiguration</name></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AmbariLdapConfiguration</name></type> <name>detectLdapGroupAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting LDAP group attributes ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// perform a search using the user search base</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>Strings</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No group search base provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ambariLdapConfiguration</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name> <init>= <expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>AttributeDetector</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>groupAttributeDetector</name> <init>= <expr><call><name><name>attributeDetectorFactory</name><operator>.</operator><name>groupAttributeDetector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SearchRequest</name></type> <name>searchRequest</name> <init>= <expr><call><name>assembleGroupSearchRequest</name><argument_list>(<argument><expr><name>ldapConnectionTemplate</name></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// do the search</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>groupEntries</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>searchRequest</name></expr></argument>, <argument><expr><call><name>getEntryMapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>Entry</name></type> <name>groupEntry</name> <range>: <expr><name>groupEntries</name></expr></range></decl></init>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Collecting group attribute information from the sample entry with dn: [{}]"</literal></expr></argument>, <argument><expr><call><name><name>groupEntry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>groupAttributeDetector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>groupEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></for>

      <comment type="line">// select attributes based on the collected information</comment>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedGroupAttributes</name> <init>= <expr><call><name><name>groupAttributeDetector</name><operator>.</operator><name>detect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// setting the attributes into the configuration</comment>
      <expr_stmt><expr><call><name>setDetectedAttributes</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>, <argument><expr><name>detectedGroupAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Decorated ambari ldap config : [{}]"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Ldap operation failed while detecting group attributes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>

    <return>return <expr><name>ambariLdapConfiguration</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setDetectedAttributes</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedAttributes</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>detecteMapEntry</name> <range>: <expr><call><name><name>detectedAttributes</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting detected configuration value: [{}] - &gt; [{}]"</literal></expr></argument>, <argument><expr><call><name><name>detecteMapEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>detecteMapEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>setValueFor</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>fromKeyStr</name></name><argument_list>(<argument><expr><call><name><name>detecteMapEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>detecteMapEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>SearchRequest</name></type> <name>assembleUserSearchRequest</name><parameter_list>(<parameter><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>SearchRequest</name></type> <name>req</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>userSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>present</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>dnAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SearchScope</name><operator>.</operator><name>SUBTREE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>setSizeLimit</name></name><argument_list>(<argument><expr><name>SAMPLE_RESULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>req</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not assemble ldap search request"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>SearchRequest</name></type> <name>assembleGroupSearchRequest</name><parameter_list>(<parameter><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>SearchRequest</name></type> <name>req</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>present</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>dnAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SearchScope</name><operator>.</operator><name>SUBTREE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>setSizeLimit</name></name><argument_list>(<argument><expr><name>SAMPLE_RESULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>req</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not assemble ldap search request"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>getEntryMapper</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Entry</name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><name>entry</name></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..3f6995c48a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">213</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConfigurationService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>constants</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>exception</name><operator>.</operator><name>LdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>name</name><operator>.</operator><name>Dn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>search</name><operator>.</operator><name>FilterBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>ConnectionCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>EntryMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation of the validation logic using the Apache Directory API.
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>DefaultLdapConfigurationService</name> <super_list><implements>implements <super><name>LdapConfigurationService</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DefaultLdapConfigurationService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplateFactory</name></type> <name>ldapConnectionTemplateFactory</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>DefaultLdapConfigurationService</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>checkConnection</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Trying to connect to the LDAP server using provided configuration..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name> <init>= <expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// check if the connection from the connection pool of the template is connected</comment>
    <decl_stmt><decl><type><name>Boolean</name></type> <name>isConnected</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ConnectionCallback</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doWithConnection</name><parameter_list>(<parameter><decl><type><name>LdapConnection</name></type> <name>connection</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>connection</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>connection</name><operator>.</operator><name>isAuthenticated</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isConnected</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not connect to the LDAP server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Could not connect to the LDAP server. Configuration: "</literal> <operator>+</operator> <name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Successfully conencted to the LDAP."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Checks the user attributes provided in the configuration instance by issuing a search for a (known) test user in the LDAP.
   * Attributes are considered correct if there is at least one entry found.
   *
   * Invalid attributes are signaled by throwing an exception.
   *
   * @param testUserName            the test username
   * @param testPassword            the test password
   * @param ambariLdapConfiguration the available LDAP configuration to be validated
   * @return the DN of the test user
   * @throws AmbariLdapException if an error occurs
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>checkUserAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>testUserName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>testPassword</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>userDn</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Checking user attributes for user [{}] ..."</literal></expr></argument>, <argument><expr><name>testUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// set up a filter based on the provided attributes</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><call><name><name>FilterBuilder</name><operator>.</operator><name>and</name></name><argument_list>(
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>OBJECT_CLASS_AT</name></name></expr></argument>, <argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>userObjectClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>userNameAttribute</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>testUserName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Searching for the user: [{}] using the search filter: [{}]"</literal></expr></argument>, <argument><expr><name>testUserName</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>userDn</name> <operator>=</operator> <call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>searchFirst</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dn</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>userSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>SearchScope</name><operator>.</operator><name>SUBTREE</name></name></expr></argument>, <argument><expr><call><name>getUserDnNameEntryMapper</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>userDn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Could not find user based on the provided configuration. User attributes are not complete "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"User attribute configuration incomplete"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Attribute validation succeeded. Filter: [{}]"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"User attributes validation failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>
    <return>return <expr><name>userDn</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Checks whether the provided group related settings are correct.
   *
   * @param userDn                  a user DN to check
   * @param ambariLdapConfiguration the available LDAP configuration to be validated
   * @return
   * @throws AmbariLdapException
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>checkGroupAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userDn</name></decl></parameter>, <parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Checking group attributes for user dn: [{}] ..."</literal></expr></argument>, <argument><expr><name>userDn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// set up a filter based on the provided attributes</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><call><name><name>FilterBuilder</name><operator>.</operator><name>and</name></name><argument_list>(
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>OBJECT_CLASS_AT</name></name></expr></argument>, <argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupObjectClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>FilterBuilder</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupMemberAttribute</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>userDn</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Searching for the groups the user dn: [{}] is member of using the search filter: [{}]"</literal></expr></argument>, <argument><expr><name>userDn</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplate</name> <init>= <expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// assemble a search request</comment>
      <decl_stmt><decl><type><name>SearchRequest</name></type> <name>searchRequest</name> <init>= <expr><call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dn</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupSearchBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>SearchScope</name><operator>.</operator><name>SUBTREE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// attributes to be returned</comment>
      <expr_stmt><expr><call><name><name>searchRequest</name><operator>.</operator><name>addAttributes</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupMemberAttribute</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupNameAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// perform the search</comment>
      <expr_stmt><expr><name>groups</name> <operator>=</operator> <call><name><name>ldapConnectionTemplate</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>searchRequest</name></expr></argument>, <argument><expr><call><name>getGroupNameEntryMapper</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>groups</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>groups</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"No groups found for the user dn. Group attributes configuration is incomplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Group attribute ldap configuration is incomplete"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Group attribute configuration check succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"User attributes validation failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>

    <return>return <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Entry mapper for handling user search results.
   *
   * @param ambariLdapConfiguration ambari ldap configuration values
   * @return user dn entry mapper instance
   */</comment>
  <function><type><specifier>private</specifier> <name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getGroupNameEntryMapper</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entryMapper</name> <init>= <expr><operator>new</operator> <class><super><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>entry</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>groupNameAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>entryMapper</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Entry mapper for handling group searches.
   *
   * @param ambariLdapConfiguration ambari ldap configuration values
   * @return
   */</comment>
  <function><type><specifier>private</specifier> <name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getUserDnNameEntryMapper</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entryMapper</name> <init>= <expr><operator>new</operator> <class><super><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNormName</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>entryMapper</name></expr>;</return>
  </block_content>}</block></function>


}</block></class>



<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..9afcf51a49</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">113</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import static <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManagerFactory</name><operator>.</operator><name>getDefaultAlgorithm</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStore</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManager</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManagerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConnectionConfigService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>util</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnectionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>DefaultLdapConnectionConfigService</name> <super_list><implements>implements <super><name>LdapConnectionConfigService</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DefaultLdapConnectionConfigService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>DefaultLdapConnectionConfigService</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>LdapConnectionConfig</name></type> <name>createLdapConnectionConfig</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Assembling ldap connection config based on: {}"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LdapConnectionConfig</name></type> <name>config</name> <init>= <expr><operator>new</operator> <call><name>LdapConnectionConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setLdapHost</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>serverHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setLdapPort</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>serverPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>bindDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setCredentials</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>bindPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setUseSsl</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>useSSL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="string">"custom"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using custom trust manager configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setTrustManagers</name></name><argument_list>(<argument><expr><call><name>trustManagers</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>config</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Configure the trust managers to use the custom keystore.
   *
   * @param ambariLdapConfiguration congiguration instance holding current values
   * @return the array of trust managers
   * @throws AmbariLdapException if an error occurs while setting up the connection
   */</comment>
  <function><type><specifier>private</specifier> <name><name>TrustManager</name><index>[]</index></name></type> <name>trustManagers</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>TrustManagerFactory</name></type> <name>tmFactory</name> <init>= <expr><call><name><name>TrustManagerFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getDefaultAlgorithm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>tmFactory</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>keyStore</name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>tmFactory</name><operator>.</operator><name>getTrustManagers</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to initialize trust managers"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>KeyStore</name></type> <name>keyStore</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// validating configuration settings</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>Strings</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStoreType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Key Store Type must be specified"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>Strings</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStorePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Key Store Path must be specified"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>

      <decl_stmt><decl><type><name>KeyStore</name></type> <name>ks</name> <init>= <expr><call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStoreType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStorePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>, <argument><expr><call><name><name>ambariLdapConfiguration</name><operator>.</operator><name>trustStorePassword</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ks</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to create keystore"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..8467af08b6</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">111</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Provider</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariLdapConfigChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConnectionConfigService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>DefaultLdapConnectionFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnectionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnectionFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnectionPool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>ValidatingPoolableLdapConnectionFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>Subscribe</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Factory for creating LdapConnectionTemplate instances.
 * Depending on the usage context, the instance can be constructed based on the provided configuration or based on the persisted settings.
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>LdapConnectionTemplateFactory</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Inject the persisted configuration (when available) check the provider implementation for details.</comment>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name><name>Provider</name><argument_list type="generic">&lt;<argument><name>AmbariLdapConfiguration</name></argument>&gt;</argument_list></name></type> <name>ambariLdapConfigurationProvider</name></decl>;</decl_stmt>


  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionConfigService</name></type> <name>ldapConnectionConfigService</name></decl>;</decl_stmt>

  <comment type="line">// cached instance that only changes when the underlying configuration changes.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplateInstance</name></decl>;</decl_stmt>


  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>LdapConnectionTemplateFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a new instance based on the provided configuration. Use this factory method whle operating with ambari configuration not yet persisted.
   *
   * @param ambariLdapConfiguration ambari ldap configuration instance
   * @return an instance of LdapConnectionTemplate
   */</comment>
  <function><type><specifier>public</specifier> <name>LdapConnectionTemplate</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Constructing new instance based on the provided ambari ldap configuration: {}"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create the connection config</comment>
    <decl_stmt><decl><type><name>LdapConnectionConfig</name></type> <name>ldapConnectionConfig</name> <init>= <expr><call><name><name>ldapConnectionConfigService</name><operator>.</operator><name>createLdapConnectionConfig</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create the connection factory</comment>
    <decl_stmt><decl><type><name>LdapConnectionFactory</name></type> <name>ldapConnectionFactory</name> <init>= <expr><operator>new</operator> <call><name>DefaultLdapConnectionFactory</name><argument_list>(<argument><expr><name>ldapConnectionConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create the connection pool</comment>
    <decl_stmt><decl><type><name>LdapConnectionPool</name></type> <name>ldapConnectionPool</name> <init>= <expr><operator>new</operator> <call><name>LdapConnectionPool</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ValidatingPoolableLdapConnectionFactory</name><argument_list>(<argument><expr><name>ldapConnectionFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>template</name> <init>= <expr><operator>new</operator> <call><name>LdapConnectionTemplate</name><argument_list>(<argument><expr><name>ldapConnectionPool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ldap connection template instance: {}"</literal></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>template</name></expr>;</return>

  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Loads the persisted LDAP configuration.
   *
   * @return theh persisted
   */</comment>
  <function><type><specifier>public</specifier> <name>LdapConnectionTemplate</name></type> <name>load</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>

    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>ldapConnectionTemplateInstance</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ldapConnectionTemplateInstance</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfigurationProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ldapConnectionTemplateInstance</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The returned connection template instance is recreated whenever the ambari ldap configuration changes
   *
   * @param event
   * @throws AmbariLdapException
   */</comment>
  <function><annotation>@<name>Subscribe</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>onConfigChange</name><parameter_list>(<parameter><decl><type><name>AmbariLdapConfigChangedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariLdapException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>ldapConnectionTemplateInstance</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><call><name><name>ambariLdapConfigurationProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>AttributeDetectorFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>AttributeDetectorFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..eba0bd9ba5</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>AttributeDetectorFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">75</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Named</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Factory for attribute detector chains.
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>AttributeDetectorFactory</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AttributeDetectorFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_ATTRIBUTES_DETECTORS</name> <init>= <expr><literal type="string">"UserAttributesDetectors"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GROUP_ATTRIBUTES_DETECTORS</name> <init>= <expr><literal type="string">"GroupAttributesDetectors"</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * The set of group attribute detectors, configured by GUICE (check the relevant guice module implementation)
   */</comment>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <annotation>@<name>Named</name><argument_list>(<argument><expr><name>GROUP_ATTRIBUTES_DETECTORS</name></expr></argument>)</argument_list></annotation>
  <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>groupAttributeDetectors</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * The set of user attribute detectors, configured by GUICE (check the relevant guice module implementation)
   */</comment>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <annotation>@<name>Named</name><argument_list>(<argument><expr><name>USER_ATTRIBUTES_DETECTORS</name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>userAttributeDetectors</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>AttributeDetectorFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a chained attribute detector instance with user attribute detectors
   *
   * @return the constructed ChainedAttributeDetector instance
   */</comment>
  <function><type><specifier>public</specifier> <name>ChainedAttributeDetector</name></type> <name>userAttributDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating instance with user attribute detectors: [{}]"</literal></expr></argument>, <argument><expr><name>userAttributeDetectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>ChainedAttributeDetector</name><argument_list>(<argument><expr><name>userAttributeDetectors</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a chained attribute detector instance with user attribute detectors
   *
   * @return the constructed ChainedAttributeDetector instance
   */</comment>

  <function><type><specifier>public</specifier> <name>ChainedAttributeDetector</name></type> <name>groupAttributeDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating instance with group attribute detectors: [{}]"</literal></expr></argument>, <argument><expr><name>groupAttributeDetectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>ChainedAttributeDetector</name><argument_list>(<argument><expr><name>groupAttributeDetectors</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>ChainedAttributeDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>ChainedAttributeDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..094922b21a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>ChainedAttributeDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">73</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Attribute detector implementation that performs the attribute detection on a configured set of attribute detectors.
 * (it implements the composite design pattern)
 */</comment>
<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>ChainedAttributeDetector</name> <super_list><implements>implements <super><name><name>AttributeDetector</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ChainedAttributeDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * The set of detectors this instance delegates to
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>detectors</name></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>ChainedAttributeDetector</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AttributeDetector</name></argument>&gt;</argument_list></name></type> <name>detectors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>detectors</name></name> <operator>=</operator> <name>detectors</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>collect</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>AttributeDetector</name></type> <name>detector</name> <range>: <expr><name>detectors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Collecting information for the detector: [{}]"</literal></expr></argument>, <argument><expr><name>detector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>detector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detect</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedAttributes</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>AttributeDetector</name></type> <name>detector</name> <range>: <expr><name>detectors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detecting ldap configuration value using the detector: [{}]"</literal></expr></argument>, <argument><expr><name>detector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>detectedAttributes</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>detector</name><operator>.</operator><name>detect</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>detectedAttributes</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"ChainedAttributeDetector{"</literal> <operator>+</operator>
      <literal type="string">"detectors="</literal> <operator>+</operator> <name>detectors</name> <operator>+</operator>
      <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..8c34ef81aa</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">65</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupMemberAttrDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{

  <enum>enum <name>GroupMemberAttr</name> <block>{

    <decl><name>MEMBER</name><argument_list>(<argument><expr><literal type="string">"member"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,
    <decl><name>MEMBER_UID</name><argument_list>(<argument><expr><literal type="string">"memberUid"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,
    <decl><name>UNIQUE_MEMBER</name><argument_list>(<argument><expr><literal type="string">"uniqueMember"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>attrName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>GroupMemberAttr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrName</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>attrName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>attrName</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>GroupMemberAttrDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>GroupMemberAttr</name></type> <name>groupMemberAttr</name> <range>: <expr><call><name><name>GroupMemberAttr</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>groupMemberAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>groupMemberAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>groupMemberAttr</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>containsAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_MEMBER_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupNameAttrDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupNameAttrDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..0315ef2b62</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupNameAttrDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">70</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupNameAttrDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UserNameAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>GroupNameAttr</name> <block>{

    <decl><name>DISTINGUISHED_NAME</name><argument_list>(<argument><expr><literal type="string">"distinguishedName"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,

    <decl><name>CN</name><argument_list>(<argument><expr><literal type="string">"cn"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>attrName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>GroupNameAttr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrName</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>attrName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>attrName</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>GroupNameAttrDetector</name><parameter_list>()</parameter_list> <block>{<block_content>

    <for>for <control>(<init><decl><type><name>GroupNameAttr</name></type> <name>groupNameAttr</name> <range>: <expr><call><name><name>GroupNameAttr</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>groupNameAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>groupNameAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>groupNameAttr</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>containsAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupObjectClassDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupObjectClassDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..b681134b5a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupObjectClassDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">73</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupObjectClassDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>GroupObjectClassDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>ObjectClassValue</name> <block>{

    <decl><name>GROUP</name><argument_list>(<argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,

    <decl><name>GROUP_OF_NAMES</name><argument_list>(<argument><expr><literal type="string">"groupOfNames"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,

    <decl><name>POSIX_GROUP</name><argument_list>(<argument><expr><literal type="string">"posixGroup"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,

    <decl><name>GROUP_OF_UNIQUE_NAMES</name><argument_list>(<argument><expr><literal type="string">"groupOfUniqueNames"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ocVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>ObjectClassValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ocVal</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>ocVal</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>ocVal</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>GroupObjectClassDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>ObjectClassValue</name></type> <name>ocVal</name> <range>: <expr><call><name><name>ObjectClassValue</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>ocVal</name><operator>.</operator><name>ocVal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>ocVal</name><operator>.</operator><name>ocVal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ocVal</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>hasObjectClass</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>OccurrenceAndWeightBasedDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>OccurrenceAndWeightBasedDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..6ce7ca6f73</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>OccurrenceAndWeightBasedDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">143</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Attribute detector implementation that detects attributes considering their count of occurrence in a sample set of entries.
 * When multiple values are checked these values can be assigned a weight, that represents it's importance.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>OccurrenceAndWeightBasedDetector</name> <super_list><implements>implements <super><name><name>AttributeDetector</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>OccurrenceAndWeightBasedDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * A map in which the keys are the attributes that are checked in an entry and the values are the number the key occurs
   * in the sample entry set.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>occurrenceMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * A map in which the keys are the attributes that are checked in an entry and the values are the weight of the attribute.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>weightsMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>occurrenceMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>occurrenceMap</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>weightsMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>weightsMap</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Checks whether the provided atribute is present in the entry.s
   *
   * @param entry     the entry being procesed
   * @param attribute the attribute being detected
   * @return true if the attribute is present, false otherwise
   */</comment>
  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * The configuration key being detected.
   *
   * @return the key as a string
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Calculates the attribute value based on the two maps.
   *
   * @return a map with a single element, the key is the configuration key, the value is the detected attribute value
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detect</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Calculating the most probable attribute/value ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>selectedEntry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>selectedEntry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name>selectedEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Initial attribute / value entry: {}"</literal></expr></argument>, <argument><expr><name>selectedEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>

      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>selectedEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing potential attribute / value entry from : [{}] to: [{}]"</literal></expr></argument>, <argument><expr><name>selectedEntry</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selectedEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// check whether the selected entry is valid (has occured in the sample result set)</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>detectedVal</name> <init>= <expr><literal type="string">"N/A"</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>selectedEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>detectedVal</name> <operator>=</operator> <call><name><name>selectedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to detect attribute or attribute value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detected attribute or value: [{}]"</literal></expr></argument>, <argument><expr><name>detectedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>detectedMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name>detectedProperty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>detectedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>detectedMap</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Collects the information about the attribute to be detected from the provided entry.
   *
   * @param entry a result entry returned by a search operation
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>collect</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Collecting ldap attributes/values form entry with dn: [{}]"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>attributeValue</name> <range>: <expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>applies</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

        <decl_stmt><decl><type><name>Integer</name></type> <name>cnt</name> <init>= <expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>cnt</name> <operator>+</operator> <call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>attributeValue</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Collected potential name attr: {}, count: {}"</literal></expr></argument>, <argument><expr><name>attributeValue</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The result entry doesn't contain the attribute: [{}]"</literal></expr></argument>, <argument><expr><name>attributeValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserGroupMemberAttrDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserGroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..b34a2b2bfe</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserGroupMemberAttrDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">64</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>

<class><specifier>public</specifier> class <name>UserGroupMemberAttrDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{

  <enum><specifier>private</specifier> enum <name>UserGroupMemberAttr</name> <block>{

    <decl><name>MEMBER_OF</name><argument_list>(<argument><expr><literal type="string">"memberOf"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,
    <decl><name>IS_MEMBER_OF</name><argument_list>(<argument><expr><literal type="string">"ismemberOf"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>attrName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>UserGroupMemberAttr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrName</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>attrName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>attrName</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>UserGroupMemberAttrDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>UserGroupMemberAttr</name></type> <name>userGroupMemberAttr</name> <range>: <expr><call><name><name>UserGroupMemberAttr</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>userGroupMemberAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>userGroupMemberAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>userGroupMemberAttr</name><operator>.</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>containsAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_GROUP_MEMBER_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserNameAttrDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserNameAttrDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..dec445923a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserNameAttrDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">71</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>UserNameAttrDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UserNameAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>UserNameAttrs</name> <block>{
    <decl><name>SAM_ACCOUNT_NAME</name><argument_list>(<argument><expr><literal type="string">"sAMAccountName"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></decl>,
    <decl><name>UID</name><argument_list>(<argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>,
    <decl><name>CN</name><argument_list>(<argument><expr><literal type="string">"cn"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>attrName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>UserNameAttrs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrName</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>attrName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>attrName</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>UserNameAttrDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>UserNameAttrs</name></type> <name>nameAttr</name> <range>: <expr><call><name><name>UserNameAttrs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>nameAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>nameAttr</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nameAttr</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Checking for attribute  [{}] in entry [{}]"</literal></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>containsAttribute</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserObjectClassDetector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserObjectClassDetector</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..bf2f5b8a76</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>UserObjectClassDetector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">69</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>UserObjectClassDetector</name> <super_list><extends>extends <super><name>OccurrenceAndWeightBasedDetector</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UserObjectClassDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>ObjectClassValue</name> <block>{
    <decl><name>PERSON</name><argument_list>(<argument><expr><literal type="string">"person"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,
    <decl><name>POSIX_ACCOUNT</name><argument_list>(<argument><expr><literal type="string">"posixAccount"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ocVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>weight</name></decl>;</decl_stmt>

    <constructor><name>ObjectClassValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>weght</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ocVal</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weght</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Integer</name></type> <name>weight</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>weight</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>ocVal</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>ocVal</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></enum>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>UserObjectClassDetector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>ObjectClassValue</name></type> <name>ocVal</name> <range>: <expr><call><name><name>ObjectClassValue</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>occurrenceMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>ocVal</name><operator>.</operator><name>ocVal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>weightsMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>ocVal</name><operator>.</operator><name>ocVal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ocVal</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>boolean</name></type> <name>applies</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Checking for object class [{}] in entry [{}]"</literal></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getDn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>hasObjectClass</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>detectedProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>AmbariConfigurationDAO</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>AmbariConfigurationDAO</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..83293efb82</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>AmbariConfigurationDAO</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">89</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityExistsException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityNotFoundException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>TypedQuery</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>AmbariConfigurationEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>Transactional</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DAO dealing with ambari configuration related JPA operations.
 * Operations delegate to the JPA provider implementation of CRUD operations.
 */</comment>

<class><annotation>@<name>Singleton</name></annotation>
<specifier>public</specifier> class <name>AmbariConfigurationDAO</name> <super_list><extends>extends <super><name><name>CrudDAO</name><argument_list type="generic">&lt;<argument><name>AmbariConfigurationEntity</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOGGER</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AmbariConfigurationDAO</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><annotation>@<name>Inject</name></annotation>
  <specifier>public</specifier> <name>AmbariConfigurationDAO</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Transactional</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>AmbariConfigurationEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// make  sure only one LDAP config entry exists</comment>
    <if_stmt><if>if <condition>(<expr><literal type="string">"ldap-configuration"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>entity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>ldapConfigEntity</name> <init>= <expr><call><name>getLdapConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ldapConfigEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Only one LDAP configuration entry can exist!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>EntityExistsException</name><argument_list>(<argument><expr><literal type="string">"LDAP configuration entity already exists!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><annotation>@<name>Transactional</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>AmbariConfigurationEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>entity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>findByPK</name><argument_list>(<argument><expr><call><name><name>entity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"The entity with id [ %s ] is not found"</literal></expr></argument>, <argument><expr><call><name><name>entity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>EntityNotFoundException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// updating the existing entity</comment>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entityManagerProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the LDAP configuration from the database.
   *
   * @return the configuration entity
   */</comment>
  <function><annotation>@<name>Transactional</name></annotation>
  <type><specifier>public</specifier> <name>AmbariConfigurationEntity</name></type> <name>getLdapConfiguration</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Looking up the LDAP configuration ...."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>ldapConfigEntity</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>TypedQuery</name><argument_list type="generic">&lt;<argument><name>AmbariConfigurationEntity</name></argument>&gt;</argument_list></name></type> <name>query</name> <init>= <expr><call><name><name>entityManagerProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createNamedQuery</name><argument_list>(
      <argument><expr><literal type="string">"AmbariConfigurationEntity.findByType"</literal></expr></argument>, <argument><expr><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"typeName"</literal></expr></argument>, <argument><expr><literal type="string">"ldap-configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ldapConfigEntity</name> <operator>=</operator> <call><name><name>daoUtils</name><operator>.</operator><name>selectSingle</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Returned entity: {} "</literal></expr></argument>, <argument><expr><name>ldapConfigEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ldapConfigEntity</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>DaoUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>DaoUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cd3faf087c</name><operator>..</operator><name>e6112ad05d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>DaoUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>dao</name><operator>/</operator><name><name>DaoUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name></name>;</package>
 
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>DBAccessor</name><operator>.</operator><name>DbType</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>criteria</name><operator>.</operator><name>CriteriaBuilder</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>criteria</name><operator>.</operator><name>CriteriaQuery</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>criteria</name><operator>.</operator><name>Root</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>DBAccessor</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>
 
 <class><annotation>@<name>Singleton</name></annotation>
 <specifier>public</specifier> class <name>DaoUtils</name> <block>{
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <type><specifier>private</specifier> <name>DBAccessor</name></type> <name>dbAccessor</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>DbType</name></type> <name>getDbType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>dbAccessor</name><operator>.</operator><name>getDbType</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>selectAll</name><parameter_list>(<parameter><decl><type><name>EntityManager</name></type> <name>entityManager</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>entityClass</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>CriteriaBuilder</name></type> <name>criteriaBuilder</name> <init>= <expr><call><name><name>entityManager</name><operator>.</operator><name>getCriteriaBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DaoUtils</name> <block>{
 
   <expr><specifier>public</specifier> <name>void</name> <call><name>setParameters</name><argument_list>(<argument><expr><name>Query</name> <name>query</name></expr></argument>, <argument><expr><name>Object</name><operator>...</operator> <name>parameters</name></expr></argument>)</argument_list></call> <block>{
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parameters</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr>
   }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..c9f4695469</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>AmbariConfigurationEntity</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">70</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>CascadeType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>JoinColumn</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>MapsId</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>NamedQueries</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>NamedQuery</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>OneToOne</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Table</name></name>;</import>

<class><annotation>@<name>Entity</name></annotation>
<annotation>@<name>Table</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"ambari_configuration"</literal></expr></argument>)</argument_list></annotation>
<annotation>@<name>NamedQueries</name><argument_list>(<argument><expr><block>{
  <annotation>@<name>NamedQuery</name><argument_list>(
    <argument><expr><name>name</name> <operator>=</operator> <literal type="string">"AmbariConfigurationEntity.findByType"</literal></expr></argument>,
    <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select ace from AmbariConfigurationEntity ace where ace.configurationBaseEntity.type = :typeName"</literal></expr></argument>)</argument_list></annotation>
}</block></expr></argument>)</argument_list></annotation>

<specifier>public</specifier> class <name>AmbariConfigurationEntity</name> <block>{

  <decl_stmt><decl><annotation>@<name>Id</name></annotation>
  <annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"id"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>Long</name></type> <name>id</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>OneToOne</name><argument_list>(<argument><expr><name>cascade</name> <operator>=</operator> <name><name>CascadeType</name><operator>.</operator><name>ALL</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>MapsId</name></annotation>
  <annotation>@<name>JoinColumn</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"id"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>ConfigurationBaseEntity</name></type> <name>configurationBaseEntity</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>Long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>id</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>ConfigurationBaseEntity</name></type> <name>getConfigurationBaseEntity</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>configurationBaseEntity</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setConfigurationBaseEntity</name><parameter_list>(<parameter><decl><type><name>ConfigurationBaseEntity</name></type> <name>configurationBaseEntity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configurationBaseEntity</name></name> <operator>=</operator> <name>configurationBaseEntity</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"AmbariConfigurationEntity{"</literal> <operator>+</operator>
      <literal type="string">"id="</literal> <operator>+</operator> <name>id</name> <operator>+</operator>
      <literal type="string">", configurationBaseEntity="</literal> <operator>+</operator> <name>configurationBaseEntity</name> <operator>+</operator>
      <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>ConfigurationBaseEntity</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>ConfigurationBaseEntity</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..9ad30d7d1a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name>entities</name><operator>/</operator><name><name>ConfigurationBaseEntity</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">159</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Entity</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>GeneratedValue</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>GenerationType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>TableGenerator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>EqualsBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>

<class><annotation>@<name>Table</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"configuration_base"</literal></expr></argument>)</argument_list></annotation>
<annotation>@<name>TableGenerator</name><argument_list>(
  <argument><expr><name>name</name> <operator>=</operator> <literal type="string">"configuration_id_generator"</literal></expr></argument>,
  <argument><expr><name>table</name> <operator>=</operator> <literal type="string">"ambari_sequences"</literal></expr></argument>,
  <argument><expr><name>pkColumnName</name> <operator>=</operator> <literal type="string">"sequence_name"</literal></expr></argument>,
  <argument><expr><name>valueColumnName</name> <operator>=</operator> <literal type="string">"sequence_value"</literal></expr></argument>,
  <argument><expr><name>pkColumnValue</name> <operator>=</operator> <literal type="string">"configuration_id_seq"</literal></expr></argument>,
  <argument><expr><name>initialValue</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>
)</argument_list></annotation>
<annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> class <name>ConfigurationBaseEntity</name> <block>{

  <decl_stmt><decl><annotation>@<name>Id</name></annotation>
  <annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"id"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>GeneratedValue</name><argument_list>(<argument><expr><name>strategy</name> <operator>=</operator> <name><name>GenerationType</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>generator</name> <operator>=</operator> <literal type="string">"configuration_id_generator"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>Long</name></type> <name>id</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"version"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>Integer</name></type> <name>version</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"version_tag"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>String</name></type> <name>versionTag</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"type"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"data"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>String</name></type> <name>configurationData</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"attributes"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>String</name></type> <name>configurationAttributes</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Column</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"create_timestamp"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>Long</name></type> <name>createTimestamp</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>Long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>id</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>version</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getVersionTag</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>versionTag</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersionTag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>versionTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>versionTag</name></name> <operator>=</operator> <name>versionTag</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>type</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getConfigurationData</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>configurationData</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setConfigurationData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>configurationData</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configurationData</name></name> <operator>=</operator> <name>configurationData</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getConfigurationAttributes</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>configurationAttributes</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setConfigurationAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>configurationAttributes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configurationAttributes</name></name> <operator>=</operator> <name>configurationAttributes</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Long</name></type> <name>getCreateTimestamp</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>createTimestamp</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCreateTimestamp</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>createTimestamp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createTimestamp</name></name> <operator>=</operator> <name>createTimestamp</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"ConfigurationBaseEntity{"</literal> <operator>+</operator>
      <literal type="string">"id="</literal> <operator>+</operator> <name>id</name> <operator>+</operator>
      <literal type="string">", version="</literal> <operator>+</operator> <name>version</name> <operator>+</operator>
      <literal type="string">", versionTag='"</literal> <operator>+</operator> <name>versionTag</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
      <literal type="string">", type='"</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
      <literal type="string">", configurationData='"</literal> <operator>+</operator> <name>configurationData</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
      <literal type="string">", configurationAttributes='"</literal> <operator>+</operator> <name>configurationAttributes</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
      <literal type="string">", createTimestamp="</literal> <operator>+</operator> <name>createTimestamp</name> <operator>+</operator>
      <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>ConfigurationBaseEntity</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>ConfigurationBaseEntity</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>EqualsBuilder</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>versionTag</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>versionTag</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationData</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>configurationData</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationAttributes</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>configurationAttributes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>createTimestamp</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>createTimestamp</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>isEquals</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>versionTag</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationData</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>configurationAttributes</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>createTimestamp</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>RoleAuthorization</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>RoleAuthorization</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cd35c2c991</name><operator>..</operator><literal type="number">3c50628a55</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>RoleAuthorization</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>RoleAuthorization</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> enum <name>RoleAuthorization</name> <block>{
   <expr><call><name>AMBARI_MANAGE_VIEWS</name><argument_list>(<argument><expr><literal type="string">"AMBARI.MANAGE_VIEWS"</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>AMBARI_RENAME_CLUSTER</name><argument_list>(<argument><expr><literal type="string">"AMBARI.RENAME_CLUSTER"</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>AMBARI_RUN_CUSTOM_COMMAND</name><argument_list>(<argument><expr><literal type="string">"AMBARI.RUN_CUSTOM_COMMAND"</literal></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>AMBARI_MANAGE_CONFIGURATION</name><argument_list>(<argument><expr><literal type="string">"AMBARI.MANAGE_CONFIGURATION"</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>CLUSTER_MANAGE_CREDENTIALS</name><argument_list>(<argument><expr><literal type="string">"CLUSTER.MANAGE_CREDENTIALS"</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>CLUSTER_MODIFY_CONFIGS</name><argument_list>(<argument><expr><literal type="string">"CLUSTER.MODIFY_CONFIGS"</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>CLUSTER_MANAGE_CONFIG_GROUPS</name><argument_list>(<argument><expr><literal type="string">"CLUSTER.MANAGE_CONFIG_GROUPS"</literal></expr></argument>)</argument_list></call></expr>,
@@ <expr><operator>-</operator><literal type="number">84</literal></expr>,<expr><literal type="number">58</literal> <operator>+</operator><literal type="number">85</literal></expr>,<expr><literal type="number">58</literal> @@ <specifier>public</specifier> enum <name>RoleAuthorization</name> <block>{
   <expr><call><name>VIEW_USE</name><argument_list>(<argument><expr><literal type="string">"VIEW.USE"</literal></expr></argument>)</argument_list></call></expr>;
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleAuthorization</name></argument>&gt;</argument_list></name> <name>AUTHORIZATIONS_VIEW_CLUSTER</name> <operator>=</operator> <call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(
      <argument><expr><name>CLUSTER_VIEW_STATUS_INFO</name></expr></argument>,
      <argument><expr><name>CLUSTER_VIEW_ALERTS</name></expr></argument>,
      <argument><expr><name>CLUSTER_VIEW_CONFIGS</name></expr></argument>,
      <argument><expr><name>CLUSTER_VIEW_METRICS</name></expr></argument>,
      <argument><expr><name>CLUSTER_VIEW_STACK_DETAILS</name></expr></argument>,
      <argument><expr><name>CLUSTER_MODIFY_CONFIGS</name></expr></argument>,
      <argument><expr><name>CLUSTER_MANAGE_CONFIG_GROUPS</name></expr></argument>,
      <argument><expr><name>CLUSTER_TOGGLE_ALERTS</name></expr></argument>,
      <argument><expr><name>CLUSTER_TOGGLE_KERBEROS</name></expr></argument>,
      <argument><expr><name>CLUSTER_UPGRADE_DOWNGRADE_STACK</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>CLUSTER_VIEW_STATUS_INFO</name></expr>,
    <expr><name>CLUSTER_VIEW_ALERTS</name></expr>,
    <expr><name>CLUSTER_VIEW_CONFIGS</name></expr>,
    <expr><name>CLUSTER_VIEW_METRICS</name></expr>,
    <expr><name>CLUSTER_VIEW_STACK_DETAILS</name></expr>,
    <expr><name>CLUSTER_MODIFY_CONFIGS</name></expr>,
    <expr><name>CLUSTER_MANAGE_CONFIG_GROUPS</name></expr>,
    <expr><name>CLUSTER_TOGGLE_ALERTS</name></expr>,
    <expr><name>CLUSTER_TOGGLE_KERBEROS</name></expr>,
    <expr><name>CLUSTER_UPGRADE_DOWNGRADE_STACK</name></expr>)</block></expr>;
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleAuthorization</name></argument>&gt;</argument_list></name> <name>AUTHORIZATIONS_UPDATE_CLUSTER</name> <operator>=</operator> <call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(
      <argument><expr><name>CLUSTER_TOGGLE_ALERTS</name></expr></argument>,
      <argument><expr><name>CLUSTER_TOGGLE_KERBEROS</name></expr></argument>,
      <argument><expr><name>CLUSTER_UPGRADE_DOWNGRADE_STACK</name></expr></argument>,
      <argument><expr><name>CLUSTER_MODIFY_CONFIGS</name></expr></argument>,
      <argument><expr><name>CLUSTER_MANAGE_AUTO_START</name></expr></argument>,
      <argument><expr><name>SERVICE_MODIFY_CONFIGS</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>CLUSTER_TOGGLE_ALERTS</name></expr>,
    <expr><name>CLUSTER_TOGGLE_KERBEROS</name></expr>,
    <expr><name>CLUSTER_UPGRADE_DOWNGRADE_STACK</name></expr>,
    <expr><name>CLUSTER_MODIFY_CONFIGS</name></expr>,
    <expr><name>CLUSTER_MANAGE_AUTO_START</name></expr>,
    <expr><name>SERVICE_MODIFY_CONFIGS</name></expr>)</block></expr>;</expr_stmt>
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleAuthorization</name></argument>&gt;</argument_list></name></type> <name>AUTHORIZATIONS_VIEW_SERVICE</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(
      <argument><expr><name>SERVICE_VIEW_ALERTS</name></expr></argument>,
      <argument><expr><name>SERVICE_VIEW_CONFIGS</name></expr></argument>,
      <argument><expr><name>SERVICE_VIEW_METRICS</name></expr></argument>,
      <argument><expr><name>SERVICE_VIEW_STATUS_INFO</name></expr></argument>,
      <argument><expr><name>SERVICE_COMPARE_CONFIGS</name></expr></argument>,
      <argument><expr><name>SERVICE_ADD_DELETE_SERVICES</name></expr></argument>,
      <argument><expr><name>SERVICE_DECOMMISSION_RECOMMISSION</name></expr></argument>,
      <argument><expr><name>SERVICE_ENABLE_HA</name></expr></argument>,
      <argument><expr><name>SERVICE_MANAGE_CONFIG_GROUPS</name></expr></argument>,
      <argument><expr><name>SERVICE_MODIFY_CONFIGS</name></expr></argument>,
      <argument><expr><name>SERVICE_START_STOP</name></expr></argument>,
      <argument><expr><name>SERVICE_TOGGLE_MAINTENANCE</name></expr></argument>,
      <argument><expr><name>SERVICE_TOGGLE_ALERTS</name></expr></argument>,
      <argument><expr><name>SERVICE_MOVE</name></expr></argument>,
      <argument><expr><name>SERVICE_RUN_CUSTOM_COMMAND</name></expr></argument>,
      <argument><expr><name>SERVICE_RUN_SERVICE_CHECK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>SERVICE_VIEW_ALERTS</name></expr><operator>,</operator>
    <expr><name>SERVICE_VIEW_CONFIGS</name></expr><operator>,</operator>
    <expr><name>SERVICE_VIEW_METRICS</name></expr><operator>,</operator>
    <expr><name>SERVICE_VIEW_STATUS_INFO</name></expr><operator>,</operator>
    <expr><name>SERVICE_COMPARE_CONFIGS</name></expr><operator>,</operator>
    <expr><name>SERVICE_ADD_DELETE_SERVICES</name></expr><operator>,</operator>
    <expr><name>SERVICE_DECOMMISSION_RECOMMISSION</name></expr><operator>,</operator>
    <expr><name>SERVICE_ENABLE_HA</name></expr><operator>,</operator>
    <expr><name>SERVICE_MANAGE_CONFIG_GROUPS</name></expr><operator>,</operator>
    <expr><name>SERVICE_MODIFY_CONFIGS</name></expr><operator>,</operator>
    <expr><name>SERVICE_START_STOP</name></expr><operator>,</operator>
    <expr><name>SERVICE_TOGGLE_MAINTENANCE</name></expr><operator>,</operator>
    <expr><name>SERVICE_TOGGLE_ALERTS</name></expr><operator>,</operator>
    <expr><name>SERVICE_MOVE</name></expr><operator>,</operator>
    <expr><name>SERVICE_RUN_CUSTOM_COMMAND</name></expr><operator>,</operator>
    <expr><name>SERVICE_RUN_SERVICE_CHECK</name></expr></expr_stmt>)</block>;</class>
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleAuthorization</name></argument>&gt;</argument_list></name></type> <name>AUTHORIZATIONS_UPDATE_SERVICE</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(
      <argument><expr><name>SERVICE_ADD_DELETE_SERVICES</name></expr></argument>,
      <argument><expr><name>SERVICE_DECOMMISSION_RECOMMISSION</name></expr></argument>,
      <argument><expr><name>SERVICE_ENABLE_HA</name></expr></argument>,
      <argument><expr><name>SERVICE_MANAGE_CONFIG_GROUPS</name></expr></argument>,
      <argument><expr><name>SERVICE_MODIFY_CONFIGS</name></expr></argument>,
      <argument><expr><name>SERVICE_START_STOP</name></expr></argument>,
      <argument><expr><name>SERVICE_TOGGLE_MAINTENANCE</name></expr></argument>,
      <argument><expr><name>SERVICE_TOGGLE_ALERTS</name></expr></argument>,
      <argument><expr><name>SERVICE_MOVE</name></expr></argument>,
      <argument><expr><name>SERVICE_RUN_CUSTOM_COMMAND</name></expr></argument>,
      <argument><expr><name>SERVICE_RUN_SERVICE_CHECK</name></expr></argument>,
      <argument><expr><name>SERVICE_MANAGE_ALERTS</name></expr></argument>,
      <argument><expr><name>SERVICE_MANAGE_AUTO_START</name></expr></argument>,
      <argument><expr><name>SERVICE_SET_SERVICE_USERS_GROUPS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>SERVICE_ADD_DELETE_SERVICES</name></expr><operator>,</operator>
    <expr><name>SERVICE_DECOMMISSION_RECOMMISSION</name></expr><operator>,</operator>
    <expr><name>SERVICE_ENABLE_HA</name></expr><operator>,</operator>
    <expr><name>SERVICE_MANAGE_CONFIG_GROUPS</name></expr><operator>,</operator>
    <expr><name>SERVICE_MODIFY_CONFIGS</name></expr><operator>,</operator>
    <expr><name>SERVICE_START_STOP</name></expr><operator>,</operator>
    <expr><name>SERVICE_TOGGLE_MAINTENANCE</name></expr><operator>,</operator>
    <expr><name>SERVICE_TOGGLE_ALERTS</name></expr><operator>,</operator>
    <expr><name>SERVICE_MOVE</name></expr><operator>,</operator>
    <expr><name>SERVICE_RUN_CUSTOM_COMMAND</name></expr><operator>,</operator>
    <expr><name>SERVICE_RUN_SERVICE_CHECK</name></expr><operator>,</operator>
    <expr><name>SERVICE_MANAGE_ALERTS</name></expr><operator>,</operator>
    <expr><name>SERVICE_MANAGE_AUTO_START</name></expr><operator>,</operator>
    <expr><name>SERVICE_SET_SERVICE_USERS_GROUPS</name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> enum <name>RoleAuthorization</name> <block>{
   <comment type="block" format="javadoc">/**
    * Safely translates a role authorization Id to a RoleAuthorization
    *
   * @param authenticationId  an authentication id
   * @param authenticationId an authentication id
    * @return a RoleAuthorization or null if no translation can be made
    */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>RoleAuthorization</name> <call><name>translate</name><argument_list>(<argument><expr><name>String</name> <name>authenticationId</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Derby</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Derby</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<name>index</name> <literal type="number">015ec0a9e7</literal><operator>..</operator><literal type="number">2b4d15cd37</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Derby</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Derby</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
@@ <operator>-</operator><literal type="number">84</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr>,<expr><literal type="number">23</literal> @@ <name>CREATE</name> <name>TABLE</name> <call><name>clusterconfig</name> <argument_list>(
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_tag</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>version_tag</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>cluster_id</name></expr></argument>)</argument_list></call></expr></argument>,
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_version</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
<expr><name>CREATE</name> <name>TABLE</name> <call><name>configuration_base</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version_tag</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>type</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>data</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>attributes</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>create_timestamp</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_configuration_base</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;

<expr><name>CREATE</name> <name>TABLE</name> <call><name>ambari_configuration</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_ambari_configuration</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>FK_ambari_conf_conf_base</name> <name>FOREIGN</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <name>REFERENCES</name> <call><name>configuration_base</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;

 <expr><name>CREATE</name> <name>TABLE</name> <call><name>serviceconfig</name> <argument_list>(
   <argument><expr><name>service_config_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
   <argument><expr><name>cluster_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">1147</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1164</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name> <argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call>
   <name>union</name> <name>all</name>
   <name>select</name> <literal type="char">'servicecomponent_version_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name>
   <name>union</name> <name>all</name>
  <name>select</name> <literal type="char">'configuration_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name>
  <name>union</name> <name>all</name>
   <name>select</name> <literal type="char">'hostcomponentdesiredstate_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name></expr></argument>;
 
 
<argument>@@ <expr><operator>-</operator><literal type="number">1247</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1266</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>roleauthorization</name><argument_list>(<argument><expr><name>authorization_id</name></expr></argument>, <argument><expr><name>authorization_name</name></expr></argument>)</argument_list></call>
   <name>SELECT</name> <literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal></expr></argument>, <argument><expr><literal type="char">'Create new clusters'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.RENAME_CLUSTER'</literal></expr></argument>, <argument><expr><literal type="char">'Rename clusters'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_SETTINGS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage settings'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
  <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal></expr></argument>, <argument><expr><literal type="char">'Manage ambari configurations'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_USERS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage users'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_GROUPS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage groups'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_VIEWS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage Ambari Views'</literal> <name>FROM</name> <name><name>SYSIBM</name><operator>.</operator><name>SYSDUMMY1</name></name> <name>UNION</name> <name>ALL</name>
@@ <operator>-</operator><literal type="number">1448</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1468</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>permission_roleauthorization</name><argument_list>(<argument><expr><name>permission_id</name></expr></argument>, <argument><expr><name>authorization_id</name></expr></argument>)</argument_list></call>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.RENAME_CLUSTER'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_SETTINGS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
  <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_USERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_GROUPS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_VIEWS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal>  <name>UNION</name> <name>ALL</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>MySQL</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>MySQL</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<name>index</name> <name>eb9ca96465</name><operator>..</operator><name>b48720512e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>MySQL</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>MySQL</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
@@ <operator>-</operator><literal type="number">104</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">104</literal></expr></argument>,<argument><expr><literal type="number">23</literal> @@ <name>CREATE</name> <name>TABLE</name> <call><name>clusterconfig</name> <argument_list>(
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_tag</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version_tag</name></expr></argument>)</argument_list></call></expr></argument>,
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_version</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>configuration_base</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version_tag</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>type</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>data</name> <name>LONGTEXT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>attributes</name> <name>LONGTEXT</name></expr></argument>,
  <argument><expr><name>create_timestamp</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_configuration_base</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>ambari_configuration</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_ambari_configuration</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>FK_ambari_conf_conf_base</name> <name>FOREIGN</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <name>REFERENCES</name> <call><name>configuration_base</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

 <argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>serviceconfig</name> <argument_list>(
   <argument><expr><name>service_config_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
   <argument><expr><name>cluster_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">1111</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1128</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>VALUES</name>
   <argument_list>(<argument><expr><literal type="char">'remote_cluster_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
   <argument><expr><operator>(</operator><literal type="char">'remote_cluster_service_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
   <argument><expr><operator>(</operator><literal type="char">'servicecomponent_version_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
  <argument><expr><operator>(</operator><literal type="char">'configuration_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
   <argument><expr><operator>(</operator><literal type="char">'hostcomponentdesiredstate_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>;
 
 <argument><expr><name>INSERT</name> <name>INTO</name> <call><name>adminresourcetype</name> <argument_list>(<argument><expr><name>resource_type_id</name></expr></argument>, <argument><expr><name>resource_type_name</name></expr></argument>)</argument_list></call> <name>VALUES</name>
@@ <operator>-</operator><literal type="number">1195</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1213</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>roleauthorization</name><argument_list>(<argument><expr><name>authorization_id</name></expr></argument>, <argument><expr><name>authorization_name</name></expr></argument>)</argument_list></call>
   <name>SELECT</name> <literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal></expr></argument>, <argument><expr><literal type="char">'Create new clusters'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.RENAME_CLUSTER'</literal></expr></argument>, <argument><expr><literal type="char">'Rename clusters'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_SETTINGS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage administrative settings'</literal> <name>UNION</name> <name>ALL</name>
  <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal></expr></argument>, <argument><expr><literal type="char">'Manage ambari configuration'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_USERS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage users'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_GROUPS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage groups'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_VIEWS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage Ambari Views'</literal> <name>UNION</name> <name>ALL</name>
@@ <operator>-</operator><literal type="number">1400</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1419</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>permission_roleauthorization</name><argument_list>(<argument><expr><name>permission_id</name></expr></argument>, <argument><expr><name>authorization_id</name></expr></argument>)</argument_list></call>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.RENAME_CLUSTER'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_SETTINGS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
  <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_USERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_GROUPS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
   <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_VIEWS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Oracle</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Oracle</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<name>index</name> <name>dac3f28501</name><operator>..</operator><name>bb87618992</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Oracle</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>Oracle</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
@@ <operator>-</operator><literal type="number">84</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr></argument>,<argument><expr><literal type="number">23</literal> @@ <name>CREATE</name> <name>TABLE</name> <call><name>clusterconfig</name> <argument_list>(
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_tag</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version_tag</name></expr></argument>)</argument_list></call></expr></argument>,
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_version</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>configuration_base</name> <argument_list>(
  <argument><expr><name>id</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version_tag</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>type</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>data</name> <name>CLOB</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>attributes</name> <name>CLOB</name></expr></argument>,
  <argument><expr><name>create_timestamp</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_configuration_base</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>ambari_configuration</name> <argument_list>(
  <argument><expr><name>id</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_ambari_configuration</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>FK_ambari_conf_conf_base</name> <name>FOREIGN</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <name>REFERENCES</name> <call><name>configuration_base</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

 <argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>serviceconfig</name> <argument_list>(
   <argument><expr><name>service_config_id</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
   <argument><expr><name>cluster_id</name> <call><name>NUMBER</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">1090</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1107</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>values</name> <argument_list>(<argument><expr><literal type="char">'ambari_oper
 INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>remote_cluster_id_seq</name><literal type="char">', 0);
 INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>remote_cluster_service_id_seq</name><literal type="char">', 0);
 INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>servicecomponent_version_id_seq</name><literal type="char">', 0);
INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>configuration_id_seq</name><literal type="char">', 0);
 INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>hostcomponentdesiredstate_id_seq</name><literal type="char">', 0);
 
 INSERT INTO metainfo("metainfo_key", "metainfo_value") values ('</literal><name>version</name><literal type="char">', '</literal><name>$</name><block>{<expr><name>ambariSchemaVersion</name></expr>}</block><literal type="char">');
@@ -1193,6 +1211,7 @@ INSERT INTO roleauthorization(authorization_id, authorization_name)
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>ADD_DELETE_CLUSTERS</name></name><literal type="char">', '</literal><name>Create</name> <operator>new</operator> <name>clusters</name><literal type="char">' FROM dual UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>RENAME_CLUSTER</name></name><literal type="char">', '</literal><name>Rename</name> <name>clusters</name><literal type="char">' FROM dual UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_SETTINGS</name></name><literal type="char">', '</literal><name>Manage</name> <name>settings</name><literal type="char">' FROM dual UNION ALL
  SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_CONFIGURATION</name></name><literal type="char">', '</literal><name>Manage</name> <name>ambari</name> <name>configuration</name><literal type="char">' FROM dual UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_USERS</name></name><literal type="char">', '</literal><name>Manage</name> <name>users</name><literal type="char">' FROM dual UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_GROUPS</name></name><literal type="char">', '</literal><name>Manage</name> <name>groups</name><literal type="char">' FROM dual UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_VIEWS</name></name><literal type="char">', '</literal><name>Manage</name> <name>Ambari</name> <name>Views</name><literal type="char">' FROM dual UNION ALL
@@ -1398,6 +1417,7 @@ INSERT INTO permission_roleauthorization(permission_id, authorization_id)
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>ADD_DELETE_CLUSTERS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>RENAME_CLUSTER</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_SETTINGS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
  SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_CONFIGURATION</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_USERS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_GROUPS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_VIEWS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
diff --git a/ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql b/ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql
index c321a38d7c..7c0611d580 100644
-- a/ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql
++ b/ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql
@@ -62,8 +62,26 @@ CREATE TABLE clusters (
   desired_cluster_state VARCHAR(255) NOT NULL,
   desired_stack_id BIGINT NOT NULL,
   CONSTRAINT PK_clusters PRIMARY KEY (cluster_id),
  CONSTRAINT FK_clusters_desired_stack_id FOREIGN KEY (desired_stack_id) REFERENCES stack(stack_id),
  CONSTRAINT FK_clusters_resource_id FOREIGN KEY (resource_id) REFERENCES adminresource(resource_id));
  CONSTRAINT FK_clusters_desired_stack_id FOREIGN KEY (desired_stack_id) REFERENCES stack (stack_id),
  CONSTRAINT FK_clusters_resource_id FOREIGN KEY (resource_id) REFERENCES adminresource (resource_id)
);

CREATE TABLE configuration_base (
  id BIGINT NOT NULL,
  version_tag VARCHAR(255) NOT NULL,
  version BIGINT NOT NULL,
  type VARCHAR(255) NOT NULL,
  data TEXT NOT NULL,
  attributes TEXT,
  create_timestamp BIGINT NOT NULL,
  CONSTRAINT PK_configuration_base PRIMARY KEY (id)
);

CREATE TABLE ambari_configuration (
  id BIGINT NOT NULL,
  CONSTRAINT PK_ambari_configuration PRIMARY KEY (id),
  CONSTRAINT FK_ambari_conf_conf_base FOREIGN KEY (id) REFERENCES configuration_base (id)
);
 
 CREATE TABLE clusterconfig (
   config_id BIGINT NOT NULL,
@@ -1091,6 +1109,7 @@ INSERT INTO ambari_sequences (sequence_name, sequence_value) VALUES
   ('</literal><name>remote_cluster_id_seq</name><literal type="char">', 0),
   ('</literal><name>remote_cluster_service_id_seq</name><literal type="char">', 0),
   ('</literal><name>servicecomponent_version_id_seq</name><literal type="char">', 0),
  ('</literal><name>configuration_id_seq</name><literal type="char">', 0),
   ('</literal><name>hostcomponentdesiredstate_id_seq</name><literal type="char">', 0);
 
 INSERT INTO adminresourcetype (resource_type_id, resource_type_name) VALUES
@@ -1175,6 +1194,7 @@ INSERT INTO roleauthorization(authorization_id, authorization_name)
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>ADD_DELETE_CLUSTERS</name></name><literal type="char">', '</literal><name>Create</name> <operator>new</operator> <name>clusters</name><literal type="char">' UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>RENAME_CLUSTER</name></name><literal type="char">', '</literal><name>Rename</name> <name>clusters</name><literal type="char">' UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_SETTINGS</name></name><literal type="char">', '</literal><name>Manage</name> <name>administrative</name> <name>settings</name><literal type="char">' UNION ALL
  SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_CONFIGURATION</name></name><literal type="char">', '</literal><name>Manage</name> <name>ambari</name> <name>configuration</name><literal type="char">' UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_USERS</name></name><literal type="char">', '</literal><name>Manage</name> <name>users</name><literal type="char">' UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_GROUPS</name></name><literal type="char">', '</literal><name>Manage</name> <name>groups</name><literal type="char">' UNION ALL
   SELECT '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_VIEWS</name></name><literal type="char">', '</literal><name>Manage</name> <name>Ambari</name> <name>Views</name><literal type="char">' UNION ALL
@@ -1380,6 +1400,7 @@ INSERT INTO permission_roleauthorization(permission_id, authorization_id)
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>ADD_DELETE_CLUSTERS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>RENAME_CLUSTER</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_SETTINGS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
  SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_CONFIGURATION</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_USERS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_GROUPS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
   SELECT permission_id, '</literal><name><name>AMBARI</name><operator>.</operator><name>MANAGE_VIEWS</name></name><literal type="char">' FROM adminpermission WHERE permission_name='</literal><name><name>AMBARI</name><operator>.</operator><name>ADMINISTRATOR</name></name><literal type="char">' UNION ALL
diff --git a/ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql b/ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql
index 8740ed7fdd..e240c5a33e 100644
-- a/ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql
++ b/ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql
@@ -83,6 +83,23 @@ CREATE TABLE clusterconfig (
   CONSTRAINT UQ_config_type_tag UNIQUE (cluster_id, type_name, version_tag),
   CONSTRAINT UQ_config_type_version UNIQUE (cluster_id, type_name, version));
 
CREATE TABLE configuration_base (
  id NUMERIC(19) NOT NULL,
  version_tag VARCHAR(255) NOT NULL,
  version NUMERIC(19) NOT NULL,
  type VARCHAR(255) NOT NULL,
  data TEXT NOT NULL,
  attributes TEXT,
  create_timestamp NUMERIC(19) NOT NULL,
  CONSTRAINT PK_configuration_base PRIMARY KEY (id)
);

CREATE TABLE ambari_configuration (
  id NUMERIC(19) NOT NULL,
  CONSTRAINT PK_ambari_configuration PRIMARY KEY (id),
  CONSTRAINT FK_ambari_conf_conf_base FOREIGN KEY (id) REFERENCES configuration_base (id)
);

 CREATE TABLE serviceconfig (
   service_config_id NUMERIC(19) NOT NULL,
   cluster_id NUMERIC(19) NOT NULL,
@@ -1089,6 +1106,7 @@ INSERT INTO ambari_sequences(sequence_name, sequence_value) values ('</literal><name>remote_clus</name>
 <name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>values</name> <argument_list>(<argument><expr><literal type="char">'remote_cluster_service_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
 <argument><expr><name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>values</name> <argument_list>(<argument><expr><literal type="char">'servicecomponent_version_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
 <argument><expr><name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>values</name> <argument_list>(<argument><expr><literal type="char">'hostcomponentdesiredstate_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
<argument><expr><name>INSERT</name> <name>INTO</name> <call><name>ambari_sequences</name><argument_list>(<argument><expr><name>sequence_name</name></expr></argument>, <argument><expr><name>sequence_value</name></expr></argument>)</argument_list></call> <call><name>values</name> <argument_list>(<argument><expr><literal type="char">'configuration_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
 
 <argument><expr><name>insert</name> <name>into</name> <call><name>adminresourcetype</name> <argument_list>(<argument><expr><name>resource_type_id</name></expr></argument>, <argument><expr><name>resource_type_name</name></expr></argument>)</argument_list></call>
   <name>select</name> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'AMBARI'</literal>
@@ <operator>-</operator><literal type="number">1189</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1207</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>insert</name> <name>into</name> <call><name>adminpermission</name><argument_list>(<argument><expr><name>permission_id</name></expr></argument>, <argument><expr><name>permission_name</name></expr></argument>, <argument><expr><name>resource_type_id</name></expr></argument>, <argument><expr><name>pe</name>
     <name>SELECT</name> <literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal></expr></argument>, <argument><expr><literal type="char">'Create new clusters'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.RENAME_CLUSTER'</literal></expr></argument>, <argument><expr><literal type="char">'Rename clusters'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_SETTINGS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage settings'</literal> <name>UNION</name> <name>ALL</name>
    <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal></expr></argument>, <argument><expr><literal type="char">'Manage ambari configuration'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_USERS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage users'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_GROUPS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage groups'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_VIEWS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage Ambari Views'</literal> <name>UNION</name> <name>ALL</name>
@@ <operator>-</operator><literal type="number">1394</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1413</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>insert</name> <name>into</name> <call><name>adminpermission</name><argument_list>(<argument><expr><name>permission_id</name></expr></argument>, <argument><expr><name>permission_name</name></expr></argument>, <argument><expr><name>resource_type_id</name></expr></argument>, <argument><expr><name>pe</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.RENAME_CLUSTER'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_SETTINGS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
    <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_USERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_GROUPS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_VIEWS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>SQLServer</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>SQLServer</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<name>index</name> <literal type="number">415589d3a8</literal><operator>..</operator><literal type="number">3839ee4dda</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>SQLServer</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>Ambari</name><operator>-</operator><name>DDL</name><operator>-</operator><name>SQLServer</name><operator>-</operator><name><name>CREATE</name><operator>.</operator><name>sql</name></name>
@@ <operator>-</operator><literal type="number">97</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr></argument>,<argument><expr><literal type="number">23</literal> @@ <name>CREATE</name> <name>TABLE</name> <call><name>clusterconfig</name> <argument_list>(
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_tag</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version_tag</name></expr></argument>)</argument_list></call></expr></argument>,
   <argument><expr><name>CONSTRAINT</name> <name>UQ_config_type_version</name> <call><name>UNIQUE</name> <argument_list>(<argument><expr><name>cluster_id</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
 
<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>configuration_base</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version_tag</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>version</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>type</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>data</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>attributes</name> <call><name>VARCHAR</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>create_timestamp</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_configuration_base</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

<argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>ambari_configuration</name> <argument_list>(
  <argument><expr><name>id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>PK_ambari_configuration</name> <name>PRIMARY</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
  <argument><expr><name>CONSTRAINT</name> <name>FK_ambari_conf_conf_base</name> <name>FOREIGN</name> <call><name>KEY</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <name>REFERENCES</name> <call><name>configuration_base</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>;

 <argument><expr><name>CREATE</name> <name>TABLE</name> <call><name>serviceconfig</name> <argument_list>(
   <argument><expr><name>service_config_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
   <argument><expr><name>cluster_id</name> <name>BIGINT</name> <name>NOT</name> <name>NULL</name></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">1114</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1131</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>BEGIN</name> <call><name>TRANSACTION</name>
     <argument_list>(<argument><expr><literal type="char">'remote_cluster_id_seq'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><operator>(</operator><literal type="char">'remote_cluster_service_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
     <argument><expr><operator>(</operator><literal type="char">'servicecomponent_version_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
    <argument><expr><operator>(</operator><literal type="char">'configuration_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
     <argument><expr><operator>(</operator><literal type="char">'hostcomponentdesiredstate_id_seq'</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>;
 
   <argument><expr><name>insert</name> <name>into</name> <call><name>adminresourcetype</name> <argument_list>(<argument><expr><name>resource_type_id</name></expr></argument>, <argument><expr><name>resource_type_name</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">1202</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1220</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>BEGIN</name> <name>TRANSACTION</name>
     <name>SELECT</name> <literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal></expr></argument>, <argument><expr><literal type="char">'Create new clusters'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.RENAME_CLUSTER'</literal></expr></argument>, <argument><expr><literal type="char">'Rename clusters'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_SETTINGS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage settings'</literal> <name>UNION</name> <name>ALL</name>
    <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal></expr></argument>, <argument><expr><literal type="char">'Manage ambari configuration'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_USERS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage users'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_GROUPS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage groups'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <literal type="char">'AMBARI.MANAGE_VIEWS'</literal></expr></argument>, <argument><expr><literal type="char">'Manage Ambari Views'</literal> <name>UNION</name> <name>ALL</name>
@@ <operator>-</operator><literal type="number">1407</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1426</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <name>BEGIN</name> <name>TRANSACTION</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.ADD_DELETE_CLUSTERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.RENAME_CLUSTER'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_SETTINGS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
    <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_CONFIGURATION'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_USERS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_GROUPS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
     <name>SELECT</name> <name>permission_id</name></expr></argument>, <argument><expr><literal type="char">'AMBARI.MANAGE_VIEWS'</literal> <name>FROM</name> <name>adminpermission</name> <name>WHERE</name> <name>permission_name</name><operator>=</operator><literal type="char">'AMBARI.ADMINISTRATOR'</literal> <name>UNION</name> <name>ALL</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>META</name><operator>-</operator><name>INF</name><operator>/</operator><name><name>persistence</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>META</name><operator>-</operator><name>INF</name><operator>/</operator><name><name>persistence</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>e4045ef536</name><operator>..</operator><literal type="number">0f8e964676</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>META</name><operator>-</operator><name>INF</name><operator>/</operator><name><name>persistence</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>META</name><operator>-</operator><name>INF</name><operator>/</operator><name><name>persistence</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">96</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@
     <operator>&lt;</operator>class<operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name><name>KerberosDescriptorEntity</name><argument_list type="generic">&lt;<argument><operator>/</operator>class</argument>&gt;</argument_list></name></name>
     <operator>&lt;</operator>class<operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name><name>RemoteAmbariClusterEntity</name><argument_list type="generic">&lt;<argument><operator>/</operator>class</argument>&gt;</argument_list></name></name>
     <operator>&lt;</operator>class<operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name><name>RemoteAmbariClusterServiceEntity</name><argument_list type="generic">&lt;<argument><operator>/</operator>class</argument>&gt;</argument_list></name></name>
    <operator>&lt;</operator>class<operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name><name>ConfigurationBaseEntity</name><argument_list type="generic">&lt;<argument><operator>/</operator>class</argument>&gt;</argument_list></name></name>
    <operator>&lt;</operator>class<operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name><name>AmbariConfigurationEntity</name><argument_list type="generic">&lt;<argument><operator>/</operator>class</argument>&gt;</argument_list></name></name>
 
     <operator>&lt;</operator><name>properties</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>property</name> <name>name</name><operator>=</operator><literal type="string">"eclipselink.cache.size.default"</literal> <name>value</name><operator>=</operator><literal type="string">"10000"</literal> <operator>/</operator><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommandTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommandTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>eaa471661d</name><operator>..</operator><literal type="number">959db1547b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommandTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>api</name><operator>/</operator><name>services</name><operator>/</operator><name>stackadvisor</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>StackAdvisorCommandTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>commands</name></name>;</package></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></block></expr>
 
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>commands</name><operator>.</operator><name>StackAdvisorCommand</name><operator>.</operator><name>LDAP_CONFIGURATION_PROPERTY</name></name>;</import></block></expr></expr_stmt>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>WebApplicationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>HttpHeaders</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>MediaType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>UriInfo</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>resources</name><operator>.</operator><name>ResourceInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>AmbariMetaInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>ResultStatus</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>StackAdvisorException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>StackAdvisorRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>api</name><operator>.</operator><name>services</name><operator>.</operator><name>stackadvisor</name><operator>.</operator><name>StackAdvisorRequest</name><operator>.</operator><name>StackAdvisorRequestBuilder</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>ServiceInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>codehaus</name><operator>.</operator><name>jackson</name><operator>.</operator><name>JsonNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>codehaus</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotate</name><operator>.</operator><name>JsonProperty</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>codehaus</name><operator>.</operator><name>jackson</name><operator>.</operator><name>map</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>codehaus</name><operator>.</operator><name>jackson</name><operator>.</operator><name>node</name><operator>.</operator><name>ArrayNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>codehaus</name><operator>.</operator><name>jackson</name><operator>.</operator><name>node</name><operator>.</operator><name>ObjectNode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>TemporaryFolder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>invocation</name><operator>.</operator><name>InvocationOnMock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>stubbing</name><operator>.</operator><name>Answer</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * StackAdvisorCommand unit tests.
  */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">265</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">197</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorCommandTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>stackVersions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testPopulateLdapConfig</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>File</name> <name>recommendationsDir</name> <operator>=</operator> <call><name><name>temp</name><operator>.</operator><name>newFolder</name></name><argument_list>(<argument><expr><literal type="string">"recommendationDir"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>recommendationsArtifactsLifetime</name> <init>= <expr><literal type="string">"1w"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requestId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StackAdvisorRunner</name></type> <name>saRunner</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>StackAdvisorRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariMetaInfo</name></type> <name>metaInfo</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariMetaInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStackParentVersions</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestStackAdvisorCommand</name></type> <name>command</name> <init>= <expr><call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestStackAdvisorCommand</name><argument_list>(<argument><expr><name>recommendationsDir</name></expr></argument>, <argument><expr><name>recommendationsArtifactsLifetime</name></expr></argument>,
      <argument><expr><name><name>ServiceInfo</name><operator>.</operator><name>ServiceAdvisorType</name><operator>.</operator><name>PYTHON</name></name></expr></argument>, <argument><expr><name>requestId</name></expr></argument>, <argument><expr><name>saRunner</name></expr></argument>, <argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StackAdvisorRequest</name></type> <name>request</name> <init>= <expr><call><name><name>StackAdvisorRequestBuilder</name><operator>.</operator><name>forStack</name></name><argument_list>(<argument><expr><literal type="string">"stackName"</literal></expr></argument>, <argument><expr><literal type="string">"stackVersion"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapConfigData</name> <init>= <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"authentication.ldap.primaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:33389"</literal></expr></argument>,
      <argument><expr><literal type="string">"authentication.ldap.secondaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:333"</literal></expr></argument>,
      <argument><expr><literal type="string">"authentication.ldap.baseDn"</literal></expr></argument>, <argument><expr><literal type="string">"c=ambari,dc=apache,dc=org"</literal></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedLdapConfigResult</name> <init>=  <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"items"</literal></expr></argument>,
      <argument><expr><call><name>list</name><argument_list>(
        <argument><expr><call><name>map</name><argument_list>(
          <argument><expr><literal type="string">"AmbariConfiguration"</literal></expr></argument>,
          <argument><expr><call><name>map</name><argument_list>(
            <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><call><name>list</name><argument_list>(<argument><expr><name>ldapConfigData</name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr></argument>
        )</argument_list></call></expr></argument>
      )</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>=
      <expr><call><name><name>Response</name><operator>.</operator><name>status</name></name><argument_list>(<argument><expr><call><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>OK</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><call><name>jsonString</name><argument_list>(<argument><expr><name>storedLdapConfigResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>handleRequest</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>servicesRootNode</name> <init>= <expr><call><name>json</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>populateLdapConfiguration</name></name><argument_list>(<argument><expr><operator>(</operator><name>ObjectNode</name><operator>)</operator><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>expectedLdapConfig</name> <init>= <expr><call><name>json</name><argument_list>(
      <argument><expr><call><name>map</name><argument_list>(<argument><expr><name>LDAP_CONFIGURATION_PROPERTY</name></expr></argument>, <argument><expr><name>ldapConfigData</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedLdapConfig</name></expr></argument>, <argument><expr><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }

  @<function><type><name>Test</name>
  <specifier>public</specifier> <name>void</name></type> <name>testPopulateLdapConfig_NoConfigs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>recommendationsDir</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>newFolder</name></name><argument_list>(<argument><expr><literal type="string">"recommendationDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>recommendationsArtifactsLifetime</name> <init>= <expr><literal type="string">"1w"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requestId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StackAdvisorRunner</name></type> <name>saRunner</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>StackAdvisorRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariMetaInfo</name></type> <name>metaInfo</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariMetaInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStackParentVersions</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestStackAdvisorCommand</name></type> <name>command</name> <init>= <expr><call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestStackAdvisorCommand</name><argument_list>(<argument><expr><name>recommendationsDir</name></expr></argument>, <argument><expr><name>recommendationsArtifactsLifetime</name></expr></argument>,
      <argument><expr><name><name>ServiceInfo</name><operator>.</operator><name>ServiceAdvisorType</name><operator>.</operator><name>PYTHON</name></name></expr></argument>, <argument><expr><name>requestId</name></expr></argument>, <argument><expr><name>saRunner</name></expr></argument>, <argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StackAdvisorRequest</name></type> <name>request</name> <init>= <expr><call><name><name>StackAdvisorRequestBuilder</name><operator>.</operator><name>forStack</name></name><argument_list>(<argument><expr><literal type="string">"stackName"</literal></expr></argument>, <argument><expr><literal type="string">"stackVersion"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedLdapConfigResult</name> <init>=  <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"items"</literal></expr></argument>, <argument><expr><call><name>list</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>=
      <expr><call><name><name>Response</name><operator>.</operator><name>status</name></name><argument_list>(<argument><expr><call><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>OK</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><call><name>jsonString</name><argument_list>(<argument><expr><name>storedLdapConfigResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>handleRequest</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>servicesRootNode</name> <init>= <expr><call><name>json</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>populateLdapConfiguration</name></name><argument_list>(<argument><expr><operator>(</operator><name>ObjectNode</name><operator>)</operator><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>expectedLdapConfig</name> <init>= <expr><call><name>json</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedLdapConfig</name></expr></argument>, <argument><expr><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * An ambigous ldap config that has two items in its data[] array should result in exception
   */</comment>
  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>StackAdvisorException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateLdapConfig_multipleConfigs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>recommendationsDir</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>newFolder</name></name><argument_list>(<argument><expr><literal type="string">"recommendationDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>recommendationsArtifactsLifetime</name> <init>= <expr><literal type="string">"1w"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requestId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StackAdvisorRunner</name></type> <name>saRunner</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>StackAdvisorRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariMetaInfo</name></type> <name>metaInfo</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariMetaInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStackParentVersions</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestStackAdvisorCommand</name></type> <name>command</name> <init>= <expr><call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestStackAdvisorCommand</name><argument_list>(<argument><expr><name>recommendationsDir</name></expr></argument>, <argument><expr><name>recommendationsArtifactsLifetime</name></expr></argument>,
        <argument><expr><name><name>ServiceInfo</name><operator>.</operator><name>ServiceAdvisorType</name><operator>.</operator><name>PYTHON</name></name></expr></argument>, <argument><expr><name>requestId</name></expr></argument>, <argument><expr><name>saRunner</name></expr></argument>, <argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StackAdvisorRequest</name></type> <name>request</name> <init>= <expr><call><name><name>StackAdvisorRequestBuilder</name><operator>.</operator><name>forStack</name></name><argument_list>(<argument><expr><literal type="string">"stackName"</literal></expr></argument>, <argument><expr><literal type="string">"stackVersion"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapConfigData</name> <init>= <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"authentication.ldap.primaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:33389"</literal></expr></argument>,
      <argument><expr><literal type="string">"authentication.ldap.secondaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:333"</literal></expr></argument>,
      <argument><expr><literal type="string">"authentication.ldap.baseDn"</literal></expr></argument>, <argument><expr><literal type="string">"c=ambari,dc=apache,dc=org"</literal></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedLdapConfigResult</name> <init>=  <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"items"</literal></expr></argument>,
      <argument><expr><call><name>list</name><argument_list>(
        <argument><expr><call><name>map</name><argument_list>(
          <argument><expr><literal type="string">"AmbariConfiguration"</literal></expr></argument>,
          <argument><expr><call><name>map</name><argument_list>(
            <argument><expr><literal type="string">"data"</literal></expr></argument>,
            <argument><expr><call><name>list</name><argument_list>(<argument><expr><name>ldapConfigData</name></expr></argument>, <argument><expr><name>ldapConfigData</name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr></argument>
        )</argument_list></call></expr></argument>
      )</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>=
     <expr><call><name><name>Response</name><operator>.</operator><name>status</name></name><argument_list>(<argument><expr><call><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>OK</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><call><name>jsonString</name><argument_list>(<argument><expr><name>storedLdapConfigResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>handleRequest</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>servicesRootNode</name> <init>= <expr><call><name>json</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>populateLdapConfiguration</name></name><argument_list>(<argument><expr><operator>(</operator><name>ObjectNode</name><operator>)</operator><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * An if multiple ambari configurations are stored with 'ldap-config' type, an
   * exception should be thrown
   */</comment>
  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>StackAdvisorException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateLdapConfig_multipleResults</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>recommendationsDir</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>newFolder</name></name><argument_list>(<argument><expr><literal type="string">"recommendationDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>recommendationsArtifactsLifetime</name> <init>= <expr><literal type="string">"1w"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requestId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StackAdvisorRunner</name></type> <name>saRunner</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>StackAdvisorRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariMetaInfo</name></type> <name>metaInfo</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariMetaInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStackParentVersions</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestStackAdvisorCommand</name></type> <name>command</name> <init>= <expr><call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestStackAdvisorCommand</name><argument_list>(<argument><expr><name>recommendationsDir</name></expr></argument>, <argument><expr><name>recommendationsArtifactsLifetime</name></expr></argument>,
      <argument><expr><name><name>ServiceInfo</name><operator>.</operator><name>ServiceAdvisorType</name><operator>.</operator><name>PYTHON</name></name></expr></argument>, <argument><expr><name>requestId</name></expr></argument>, <argument><expr><name>saRunner</name></expr></argument>, <argument><expr><name>metaInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StackAdvisorRequest</name></type> <name>request</name> <init>= <expr><call><name><name>StackAdvisorRequestBuilder</name><operator>.</operator><name>forStack</name></name><argument_list>(<argument><expr><literal type="string">"stackName"</literal></expr></argument>, <argument><expr><literal type="string">"stackVersion"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapConfig</name> <init>= <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"AmbariConfiguration"</literal></expr></argument>,
      <argument><expr><call><name>map</name><argument_list>(
        <argument><expr><literal type="string">"data"</literal></expr></argument>,
        <argument><expr><call><name>list</name><argument_list>(
          <argument><expr><call><name>map</name><argument_list>(
            <argument><expr><literal type="string">"authentication.ldap.primaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:33389"</literal></expr></argument>,
            <argument><expr><literal type="string">"authentication.ldap.secondaryUrl"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:333"</literal></expr></argument>,
            <argument><expr><literal type="string">"authentication.ldap.baseDn"</literal></expr></argument>, <argument><expr><literal type="string">"c=ambari,dc=apache,dc=org"</literal></expr></argument>
          )</argument_list></call></expr></argument>
        )</argument_list></call></expr></argument>
      )</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedLdapConfigResult</name> <init>= <expr><call><name>map</name><argument_list>(
      <argument><expr><literal type="string">"items"</literal></expr></argument>,
      <argument><expr><call><name>list</name><argument_list>(<argument><expr><name>ldapConfig</name></expr></argument>, <argument><expr><name>ldapConfig</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Response</name></type> <name>response</name> <init>=
      <expr><call><name><name>Response</name><operator>.</operator><name>status</name></name><argument_list>(<argument><expr><call><name><name>ResultStatus</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>OK</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>entity</name><argument_list>(<argument><expr><call><name>jsonString</name><argument_list>(<argument><expr><name>storedLdapConfigResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>handleRequest</name><argument_list>(<argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JsonNode</name></type> <name>servicesRootNode</name> <init>= <expr><call><name>json</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>populateLdapConfiguration</name></name><argument_list>(<argument><expr><operator>(</operator><name>ObjectNode</name><operator>)</operator><name>servicesRootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>jsonString</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeValueAsString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JsonNode</name></type> <name>json</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>convertValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>JsonNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JsonNode</name></type> <name>json</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readTree</name><argument_list>(<argument><expr><name>jsonString</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>list</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>items</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>keysAndValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>keysAndValues</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>map</name></expr>;</return>
  </block_content>}</block></function>

   <class>class <name>TestStackAdvisorCommand</name> <super_list><extends>extends <super><name><name>StackAdvisorCommand</name><argument_list type="generic">&lt;<argument><name>TestResource</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
     <constructor><specifier>public</specifier> <name>TestStackAdvisorCommand</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>recommendationsDir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>recommendationsArtifactsLifetime</name></decl></parameter>, <parameter><decl><type><name><name>ServiceInfo</name><operator>.</operator><name>ServiceAdvisorType</name></name></type> <name>serviceAdvisorType</name></decl></parameter>,
                                    <parameter><decl><type><name>int</name></type> <name>requestId</name></decl></parameter>, <parameter><decl><type><name>StackAdvisorRunner</name></type> <name>saRunner</name></decl></parameter>, <parameter><decl><type><name>AmbariMetaInfo</name></type> <name>metaInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">290</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">494</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorCommandTest</name> <block>{
     <expr><specifier>protected</specifier> <name>TestResource</name> <call><name>updateResponse</name><argument_list>(<argument><expr><name>StackAdvisorRequest</name> <name>request</name></expr></argument>, <argument><expr><name>TestResource</name> <name>response</name></expr></argument>)</argument_list></call> <block>{
       <return>return <expr><name>response</name></expr>;</return></block></expr>
     }</block>

    <comment type="line">// Overridden to ensure visiblity in tests</comment>
    @<name>Override</name>
    <specifier>public</specifier> <name><name>javax</name><operator>.</operator><name>ws</name><operator>.</operator><name>rs</name><operator>.</operator><name>core</name><operator>.</operator><name>Response</name></name> <call><name>handleRequest</name><argument_list>(<argument><expr><name>HttpHeaders</name> <name>headers</name></expr></argument>, <argument><expr><name>String</name> <name>body</name></expr></argument>,
                                                                  <argument><expr><name>UriInfo</name> <name>uriInfo</name></expr></argument>, <argument><expr><name><name>Request</name><operator>.</operator><name>Type</name></name> <name>requestType</name></expr></argument>,
                                                                  <argument><expr><name>MediaType</name> <name>mediaType</name></expr></argument>, <argument><expr><name>ResourceInstance</name> <name>resource</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>handleRequest</name></name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>uriInfo</name></expr></argument>, <argument><expr><name>requestType</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
   </block_content>}</block></constructor>
 
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestResource</name> <super_list><extends>extends <super><name>StackAdvisorResponse</name></super></extends></super_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>checks</name><operator>/</operator><name><name>UpgradeCheckOrderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>checks</name><operator>/</operator><name><name>UpgradeCheckOrderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>aa975e2ef6</name><operator>..</operator><literal type="number">0bc1584b95</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>checks</name><operator>/</operator><name><name>UpgradeCheckOrderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>checks</name><operator>/</operator><name><name>UpgradeCheckOrderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ControllerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name>beans</name><operator>.</operator><name>factory</name><operator>.</operator><name>config</name><operator>.</operator><name>BeanDefinition</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>UpgradeCheckOrderTest</name> <block>{
     <expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>Configuration</name><operator>.</operator><name>OS_VERSION</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"centos6"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>Configuration</name><operator>.</operator><name>SHARED_RESOURCES_DIR</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sourceResourceDirectory</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>UpgradeCheckRegistry</name> <name>registry</name> <operator>=</operator> <call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UpgradeCheckRegistry</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name>UpgradeCheckRegistry</name> <name>registry2</name> <operator>=</operator> <call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UpgradeCheckRegistry</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProviderTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..c2a14218e7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AmbariConfigurationResourceProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">251</literal> @@</expr>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name></name>;</package></block></expr></expr_stmt>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PredicateBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariLdapConfigChangedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>publishers</name><operator>.</operator><name>AmbariEventPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>AmbariConfigurationDAO</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>AmbariConfigurationEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>ConfigurationBaseEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Capture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockRule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>TestSubject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<class><specifier>public</specifier> class <name>AmbariConfigurationResourceProviderTest</name> <super_list><extends>extends <super><name>EasyMockSupport</name></super></extends></super_list> <block>{

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>EasyMockRule</name></type> <name>mocks</name> <init>= <expr><operator>new</operator> <call><name>EasyMockRule</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>Request</name></type> <name>requestMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>AmbariConfigurationDAO</name></type> <name>ambariConfigurationDAO</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>AmbariEventPublisher</name></type> <name>publisher</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Capture</name><argument_list type="generic">&lt;<argument><name>AmbariConfigurationEntity</name></argument>&gt;</argument_list></name></type> <name>ambariConfigurationEntityCapture</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Gson</name></type> <name>gson</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATA_MOCK_STR</name> <init>= <expr><literal type="string">"[\n"</literal> <operator>+</operator>
    <literal type="string">"      {\n"</literal> <operator>+</operator>
    <literal type="string">"        \"authentication.ldap.baseDn\" : \"dc=ambari,dc=apache,dc=org\",\n"</literal> <operator>+</operator>
    <literal type="string">"        \"authentication.ldap.primaryUrl\" : \"localhost:33389\",\n"</literal> <operator>+</operator>
    <literal type="string">"        \"authentication.ldap.secondaryUrl\" : \"localhost:333\"\n"</literal> <operator>+</operator>
    <literal type="string">"      }\n"</literal> <operator>+</operator>
    <literal type="string">"    ]"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Long</name></type> <name>PK_LONG</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PK_STRING</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_TAG</name> <init>= <expr><literal type="string">"test version"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION</name> <init>= <expr><literal type="string">"1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE</name> <init>= <expr><literal type="string">"AmbariConfiguration"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>TestSubject</name></annotation>
  <type><specifier>private</specifier> <name>AmbariConfigurationResourceProvider</name></type> <name>ambariConfigurationResourceProvider</name> <init>= <expr><operator>new</operator> <call><name>AmbariConfigurationResourceProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>ambariConfigurationEntityCapture</name> <operator>=</operator> <call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gson</name> <operator>=</operator> <operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCreateAmbariConfigurationRequestResultsInTheProperPersistenceCall</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// GIVEN</comment>
    <comment type="line">// configuration properties parsed from the request</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>resourcePropertiesSet</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(
      <argument><expr><operator>new</operator> <call><name>PropertiesMapBuilder</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>withId</name><argument_list>(<argument><expr><name>PK_LONG</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>withVersion</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>withVersionTag</name><argument_list>(<argument><expr><name>VERSION_TAG</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>withData</name><argument_list>(<argument><expr><name>DATA_MOCK_STR</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>withType</name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// mock the request to return the properties</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>requestMock</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>resourcePropertiesSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// capture the entity the DAO gets called with</comment>
    <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>ambariConfigurationEntityCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ambariConfigurationResourceProvider</name><operator>.</operator><name>createResourcesAuthorized</name></name><argument_list>(<argument><expr><name>requestMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>capturedAmbariConfigurationEntity</name> <init>= <expr><call><name><name>ambariConfigurationEntityCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>capturedAmbariConfigurationEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><literal type="string">"The entity identifier should be null"</literal></expr></argument>, <argument><expr><call><name><name>capturedAmbariConfigurationEntity</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The entity version is not the expected"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>capturedAmbariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The entity version tag is not the expected"</literal></expr></argument>, <argument><expr><name>VERSION_TAG</name></expr></argument>,
      <argument><expr><call><name><name>capturedAmbariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersionTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The entity data is not the expected"</literal></expr></argument>, <argument><expr><name>DATA_MOCK_STR</name></expr></argument>,
      <argument><expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>capturedAmbariConfigurationEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfigurationData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRemoveAmbariConfigurationRequestResultsInTheProperPersistenceCall</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name>Predicate</name></type> <name>predicate</name> <init>= <expr><operator>new</operator> <call><name>PredicateBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>property</name><argument_list>(
      <argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toPredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>pkCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>removeByPK</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>pkCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ambariConfigurationResourceProvider</name><operator>.</operator><name>deleteResourcesAuthorized</name></name><argument_list>(<argument><expr><name>requestMock</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The pk of the entity to be removed doen't match the expected id"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>pkCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRetrieveAmbariConfigurationShouldResultsInTheProperDAOCall</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name>Predicate</name></type> <name>predicate</name> <init>= <expr><operator>new</operator> <call><name>PredicateBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>property</name><argument_list>(
      <argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toPredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>findAll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name>createDummyAmbariConfigurationEntity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resourceSet</name> <init>= <expr><call><name><name>ambariConfigurationResourceProvider</name><operator>.</operator><name>getResourcesAuthorized</name></name><argument_list>(<argument><expr><name>requestMock</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>resourceSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>resourceSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUpdateAmbariConfigurationShouldResultInTheProperDAOCalls</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>

    <decl_stmt><decl><type><name>Predicate</name></type> <name>predicate</name> <init>= <expr><operator>new</operator> <call><name>PredicateBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>property</name><argument_list>(
      <argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toPredicate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// properteies in the request, representing the updated configuration</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>resourcePropertiesSet</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertiesMapBuilder</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>withId</name><argument_list>(<argument><expr><name>PK_LONG</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withVersion</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withVersionTag</name><argument_list>(<argument><expr><literal type="string">"version-2"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withData</name><argument_list>(<argument><expr><name>DATA_MOCK_STR</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withType</name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>requestMock</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>resourcePropertiesSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>persistedEntity</name> <init>= <expr><call><name>createDummyAmbariConfigurationEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>findByPK</name></name><argument_list>(<argument><expr><name>PK_LONG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>persistedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ambariConfigurationDAO</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>ambariConfigurationEntityCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfigChangedEvent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ambariConfigurationResourceProvider</name><operator>.</operator><name>updateResourcesAuthorized</name></name><argument_list>(<argument><expr><name>requestMock</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// the captured entity should be the updated one</comment>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>updatedEntity</name> <init>= <expr><call><name><name>ambariConfigurationEntityCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>updatedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The updated version is wrong"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>updatedEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class><specifier>private</specifier> class <name>PropertiesMapBuilder</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>resourcePropertiesMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>PropertiesMapBuilder</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>PropertiesMapBuilder</name></type> <name>withId</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>resourcePropertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>ID</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PropertiesMapBuilder</name></type> <name>withVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>resourcePropertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PropertiesMapBuilder</name></type> <name>withVersionTag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>versionTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>resourcePropertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>VERSION_TAG</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>versionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PropertiesMapBuilder</name></type> <name>withData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>resourcePropertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>DATA</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PropertiesMapBuilder</name></type> <name>withType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>resourcePropertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariConfigurationResourceProvider</name><operator>.</operator><name>ResourcePropertyId</name><operator>.</operator><name>TYPE</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>resourcePropertiesMap</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <function><type><specifier>private</specifier> <name>AmbariConfigurationEntity</name></type> <name>createDummyAmbariConfigurationEntity</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>AmbariConfigurationEntity</name></type> <name>acEntity</name> <init>= <expr><operator>new</operator> <call><name>AmbariConfigurationEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ConfigurationBaseEntity</name></type> <name>configurationBaseEntity</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationBaseEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>setConfigurationBaseEntity</name></name><argument_list>(<argument><expr><name>configurationBaseEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>PK_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConfigurationData</name><argument_list>(<argument><expr><name>DATA_MOCK_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersion</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersionTag</name><argument_list>(<argument><expr><name>VERSION_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>acEntity</name><operator>.</operator><name>getConfigurationBaseEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><literal type="string">"ldap-config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>acEntity</name></expr>;</return>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackAdvisorResourceProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackAdvisorResourceProviderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ab60948b1b</name><operator>..</operator><literal type="number">05232eac49</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackAdvisorResourceProviderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackAdvisorResourceProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">43</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>doReturn</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>mock</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nonnull</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Request</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

 <class><specifier>public</specifier> class <name>StackAdvisorResourceProviderTest</name> <block>{
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>RecommendationResourceProvider</name></type> <name>provider</name></decl>;</decl_stmt>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testCalculateConfigurations</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyPropertyIds</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyIds</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariManagementController</name></type> <name>ambariManagementController</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariManagementController</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RecommendationResourceProvider</name></type> <name>provider</name> <init>= <expr><operator>new</operator> <call><name>RecommendationResourceProvider</name><argument_list>(<argument><expr><name>propertyIds</name></expr></argument>,
        <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>ambariManagementController</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>Request</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>propertiesSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>propertiesMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>array</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/array_prop"</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>propertiesSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>propertiesMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>propertiesSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name>createMockRequest</name><argument_list>(
        <argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>,
        <argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/array_prop"</literal></expr></argument>, <argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><literal type="string">"array1"</literal></expr></argument>, <argument><expr><literal type="string">"array2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>calculatedConfigurations</name> <init>= <expr><call><name><name>provider</name><operator>.</operator><name>calculateConfigurations</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">71</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorResourceProviderTest</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[array1, array2]"</literal></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"array_prop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testReadUserContext</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{

  <expr><annotation>@<name>Nonnull</name></annotation>
  <specifier>private</specifier> <name>RecommendationResourceProvider</name> <call><name>createRecommendationResourceProvider</name><argument_list>()</argument_list></call> <block>{
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>keyPropertyIds</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></block></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyIds</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>AmbariManagementController</name></type> <name>ambariManagementController</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariManagementController</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RecommendationResourceProvider</name></type> <name>provider</name> <init>= <expr><operator>new</operator> <call><name>RecommendationResourceProvider</name><argument_list>(<argument><expr><name>propertyIds</name></expr></argument>,
                                                                                 <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>ambariManagementController</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>RecommendationResourceProvider</name><argument_list>(<argument><expr><name>propertyIds</name></expr></argument>,
        <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>ambariManagementController</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 
  <function><annotation>@<name>Nonnull</name></annotation>
  <type><specifier>private</specifier> <name>Request</name></type> <name>createMockRequest</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>propertyKeysAndValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name>mock</name><argument_list>(<argument><expr><name><name>Request</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>propertiesSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>propertiesMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>array</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>USER_CONTEXT_OPERATION_PROPERTY</name></expr></argument>, <argument><expr><literal type="string">"op1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>USER_CONTEXT_OPERATION_DETAILS_PROPERTY</name></expr></argument>, <argument><expr><literal type="string">"op_det"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>propertyKeysAndValues</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
     <expr_stmt><expr><call><name><name>propertiesSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>propertiesMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name>doReturn</name><argument_list>(<argument><expr><name>propertiesSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>request</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testReadUserContext</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name>createMockRequest</name><argument_list>(
        <argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>,
        <argument><expr><name>USER_CONTEXT_OPERATION_PROPERTY</name></expr></argument>, <argument><expr><literal type="string">"op1"</literal></expr></argument>,
        <argument><expr><name>USER_CONTEXT_OPERATION_DETAILS_PROPERTY</name></expr></argument>, <argument><expr><literal type="string">"op_det"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>userContext</name> <init>= <expr><call><name><name>provider</name><operator>.</operator><name>readUserContext</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorResourceProviderTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testCalculateConfigurationsWithNullPropertyValues</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{

    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>keyPropertyIds</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>propertyIds</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>AmbariManagementController</name> <name>ambariManagementController</name> <operator>=</operator> <call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariManagementController</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name>RecommendationResourceProvider</name> <name>provider</name> <operator>=</operator> <operator>new</operator> <call><name>RecommendationResourceProvider</name><argument_list>(<argument><expr><name>propertyIds</name></expr></argument>,
      <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>ambariManagementController</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>Request</name> <name>request</name> <operator>=</operator> <call><name>mock</name><argument_list>(<argument><expr><name><name>Request</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>propertiesSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name> <name>propertiesMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">//null value means no value specified for the property</comment>
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>array</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>array</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"array2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>propertiesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/array_prop"</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>propertiesSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>propertiesMap</name></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>doReturn</name><argument_list>(<argument><expr><name>propertiesSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getProperties</name><argument_list>()</argument_list></call></expr>;
    <expr><name>Request</name> <name>request</name> <operator>=</operator> <call><name>createMockRequest</name><argument_list>(
        <argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/string_prop"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><name>CONFIGURATIONS_PROPERTY_ID</name> <operator>+</operator> <literal type="string">"site/properties/array_prop"</literal></expr></argument>, <argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><literal type="string">"array1"</literal></expr></argument>, <argument><expr><literal type="string">"array2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>calculatedConfigurations</name> <operator>=</operator> <call><name><name>provider</name><operator>.</operator><name>calculateConfigurations</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">142</literal></expr>,<expr><literal type="number">19</literal> <operator>+</operator><literal type="number">129</literal></expr>,<expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorResourceProviderTest</name> <block>{
 
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[array1, array2]"</literal></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"array_prop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 

     <comment type="line">// config properties with null values should be ignored</comment>
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>properties</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"string_prop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

   }</block>
 
 
   @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testStackAdvisorWithEmptyHosts</name><argument_list>()</argument_list></call> <block>{
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Resource</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name> <name>keyPropertyIds</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>propertyIds</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>AmbariManagementController</name> <name>ambariManagementController</name> <operator>=</operator> <call><name>mock</name><argument_list>(<argument><expr><name><name>AmbariManagementController</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name>RecommendationResourceProvider</name> <name>provider</name> <operator>=</operator> <operator>new</operator> <call><name>RecommendationResourceProvider</name><argument_list>(<argument><expr><name>propertyIds</name></expr></argument>,
      <argument><expr><name>keyPropertyIds</name></expr></argument>, <argument><expr><name>ambariManagementController</name></expr></argument>)</argument_list></call></expr>;
            <expr><name>keyPropertyIds</name></expr>, <expr><name>ambariManagementController</name></expr>)</block></expr>;
 
     <expr><name>Request</name> <name>request</name> <operator>=</operator> <call><name>mock</name><argument_list>(<argument><expr><name><name>Request</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>propertiesSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">170</literal></expr>,<expr><literal type="number">4</literal> <operator>+</operator><literal type="number">156</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>StackAdvisorResourceProviderTest</name> <block>{
     }</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt/></block_content></block></catch>}</block></expr></expr_stmt>
   </block_content>}</block></function>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>provider</name> <operator>=</operator> <call><name>createRecommendationResourceProvider</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModuleFunctionalTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModuleFunctionalTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..30f5e22ee0</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name><name>LdapModuleFunctionalTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">149</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>TestAmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>LdapConnectionTemplateFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>AttributeDetectorFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>constants</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>exception</name><operator>.</operator><name>LdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>api</name><operator>.</operator><name>LdapConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>ConnectionCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Ignore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>AbstractModule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>util</name><operator>.</operator><name>Modules</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Test for the GUICE LdapModule setup
 *
 * - checks the module's bindings (can the GUICE context be created properely)
 * - checks for specific instances in the GUICE context (re they constructed properly, what is the instance' scope)
 *
 * It's named functional test as it creates a GUICE context. ("Real" unit tests only mock a class' collaborators, and
 * are more lightweight)
 *
 * By default the test is ignored, as it connects to external LDAP instances, thus in different environments may fail
 */</comment>
<class><annotation>@<name>Ignore</name></annotation>
<specifier>public</specifier> class <name>LdapModuleFunctionalTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LdapModuleFunctionalTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Injector</name></type> <name>injector</name></decl>;</decl_stmt>


  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>beforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// overriding bindings for testing purposes</comment>
    <decl_stmt><decl><type><name>Module</name></type> <name>testModule</name> <init>= <expr><call><name><name>Modules</name><operator>.</operator><name>override</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>with</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AbstractModule</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// override the configuration instance binding not to access the database</comment>
        <expr_stmt><expr><call><name>bind</name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInstance</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><call><name>getADProps</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><name>testModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>shouldLdapTemplateBeInstantiated</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <comment type="line">// the injector is set up</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>injector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name>LdapConnectionTemplateFactory</name></type> <name>ldapConnectionTemplateFactory</name> <init>= <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>LdapConnectionTemplateFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfigurationFactory</name></type> <name>ambariLdapConfigurationFactory</name> <init>= <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfigurationFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name> <init>= <expr><call><name><name>ambariLdapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><call><name>getADProps</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LdapConnectionTemplate</name></type> <name>template</name> <init>= <expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//template.authenticate(new Dn("cn=read-only-admin,dc=example,dc=com"), "password".toCharArray());</comment>

    <decl_stmt><decl><type><name>Boolean</name></type> <name>success</name> <init>= <expr><call><name><name>template</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ConnectionCallback</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>doWithConnection</name><parameter_list>(<parameter><decl><type><name>LdapConnection</name></type> <name>connection</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>

        <return>return <expr><call><name><name>connection</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>connection</name><operator>.</operator><name>isAuthenticated</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"Could not bind to the LDAP server"</literal></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getProps</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapPropsMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>ANONYMOUS_BIND</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>SERVER_HOST</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ldap.forumsys.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>SERVER_PORT</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"389"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>BIND_DN</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cn=read-only-admin,dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>BIND_PASSWORD</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    ldapPropsMap.put(AmbariLdapConfigKeys.USE_SSL.key(), "true");</comment>

    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>PERSON_OC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>UID_AT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>DN_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>UID_AT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    ldapPropsMap.put(AmbariLdapConfigKeys.TRUST_STORE.key(), "custom");</comment>
    <expr_stmt><expr><call><name><name>ldapPropsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>TRUST_STORE_TYPE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"JKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    ldapPropsMap.put(AmbariLdapConfigKeys.TRUST_STORE_PATH.key(), "/Users/lpuskas/my_truststore/KeyStore.jks");</comment>


    <return>return <expr><name>ldapPropsMap</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getADProps</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ldapPropsMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



    <return>return <expr><name>ldapPropsMap</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldDetectorsBeBound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name>AttributeDetectorFactory</name></type> <name>f</name> <init>= <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>AttributeDetectorFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>groupAttributeDetector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>userAttributDetector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>TestAmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>TestAmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..aa26498d92</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>domain</name><operator>/</operator><name><name>TestAmbariLdapConfigurationFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation used for testing purposes only!
 */</comment>
<class><specifier>public</specifier> class <name>TestAmbariLdapConfigurationFactory</name> <super_list><implements>implements <super><name>AmbariLdapConfigurationFactory</name></super></implements></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AmbariLdapConfiguration</name></type> <name>createLdapConfiguration</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configuration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>AmbariLdapConfiguration</name><argument_list>(<argument><expr><name>configuration</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacadeTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacadeTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..db0e5a96ad</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AmbariLdapFacadeTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">215</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>TestAmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Capture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockRule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>MockType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>TestSubject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Unit test suite for the LdapFacade operations.
 */</comment>
<class><specifier>public</specifier> class <name>AmbariLdapFacadeTest</name> <super_list><extends>extends <super><name>EasyMockSupport</name></super></extends></super_list> <block>{

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>EasyMockRule</name></type> <name>mocks</name> <init>= <expr><operator>new</operator> <call><name>EasyMockRule</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>LdapConfigurationService</name></type> <name>ldapConfigurationServiceMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>LdapAttributeDetectionService</name></type> <name>ldapAttributeDetectionServiceMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>AmbariLdapConfigurationFactory</name></type> <name>ambariLdapConfigurationFactory</name></decl>;</decl_stmt>


  <decl_stmt><decl><annotation>@<name>TestSubject</name></annotation>
  <type><specifier>private</specifier> <name>LdapFacade</name></type> <name>ldapFacade</name> <init>= <expr><operator>new</operator> <call><name>AmbariLdapFacade</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name></decl>;</decl_stmt>


  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Capture</name><argument_list type="generic">&lt;<argument><name>AmbariLdapConfiguration</name></argument>&gt;</argument_list></name></type> <name>ambariLdapConfigurationCapture</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>before</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>ambariLdapConfigurationFactory</name> <operator>=</operator> <operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ambariLdapConfiguration</name> <operator>=</operator> <call><name><name>ambariLdapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ambariLdapConfigurationCapture</name> <operator>=</operator> <call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>resetAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Tests whether the facade method call delegates to the proper service call.
   * The thest is success if the same instance is passed to the service.
   *
   * @throws Exception
   */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldConfigurationCheckDelegateToTheRightServiceCall</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <comment type="line">// the mocks are set up</comment>
    <expr_stmt><expr><call><name><name>ldapConfigurationServiceMock</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>ambariLdapConfigurationCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <comment type="line">// the facade method is called</comment>
    <expr_stmt><expr><call><name><name>ldapFacade</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// the captured configuration instance is the same the facade method got called with</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The configuration instance souldn't change before passing it to the service"</literal></expr></argument>,
      <argument><expr><name>ambariLdapConfiguration</name></expr></argument>, <argument><expr><call><name><name>ambariLdapConfigurationCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldConfigurationCheckFailureResultInAmbariLdapException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <expr_stmt><expr><call><name><name>ldapConfigurationServiceMock</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Testing ..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ldapFacade</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// exception is thrown</comment>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldLdapAttributesCheckDelegateToTheRightServiceCalls</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapFacade</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>TEST_USER_NAME</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testUser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapFacade</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>TEST_USER_PASSWORD</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testPassword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>testUserCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>testPasswordCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>userDnCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConfigurationServiceMock</name><operator>.</operator><name>checkUserAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>testUserCapture</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>testPasswordCapture</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>ambariLdapConfigurationCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"userDn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConfigurationServiceMock</name><operator>.</operator><name>checkGroupAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>userDnCapture</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>ambariLdapConfigurationCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><literal type="string">"userGroup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>testUserGroups</name> <init>= <expr><call><name><name>ldapFacade</name><operator>.</operator><name>checkLdapAttributes</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"testUser"</literal></expr></argument>, <argument><expr><call><name><name>testUserCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"testPassword"</literal></expr></argument>, <argument><expr><call><name><name>testPasswordCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"userDn"</literal></expr></argument>, <argument><expr><call><name><name>userDnCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>testUserGroups</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"userGroup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldAttributeCheckFailuresResultInAmbariLdapException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapFacade</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>TEST_USER_NAME</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testUser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapFacade</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>TEST_USER_PASSWORD</name><operator>.</operator><name>getParameterKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testPassword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConfigurationServiceMock</name><operator>.</operator><name>checkUserAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Testing ..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>testUserGroups</name> <init>= <expr><call><name><name>ldapFacade</name><operator>.</operator><name>checkLdapAttributes</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// THEN</comment>
    <comment type="line">// Exception is thrown</comment>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldLdapAttributeDetectionDelegateToTheRightServiceCalls</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// configuration map with user attributes detected</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>userConfigMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>userConfigMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>userAttrDecoratedConfig</name> <init>= <expr><call><name><name>ambariLdapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>userConfigMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// configuration map with user+group attributes detected</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>groupConfigMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>(<argument><expr><name>userConfigMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>groupConfigMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>groupAttrDecoratedConfig</name> <init>= <expr><call><name><name>ambariLdapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>groupConfigMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>AmbariLdapConfiguration</name></argument>&gt;</argument_list></name></type> <name>userAttrDetectionConfigCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Capture</name><argument_list type="generic">&lt;<argument><name>AmbariLdapConfiguration</name></argument>&gt;</argument_list></name></type> <name>groupAttrDetectionConfigCapture</name> <init>= <expr><call><name><name>Capture</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// GIVEN</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapAttributeDetectionServiceMock</name><operator>.</operator><name>detectLdapUserAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>userAttrDetectionConfigCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>userAttrDecoratedConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapAttributeDetectionServiceMock</name><operator>.</operator><name>detectLdapGroupAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><name>groupAttrDetectionConfigCapture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>groupAttrDecoratedConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>detected</name> <init>= <expr><call><name><name>ldapFacade</name><operator>.</operator><name>detectAttributes</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"User attribute detection called with the wrong configuration"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>,
      <argument><expr><call><name><name>userAttrDetectionConfigCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"Group attribute detection called with the wrong configuration"</literal></expr></argument>, <argument><expr><name>userAttrDecoratedConfig</name></expr></argument>,
      <argument><expr><call><name><name>groupAttrDetectionConfigCapture</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"Attribute detection returned an invalid configuration"</literal></expr></argument>, <argument><expr><name>groupAttrDecoratedConfig</name></expr></argument>, <argument><expr><name>detected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldAttributeDetectionFailuresResultInAmbariLdapException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapAttributeDetectionServiceMock</name><operator>.</operator><name>detectLdapUserAttributes</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariLdapConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Testing ..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ldapFacade</name><operator>.</operator><name>detectAttributes</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// Exception is thrown</comment>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionServiceTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionServiceTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..09dea1c210</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapAttributeDetectionServiceTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">188</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>TestAmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>AttributeDetectorFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>ChainedAttributeDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>GroupMemberAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name><operator>.</operator><name>UserNameAttrDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>DefaultEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>exception</name><operator>.</operator><name>LdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>EntryMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockRule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>TestSubject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<class><specifier>public</specifier> class <name>DefaultLdapAttributeDetectionServiceTest</name> <super_list><extends>extends <super><name>EasyMockSupport</name></super></extends></super_list> <block>{
  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>EasyMockRule</name></type> <name>mocks</name> <init>= <expr><operator>new</operator> <call><name>EasyMockRule</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>AttributeDetectorFactory</name></type> <name>attributeDetectorFactoryMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplateFactory</name></type> <name>ldapConnectionTemplateFactoryMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplateMock</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
  <type><specifier>private</specifier> <name>SearchRequest</name></type> <name>searchRequestMock</name></decl>;</decl_stmt>


  <decl_stmt><decl><type><specifier>private</specifier> <name>AmbariLdapConfigurationFactory</name></type> <name>ldapConfigurationFactory</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>TestSubject</name></annotation>
  <type><specifier>private</specifier> <name>DefaultLdapAttributeDetectionService</name></type> <name>defaultLdapAttributeDetectionService</name> <init>= <expr><operator>new</operator> <call><name>DefaultLdapAttributeDetectionService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>before</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>resetAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>shouldLdapUserAttributeDetection</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name> <init>= <expr><call><name><name>ldapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>entryList</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultEntry</name><argument_list>(<argument><expr><literal type="string">"uid=gauss"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactoryMock</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchRequest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><call><name>entryMapperMock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>entryList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>searchRequestMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>attributeDetectorFactoryMock</name><operator>.</operator><name>userAttributDetector</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChainedAttributeDetector</name><argument_list>(<argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserNameAttrDetector</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>searchRequestMock</name><operator>.</operator><name>setSizeLimit</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>searchRequestMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>decorated</name> <init>= <expr><call><name><name>defaultLdapAttributeDetectionService</name><operator>.</operator><name>detectLdapUserAttributes</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>decorated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>, <argument><expr><call><name><name>ldapConfiguration</name><operator>.</operator><name>userNameAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldUserAttributeDetectionFailWhenLdapOerationFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name> <init>= <expr><call><name><name>ldapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactoryMock</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Testing ..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>decorated</name> <init>= <expr><call><name><name>defaultLdapAttributeDetectionService</name><operator>.</operator><name>detectLdapUserAttributes</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// exception is thrown</comment>

  </block_content>}</block></function>


  <function><annotation>@<name>Test</name></annotation>
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>shouldLdapGroupAttributeDetection</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name> <init>= <expr><call><name><name>ldapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>entryList</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultEntry</name><argument_list>(<argument><expr><literal type="string">"uid=gauss"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactoryMock</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchRequest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><call><name>entryMapperMock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>entryList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>searchRequestMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>attributeDetectorFactoryMock</name><operator>.</operator><name>groupAttributeDetector</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChainedAttributeDetector</name><argument_list>(<argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupMemberAttrDetector</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>searchRequestMock</name><operator>.</operator><name>setSizeLimit</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>searchRequestMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>decorated</name> <init>= <expr><call><name><name>defaultLdapAttributeDetectionService</name><operator>.</operator><name>detectLdapGroupAttributes</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>decorated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>, <argument><expr><call><name><name>ldapConfiguration</name><operator>.</operator><name>groupMemberAttribute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldGroupAttributeDetectionFailWhenLdapOerationFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ldapConfiguration</name> <init>= <expr><call><name><name>ldapConfigurationFactory</name><operator>.</operator><name>createLdapConfiguration</name></name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactoryMock</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AmbariLdapException</name><argument_list>(<argument><expr><literal type="string">"Testing ..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>decorated</name> <init>= <expr><call><name><name>defaultLdapAttributeDetectionService</name><operator>.</operator><name>detectLdapGroupAttributes</name></name><argument_list>(<argument><expr><name>ldapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// exception is thrown</comment>

  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>entryMapperMock</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <class><super><name><name>EntryMapper</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Entry</name></type> <name>map</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LdapException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationServiceTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationServiceTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..4d6d2a6a50</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name><name>DefaultLdapConfigurationServiceTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">221</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfigKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>AmbariLdapConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>domain</name><operator>.</operator><name>TestAmbariLdapConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>AmbariLdapException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>LdapConfigurationService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchRequestImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>message</name><operator>.</operator><name>SearchScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>name</name><operator>.</operator><name>Dn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>ConnectionCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>EntryMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>ldap</name><operator>.</operator><name>client</name><operator>.</operator><name>template</name><operator>.</operator><name>LdapConnectionTemplate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockRule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMockSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>MockType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>TestSubject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>

<class><specifier>public</specifier> class <name>DefaultLdapConfigurationServiceTest</name> <super_list><extends>extends <super><name>EasyMockSupport</name></super></extends></super_list> <block>{
  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>EasyMockRule</name></type> <name>mocks</name> <init>= <expr><operator>new</operator> <call><name>EasyMockRule</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplateFactory</name></type> <name>ldapConnectionTemplateFactory</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Mock</name><argument_list>(<argument><expr><name>type</name> <operator>=</operator> <name><name>MockType</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>private</specifier> <name>LdapConnectionTemplate</name></type> <name>ldapConnectionTemplateMock</name></decl>;</decl_stmt>


  <decl_stmt><decl><annotation>@<name>TestSubject</name></annotation>
  <type><specifier>private</specifier> <name>LdapConfigurationService</name></type> <name>ldapConfigurationService</name> <init>= <expr><operator>new</operator> <call><name>DefaultLdapConfigurationService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>before</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>resetAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldConnectionCheckSucceedWhenConnectionCallbackSucceeds</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the cllback returns TRUE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>ConnectionCallback</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// no exceptions are thrown</comment>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldConnectionCheckFailWhenConnectionCallbackFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the callback returns FALSE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>ConnectionCallback</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <expr_stmt><expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkConnection</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// THEN</comment>
    <comment type="line">// exception is thrown</comment>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldUserAttributeConfigurationCheckSucceedWhenUserDnIsFound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"person"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the callback returns FALSE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// users found with dn</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>searchFirst</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Dn</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>EntryMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>userDn</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkUserAttributes</name></name><argument_list>(<argument><expr><literal type="string">"testUser"</literal></expr></argument>, <argument><expr><literal type="string">"testPassword"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The found userDn is not the expected one"</literal></expr></argument>, <argument><expr><name>userDn</name></expr></argument>, <argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldUserAttributeConfigurationCheckFailWhenNoUsersFound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"posixAccount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>USER_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the callback returns FALSE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// no users found, the returned dn is null</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>searchFirst</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Dn</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>EntryMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>userDn</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkUserAttributes</name></name><argument_list>(<argument><expr><literal type="string">"testUser"</literal></expr></argument>, <argument><expr><literal type="string">"testPassword"</literal></expr></argument>,
      <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The found userDn is not the expected one"</literal></expr></argument>, <argument><expr><name>userDn</name></expr></argument>, <argument><expr><literal type="string">"dn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>


  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldGroupAttributeConfigurationCheckSucceedWhenGroupForUserDnIsFound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name>groupConfigObjectMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SearchRequest</name></type> <name>sr</name> <init>= <expr><operator>new</operator> <call><name>SearchRequestImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the callback returns FALSE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Dn</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchRequest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>EntryMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><literal type="string">"userGroup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>userGroups</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkGroupAttributes</name></name><argument_list>(<argument><expr><literal type="string">"userDn"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><literal type="string">"No groups found"</literal></expr></argument>, <argument><expr><name>userGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>


  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AmbariLdapException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldGroupAttributeConfigurationCheckFailWhenNoGroupsForUserDnFound</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name>groupConfigObjectMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SearchRequest</name></type> <name>sr</name> <init>= <expr><operator>new</operator> <call><name>SearchRequestImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AmbariLdapConfiguration</name></type> <name>ambariLdapConfiguration</name> <init>= <expr><operator>new</operator> <call><name>TestAmbariLdapConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createLdapConfiguration</name><argument_list>(<argument><expr><name>configMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the callback returns FALSE</comment>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>ldapConnectionTemplateMock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>newSearchRequest</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Dn</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchScope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>ldapConnectionTemplateMock</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>SearchRequest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>EntryMapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replayAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// WHEN</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>userGroups</name> <init>= <expr><call><name><name>ldapConfigurationService</name><operator>.</operator><name>checkGroupAttributes</name></name><argument_list>(<argument><expr><literal type="string">"userDn"</literal></expr></argument>, <argument><expr><name>ambariLdapConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><literal type="string">"No groups found"</literal></expr></argument>, <argument><expr><name>userGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>groupConfigObjectMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_OBJECT_CLASS</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"groupOfNames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_SEARCH_BASE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dc=example,dc=com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_NAME_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>AmbariLdapConfigKeys</name><operator>.</operator><name>GROUP_MEMBER_ATTRIBUTE</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"member"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>configMap</name></expr>;</return>
  </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetectorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetectorTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">0000000000..79af467a42</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>ldap</name><operator>/</operator><name>service</name><operator>/</operator><name>ads</name><operator>/</operator><name>detectors</name><operator>/</operator><name><name>GroupMemberAttrDetectorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">107</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>service</name><operator>.</operator><name>ads</name><operator>.</operator><name>detectors</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>DefaultAttribute</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>DefaultEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>directory</name><operator>.</operator><name>api</name><operator>.</operator><name>ldap</name><operator>.</operator><name>model</name><operator>.</operator><name>entry</name><operator>.</operator><name>StringValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>TestSubject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Test suite for the attribute detector implementation
 */</comment>
<class><specifier>public</specifier> class <name>GroupMemberAttrDetectorTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>TestSubject</name></annotation>
  <type><name>GroupMemberAttrDetector</name></type> <name>groupMemberAttrDetector</name> <init>= <expr><operator>new</operator> <call><name>GroupMemberAttrDetector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldDetectAttributeBasedOnOccurrence</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <comment type="line">// Mimic a sample set of entries where group membership attributes  are different</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>sampleEntryList</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sampleEntryList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getSampleEntryList</name><argument_list>(<argument><expr><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>GroupMemberAttr</name><operator>.</operator><name>MEMBER_UID</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// this is the expected property to be detected as in the sample set the most entries have it</comment>
    <expr_stmt><expr><call><name><name>sampleEntryList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getSampleEntryList</name><argument_list>(<argument><expr><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>GroupMemberAttr</name><operator>.</operator><name>UNIQUE_MEMBER</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sampleEntryList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getSampleEntryList</name><argument_list>(<argument><expr><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>GroupMemberAttr</name><operator>.</operator><name>MEMBER</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WHEN</comment>
    <for>for <control>(<init><decl><type><name>Entry</name></type> <name>entry</name> <range>: <expr><name>sampleEntryList</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// The most frequently encountered attribute will be selected</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedAttributeMap</name> <init>= <expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>detect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>detectedAttributeMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>selectedEntry</name> <init>= <expr><call><name><name>detectedAttributeMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The selected configuration property is not the expected one"</literal></expr></argument>, <argument><expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>detectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The selected configuration property value is not the expected one"</literal></expr></argument>, <argument><expr><call><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>GroupMemberAttr</name><operator>.</operator><name>UNIQUE_MEMBER</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testShouldDetectorPassWhenEmptySampleSetProvided</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// GIVEN</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>sampleEntryList</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// WHEN</comment>
    <comment type="line">// WHEN</comment>
    <for>for <control>(<init><decl><type><name>Entry</name></type> <name>entry</name> <range>: <expr><name>sampleEntryList</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>detectedAttributeMap</name> <init>= <expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>detect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// THEN</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>detectedAttributeMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>selectedEntry</name> <init>= <expr><call><name><name>detectedAttributeMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The selected configuration property is not the expected one"</literal></expr></argument>, <argument><expr><call><name><name>groupMemberAttrDetector</name><operator>.</operator><name>detectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"The selected configuration property value is not the expected one"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>, <argument><expr><call><name><name>selectedEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>getSampleEntryList</name><parameter_list>(<parameter><decl><type><name><name>GroupMemberAttrDetector</name><operator>.</operator><name>GroupMemberAttr</name></name></type> <name>member</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>entryList</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name>DefaultEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setDn</name></name><argument_list>(<argument><expr><literal type="string">"dn="</literal> <operator>+</operator> <call><name><name>member</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultAttribute</name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>attrName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringValue</name><argument_list>(<argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entryList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <return>return <expr><name>entryList</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>notifications</name><operator>/</operator><name><name>DispatchFactoryTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>notifications</name><operator>/</operator><name><name>DispatchFactoryTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">382799c2c7</literal><operator>..</operator><name>d34d732ea1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>notifications</name><operator>/</operator><name><name>DispatchFactoryTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>notifications</name><operator>/</operator><name><name>DispatchFactoryTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ControllerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>notifications</name><operator>.</operator><name>dispatchers</name><operator>.</operator><name>EmailDispatcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>notifications</name><operator>.</operator><name>dispatchers</name><operator>.</operator><name>SNMPDispatcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DispatchFactoryTest</name> <block>{
     <expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>Configuration</name><operator>.</operator><name>SHARED_RESOURCES_DIR</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>sourceResourceDirectory</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><call><name><name>Configuration</name><operator>.</operator><name>ALERTS_SNMP_DISPATCH_UDP_PORT</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>snmpPort</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>Injector</name> <name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><name>DispatchFactory</name> <name>dispatchFactory</name> <operator>=</operator> <call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>DispatchFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><name>DispatchFactory</name> <name>dispatchFactory2</name> <operator>=</operator> <call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>DispatchFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>InMemoryDefaultTestModule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>InMemoryDefaultTestModule</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">434a2a1e22</literal><operator>..</operator><name>ebc25969c6</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>InMemoryDefaultTestModule</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>InMemoryDefaultTestModule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ControllerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>stack</name><operator>.</operator><name>StackManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>stack</name><operator>.</operator><name>StackManagerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>stack</name><operator>.</operator><name>StackManagerMock</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>InMemoryDefaultTestModule</name> extends <name>AbstractModule</name> <block>{
     }</block></expr></expr_stmt>
 
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>install</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>install</name><argument_list>(<argument><expr><call><name><name>Modules</name><operator>.</operator><name>override</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BeanDefinitionsCachingTestControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>with</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AbstractModule</name></super><argument_list>()</argument_list> <block>{
         <function><annotation>@<name>Override</name></annotation>
         <type><specifier>protected</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>JdbcPropertyTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>JdbcPropertyTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">427cede296</literal><operator>..</operator><literal type="number">14c5dd68e5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>JdbcPropertyTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>orm</name><operator>/</operator><name><name>JdbcPropertyTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>H2DatabaseCleaner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ControllerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Clusters</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>JdbcPropertyTest</name> <block>{
 
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testNormal</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">62</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">63</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>JdbcPropertyTest</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testJdbcProperty</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name><name>properties</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>SERVER_JDBC_PROPERTIES_PREFIX</name></name> <operator>+</operator> <literal type="string">"shutdown"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <try>try <block>{<block_content>
       <expr_stmt><expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">442414f14d</literal><operator>..</operator><literal type="number">566d6b7ff7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>H2DatabaseCleaner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>ControllerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>UserDAO</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>ClientSecurityType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@</expr></expr_stmt> <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
 
 <decl_stmt><decl><annotation>@<name>RunWith</name><argument_list>(<argument><expr><name><name>FrameworkRunner</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
 <annotation>@<name>CreateDS</name><argument_list>(<argument><expr><name>allowAnonAccess</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>,
    <argument><expr><name>name</name> <operator>=</operator> <literal type="string">"AmbariLdapAuthenticationProviderForDNWithSpaceTest"</literal></expr></argument>,
    <argument><expr><name>partitions</name> <operator>=</operator> <block>{
        <annotation>@<name>CreatePartition</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"Root"</literal></expr></argument>,
            <argument><expr><name>suffix</name> <operator>=</operator> <literal type="string">"dc=the apache,dc=org"</literal></expr></argument>,
            <argument><expr><name>contextEntry</name> <operator>=</operator> <annotation>@<name>ContextEntry</name><argument_list>(
                <argument><expr><name>entryLdif</name> <operator>=</operator>
                    <literal type="string">"dn: dc=the apache,dc=org\n"</literal> <operator>+</operator>
                        <literal type="string">"dc: the apache\n"</literal> <operator>+</operator>
                        <literal type="string">"objectClass: top\n"</literal> <operator>+</operator>
                        <literal type="string">"objectClass: domain\n\n"</literal> <operator>+</operator>
                        <literal type="string">"dn: dc=ambari,dc=the apache,dc=org\n"</literal> <operator>+</operator>
                        <literal type="string">"dc: ambari\n"</literal> <operator>+</operator>
                        <literal type="string">"objectClass: top\n"</literal> <operator>+</operator>
                        <literal type="string">"objectClass: domain\n\n"</literal></expr></argument>)</argument_list></annotation></expr></argument>)</argument_list></annotation>
    }</block></expr></argument>)</argument_list></annotation>
  <type><name>name</name></type> <init>= <expr><literal type="string">"AmbariLdapAuthenticationProviderForDNWithSpaceTest"</literal></expr></init></decl>,
  <decl><type ref="prev"/><name>partitions</name> <init>= <expr><block>{
    @<expr><call><name>CreatePartition</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"Root"</literal></expr></argument>,
      <argument><expr><name>suffix</name> <operator>=</operator> <literal type="string">"dc=the apache,dc=org"</literal></expr></argument>,
      <argument><expr><name>contextEntry</name> <operator>=</operator> @<call><name>ContextEntry</name><argument_list>(
        <argument><expr><name>entryLdif</name> <operator>=</operator>
          <literal type="string">"dn: dc=the apache,dc=org\n"</literal> <operator>+</operator>
            <literal type="string">"dc: the apache\n"</literal> <operator>+</operator>
            <literal type="string">"objectClass: top\n"</literal> <operator>+</operator>
            <literal type="string">"objectClass: domain\n\n"</literal> <operator>+</operator>
            <literal type="string">"dn: dc=ambari,dc=the apache,dc=org\n"</literal> <operator>+</operator>
            <literal type="string">"dc: ambari\n"</literal> <operator>+</operator>
            <literal type="string">"objectClass: top\n"</literal> <operator>+</operator>
            <literal type="string">"objectClass: domain\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
  }</block></expr></init></decl></decl_stmt></block_content></block></try></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call>
 @<call><name>CreateLdapServer</name><argument_list>(<argument><expr><name>allowAnonymousAccess</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>,
    <argument><expr><name>transports</name> <operator>=</operator> <block>{@<expr><call><name>CreateTransport</name><argument_list>(<argument><expr><name>protocol</name> <operator>=</operator> <literal type="string">"LDAP"</literal></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>
  <name>transports</name> <operator>=</operator> <block>{@<expr><call><name>CreateTransport</name><argument_list>(<argument><expr><name>protocol</name> <operator>=</operator> <literal type="string">"LDAP"</literal></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>
 @<call><name>ApplyLdifFiles</name><argument_list>(<argument><expr><literal type="string">"users_for_dn_with_space.ldif"</literal></expr></argument>)</argument_list></call>
 <specifier>public</specifier> <name>class</name> <name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name> extends <name>AmbariLdapAuthenticationProviderBaseTest</name> <block>{
 
@@ <expr><operator>-</operator><literal type="number">83</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">84</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariLdapAuthenticationProviderForDNWithSpaceTest</name> extends <name>AmbariLd</name>
 
   @<name>Before</name>
   <specifier>public</specifier> <name>void</name> <call><name>setUp</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ControllerModule</name><argument_list>(<argument><expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>injectMembers</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
 
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4941bc7afb</literal><operator>..</operator><name>d8be8097fd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLdapAuthenticationProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>fail</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>H2DatabaseCleaner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>UserDAO</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>entities</name><operator>.</operator><name>UserEntity</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariLdapAuthenticationProviderTest</name> extends <name>AmbariLdapAuthenticati</name>
 
   @<name>Before</name>
   <specifier>public</specifier> <name>void</name> <call><name>setUp</name><argument_list>()</argument_list></call> <block>{
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>injectMembers</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>configuration</name><operator>.</operator><name>setClientSecurityType</name></name><argument_list>(<argument><expr><name><name>ClientSecurityType</name><operator>.</operator><name>LDAP</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLocalUserProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLocalUserProviderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2362823b30</literal><operator>..</operator><name>d889372857</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLocalUserProviderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AmbariLocalUserProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import></block></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>H2DatabaseCleaner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>OrmTestHelper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>dao</name><operator>.</operator><name>UserDAO</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AmbariLocalUserProviderTest</name> <block>{
 
   @<expr><name>BeforeClass</name>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>prepareData</name><argument_list>()</argument_list></call> <block>{
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>GuiceJpaInitializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>OrmTestHelper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createTestUsers</name><argument_list>()</argument_list></call></expr>;
   }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>LdapServerPropertiesTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>LdapServerPropertiesTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5747408954..0e1515bb5b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>LdapServerPropertiesTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>LdapServerPropertiesTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import></block></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLoggerModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>ldap</name><operator>.</operator><name>LdapModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>LdapServerPropertiesTest</name> <block>{
   <expr><name>Configuration</name> <name>configuration</name></expr>;
 
   <expr><specifier>public</specifier> <call><name>LdapServerPropertiesTest</name><argument_list>()</argument_list></call> <block>{
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>injector</name> <operator>=</operator> <call><name><name>Guice</name><operator>.</operator><name>createInjector</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuditLoggerModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthorizationTestModule</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LdapModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>injector</name><operator>.</operator><name>injectMembers</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<name>Before</name>
   <specifier>public</specifier> <name>void</name> <call><name>setUp</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>ldapServerProperties</name> <operator>=</operator>  <operator>new</operator> <call><name>LdapServerProperties</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>ldapServerProperties</name> <operator>=</operator> <operator>new</operator> <call><name>LdapServerProperties</name><argument_list>()</argument_list></call></expr>;
     <expr><call><name><name>ldapServerProperties</name><operator>.</operator><name>setAnonymousBind</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>ldapServerProperties</name><operator>.</operator><name>setBaseDN</name></name><argument_list>(<argument><expr><literal type="string">"dc=ambari,dc=apache,dc=org"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>ldapServerProperties</name><operator>.</operator><name>setManagerDn</name></name><argument_list>(<argument><expr><literal type="string">"uid=manager,"</literal> <operator>+</operator> <call><name><name>ldapServerProperties</name><operator>.</operator><name>getBaseDN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></expr_stmt></block_content></block></try></block></class></block></class>

</unit>
