<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/be25c9e771.java"><expr_stmt><expr><name>From</name> <name>be25c9e77197be8e056c1bb9aa3651c16dd6fd62</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Myroslav</name> <name><name>Papirkovskyi</name> <argument_list type="generic">&lt;<argument><name>mpapyrkovskyy</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">28</literal> <name>Apr</name> <literal type="number">2016</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">52</literal><operator>:</operator><literal type="number">40</literal> <operator>+</operator><literal type="number">0300</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">15671.</literal> <name>On</name> <name>Ambari</name> <name>Agent</name> <name>restart</name> <name>currently</name> <name>running</name>
 <name>commands</name> <name>on</name> <name>that</name> <name>agent</name> <name>should</name> <name>be</name> <name>immediately</name> <name><name>aborted</name><operator>.</operator></name> (<name>mpapirkovskyy</name></expr></expr_stmt>)

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessorImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionScheduler</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">31</literal> <operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>TestActionScheduler</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">151</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">177</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">26</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9aba4c95a6</literal><operator>..</operator><name>dcfe359dba</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>ActionDBAccessor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> interface <name>ActionDBAccessor</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>timeoutHostRole</name><argument_list>(<argument><expr><name>String</name> <name>host</name></expr></argument>, <argument><expr><name>long</name> <name>requestId</name></expr></argument>, <argument><expr><name>long</name> <name>stageId</name></expr></argument>, <argument><expr><name>String</name> <name>role</name></expr></argument>)</argument_list></call></expr>;
 
  <comment type="block" format="javadoc">/**
   * Mark the task as to have timed out
   */</comment>
  <expr><name>void</name> <call><name>timeoutHostRole</name><argument_list>(<argument><expr><name>String</name> <name>host</name></expr></argument>, <argument><expr><name>long</name> <name>requestId</name></expr></argument>, <argument><expr><name>long</name> <name>stageId</name></expr></argument>,
                       <argument><expr><name>String</name> <name>role</name></expr></argument>, <argument><expr><name>boolean</name> <name>skipSupported</name></expr></argument>)</argument_list></call></expr>;

   <comment type="block" format="javadoc">/**
    * Returns all the pending stages, including queued and not-queued. A stage is
    * considered in progress if it is in progress for any host.
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
index 06311c2d44..8e6fb3faad 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java
@@ -236,11 +236,22 @@ public class ActionDBAccessorImpl implements ActionDBAccessor {
   @Override
   public void timeoutHostRole(String host, long requestId, long stageId,
                               String role) {
    timeoutHostRole(host, requestId, stageId, role, false);
  }

  @Override
  public void timeoutHostRole(String host, long requestId, long stageId,
                              String role, boolean skipSupported) {
     long now = System.currentTimeMillis();
     List&lt;HostRoleCommandEntity&gt; commands =
        hostRoleCommandDAO.findByHostRole(host, requestId, stageId, role);
            hostRoleCommandDAO.findByHostRole(host, requestId, stageId, role);
     for (HostRoleCommandEntity command : commands) {
      command.setStatus(command.isRetryAllowed() ? HostRoleStatus.HOLDING_TIMEDOUT : HostRoleStatus.TIMEDOUT);
      if (skipSupported) {
        command.setStatus(HostRoleStatus.SKIPPED_FAILED);
      } else {
        command.setStatus(command.isRetryAllowed() ? HostRoleStatus.HOLDING_TIMEDOUT : HostRoleStatus.TIMEDOUT);
      }

       command.setEndTime(now);
 
       auditLog(command, requestId);
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java
index 95d17630df..33c0a1f781 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java
@@ -590,7 +590,7 @@ class ActionScheduler implements Runnable {
    * @return the stats for the roles in the stage which are used to determine
    * whether stage has succeeded or failed
    */</comment>
  <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RoleStats</name></argument>&gt;</argument_list></name> <call><name>processInProgressStage</name><argument_list>(<argument><expr><name>Stage</name> <name>s</name></expr></argument>,
  <argument><expr><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RoleStats</name></argument>&gt;</argument_list></name> <call><name>processInProgressStage</name><argument_list>(<argument><expr><name>Stage</name> <name>s</name></expr></argument>,
       <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ExecutionCommand</name></argument>&gt;</argument_list></name> <name>commandsToSchedule</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AmbariException</name> <block>{
     <expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"==&gt; Collecting commands to schedule..."</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;
     <comment type="line">// Map to track role status</comment>
<argument>@@ <expr><operator>-</operator><literal type="number">694</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">694</literal></expr></argument>,<argument><expr><literal type="number">17</literal> @@ class <name>ActionScheduler</name> implements <name>Runnable</name> <block>{
           <expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Host:"</literal> <operator>+</operator> <name>host</name> <operator>+</operator> <literal type="string">", role:"</literal> <operator>+</operator> <name>roleStr</name> <operator>+</operator> <literal type="string">", actionId:"</literal> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getActionId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" timed out"</literal></expr></argument>)</argument_list></call></expr>;
           <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>getAttemptCount</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>roleStr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>maxAttempts</name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Host:"</literal> <operator>+</operator> <name>host</name> <operator>+</operator> <literal type="string">", role:"</literal> <operator>+</operator> <name>roleStr</name> <operator>+</operator> <literal type="string">", actionId:"</literal> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getActionId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" expired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>timeoutHostRole</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getRequestId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getStageId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getRole</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>timeoutHostRole</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getRequestId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getStageId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getRole</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>isAutoSkipOnFailureSupported</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <comment type="line">//Reinitialize status</comment>
             <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>getHostRoleStatus</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>roleStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
             <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>cluster</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>transitionToFailedState</name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>roleStr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>RoleCommand</name><operator>.</operator><name>CUSTOM_COMMAND</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getRoleCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>RoleCommand</name><operator>.</operator><name>SERVICE_CHECK</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getRoleCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>RoleCommand</name><operator>.</operator><name>ACTIONEXECUTE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getRoleCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">//commands above don't affect host component state (e.g. no in_progress state in process), transition will fail</comment>
                <expr_stmt><expr><call><name>transitionToFailedState</name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>roleStr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt/>}</block_content>
               if (c.getRoleCommand(</block></if></if_stmt>)</block_content>.equals(RoleCommand.ACTIONEXECUTE</block></if></if_stmt>)</block_content></block></if></if_stmt>) <block>{
                 <expr><call><name>processActionDeath</name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getHostname</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>roleStr</name></expr></argument>)</argument_list></call></expr>;
               }</block></block>
@@ <operator>-</operator><literal type="number">832</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">837</literal></expr></argument>,<argument><expr><literal type="number">19</literal> @@ class <name>ActionScheduler</name> implements <name>Runnable</name> <block>{
     <return>return <expr><name>roleStats</name></expr>;</return>
   }</block>
 
  <comment type="block" format="javadoc">/**
   * Checks if ambari-agent was restarted during role command execution
   * @param host the host with ambari-agent to check
   * @param stage the stage
   * @param role the role to check
   * @return {@code true} if ambari-agent was restarted
   */</comment>
  <specifier>protected</specifier> <name>boolean</name> <call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><name>Host</name> <name>host</name></expr></argument>, <argument><expr><name>Stage</name> <name>stage</name></expr></argument>, <argument><expr><name>String</name> <name>role</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>hostName</name> <operator>=</operator> <call><name><name>host</name><operator>.</operator><name>getHostName</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>long</name> <name>taskStartTime</name> <operator>=</operator> <call><name><name>stage</name><operator>.</operator><name>getHostRoleCommand</name></name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStartTime</name><argument_list>()</argument_list></call></expr>;
    <return>return <expr><name>taskStartTime</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>taskStartTime</name> <operator>&lt;=</operator> <call><name><name>host</name><operator>.</operator><name>getLastRegistrationTime</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block>

   <comment type="block" format="javadoc">/**
    * Checks if timeout is required.
    * @param status      the status of the current role
@@ -843,7 +861,7 @@ class ActionScheduler implements Runnable {
    * @return {@code true} if timeout is needed
    * @throws AmbariException
    */</comment>
  <specifier>private</specifier> <name>boolean</name> <call><name>timeOutActionNeeded</name><argument_list>(<argument><expr><name>HostRoleStatus</name> <name>status</name></expr></argument>, <argument><expr><name>Stage</name> <name>stage</name></expr></argument>,
  <argument><expr><specifier>protected</specifier> <name>boolean</name> <call><name>timeOutActionNeeded</name><argument_list>(<argument><expr><name>HostRoleStatus</name> <name>status</name></expr></argument>, <argument><expr><name>Stage</name> <name>stage</name></expr></argument>,
       <argument><expr><name>Host</name> <name>host</name></expr></argument>, <argument><expr><name>String</name> <name>role</name></expr></argument>, <argument><expr><name>long</name> <name>currentTime</name></expr></argument>, <argument><expr><name>long</name> <name>taskTimeout</name></expr></argument>)</argument_list></call> <throws>throws
     <argument><expr><name>AmbariException</name> <block>{</block></expr></argument></throws></expr></argument>
     <if_stmt><if>if <condition>(<expr><operator>(</operator> <operator>!</operator><call><name><name>status</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>QUEUED</name></name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>
@@ <operator>-</operator><literal type="number">852</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">870</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>ActionScheduler</name> implements <name>Runnable</name></expr></condition> <block>{<block_content>
     <expr_stmt/>}</block_content>
 
     <comment type="line">// Fast fail task if host state is unknown</comment>
    if (null != host &amp;&amp; host.getState(</block></if></if_stmt>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>HostState</name><operator>.</operator><name>HEARTBEAT_LOST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <block>{
      <expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Timing out action since agent is not heartbeating."</literal></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>host</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><call><name><name>host</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>HostState</name><operator>.</operator><name>HEARTBEAT_LOST</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Timing out action since agent is not heartbeating or agent was restarted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     <expr_stmt/></block_content></block></if></if_stmt>}</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>TestActionScheduler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>TestActionScheduler</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>af6fb9b7ff</name><operator>..</operator><literal type="number">7a8890d964</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>TestActionScheduler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>actionmanager</name><operator>/</operator><name><name>TestActionScheduler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">20</literal></expr>,<expr><literal type="number">12</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>actionmanager</name></name>;</package></block></expr></expr_stmt>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>anyCollectionOf</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>anyLong</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>anyString</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>eq</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Matchers</name><operator>.</operator><name>*</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>atLeastOnce</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>doAnswer</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>doReturn</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>mock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>spy</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>times</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>verify</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>when</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>agent</name><operator>.</operator><name>CommandReport</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>agent</name><operator>.</operator><name>ExecutionCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>HostsMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>AmbariEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>events</name><operator>.</operator><name>publishers</name><operator>.</operator><name>AmbariEventPublisher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>InMemoryDefaultTestModule</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Service</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>ServiceComponent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>ServiceComponentHost</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>ServiceComponentHostEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>fsm</name><operator>.</operator><name>InvalidStateTransitionException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>svccomphost</name><operator>.</operator><name>ServiceComponentHostInstallEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>svccomphost</name><operator>.</operator><name>ServiceComponentHostOpFailedEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>svccomphost</name><operator>.</operator><name>ServiceComponentHostServerActionEvent</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
         <expr><call><name><name>command</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>TIMEDOUT</name></name></expr></argument>)</argument_list></call></expr>;
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       }</block></expr></expr_stmt>
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 
     <comment type="line">//Small action timeout to test rescheduling</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">379</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">379</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
         <expr><call><name><name>command</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>TIMEDOUT</name></name></expr></argument>)</argument_list></call></expr>;
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       }</block></expr></expr_stmt>
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">//Small action timeout to test rescheduling</comment>
     <decl_stmt><decl><type><name>AmbariEventPublisher</name></type> <name>aep</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name><argument_list>(<argument><expr><name><name>AmbariEventPublisher</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">479</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">479</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
         }</block></expr></expr_stmt>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       }
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    })<expr_stmt><expr><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>timeoutHostRole</name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>anyBoolean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>doAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <annotation>@<name>Override</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">791</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">791</literal></expr><operator>,</operator><expr><literal type="number">109</literal> @@ <specifier>public</specifier> class <name>TestActionScheduler</name> <block>{
         <expr><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHostRoleStatus</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"AMBARI_SERVER_ACTION"</literal></expr></argument>)</argument_list></call></expr></block></expr></expr_stmt></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
  @<function><type><name>Test</name>
  <specifier>public</specifier> <name>void</name></type> <name>testTimeOutWithHostNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Stage</name></type> <name>s</name> <init>= <expr><call><name>getStageWithServerAction</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">977</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>setHostRoleStatus</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Role</name><operator>.</operator><name>AMBARI_SERVER_ACTION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>IN_PROGRESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ActionScheduler</name></type> <name>scheduler</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMockBuilder</name></name><argument_list>(<argument><expr><name><name>ActionScheduler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withConstructor</name><argument_list>(<argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ActionDBAccessor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ActionQueue</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>HostsMap</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>UnitOfWork</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AmbariEventPublisher</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Configuration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withArgs</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>, <argument><expr><literal type="number">50L</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>createNiceMock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// currentTime should be set to -1 and taskTimeout to 1 because it is needed for timeOutActionNeeded method will return false value</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>scheduler</name><operator>.</operator><name>timeOutActionNeeded</name></name><argument_list>(<argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>IN_PROGRESS</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Role</name><operator>.</operator><name>AMBARI_SERVER_ACTION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTimeoutRequestDueAgentRestartExecuteCommand</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testTimeoutRequest</name><argument_list>(<argument><expr><name><name>RoleCommand</name><operator>.</operator><name>EXECUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTimeoutRequestDueAgentRestartCustomCommand</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testTimeoutRequest</name><argument_list>(<argument><expr><name><name>RoleCommand</name><operator>.</operator><name>CUSTOM_COMMAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTimeoutRequestDueAgentRestartActionExecute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testTimeoutRequest</name><argument_list>(<argument><expr><name><name>RoleCommand</name><operator>.</operator><name>ACTIONEXECUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTimeoutRequestDueAgentRestartServiceCheck</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>testTimeoutRequest</name><argument_list>(<argument><expr><name><name>RoleCommand</name><operator>.</operator><name>SERVICE_CHECK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>testTimeoutRequest</name><parameter_list>(<parameter><decl><type><name>RoleCommand</name></type> <name>roleCommand</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument>, <argument><expr><name>InvalidStateTransitionException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>HOST_REGISTRATION_TIME</name> <init>= <expr><literal type="number">100L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>STAGE_TASK_START_TIME</name> <init>= <expr><name>HOST_REGISTRATION_TIME</name> <operator>-</operator> <literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ActionQueue</name></type> <name>aq</name> <init>= <expr><operator>new</operator> <call><name>ActionQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Clusters</name></type> <name>fsm</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cluster</name></type> <name>cluster</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>Cluster</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Service</name></type> <name>service</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>Service</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ServiceComponent</name></type> <name>serviceComponent</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>ServiceComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ServiceComponentHost</name></type> <name>serviceComponentHost</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>ServiceComponentHost</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Host</name></type> <name>host</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ActionDBAccessor</name></type> <name>db</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>ActionDBAccessor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AmbariEventPublisher</name></type> <name>ambariEventPublisher</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>AmbariEventPublisher</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>.</operator><name>getCluster</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>.</operator><name>getHost</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>host</name><operator>.</operator><name>getLastRegistrationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>HOST_REGISTRATION_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>host</name><operator>.</operator><name>getHostName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INTERNAL_HOSTNAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>host</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>HostState</name><operator>.</operator><name>HEALTHY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>RoleCommand</name><operator>.</operator><name>ACTIONEXECUTE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>roleCommand</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"clusterName"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ambariEventPublisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>AmbariEvent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>RoleCommand</name><operator>.</operator><name>EXECUTE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>roleCommand</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"clusterName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getService</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>service</name><operator>.</operator><name>getServiceComponent</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serviceComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>serviceComponent</name><operator>.</operator><name>getServiceComponentHost</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serviceComponentHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>serviceComponentHost</name><operator>.</operator><name>handleEvent</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>ServiceComponentHostEvent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Stage</name></type> <name>s</name> <init>= <expr><call><name>getStageWithServerAction</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">977</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Role</name><operator>.</operator><name>AMBARI_SERVER_ACTION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STAGE_TASK_START_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>setHostRoleStatus</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Role</name><operator>.</operator><name>AMBARI_SERVER_ACTION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>HostRoleStatus</name><operator>.</operator><name>IN_PROGRESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>getExecutionCommands</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getExecutionCommand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setServiceName</name><argument_list>(<argument><expr><literal type="string">"Service name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>getExecutionCommands</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getExecutionCommand</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setRoleCommand</name><argument_list>(<argument><expr><name>roleCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>aq</name><operator>.</operator><name>enqueue</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INTERNAL_HOSTNAME</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getExecutionCommands</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getExecutionCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ExecutionCommand</name></argument>&gt;</argument_list></name></type> <name>commandsToSchedule</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ExecutionCommand</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>timeoutHostRole</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyBoolean</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ActionScheduler</name></type> <name>scheduler</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMockBuilder</name></name><argument_list>(<argument><expr><name><name>ActionScheduler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withConstructor</name><argument_list>(<argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ActionDBAccessor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ActionQueue</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>HostsMap</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>UnitOfWork</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>AmbariEventPublisher</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Configuration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>withArgs</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>, <argument><expr><literal type="number">50L</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>createNiceMock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>cluster</name></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>serviceComponent</name></expr></argument>, <argument><expr><name>serviceComponentHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scheduler</name><operator>.</operator><name>processInProgressStage</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>commandsToSchedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>cluster</name></expr></argument>, <argument><expr><name>ambariEventPublisher</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>serviceComponent</name></expr></argument>, <argument><expr><name>serviceComponentHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"ActionQueue should be empty after request was timeout"</literal></expr></argument>, <argument><expr><call><name><name>aq</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INTERNAL_HOSTNAME</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testServerActionFailed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>ActionQueue</name></type> <name>aq</name> <init>= <expr><operator>new</operator> <call><name>ActionQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">956</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1059</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
 
     <expr><name>Properties</name> <name>properties</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>doReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>scheduler</name><operator>.</operator><name>doWork</name></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1044</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1149</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
     <expr><name>Properties</name> <name>properties</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;
     <expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>PARALLEL_STAGE_EXECUTION_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
    <argument><expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
             <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>;
            <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;


    <expr><call><name>doReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>scheduler</name><operator>.</operator><name>doWork</name></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1115</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1223</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
     <expr><name>Properties</name> <name>properties</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;
     <expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Configuration</name><operator>.</operator><name>PARALLEL_STAGE_EXECUTION_KEY</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
    <argument><expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
         <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>doReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>scheduler</name><operator>.</operator><name>doWork</name></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1637</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1747</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
     <expr><name>Stage</name> <name>stage</name> <operator>=</operator> <call><name><name>stageFactory</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>requestId</name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>, <argument><expr><name>clusterName</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="string">"getStageWithSingleTask"</literal></expr></argument>,
       <argument><expr><name>CLUSTER_HOST_INFO</name></expr></argument>, <argument><expr><literal type="string">"{\"host_param\":\"param_value\"}"</literal></expr></argument>, <argument><expr><literal type="string">"{\"stage_param\":\"param_value\"}"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>stage</name><operator>.</operator><name>setStageId</name></name><argument_list>(<argument><expr><name>stageId</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line">//stage.setAutoSkipFailureSupported(true);</comment>
     <return>return <expr><name>stage</name></expr>;</return></block></expr>
   }</block>
 
@@ <operator>-</operator><literal type="number">2266</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2377</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
     <expr><name>Properties</name> <name>properties</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;
     <expr><name>Configuration</name> <name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>doReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Execution of request 1</comment>
 
@@ <expr><operator>-</operator><literal type="number">2464</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2577</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestActionScheduler</name> <block>{
       }</block></expr>
     }</block></expr>)<operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>abortOperation</name><argument_list>(<argument><expr><call><name>anyLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
 
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ActionScheduler</name> <name>scheduler</name> <operator>=</operator> <call><name>spy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionScheduler</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>aq</name></expr></argument>, <argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>HostsMap</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unitOfWork</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>doReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>wasAgentRestartedDuringOperation</name><argument_list>(<argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Host</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>any</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>scheduler</name><operator>.</operator><name>doWork</name></name><argument_list>()</argument_list></call></expr>;
 
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></expr_stmt></block_content></block></function>

</unit>
