<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/489a9c4b08.java"><expr_stmt><expr><name>From</name> <literal type="number">489a9c4b0835558669ab30b0cfda68b60c8a238c</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Aravindan</name> <name><name>Vijayan</name> <argument_list type="generic">&lt;<argument><name>avijayan</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">27</literal> <name>May</name> <literal type="number">2016</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">27</literal><operator>:</operator><literal type="number">40</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">16887</literal> <operator>:</operator> <index>[<expr><name>AMS</name> <operator>/</operator> <name>Grafana</name></expr>]</index> <name>Metrics</name> <name>are</name> <name>staying</name> <name>flat</name></expr></expr_stmt> <for>for 1
 minutes<operator>,</operator> <expr_stmt><expr><name>causing</name> <name>rate</name> <name>calculations</name> <name>to</name> <name>be</name> <literal type="number">0</literal> <operator>(</operator><name>avijayan</name><operator>)</operator>

<operator>--</operator>
 <name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>  <literal type="number">5</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name><name>PostProcessingUtil</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">84</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>cache</name><operator>/</operator><name><name>PostProcessingUtilTest</name><operator>.</operator><name>java</name></name>         <operator>|</operator> <literal type="number">28</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">35</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><name><name>lineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">127</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">29</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">70483c974f</literal><operator>..</operator><literal type="number">41ba62e187</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>jackson</name><operator>-</operator><name>mapper</name><operator>-</operator><name><name>asl</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
       <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">1.9.13</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>commons</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
      <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>commons</name><operator>-</operator><name><name>math3</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
      <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">3.1.1</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>junit</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name>
       <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>junit</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name><name>PostProcessingUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name><name>PostProcessingUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ab890ecc02</name><operator>..</operator><literal type="number">814ea1f3e0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name><name>PostProcessingUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name><name>PostProcessingUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt></for>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>math3</name><operator>.</operator><name>analysis</name><operator>.</operator><name>interpolation</name><operator>.</operator><name>LinearInterpolator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>math3</name><operator>.</operator><name>analysis</name><operator>.</operator><name>polynomials</name><operator>.</operator><name>PolynomialFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>math3</name><operator>.</operator><name>analysis</name><operator>.</operator><name>polynomials</name><operator>.</operator><name>PolynomialSplineFunction</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>PostProcessingUtil</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>Double</name> <call><name>interpolate</name><argument_list>(<argument><expr><name>Long</name> <name>t</name></expr></argument>, <argument><expr><name>Long</name> <name>t1</name></expr></argument>, <argument><expr><name>Double</name> <name>m1</name></expr></argument>,
                                    <argument><expr><name>Long</name> <name>t2</name></expr></argument>, <argument><expr><name>Double</name> <name>m2</name></expr></argument>)</argument_list></call> <block>{


     <comment type="line">//Linear Interpolation : y = y0 + (y1 - y0) * ((x - x0) / (x1 - x0))</comment>
     <if_stmt><if>if <condition>(<expr><name>m1</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>m2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">80</literal> @@ <specifier>public</specifier> <name>class</name> <name>PostProcessingUtil</name> <block>{
     <return>return <expr><name>m1</name> <operator>+</operator>  <name>slope</name> <operator>*</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>t1</name><operator>)</operator></expr>;</return></block></expr></expr_stmt></block_content></block></if></if_stmt>
   }</block>
 
  <specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name> <call><name>interpolate</name><argument_list>(<argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name> <name>valuesMap</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name> <name>requiredTimestamps</name></expr></argument>)</argument_list></call> <block>{

    <expr><name>LinearInterpolator</name> <name>linearInterpolator</name> <operator>=</operator> <operator>new</operator> <call><name>LinearInterpolator</name><argument_list>()</argument_list></call></expr>;

    <if_stmt><if>if <condition>(<expr><name>valuesMap</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>valuesMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
    <if_stmt><if>if <condition>(<expr><name>requiredTimestamps</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>requiredTimestamps</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>

    <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name> <name>interpolatedValuesMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>valuesMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">//Just one value present in the window. Use that value to interpolate all required timestamps.</comment>
      <decl_stmt><decl><type><name>Double</name></type> <name>value</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>valuesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>Long</name></type> <name>requiredTs</name> <range>: <expr><name>requiredTimestamps</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>interpolatedValuesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>requiredTs</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <return>return <expr><name>interpolatedValuesMap</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>timestamps</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><call><name><name>valuesMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>metrics</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><call><name><name>valuesMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>valuesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>timestamps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>metrics</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>PolynomialSplineFunction</name></type> <name>function</name> <init>= <expr><call><name><name>linearInterpolator</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><name>timestamps</name></expr></argument>, <argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>PolynomialFunction</name><index>[]</index></name></type> <name>splines</name> <init>= <expr><call><name><name>function</name><operator>.</operator><name>getPolynomials</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PolynomialFunction</name></type> <name>first</name> <init>= <expr><name><name>splines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Long</name></type> <name>requiredTs</name> <range>: <expr><name>requiredTimestamps</name></expr></range></decl></init>)</control> <block>{<block_content>

      <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>timestampInRange</name><argument_list>(<argument><expr><name>requiredTs</name></expr></argument>, <argument><expr><name><name>timestamps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>timestamps</name><index>[<expr><name><name>timestamps</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
          Interpolation Case
          Required TS is within range of the set of values used for interpolation.
          Hence, we can use library to get the interpolated value.
         */</comment>
        <expr_stmt><expr><name>interpolatedValue</name> <operator>=</operator> <call><name><name>function</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>requiredTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
        Extrapolation Case
        Required TS outside range of the set of values used for interpolation.
        We will use the coefficients to make best effort extrapolation
        y(x)= y1 + m * (xâx1)
        where, m = (y2ây1)/(x2âx1)
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>first</name><operator>.</operator><name>getCoefficients</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>first</name><operator>.</operator><name>getCoefficients</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <comment type="block">/*
          y = c0 + c1x
          where c0, c1 are coefficients
          c1 will not be present if slope is zero.
           */</comment>
          <decl_stmt><decl><type><name>Double</name></type> <name>y1</name> <init>= <expr><call><name><name>first</name><operator>.</operator><name>getCoefficients</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Double</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>first</name><operator>.</operator><name>getCoefficients</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>first</name><operator>.</operator><name>getCoefficients</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>interpolatedValue</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>m</name> <operator>*</operator> <operator>(</operator><name>requiredTs</name> <operator>-</operator> <name><name>timestamps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>interpolatedValuesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>requiredTs</name></expr></argument>, <argument><expr><name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>interpolatedValuesMap</name></expr>;</return>
  }

  private <function><type><specifier>static</specifier> <name>boolean</name></type> <name>timestampInRange</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>timestamp</name> <operator>&gt;=</operator> <name>left</name> <operator>&amp;&amp;</operator> <name>timestamp</name> <operator>&lt;=</operator> <name>right</name><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name>cache</name><operator>/</operator><name><name>PostProcessingUtilTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name>cache</name><operator>/</operator><name><name>PostProcessingUtilTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1ec71d03b0</literal><operator>..</operator><name>d8387d0304</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name>cache</name><operator>/</operator><name><name>PostProcessingUtilTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>metrics2</name><operator>/</operator><name>sink</name><operator>/</operator><name>timeline</name><operator>/</operator><name>cache</name><operator>/</operator><name><name>PostProcessingUtilTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name><operator>.</operator><name>PostProcessingUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name><operator>.</operator><name>SingleValuedTimelineMetric</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>public</specifier> <name>class</name> <name>PostProcessingUtilTest</name> <block>{
 
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testLinearInterpolate</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{

    <expr><name>long</name> <name>t2</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>valuesMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>valuesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3000</literal></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>valuesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3000</literal></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>valuesMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">3000</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>requiredTs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>requiredTs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>requiredTs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>requiredTs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Map</name></type> <name>result</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><name>valuesMap</name></expr></argument>, <argument><expr><name>requiredTs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>t2</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }

   }
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">117145e861</literal><operator>..</operator><literal type="number">722dc14d6c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>class</name> <name>TimelineMetricClusterAggregatorSecond</name> extends <name>AbstractTimelineAggre</name>
                                          <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name> <name>timeSliceValueMap</name></expr></expr_stmt>) <block>{<block_content>
 
 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>sliceNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sliceNum</name> <operator>&lt;</operator> <call><name><name>timeSlices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>sliceNum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>timeSlice</name> <init>= <expr><call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sliceNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>requiredTimestamps</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Long</name><index>[]</index></name></type> <name>timeSlice</name> <range>: <expr><name>timeSlices</name></expr></range></decl></init>)</control> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timeSliceValueMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Found an empty slice : "</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Double</name></type> <name>lastSeenValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>sliceNum</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>prevTimeSlice</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>lastSeenValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>prevTimeSlice</name> <operator>=</operator> <call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastSeenValue</name> <operator>=</operator> <call><name><name>timeSliceValueMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>prevTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>requiredTimestamps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
 
        <decl_stmt><decl><type><name>Double</name></type> <name>nextSeenValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>sliceNum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>nextTimeSlice</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>( <expr><name>nextSeenValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name><name>timeSlices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>nextTimeSlice</name> <operator>=</operator> <call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nextSeenValue</name> <operator>=</operator> <call><name><name>timeSliceValueMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>nextTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>interpolatedValuesMap</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricValues</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requiredTimestamps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><name>prevTimeSlice</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>prevTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>lastSeenValue</name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><name>nextTimeSlice</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>nextTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>nextSeenValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>interpolatedValuesMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>interpolatedValuesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <if_stmt><if>if <condition>(<expr><name>interpolatedValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>clusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(
             <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
            <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Interpolated value : "</literal> <operator>+</operator> <name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clusterMetric</name></expr></argument>, <argument><expr><name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Cannot compute interpolated value, hence skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>

       </block_content>}</block></for>
     </block_content>}</block></if></if_stmt>
   </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f55dda1471</name><operator>..</operator><name>dc01f38e3e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TimelineMetricClusterAggregatorSecondTest</name> <block>{
 
     <expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7.5</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;
 
   }</block>
 
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block>

</unit>
