<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/7153112e79.java"><expr_stmt><expr><name>From</name> <literal type="number">7153112e7951af1b91c2254202148fd6afd83726</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Sumit</name> <name><name>Mohanty</name> <argument_list type="generic">&lt;<argument><name>smohanty</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">15</literal> <name>Dec</name> <literal type="number">2015</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">06</literal><operator>:</operator><literal type="number">07</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">14194.</literal> <name>Role</name> <name>Based</name> <name>Access</name> <name>Control</name> <name>support</name></expr></expr_stmt> <for>for Metrics
 <control>(<init><expr><name>Swapan</name> <name>Shridhar</name> <name>via</name> <name>smohanty</name></expr></init>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>internal</name><operator>/</operator><name><name>AbstractPropertyProvider</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">170</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>StackDefinedPropertyProvider</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>controller</name><operator>/</operator><name>jmx</name><operator>/</operator><name><name>JMXPropertyProvider</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>metrics</name><operator>/</operator><name><name>MetricsPropertyProvider</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>metrics</name><operator>/</operator><name><name>MetricsPropertyProviderProxy</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>MetricsReportPropertyProviderProxy</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>metrics</name><operator>/</operator><name><name>RestMetricsPropertyProvider</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>ThreadPoolEnabledPropertyProvider</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AuthorizationHelper</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>StackDefinedPropertyProviderTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">201</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>metrics</name><operator>/</operator><name><name>JMXPropertyProviderTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">291</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name><name>RestMetricsPropertyProviderTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">235</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>ganglia</name><operator>/</operator><name><name>GangliaPropertyProviderTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">160</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>timeline</name><operator>/</operator><name><name>AMSPropertyProviderTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">229</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <literal type="number">14</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">991</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">343</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AbstractPropertyProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AbstractPropertyProvider</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a0c44f0aa</literal><operator>..</operator><literal type="number">2b7ee4eebb</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AbstractPropertyProvider</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>AbstractPropertyProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator> <literal type="string">"License"</literal></expr></expr_stmt></block_content></block></for>)<empty_stmt>;</empty_stmt> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name>
  <operator>*</operator> <name>with</name> <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>
  <operator>*</operator>
 <operator>*</operator>     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>
 <operator>*</operator>        <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>
  <operator>*</operator>
  <operator>*</operator> <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
  <operator>*</operator> <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
@@ <expr><operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricReportingAdapter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>PropertyProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>TemporalInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>ResourceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>RoleAuthorization</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name><operator>.</operator><name>TimelineMetric</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">136</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name>
 
   <comment type="line">// ----- helper methods ----------------------------------------------------</comment>
 
  <comment type="block" format="javadoc">/**
   * Retrieves passed-in Resource's Type
   *
   * @param resources Set of Resources.
   * @return Type of resource from the Set.
   */</comment>
  <specifier>protected</specifier> <name>String</name> <call><name>getResourceTypeFromResources</name><argument_list>(<argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name> <name>resources</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>String</name> <name>resType</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <if_stmt><if>if <condition>(<expr><name>resources</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>itr</name> <init>= <expr><call><name><name>resources</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>itr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Pick the 1st resource, as the passed in resources will have same Type,</comment>
        <comment type="line">// in a given call.</comment>
        <decl_stmt><decl><type><name>Resource</name></type> <name>res</name> <init>= <expr><call><name><name>itr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>resType</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
      }
    }
    <return>return <expr><name>resType</name></expr>;</return>
  }

  <comment type="block" format="javadoc">/**
   * Retrieves all the cluster names to which the passed-in Resource's belong.
   *
   * @param resources Set of Resources.
   * @return Cluster's Name
   */</comment>
  protected <function><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getClustersNameFromResources</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clusterNamePropertyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clusNames</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>resources</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>itr</name> <init>= <expr><call><name><name>resources</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>itr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Resource</name></type> <name>res</name> <init>= <expr><call><name><name>itr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>clusNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>res</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><name>clusterNamePropertyId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>clusNames</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Retrieves all the 'Cluster's Resource Ids' from the passed-in Resources.
   *
   * @param resources Set of Resources.
   * @param clusterNamePropertyId ClusterName PropertyId.
   * @return cluster Id.
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getClustersResourceId</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clusterNamePropertyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>clusterResId</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>clusterNamePropertyId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>AmbariManagementController</name></type> <name>amc</name> <init>= <expr><call><name><name>AmbariServer</name><operator>.</operator><name>getController</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clusterNames</name> <init>= <expr><call><name>getClustersNameFromResources</name><argument_list>(<argument><expr><name>resources</name></expr></argument>, <argument><expr><name>clusterNamePropertyId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clusNameItr</name> <init>= <expr><call><name><name>clusterNames</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>clusNameItr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>clusterResId</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>amc</name><operator>.</operator><name>getClusters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCluster</name><argument_list>(<argument><expr><call><name><name>clusNameItr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getResourceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AmbariException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cluster Id couldn't be retrieved."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cluster Id couldn't be retrieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Retrieved Cluster Ids = "</literal> <operator>+</operator> <call><name><name>clusterResId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>clusterResId</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Check the User's authorization for retrieving the Metrics.
   *
   * @param resources Set of Resources.
   * @param clusterNamePropertyId ClusterName PropertyId.
   * @return boolean
   * @throws AuthorizationException
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>checkAuthorizationForMetrics</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clusterNamePropertyId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AuthorizationException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>resType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the Type</comment>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <call><name>getResourceTypeFromResources</name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>resType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Get the cluster Id.</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>clusterResIds</name> <init>= <expr><call><name>getClustersResourceId</name><argument_list>(<argument><expr><name>resources</name></expr></argument>, <argument><expr><name>clusterNamePropertyId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>clusterResIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Retrieved cluster's Resource Id = "</literal> <operator>+</operator> <name>clusterResIds</name> <operator>+</operator> <literal type="string">", Resource Type = "</literal> <operator>+</operator> <name>resType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>clusResIdsItr</name> <init>= <expr><call><name><name>clusterResIds</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>clusResIdsItr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Long</name></type> <name>clusResId</name> <init>= <expr><call><name><name>clusResIdsItr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Resource</name><operator>.</operator><name>InternalType</name></name></type> <name>resTypeVal</name> <init>= <expr><call><name><name>Resource</name><operator>.</operator><name>InternalType</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>resType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name>resTypeVal</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>Cluster</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthorizationHelper</name><operator>.</operator><name>isAuthorized</name></name><argument_list>(<argument><expr><name><name>ResourceType</name><operator>.</operator><name>CLUSTER</name></name></expr></argument>, <argument><expr><name>clusResId</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>CLUSTER_VIEW_METRICS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"The authenticated user does not have authorization to view cluster metrics"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>Host</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthorizationHelper</name><operator>.</operator><name>isAuthorized</name></name><argument_list>(<argument><expr><name><name>ResourceType</name><operator>.</operator><name>CLUSTER</name></name></expr></argument>, <argument><expr><name>clusResId</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>HOST_VIEW_METRICS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"The authenticated user does not have authorization to view Host metrics"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>Component</name></expr> :</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthorizationHelper</name><operator>.</operator><name>isAuthorized</name></name><argument_list>(<argument><expr><name><name>ResourceType</name><operator>.</operator><name>CLUSTER</name></name></expr></argument>, <argument><expr><name>clusResId</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>SERVICE_VIEW_METRICS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"The authenticated user does not have authorization to view Service metrics"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>HostComponent</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthorizationHelper</name><operator>.</operator><name>isAuthorized</name></name><argument_list>(<argument><expr><name><name>ResourceType</name><operator>.</operator><name>CLUSTER</name></name></expr></argument>, <argument><expr><name>clusResId</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>RoleAuthorization</name><operator>.</operator><name>SERVICE_VIEW_METRICS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><literal type="string">"The authenticated user does not have authorization to view Service metrics"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unsuported Resource Type for Metrics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
   <comment type="block" format="javadoc">/**
    * Get a map of metric / property info based on the given component name and property id.
    * Note that the property id may map to multiple metrics if the property id is a category.
@@ -139,7 +281,7 @@ public abstract class AbstractPropertyProvider extends BaseProvider implements P
       }
     }
 
    if (!propertyId.endsWith("/")){
    if (!propertyId.endsWith("/")) {
       propertyId += "/";
     }
 
@@ -198,13 +340,13 @@ public abstract class AbstractPropertyProvider extends BaseProvider implements P
         matcher = FIND_ARGUMENT_METHOD_REGEX.matcher(argName);
         while (matcher.find()) {
           // find the end of the method
          int openParenIndex  = argName.indexOf('(', matcher.start());
          int openParenIndex = argName.indexOf('(', matcher.start());
           int closeParenIndex = indexOfClosingParenthesis(argName, openParenIndex);
 
           String methodName = argName.substring(matcher.start() + 1, openParenIndex);
          String args       = argName.substring(openParenIndex + 1, closeParenIndex);
          String args = argName.substring(openParenIndex + 1, closeParenIndex);
 
          List&lt;Object&gt;   argList    = new LinkedList&lt;Object&gt;();
          List&lt;Object&gt; argList = new LinkedList&lt;Object&gt;();
           List&lt;Class&lt;?&gt;&gt; paramTypes = new LinkedList&lt;Class&lt;?&gt;&gt;();
 
           // for each argument of the method ...
@@ -217,7 +359,7 @@ public abstract class AbstractPropertyProvider extends BaseProvider implements P
             value = invokeArgumentMethod(value, methodName, argList, paramTypes);
           } catch (Exception e) {
             throw new IllegalArgumentException("Can't apply method " + methodName + " for argument " +
                argName + " in " + propertyId, e);
              argName + " in " + propertyId, e);
           }
         }
         if (value.equals(val)) {
@@ -234,7 +376,7 @@ public abstract class AbstractPropertyProvider extends BaseProvider implements P
    * Find the index of the closing parenthesis in the given string.
    */</comment>
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexOfClosingParenthesis</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">384</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
       </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
         <return>return <expr><name>index</name></expr>;</return>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>index</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">400</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name></expr></expr_stmt>
 
     <comment type="line">// only supports strings and integers</comment>
     <if_stmt><if>if <condition>(<expr><call><name><name>arg</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>argList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>arg</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>argList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>arg</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>paramTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <decl_stmt><decl><type><name>Integer</name></type> <name>number</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">272</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">414</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name>
    <operator>*</operator><operator>/</operator>
   <specifier>private</specifier> <specifier>static</specifier> <name>String</name> <call><name>invokeArgumentMethod</name><argument_list>(<argument><expr><name>String</name> <name>argValue</name></expr></argument>, <argument><expr><name>String</name> <name>methodName</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>argList</name></expr></argument>,
                                              <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>paramTypes</name></expr></argument>)</argument_list></call>
      <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InvocationTargetException</name> <block>{</block></expr></argument></throws>
    <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InvocationTargetException</name> <block>{
     <comment type="line">// invoke the method through reflection</comment>
     <expr><name>Method</name> <name>method</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><name>methodName</name></expr></argument>, <argument><expr><call><name><name>paramTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[<expr><call><name><name>paramTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">296</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">438</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name></expr></expr_stmt>
     </block_content>}</block></else></if_stmt>
 
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>componentMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>propertyId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>regexKey</name> <operator>!=</operator> <literal type="null">null</literal>
        <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>regexKey</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>propertyId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>regexKey</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>propertyId</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content> <block>{<block_content>
 
       <decl_stmt><decl><type><name>PropertyInfo</name></type> <name>propertyInfo</name> <init>= <expr><call><name><name>componentMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>regexKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>propertyInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">320</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">462</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name>
   <specifier>protected</specifier> <name>PropertyInfo</name> <call><name>updatePropertyInfo</name><argument_list>(<argument><expr><name>String</name> <name>propertyKey</name></expr></argument>, <argument><expr><name>String</name> <name>id</name></expr></argument>, <argument><expr><name>PropertyInfo</name> <name>propertyInfo</name></expr></argument>)</argument_list></call> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>regexGroups</name> <operator>=</operator> <call><name>getRegexGroups</name><argument_list>(<argument><expr><name>propertyKey</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;
     <name>String</name> <name>propertyId</name> <operator>=</operator> <call><name><name>propertyInfo</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>propertyId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>propertyId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <for>for <control>(<init><decl><type><name>String</name></type> <name>regexGroup</name> <range>: <expr><name>regexGroups</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><name>regexGroup</name> <operator>=</operator> <call><name><name>regexGroup</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>propertyId</name> <operator>=</operator> <call><name><name>propertyId</name><operator>.</operator><name>replaceFirst</name></name><argument_list>(<argument><expr><name>FIND_REGEX_IN_METRIC_REGEX</name></expr></argument>, <argument><expr><name>regexGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">496</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractPropertyProvider</name> extends <name>BaseProvider</name> implements <name>P</name>
 
     <name>String</name> <name>category</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyCategory</name></name><argument_list>(<argument><expr><name>propertyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <while>while <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>categoryIds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>categoryIds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="boolean">true</literal></expr>;</return>
       </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>category</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyCategory</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProvider</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a1b4f3faa2</name><operator>..</operator><name>edd11c14f9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProvider</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Request</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>SystemException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>StreamProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Cluster</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Clusters</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>StackId</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>stack</name><operator>.</operator><name>Metric</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>stack</name><operator>.</operator><name>MetricDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricsServiceProvider</name><operator>.</operator><name>MetricsService</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * This class analyzes a service's metrics to determine if additional
  * metrics should be fetched.  It's okay to maintain state here since these
@@ -206,8 +206,11 @@ public class StackDefinedPropertyProvider implements PropertyProvider {
         pp.populateResources(resources, request, predicate);
       }
 
    } catch (Exception e) {
      e.printStackTrace();
    } catch (AuthorizationException e) {
      // Need to rethrow the catched 'AuthorizationException'.
      throw e;
    }
    catch (Exception e) {
       throw new SystemException("Error loading deferred resources", e);
     }
 
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java
index 2748dd4bd5..2079e72669 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java
@@ -121,7 +121,7 @@ public class JMXPropertyProvider extends ThreadPoolEnabledPropertyProvider {
                              String componentNamePropertyId,
                              String statePropertyId) {
 
    super(componentMetrics, hostNamePropertyId, metricHostProvider);
    super(componentMetrics, hostNamePropertyId, metricHostProvider, clusterNamePropertyId);
 
     this.streamProvider           = streamProvider;
     this.jmxHostProvider          = jmxHostProvider;
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java
index f1c5c8182a..a346051893 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java
@@ -26,8 +26,6 @@ import org.apache.ambari.server.controller.spi.Predicate;
 import org.apache.ambari.server.controller.spi.Request;
 import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.SystemException;
import org.apache.ambari.server.controller.utilities.PredicateHelper;
import org.apache.ambari.server.controller.utilities.StreamProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.util.Map;
@@ -129,12 +127,15 @@ public abstract class MetricsPropertyProvider extends AbstractPropertyProvider {
   @Override
   public Set&lt;Resource&gt; populateResources(Set&lt;Resource&gt; resources,
                 Request request, Predicate predicate) throws SystemException {

     Set&lt;String&gt; ids = getRequestPropertyIds(request, predicate);
     if (ids.isEmpty()) {
       return resources;
     }
 
    if(!checkAuthorizationForMetrics(resources, clusterNamePropertyId)) {
      return resources;
    }

     // Re-initialize in case of reuse.
     metricsPaddingMethod = DEFAULT_PADDING_METHOD;
 
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java
index ac11556c45..c48aa231b0 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java
@@ -34,11 +34,10 @@ import org.apache.ambari.server.controller.spi.Predicate;
 import org.apache.ambari.server.controller.spi.Request;
 import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.SystemException;
import org.apache.ambari.server.controller.utilities.StreamProvider;

 import java.util.Map;
 import java.util.Set;
 
import static org.apache.ambari.server.controller.metrics.MetricsPaddingMethod.ZERO_PADDING_PARAM;
 import static org.apache.ambari.server.controller.metrics.MetricsServiceProvider.MetricsService;
 import static org.apache.ambari.server.controller.metrics.MetricsServiceProvider.MetricsService.GANGLIA;
 import static org.apache.ambari.server.controller.metrics.MetricsServiceProvider.MetricsService.TIMELINE_METRICS;
@@ -49,6 +48,7 @@ public class MetricsPropertyProviderProxy extends AbstractPropertyProvider {
   private AMSPropertyProvider amsPropertyProvider;
   private GangliaPropertyProvider gangliaPropertyProvider;
   private TimelineMetricCacheProvider cacheProvider;
  private String clusterNamePropertyId;
 
   public MetricsPropertyProviderProxy(
     InternalType type,
@@ -65,6 +65,7 @@ public class MetricsPropertyProviderProxy extends AbstractPropertyProvider {
     super(componentPropertyInfoMap);
     this.metricsServiceProvider = serviceProvider;
     this.cacheProvider = cacheProvider;
    this.clusterNamePropertyId = clusterNamePropertyId;
 
     switch (type) {
       case Host:
@@ -183,6 +184,10 @@ public class MetricsPropertyProviderProxy extends AbstractPropertyProvider {
   public Set&lt;Resource&gt; populateResources(Set&lt;Resource&gt; resources, Request request,
                                          Predicate predicate) throws SystemException {
 
    if(!checkAuthorizationForMetrics(resources, clusterNamePropertyId)) {
      return resources;
    }

     MetricsService metricsService = metricsServiceProvider.getMetricsServiceType();
 
     if (metricsService != null) {
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java
index 4d2ce018ee..f28c34d61a 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java
@@ -28,7 +28,6 @@ import org.apache.ambari.server.controller.spi.Predicate;
 import org.apache.ambari.server.controller.spi.Request;
 import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.SystemException;
import org.apache.ambari.server.controller.utilities.StreamProvider;
 
 import java.util.Map;
 import java.util.Set;
@@ -42,6 +41,7 @@ public class MetricsReportPropertyProviderProxy extends AbstractPropertyProvider
   private MetricsReportPropertyProvider gangliaMetricsReportProvider;
   private final MetricsServiceProvider metricsServiceProvider;
   private TimelineMetricCacheProvider cacheProvider;
  private String clusterNamePropertyId;
 
   public MetricsReportPropertyProviderProxy(
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; componentPropertyInfoMap,
@@ -56,6 +56,7 @@ public class MetricsReportPropertyProviderProxy extends AbstractPropertyProvider
     super(componentPropertyInfoMap);
     this.metricsServiceProvider = serviceProvider;
     this.cacheProvider = cacheProvider;
    this.clusterNamePropertyId = clusterNamePropertyId;
 
     createReportPropertyProviders(componentPropertyInfoMap,
       streamProvider,
@@ -105,6 +106,9 @@ public class MetricsReportPropertyProviderProxy extends AbstractPropertyProvider
   public Set&lt;Resource&gt; populateResources(Set&lt;Resource&gt; resources, Request request,
                                          Predicate predicate) throws SystemException {
 
    if(!checkAuthorizationForMetrics(resources, clusterNamePropertyId)) {
      return resources;
    }
     MetricsService metricsService = metricsServiceProvider.getMetricsServiceType();
 
     if (metricsService != null) {
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java
index b32adda106..fc76b1ec10 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/RestMetricsPropertyProvider.java
@@ -127,7 +127,7 @@ public class RestMetricsPropertyProvider extends ThreadPoolEnabledPropertyProvid
     String statePropertyId,
     String componentName){
 
    super(componentMetrics, hostNamePropertyId, metricHostProvider);
    super(componentMetrics, hostNamePropertyId, metricHostProvider, clusterNamePropertyId);
     this.metricsProperties = metricsProperties;
     this.streamProvider = streamProvider;
     this.clusterNamePropertyId = clusterNamePropertyId;
diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java
index 8a35636cdd..1e961a6b24 100644
-- a/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java
++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java
@@ -51,6 +51,7 @@ public abstract class ThreadPoolEnabledPropertyProvider extends AbstractProperty
   public static final Set&lt;String&gt; healthyStates = Collections.singleton("STARTED");
   protected final String hostNamePropertyId;
   private final MetricHostProvider metricHostProvider;
  private final String clusterNamePropertyId;
 
   /**
    * Executor service is shared between all childs of current class
@@ -78,10 +79,12 @@ public abstract class ThreadPoolEnabledPropertyProvider extends AbstractProperty
    */</comment>
   <constructor><specifier>public</specifier> <name>ThreadPoolEnabledPropertyProvider</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>PropertyInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>componentMetrics</name></decl></parameter>,
                                            <parameter><decl><type><name>String</name></type> <name>hostNamePropertyId</name></decl></parameter>,
                                           <parameter><decl><type><name>MetricHostProvider</name></type> <name>metricHostProvider</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                           <decl_stmt><decl><type><name>MetricHostProvider</name></type> <name>metricHostProvider</name></decl>,
                                           <decl><type ref="prev"/><name>String</name> <name>clusterNamePropertyId</name></decl>) <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>componentMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hostNamePropertyId</name></name> <operator>=</operator> <name>hostNamePropertyId</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metricHostProvider</name></name> <operator>=</operator> <name>metricHostProvider</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clusterNamePropertyId</name></name> <operator>=</operator> <name>clusterNamePropertyId</name></expr>;</expr_stmt>
   </block_content>}</block></decl_stmt>
 
   <comment type="line">// ----- Thread pool -------------------------------------------------------</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ThreadPoolEnabledPropertyProvider</name> extends <name>AbstractProperty</name>
   <specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name> <call><name>populateResources</name><argument_list>(<argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name> <name>resources</name></expr></argument>, <argument><expr><name>Request</name> <name>request</name></expr></argument>, <argument><expr><name>Predicate</name> <name>predicate</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>SystemException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
 
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkAuthorizationForMetrics</name><argument_list>(<argument><expr><name>resources</name></expr></argument>, <argument><expr><name>clusterNamePropertyId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>resources</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
     <comment type="line">// Get a valid ticket for the request.</comment>
     <decl_stmt><decl><type><name>Ticket</name></type> <name>ticket</name> <init>= <expr><operator>new</operator> <call><name>Ticket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AuthorizationHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AuthorizationHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0c675b88dc</literal><operator>..</operator><name>b136182392</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AuthorizationHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>authorization</name><operator>/</operator><name><name>AuthorizationHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>AuthorizationHelper</name> <block>{
         <if_stmt><if>if <condition>(<expr><name><name>ResourceType</name><operator>.</operator><name>AMBARI</name></name> <operator>==</operator> <name>privilegeResourceType</name></expr>)</condition> <block>{<block_content>
           <comment type="line">// This resource type indicates administrative access</comment>
           <expr_stmt><expr><name>resourceOK</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ResourceType</name><operator>.</operator><name>VIEW</name></name> <operator>==</operator> <name>privilegeResourceType</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// For a VIEW USER.</comment>
          <expr_stmt><expr><name>resourceOK</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
         </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>resourceType</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>resourceType</name> <operator>==</operator> <name>privilegeResourceType</name><operator>)</operator></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>resourceOK</name> <operator>=</operator> <operator>(</operator><name>resourceId</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name><name>resourceId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>privilegeResource</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProviderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bb6673cebe</name><operator>..</operator><literal type="number">0ae3e6aad8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProviderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>internal</name><operator>/</operator><name><name>StackDefinedPropertyProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Binder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>PersistService</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>util</name><operator>.</operator><name>Modules</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>ComponentSSLConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>jmx</name><operator>.</operator><name>TestStreamProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>JMXPropertyProviderTest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricsServiceProvider</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>SystemException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>TemporalInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>StreamProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>InMemoryDefaultTestModule</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>OrmTestHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>TestAuthenticationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Cluster</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Clusters</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Host</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name>security</name><operator>.</operator><name>core</name><operator>.</operator><name>context</name><operator>.</operator><name>SecurityContextHolder</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>persist</name><operator>.</operator><name>PersistService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>anyObject</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Tests the stack defined property provider.
@@ -75,6 +84,7 @@ public class StackDefinedPropertyProviderTest {
   private static final String HOST_COMPONENT_HOST_NAME_PROPERTY_ID = "HostRoles/host_name";
   private static final String HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID = "HostRoles/component_name";
   private static final String HOST_COMPONENT_STATE_PROPERTY_ID = "HostRoles/state";
  private static final String CLUSTER_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "cluster_name");
 
   private Clusters clusters = null;
   private Injector injector = null;
@@ -111,9 +121,9 @@ public class StackDefinedPropertyProviderTest {
     clusters = injector.getInstance(Clusters.class);
     StackId stackId = new StackId("HDP-2.0.5");
 
    clusters.addCluster("c1", stackId);
    clusters.addCluster("c2", stackId);
 
    Cluster cluster = clusters.getCluster("c1");
    Cluster cluster = clusters.getCluster("c2");
 
     cluster.setDesiredStackVersion(stackId);
     helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
@@ -128,7 +138,25 @@ public class StackDefinedPropertyProviderTest {
     host.setHostAttributes(hostAttributes);
     host.persist();
 
    clusters.mapHostToCluster("h1", "c1");
    clusters.mapHostToCluster("h1", "c2");

    // Setting up Mocks for Controller, Clusters etc, queried as part of user's Role context
    // while fetching Metrics.
    AmbariManagementController amc = createNiceMock(AmbariManagementController.class);
    Field field = AmbariServer.class.getDeclaredField("clusterController");
    field.setAccessible(true);
    field.set(null, amc);
    Clusters clustersMock = createNiceMock(Clusters.class);
    Cluster clusterMock = createNiceMock(Cluster.class);
    expect(amc.getClusters()).andReturn(clustersMock).anyTimes();
    expect(clustersMock.getCluster(CLUSTER_NAME_PROPERTY_ID)).andReturn(clusterMock).anyTimes();
    expect(clusterMock.getResourceId()).andReturn(2L).anyTimes();
    try {
      expect(clustersMock.getCluster(anyObject(String.class))).andReturn(clusterMock).anyTimes();
    } catch (AmbariException e) {
      e.printStackTrace();
    }
    replay(amc, clustersMock, clusterMock);
   }
 
   @After
@@ -137,6 +165,95 @@ public class StackDefinedPropertyProviderTest {
   }
 
   @Test
  public void testStackDefinedPropertyProviderAsClusterAdministrator() throws Exception {
    //Setup user with Role 'ClusterAdministrator'.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("ClusterAdmin", 2L));

    testPopulateHostComponentResources();
    testCustomProviders();
    testPopulateResources_HDP2();
    testPopulateResources_HDP2_params();
    testPopulateResources_HDP2_params_singleProperty();
    testPopulateResources_HDP2_params_category();
    testPopulateResources_HDP2_params_category2();
    testPopulateResources_jmx_JournalNode();
    testPopulateResources_jmx_Storm();
    testPopulateResources_NoRegionServer();
    testPopulateResources_HBaseMaster2();
    testPopulateResources_params_category5();
    testPopulateResources_ganglia_JournalNode();
    testPopulateResources_resourcemanager_clustermetrics();
    testPopulateResourcesWithAggregateFunctionMetrics();
  }

  @Test
  public void testStackDefinedPropertyProviderAsAdministrator() throws Exception {
    //Setup user with Role 'Administrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("Admin"));

    testPopulateHostComponentResources();
    testCustomProviders();
    testPopulateResources_HDP2();
    testPopulateResources_HDP2_params();
    testPopulateResources_HDP2_params_singleProperty();
    testPopulateResources_HDP2_params_category();
    testPopulateResources_HDP2_params_category2();
    testPopulateResources_jmx_JournalNode();
    testPopulateResources_jmx_Storm();
    testPopulateResources_NoRegionServer();
    testPopulateResources_HBaseMaster2();
    testPopulateResources_params_category5();
    testPopulateResources_ganglia_JournalNode();
    testPopulateResources_resourcemanager_clustermetrics();
    testPopulateResourcesWithAggregateFunctionMetrics();
  }

  @Test
  public void testStackDefinedPropertyProviderAsServiceAdministrator() throws Exception {
    //Setup user with 'ServiceAdministrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createServiceAdministrator("ServiceAdmin", 2L));

    testPopulateHostComponentResources();
    testCustomProviders();
    testPopulateResources_HDP2();
    testPopulateResources_HDP2_params();
    testPopulateResources_HDP2_params_singleProperty();
    testPopulateResources_HDP2_params_category();
    testPopulateResources_HDP2_params_category2();
    testPopulateResources_jmx_JournalNode();
    testPopulateResources_jmx_Storm();
    testPopulateResources_NoRegionServer();
    testPopulateResources_HBaseMaster2();
    testPopulateResources_params_category5();
    testPopulateResources_ganglia_JournalNode();
    testPopulateResources_resourcemanager_clustermetrics();
    testPopulateResourcesWithAggregateFunctionMetrics();
  }

  @Test(expected = AuthorizationException.class)
  public void testStackDefinedPropertyProviderAsViewUser() throws Exception {
    // Setup user with 'ViewUser'
    // ViewUser doesn't have the 'CLUSTER_VIEW_METRICS', 'HOST_VIEW_METRICS' and 'SERVICE_VIEW_METRICS', thus
    // can't retrieve the Metrics.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createViewUser("ViewUser", 2L));

    testPopulateHostComponentResources();
    testCustomProviders();
    testPopulateResources_HDP2();
    testPopulateResources_HDP2_params();
    testPopulateResources_HDP2_params_singleProperty();
    testPopulateResources_HDP2_params_category();
    testPopulateResources_HDP2_params_category2();
    testPopulateResources_jmx_JournalNode();
    testPopulateResources_jmx_Storm();
    testPopulateResources_NoRegionServer();
    testPopulateResources_HBaseMaster2();
    testPopulateResources_params_category5();
    testPopulateResources_ganglia_JournalNode();
    testPopulateResources_resourcemanager_clustermetrics();
    testPopulateResourcesWithAggregateFunctionMetrics();
  }

   public void testPopulateHostComponentResources() throws Exception {
     JMXPropertyProviderTest.TestJMXHostProvider tj = new JMXPropertyProviderTest.TestJMXHostProvider(true);
     JMXPropertyProviderTest.TestMetricHostProvider tm = new JMXPropertyProviderTest.TestMetricHostProvider();
@@ -150,7 +267,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty("HostRoles/host_name", "h1");
     resource.setProperty("HostRoles/component_name", "NAMENODE");
     resource.setProperty("HostRoles/state", "STARTED");
@@ -171,7 +288,6 @@ public class StackDefinedPropertyProviderTest {
   }
 
 
  @Test
   public void testCustomProviders() throws Exception {
 
     StackDefinedPropertyProvider sdpp = new StackDefinedPropertyProvider(
@@ -181,7 +297,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty("HostRoles/host_name", "h1");
     resource.setProperty("HostRoles/component_name", "DATANODE");
     resource.setProperty("HostRoles/state", "STARTED");
@@ -326,7 +442,6 @@ public class StackDefinedPropertyProviderTest {
     }
   }
 
  @Test
   public void testPopulateResources_HDP2() throws Exception {
 
     URLStreamProvider  streamProvider = new TestStreamProvider();
@@ -350,7 +465,7 @@ public class StackDefinedPropertyProviderTest {
     // resourcemanager
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -378,7 +493,7 @@ public class StackDefinedPropertyProviderTest {
     //namenode
     resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "NAMENODE");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -389,7 +504,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertEquals(1, propertyProvider.populateResources(Collections.singleton(resource), request, null).size());
   }
 
  @Test
   public void testPopulateResources_HDP2_params() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -411,7 +525,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "h1");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -442,7 +556,6 @@ public class StackDefinedPropertyProviderTest {
   }
 
 
  @Test
   public void testPopulateResources_HDP2_params_singleProperty() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -464,7 +577,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "h1");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -480,7 +593,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root", "AvailableVCores")));
   }
 
  @Test
   public void testPopulateResources_HDP2_params_category() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -502,7 +614,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "h1");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -533,7 +645,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertEquals(1,    resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root/second_queue", "AppsSubmitted")));
   }
 
  @Test
   public void testPopulateResources_HDP2_params_category2() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -555,7 +666,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "h1");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -592,7 +703,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/yarn/Queue/root/second_queue", "AppsSubmitted")));
   }
 
  @Test
   public void testPopulateResources_jmx_JournalNode() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -614,7 +724,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "JOURNALNODE");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -712,10 +822,9 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertEquals(8444, resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/dfs/journalnode/cluster/mycluster", "lastWrittenTxId")));
   }
 
  @Test
   public void testPopulateResources_jmx_Storm() throws Exception {
     // Adjust stack version for cluster
    Cluster cluster = clusters.getCluster("c1");
    Cluster cluster = clusters.getCluster("c2");
     cluster.setDesiredStackVersion(new StackId("HDP-2.1.1"));
 
     TestStreamProvider  streamProvider = new TestStreamProvider();
@@ -739,7 +848,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "STORM_REST_API");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -760,7 +869,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertEquals(4637.0, resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary", "nimbus.uptime")));
   }
 
  @Test
   public void testPopulateResources_NoRegionServer() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -782,7 +890,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "HBASE_REGIONSERVER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -797,7 +905,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertEquals(preSize, resource.getPropertiesMap().size());
   }
 
  @Test
   public void testPopulateResources_HBaseMaster2() throws Exception {
     TestStreamProvider  streamProvider = new TestStreamProvider();
     JMXPropertyProviderTest.TestJMXHostProvider hostProvider = new JMXPropertyProviderTest.TestJMXHostProvider(false);
@@ -819,7 +926,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "domu-12-31-39-0e-34-e1.compute-1.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "HBASE_MASTER");
     resource.setProperty(HOST_COMPONENT_STATE_PROPERTY_ID, "STARTED");
@@ -838,7 +945,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertTrue(map.get("metrics/hbase/master").containsKey("IsActiveMaster"));
   }
 
  @Test
   public void testPopulateResources_params_category5() throws Exception {
     org.apache.ambari.server.controller.metrics.ganglia.TestStreamProvider streamProvider =
         new org.apache.ambari.server.controller.metrics.ganglia.TestStreamProvider("temporal_ganglia_data_yarn_queues.txt");
@@ -863,7 +969,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "dev01.ambari.apache.org");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
 
@@ -886,7 +992,6 @@ public class StackDefinedPropertyProviderTest {
     Assert.assertNotNull(resource.getPropertyValue(RM_AVAILABLE_MEMORY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_ganglia_JournalNode() throws Exception {
     org.apache.ambari.server.controller.metrics.ganglia.TestStreamProvider streamProvider =
         new org.apache.ambari.server.controller.metrics.ganglia.TestStreamProvider("journalnode_ganglia_data.txt");
@@ -911,7 +1016,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "JOURNALNODE");
 
@@ -1001,7 +1106,6 @@ public class StackDefinedPropertyProviderTest {
     }
   }
 
  @Test
   public void testPopulateResources_resourcemanager_clustermetrics() throws Exception {
 
     String[] metrics = new String[] {
@@ -1035,7 +1139,7 @@ public class StackDefinedPropertyProviderTest {
     for (String metric : metrics) {
       Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
      resource.setProperty("HostRoles/cluster_name", "c1");
      resource.setProperty("HostRoles/cluster_name", "c2");
       resource.setProperty(HOST_COMPONENT_HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
       resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "RESOURCEMANAGER");
 
@@ -1053,7 +1157,6 @@ public class StackDefinedPropertyProviderTest {
 
   }
 
  @Test
   public void testPopulateResourcesWithAggregateFunctionMetrics() throws Exception {
 
     String metric = "metrics/rpc/NumOpenConnections._sum";
@@ -1086,7 +1189,7 @@ public class StackDefinedPropertyProviderTest {
 
     Resource resource = new ResourceImpl(Resource.Type.Component);
 
    resource.setProperty("HostRoles/cluster_name", "c1");
    resource.setProperty("HostRoles/cluster_name", "c2");
     resource.setProperty("HostRoles/service_name", "HBASE");
     resource.setProperty(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, "HBASE_REGIONSERVER");
 
diff --git a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/JMXPropertyProviderTest.java b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/JMXPropertyProviderTest.java
index f0c12800fc..f76c3227e1 100644
-- a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/JMXPropertyProviderTest.java
++ b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/JMXPropertyProviderTest.java
@@ -18,6 +18,9 @@
 
 package org.apache.ambari.server.controller.metrics;
 
import org.apache.ambari.server.AmbariException;
import org.apache.ambari.server.controller.AmbariManagementController;
import org.apache.ambari.server.controller.AmbariServer;
 import org.apache.ambari.server.controller.internal.ResourceImpl;
 import org.apache.ambari.server.controller.jmx.JMXHostProvider;
 import org.apache.ambari.server.controller.jmx.JMXPropertyProvider;
@@ -27,58 +30,150 @@ import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.SystemException;
 import org.apache.ambari.server.controller.spi.TemporalInfo;
 import org.apache.ambari.server.controller.utilities.PropertyHelper;
import org.apache.ambari.server.security.TestAuthenticationFactory;
import org.apache.ambari.server.security.authorization.AuthorizationException;
import org.apache.ambari.server.state.Cluster;
import org.apache.ambari.server.state.Clusters;
import org.junit.After;
 import org.junit.Assert;
import org.junit.Before;
 import org.junit.Test;
import org.springframework.security.core.context.SecurityContextHolder;

import java.lang.reflect.Field;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;

 import static org.apache.ambari.server.controller.metrics.MetricsServiceProvider.MetricsService;
import static org.easymock.EasyMock.anyObject;
import static org.easymock.EasyMock.createNiceMock;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
 
 /**
  * JMX property provider tests.
  */</comment>
 <class><specifier>public</specifier> class <name>JMXPropertyProviderTest</name> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CLUSTER_NAME_PROPERTY_ID</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOST_COMPONENT_STATE_PROPERTY_ID</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUMBER_OF_RESOURCES</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>
 
  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUpCommonMocks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AmbariException</name></expr></argument>, <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AmbariManagementController</name></type> <name>amc</name> <init>= <expr><call><name>createNiceMock</name><argument_list>(<argument><expr><name><name>AmbariManagementController</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>AmbariServer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"clusterController"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>amc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Clusters</name></type> <name>clusters</name> <init>= <expr><call><name>createNiceMock</name><argument_list>(<argument><expr><name><name>Clusters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cluster</name></type> <name>cluster</name> <init>= <expr><call><name>createNiceMock</name><argument_list>(<argument><expr><name><name>Cluster</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>amc</name><operator>.</operator><name>getClusters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>clusters</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusters</name><operator>.</operator><name>getCluster</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>cluster</name><operator>.</operator><name>getResourceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clusters</name><operator>.</operator><name>getCluster</name></name><argument_list>(<argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AmbariException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>amc</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>, <argument><expr><name>cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>After</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clearAuthentication</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>SecurityContextHolder</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAuthentication</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testJMXPropertyProviderAsClusterAdministrator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">//Setup user with Role 'ClusterAdministrator'.</comment>
    <expr_stmt><expr><call><name><name>SecurityContextHolder</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAuthentication</name><argument_list>(<argument><expr><call><name><name>TestAuthenticationFactory</name><operator>.</operator><name>createClusterAdministrator</name></name><argument_list>(<argument><expr><literal type="string">"ClusterAdmin"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_singleProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_category</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesWithUnknownPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesUnhealthyResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesMany</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testJMXPropertyProviderAsAdministrator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">//Setup user with Role 'Administrator'</comment>
    <expr_stmt><expr><call><name><name>SecurityContextHolder</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAuthentication</name><argument_list>(<argument><expr><call><name><name>TestAuthenticationFactory</name><operator>.</operator><name>createAdministrator</name></name><argument_list>(<argument><expr><literal type="string">"Admin"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_singleProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_category</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesWithUnknownPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesUnhealthyResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesMany</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testJMXPropertyProviderAsServiceAdministrator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">//Setup user with 'ServiceAdministrator'</comment>
    <expr_stmt><expr><call><name><name>SecurityContextHolder</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAuthentication</name><argument_list>(<argument><expr><call><name><name>TestAuthenticationFactory</name><operator>.</operator><name>createServiceAdministrator</name></name><argument_list>(<argument><expr><literal type="string">"ServiceAdmin"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_singleProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_category</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesWithUnknownPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesUnhealthyResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesMany</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AuthorizationException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testJMXPropertyProviderAsViewUser</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Setup user with 'ViewUser'</comment>
    <comment type="line">// ViewUser doesn't have the 'CLUSTER_VIEW_METRICS', 'HOST_VIEW_METRICS' and 'SERVICE_VIEW_METRICS', thus</comment>
    <comment type="line">// can't retrieve the Metrics.</comment>
    <expr_stmt><expr><call><name><name>SecurityContextHolder</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAuthentication</name><argument_list>(<argument><expr><call><name><name>TestAuthenticationFactory</name><operator>.</operator><name>createViewUser</name></name><argument_list>(<argument><expr><literal type="string">"ViewUser"</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_singleProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResources_category</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesWithUnknownPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesUnhealthyResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesMany</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPopulateResourcesTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResources</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
 
     <comment type="line">// namenode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"NAMENODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_STATE_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"STARTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// request with an empty set should get all supported properties</comment>
     <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>populateResources</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// see test/resources/hdfs_namenode_jmx.json for values</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,      <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/namenode"</literal></expr></argument>, <argument><expr><literal type="string">"CreateFileOps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/namenode"</literal></expr></argument>, <argument><expr><literal type="string">"CreateFileOps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1006632960</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">473433016</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">136314880</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">185</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
 
     <comment type="line">// datanode</comment>
     <expr><name>resource</name> <operator>=</operator> <operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr>;

    <call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"DATANODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50075"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// see test/resources/hdfs_datanode_jmx.json for values</comment>
    <call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">856</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">856</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">954466304</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">9772616</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">136314880</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
 
     <comment type="line">// hbase master</comment>
     <expr><name>resource</name> <operator>=</operator> <operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr>;

    <call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"HBASE_MASTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_STATE_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"STARTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
 
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"60010"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getProperties</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getProperties</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1069416448</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">4806976</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">136314880</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">61</literal> <operator>+</operator><literal type="number">237</literal></expr><operator>,</operator><expr><literal type="number">59</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"gcCount"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResources_singleProperty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
 
     <comment type="line">// namenode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"NAMENODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_STATE_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"STARTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// only ask for one property</comment>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TemporalInfo</name></argument>&gt;</argument_list></name></type> <name>temporalInfoMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TemporalInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Request</name></type>  <name>request</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc/ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>temporalInfoMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc/ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>temporalInfoMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>populateResources</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// see test/resources/hdfs_namenode_jmx.json for values</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc/ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc/ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/namenode/CreateFileOps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResources_category</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
 
     <comment type="line">// namenode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"NAMENODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_STATE_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"STARTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">204</literal></expr><operator>,</operator><expr><literal type="number">37</literal> <operator>+</operator><literal type="number">297</literal></expr><operator>,</operator><expr><literal type="number">36</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
     <comment type="line">// request with an empty set should get all supported properties</comment>
     <comment type="line">// only ask for one property</comment>
     <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TemporalInfo</name></argument>&gt;</argument_list></name> <name>temporalInfoMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TemporalInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <name>Request</name>  <name>request</name> <operator>=</operator> <call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>temporalInfoMap</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>temporalInfoMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>populateResources</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>,<argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>,<argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// see test/resources/hdfs_namenode_jmx.json for values</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">184320</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/FSNamesystem/CapacityUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/FSNamesystem/UnderReplicatedBlocks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">184320</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/FSNamesystem/CapacityUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/FSNamesystem/UnderReplicatedBlocks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc/ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></else></if_stmt>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testPopulateResourcesWithUnknownPort</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>TestStreamProvider</name>  <name>streamProvider</name> <operator>=</operator> <operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></constructor>
 
     <comment type="line">// namenode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"NAMENODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">243</literal></expr><operator>,</operator><expr><literal type="number">32</literal> <operator>+</operator><literal type="number">335</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
 
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>populateResources</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>,<argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>,<argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>propertyProvider</name><operator>.</operator><name>getSpec</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-0e-34-e1.compute-1.internal"</literal></expr></argument>, <argument><expr><literal type="string">"50070"</literal></expr></argument>, <argument><expr><literal type="string">"/jmx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// see test/resources/hdfs_namenode_jmx.json for values</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,      <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/namenode"</literal></expr></argument>, <argument><expr><literal type="string">"CreateFileOps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">13670605</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/dfs/namenode"</literal></expr></argument>, <argument><expr><literal type="string">"CreateFileOps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1006632960</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">473433016</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">136314880</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">23634400</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResourcesUnhealthyResource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
 
     <comment type="line">// namenode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">286</literal></expr><operator>,</operator><expr><literal type="number">45</literal> <operator>+</operator><literal type="number">377</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>streamProvider</name><operator>.</operator><name>getLastSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResourcesMany</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Set the provider to take 50 millis to return the JMX values</comment>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>(<argument><expr><literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>(<argument><expr><literal type="number">50L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"host_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"component_name"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"HostRoles"</literal></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
 
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMBER_OF_RESOURCES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
       <comment type="line">// datanode</comment>
       <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"DATANODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"unique_id"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <expr_stmt><expr><call><name><name>resources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

     <comment type="line">// request with an empty set should get all supported properties</comment>
     <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getReadRequest</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resourceSet</name> <init>= <expr><call><name><name>propertyProvider</name><operator>.</operator><name>populateResources</name></name><argument_list>(<argument><expr><name>resources</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>NUMBER_OF_RESOURCES</name></expr></argument>, <argument><expr><call><name><name>resourceSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <for>for <control>(<init><decl><type><name>Resource</name></type> <name>resource</name> <range>: <expr><name>resourceSet</name></expr></range></decl></init>)</control> <block>{<block_content>
       <comment type="line">// see test/resources/hdfs_datanode_jmx.json for values</comment>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">856</literal></expr></argument>,  <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">856</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/rpc"</literal></expr></argument>, <argument><expr><literal type="string">"ReceivedBytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">954466304</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">9772616</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"HeapMemoryUsed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">136314880</literal></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getPropertyId</name></name><argument_list>(<argument><expr><literal type="string">"metrics/jvm"</literal></expr></argument>, <argument><expr><literal type="string">"NonHeapMemoryMax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">332</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></for>
 
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testPopulateResourcesTimeout</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// Set the provider to take 100 millis to return the JMX values</comment>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type>  <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestStreamProvider</name></type> <name>streamProvider</name> <init>= <expr><operator>new</operator> <call><name>TestStreamProvider</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestJMXHostProvider</name></type> <name>hostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestJMXHostProvider</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>TestMetricHostProvider</name></type> <name>metricsHostProvider</name> <init>= <expr><operator>new</operator> <call><name>TestMetricHostProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>resources</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>JMXPropertyProvider</name></type> <name>propertyProvider</name> <init>= <expr><operator>new</operator> <call><name>JMXPropertyProvider</name><argument_list>(
        <argument><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>streamProvider</name></expr></argument>,
        <argument><expr><name>hostProvider</name></expr></argument>,
        <argument><expr><name>metricsHostProvider</name></expr></argument>,
        <argument><expr><literal type="string">"HostRoles/cluster_name"</literal></expr></argument>,
        <argument><expr><literal type="string">"HostRoles/host_name"</literal></expr></argument>,
        <argument><expr><literal type="string">"HostRoles/component_name"</literal></expr></argument>,
        <argument><expr><literal type="string">"HostRoles/state"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PropertyHelper</name><operator>.</operator><name>getJMXPropertyIds</name></name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <expr><name>streamProvider</name></expr><operator>,</operator>
      <expr><name>hostProvider</name></expr><operator>,</operator>
      <expr><name>metricsHostProvider</name></expr><operator>,</operator>
      <expr><literal type="string">"HostRoles/cluster_name"</literal></expr><operator>,</operator>
      <expr><literal type="string">"HostRoles/host_name"</literal></expr><operator>,</operator>
      <expr><literal type="string">"HostRoles/component_name"</literal></expr><operator>,</operator>
      <expr><literal type="string">"HostRoles/state"</literal></expr></expr_stmt>)</block_content></block>;</function>
 
     <comment type="line">// set the provider timeout to 50 millis</comment>
     <expr_stmt><expr><call><name><name>propertyProvider</name><operator>.</operator><name>setPopulateTimeout</name></name><argument_list>(<argument><expr><literal type="number">50L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// datanode</comment>
     <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>ResourceImpl</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>Type</name><operator>.</operator><name>HostComponent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_HOST_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"domu-12-31-39-14-ee-b3.compute-1.internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID</name></expr></argument>, <argument><expr><literal type="string">"DATANODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">398</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">485</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>String</name> <call><name>getPort</name><argument_list>(<argument><expr><name>String</name> <name>clusterName</name></expr></argument>, <argument><expr><name>String</name> <name>componentName</name></expr></argument>)</argument_list></call> <throws>throws
        <argument><expr><name>SystemException</name> <block>{
      <expr><name>SystemException</name> <block>{</block></expr></block></expr></argument></throws></expr>
 
       <if_stmt><if>if <condition>(<expr><name>unknownPort</name></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">409</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">496</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>JMXPropertyProviderTest</name> <block>{
       <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"DATANODE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="string">"50075"</literal></expr>;</return></block_content></block></if>
       <if type="elseif">else if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"HBASE_MASTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>==</operator> <name>clusterName</name></expr> ?</condition><then> <expr><literal type="string">"60010"</literal></expr> </then><else>: <expr><literal type="string">"60011"</literal></expr></else></ternary></expr>;</return></block_content></block></if>
      <if type="elseif">else  if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"JOURNALNODE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>(<expr><name>clusterName</name> <operator>==</operator> <literal type="string">"c2"</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="string">"60011"</literal></expr>;</return>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
          <comment type="line">// Caters the case where 'clusterName' is null or</comment>
          <comment type="line">// any other name (includes hardcoded name "c1").</comment>
          <return>return <expr><literal type="string">"60010"</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"JOURNALNODE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="string">"8480"</literal></expr>;</return></block_content></block></if>
      <if type="elseif">else  if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"STORM_REST_API"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>componentName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"STORM_REST_API"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="string">"8745"</literal></expr>;</return></block_content></block></if>
       <else>else<block type="pseudo"><block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>metrics</name><operator>/</operator><name><name>RestMetricsPropertyProviderTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>metrics</name><operator>/</operator><name><name>RestMetricsPropertyProviderTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">82b42f20e1</literal><operator>..</operator><literal type="number">220f905e3d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>metrics</name><operator>/</operator><name><name>RestMetricsPropertyProviderTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>server</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>ambari</name><operator>/</operator><name>server</name><operator>/</operator><name>controller</name><operator>/</operator><name>metrics</name><operator>/</operator><name><name>RestMetricsPropertyProviderTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator> <literal type="string">"License"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt> <name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name>
  <operator>*</operator> <name>with</name> <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>
  <operator>*</operator>
 <operator>*</operator>     <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>
 <operator>*</operator> <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>
  <operator>*</operator>
  <operator>*</operator> <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name><operator>,</operator> <name>software</name>
  <operator>*</operator> <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name><operator>,</operator>
@@ <operator>-</operator><literal type="number">18</literal><operator>,</operator><literal type="number">16</literal> <operator>+</operator><literal type="number">18</literal><operator>,</operator><literal type="number">11</literal> @@</block></expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name></name>;</package>
 
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>PropertyInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ResourceImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>StackDefinedPropertyProvider</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>TemporalInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PropertyHelper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>GuiceJpaInitializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>orm</name><operator>.</operator><name>InMemoryDefaultTestModule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>TestAuthenticationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Cluster</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Clusters</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>StackId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>stack</name><operator>.</operator><name>Metric</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>stack</name><operator>.</operator><name>MetricDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name>security</name><operator>.</operator><name>core</name><operator>.</operator><name>context</name><operator>.</operator><name>SecurityContextHolder</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Guice</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>inject</name><operator>.</operator><name>Injector</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>anyObject</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
@@ -64,6 +72,7 @@ public class RestMetricsPropertyProviderTest {
   protected static final String HOST_COMPONENT_STATE_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "state");
   protected static final Map&lt;String, String&gt; metricsProperties = new HashMap&lt;String, String&gt;();
   protected static final Map&lt;String, Metric&gt; componentMetrics = new HashMap&lt;String, Metric&gt;();
  private static final String CLUSTER_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "cluster_name");
   public static final int NUMBER_OF_RESOURCES = 400;
   private static Injector injector;
   private static Clusters clusters;
@@ -93,9 +102,81 @@ public class RestMetricsPropertyProviderTest {
     clusters = injector.getInstance(Clusters.class);
     clusters.addCluster("c1", new StackId("HDP-2.1.1"));
     c1 = clusters.getCluster("c1");

    // Setting up Mocks for Controller, Clusters etc, queried as part of user's Role context
    // while fetching Metrics.
    AmbariManagementController amc = createNiceMock(AmbariManagementController.class);
    Field field = AmbariServer.class.getDeclaredField("clusterController");
    field.setAccessible(true);
    field.set(null, amc);
    Clusters clustersMock = createNiceMock(Clusters.class);
    Cluster clusterMock = createNiceMock(Cluster.class);
    expect(amc.getClusters()).andReturn(clustersMock).anyTimes();
    expect(clustersMock.getCluster(CLUSTER_NAME_PROPERTY_ID)).andReturn(clusterMock).anyTimes();
    expect(clusterMock.getResourceId()).andReturn(2L).anyTimes();
    try {
      expect(clustersMock.getCluster(anyObject(String.class))).andReturn(clusterMock).anyTimes();
    } catch (AmbariException e) {
      e.printStackTrace();
    }
    replay(amc, clustersMock, clusterMock);
  }

  @After
  public void clearAuthentication() {
    SecurityContextHolder.getContext().setAuthentication(null);
   }
 
   @Test
  public void testRestMetricsPropertyProviderAsClusterAdministrator() throws Exception {
    //Setup user with Role 'ClusterAdministrator'.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("ClusterAdmin", 2L));
    testPopulateResources();
    testPopulateResources_singleProperty();
    testPopulateResources_category();
    testPopulateResourcesUnhealthyResource();
    testPopulateResourcesMany();
    testPopulateResourcesTimeout();
  }

  @Test
  public void testRestMetricsPropertyProviderAsAdministrator() throws Exception {
    //Setup user with Role 'Administrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("Admin"));
    testPopulateResources();
    testPopulateResources_singleProperty();
    testPopulateResources_category();
    testPopulateResourcesUnhealthyResource();
    testPopulateResourcesMany();
    testPopulateResourcesTimeout();
  }

  @Test
  public void testRestMetricsPropertyProviderAsServiceAdministrator() throws Exception {
    //Setup user with 'ServiceAdministrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createServiceAdministrator("ServiceAdmin", 2L));
    testPopulateResources();
    testPopulateResources_singleProperty();
    testPopulateResources_category();
    testPopulateResourcesUnhealthyResource();
    testPopulateResourcesMany();
    testPopulateResourcesTimeout();
  }

  @Test(expected = AuthorizationException.class)
  public void testRestMetricsPropertyProviderAsViewUser() throws Exception {
    // Setup user with 'ViewUser'
    // ViewUser doesn't have the 'CLUSTER_VIEW_METRICS', 'HOST_VIEW_METRICS' and 'SERVICE_VIEW_METRICS', thus
    // can't retrieve the Metrics.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createViewUser("ViewUser", 2L));
    testPopulateResources();
    testPopulateResources_singleProperty();
    testPopulateResources_category();
    testPopulateResourcesUnhealthyResource();
    testPopulateResourcesMany();
    testPopulateResourcesTimeout();
  }

   public void testPopulateResources() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -110,16 +191,16 @@ public class RestMetricsPropertyProviderTest {
     TestMetricsHostProvider metricsHostProvider = new TestMetricsHostProvider();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
@@ -131,7 +212,6 @@ public class RestMetricsPropertyProviderTest {
 
     // request with an empty set should get all supported properties
     Request request = PropertyHelper.getReadRequest(Collections.&lt;String&gt;emptySet());

     Assert.assertEquals(1, restMetricsPropertyProvider.populateResources(Collections.singleton(resource), request, null).size());
     Assert.assertNull(resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary", "wrong.metric")));
 
@@ -144,11 +224,8 @@ public class RestMetricsPropertyProviderTest {
     Assert.assertEquals(3.0, resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary", "slots.used")));
     Assert.assertEquals(1.0, resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary", "topologies")));
     Assert.assertEquals(4637.0, resource.getPropertyValue(PropertyHelper.getPropertyId("metrics/api/cluster/summary", "nimbus.uptime")));


   }
 
  @Test
   public void testPopulateResources_singleProperty() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -162,16 +239,16 @@ public class RestMetricsPropertyProviderTest {
     TestMetricsHostProvider metricsHostProvider = new TestMetricsHostProvider();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
@@ -190,7 +267,6 @@ public class RestMetricsPropertyProviderTest {
     Assert.assertNull(resource.getPropertyValue("metrics/api/cluster/summary/taskstotal"));
   }
 
  @Test
   public void testPopulateResources_category() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -204,16 +280,16 @@ public class RestMetricsPropertyProviderTest {
     TestMetricsHostProvider metricsHostProvider = new TestMetricsHostProvider();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
@@ -236,7 +312,6 @@ public class RestMetricsPropertyProviderTest {
     Assert.assertNull(resource.getPropertyValue("metrics/api/cluster/summary/taskstotal"));
   }
 
  @Test
   public void testPopulateResourcesUnhealthyResource() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -250,16 +325,16 @@ public class RestMetricsPropertyProviderTest {
     TestMetricsHostProvider metricsHostProvider = new TestMetricsHostProvider();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
 
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
@@ -278,7 +353,6 @@ public class RestMetricsPropertyProviderTest {
     Assert.assertNull(streamProvider.getLastSpec());
   }
 
  @Test
   public void testPopulateResourcesMany() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -294,16 +368,16 @@ public class RestMetricsPropertyProviderTest {
     Set&lt;Resource&gt; resources = new HashSet&lt;Resource&gt;();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
     for (int i = 0; i &lt; NUMBER_OF_RESOURCES; ++i) {
       // strom_rest_api
@@ -333,7 +407,6 @@ public class RestMetricsPropertyProviderTest {
     }
   }
 
  @Test
   public void testPopulateResourcesTimeout() throws Exception {
     MetricDefinition metricDefinition = createNiceMock(MetricDefinition.class);
     expect(metricDefinition.getMetrics()).andReturn(componentMetrics);
@@ -349,16 +422,16 @@ public class RestMetricsPropertyProviderTest {
     Set&lt;Resource&gt; resources = new HashSet&lt;Resource&gt;();
 
     RestMetricsPropertyProvider restMetricsPropertyProvider = new RestMetricsPropertyProvider(
        injector,
        metricDefinition.getProperties(),
        componentMetrics,
        streamProvider,
        metricsHostProvider,
        PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
        PropertyHelper.getPropertyId("HostRoles", "host_name"),
        PropertyHelper.getPropertyId("HostRoles", "component_name"),
        PropertyHelper.getPropertyId("HostRoles", "state"),
        "STORM_REST_API");
      injector,
      metricDefinition.getProperties(),
      componentMetrics,
      streamProvider,
      metricsHostProvider,
      PropertyHelper.getPropertyId("HostRoles", "cluster_name"),
      PropertyHelper.getPropertyId("HostRoles", "host_name"),
      PropertyHelper.getPropertyId("HostRoles", "component_name"),
      PropertyHelper.getPropertyId("HostRoles", "state"),
      "STORM_REST_API");
 
     // set the provider timeout to 50 millis
     restMetricsPropertyProvider.setPopulateTimeout(50L);
diff --git a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaPropertyProviderTest.java b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaPropertyProviderTest.java
index 6fefffee1e..b513ba5148 100644
-- a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaPropertyProviderTest.java
++ b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaPropertyProviderTest.java
@@ -17,8 +17,11 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ganglia</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>AmbariException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>ComponentSSLConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>configuration</name><operator>.</operator><name>ComponentSSLConfigurationTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariManagementController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>AmbariServer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>PropertyInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>ResourceImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>internal</name><operator>.</operator><name>TemporalInfoImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>Resource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>SystemException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>spi</name><operator>.</operator><name>TemporalInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>utilities</name><operator>.</operator><name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>TestAuthenticationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>AuthorizationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Cluster</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>state</name><operator>.</operator><name>Clusters</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>utils</name><operator>.</operator><name>CollectionPresentationUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>CollectionUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>Predicate</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>NameValuePair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>client</name><operator>.</operator><name>utils</name><operator>.</operator><name>URIBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runner</name><operator>.</operator><name>RunWith</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runners</name><operator>.</operator><name>Parameterized</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>api</name><operator>.</operator><name>easymock</name><operator>.</operator><name>PowerMock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>powermock</name><operator>.</operator><name>core</name><operator>.</operator><name>classloader</name><operator>.</operator><name>annotations</name><operator>.</operator><name>PrepareForTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>springframework</name><operator>.</operator><name>security</name><operator>.</operator><name>core</name><operator>.</operator><name>context</name><operator>.</operator><name>SecurityContextHolder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricsServiceProvider</name><operator>.</operator><name>MetricsService</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>ambari</name><operator>.</operator><name>server</name><operator>.</operator><name>controller</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricsServiceProvider</name><operator>.</operator><name>MetricsService</name><operator>.</operator><name>GANGLIA</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>anyObject</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createNiceMock</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>eq</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import></block_content></block></while></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block></if></if_stmt></block_content></block></while></block_content></block></function>
 
 <comment type="block" format="javadoc">/**
  * Test the Ganglia property provider.
@@ -98,8 +112,87 @@ public class GangliaPropertyProviderTest {
     this.configuration = configuration;
   }
 
  @After
  public void clearAuthentication() {
    SecurityContextHolder.getContext().setAuthentication(null);
  }

   @Test
  public void testGangliaPropertyProviderAsClusterAdministrator() throws Exception {
    //Setup user with Role 'ClusterAdministrator'.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("ClusterAdmin", 2L));
    testPopulateResources();
    testPopulateResources_checkHostComponent();
    testPopulateResources_checkHost();
    testPopulateManyResources();
    testPopulateResources__LargeNumberOfHostResources();
    testPopulateResources_params();
    testPopulateResources_paramsMixed();
    testPopulateResources_paramsAll();
    testPopulateResources_params_category1();
    testPopulateResources_params_category2();
    testPopulateResources_params_category3();
    testPopulateResources_params_category4();
  }

  @Test
  public void testGangliaPropertyProviderAsAdministrator() throws Exception {
    //Setup user with Role 'Administrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("Admin"));
    testPopulateResources();
    testPopulateResources_checkHostComponent();
    testPopulateResources_checkHost();
    testPopulateManyResources();
    testPopulateResources__LargeNumberOfHostResources();
    testPopulateResources_params();
    testPopulateResources_paramsMixed();
    testPopulateResources_paramsAll();
    testPopulateResources_params_category1();
    testPopulateResources_params_category2();
    testPopulateResources_params_category3();
    testPopulateResources_params_category4();
  }

  @Test
  public void testGangliaPropertyProviderAsServiceAdministrator() throws Exception {
    //Setup user with 'ServiceAdministrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createServiceAdministrator("ServiceAdmin", 2L));
    testPopulateResources();
    testPopulateResources_checkHostComponent();
    testPopulateResources_checkHost();
    testPopulateManyResources();
    testPopulateResources__LargeNumberOfHostResources();
    testPopulateResources_params();
    testPopulateResources_paramsMixed();
    testPopulateResources_paramsAll();
    testPopulateResources_params_category1();
    testPopulateResources_params_category2();
    testPopulateResources_params_category3();
    testPopulateResources_params_category4();
  }

  @Test(expected = AuthorizationException.class)
  public void testGangliaPropertyProviderAsViewUser() throws Exception {
    // Setup user with 'ViewUser'
    // ViewUser doesn't have the 'CLUSTER_VIEW_METRICS', 'HOST_VIEW_METRICS' and 'SERVICE_VIEW_METRICS', thus
    // can't retrieve the Metrics.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createViewUser("ViewUser", 2L));
    testPopulateResources();
    testPopulateResources_checkHostComponent();
    testPopulateResources_checkHost();
    testPopulateManyResources();
    testPopulateResources__LargeNumberOfHostResources();
    testPopulateResources_params();
    testPopulateResources_paramsMixed();
    testPopulateResources_paramsAll();
    testPopulateResources_params_category1();
    testPopulateResources_params_category2();
    testPopulateResources_params_category3();
    testPopulateResources_params_category4();
  }

   public void testPopulateResources() throws Exception {
    setUpCommonMocks();
     TestStreamProvider streamProvider  = new TestStreamProvider("temporal_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
 
@@ -115,7 +208,7 @@ public class GangliaPropertyProviderTest {
 
     // namenode
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);

    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E1.compute-1.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "DATANODE");
 
@@ -131,12 +224,13 @@ public class GangliaPropertyProviderTest {
         "://domU-12-31-39-0E-34-E1.compute-1.internal/cgi-bin/rrd.py?c=HDPDataNode%2CHDPSlaves&amp;h=domU-12-31-39-0E-34-E1.compute-1.internal&amp;m=jvm.metrics.gcCount&amp;s=10&amp;e=20&amp;r=1";
     Assert.assertEquals(expected, streamProvider.getLastSpec());
 
    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(4, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID));
 
 
     // tasktracker
     resource = new ResourceImpl(Resource.Type.HostComponent);
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E1.compute-1.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "TASKTRACKER");
 
@@ -194,7 +288,7 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));
 
    Assert.assertEquals(6, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(7, PropertyHelper.getProperties(resource).size());
 
     Assert.assertNotNull(resource.getPropertyValue(shuffle_exceptions_caught));
 
@@ -211,7 +305,6 @@ public class GangliaPropertyProviderTest {
     Assert.assertNotNull(resource.getPropertyValue(shuffle_success_outputs));
   }
   
  @Test
   public void testPopulateResources_checkHostComponent() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("temporal_ganglia_data.txt");
     MetricHostProvider hostProvider =  PowerMock.createPartialMock(MetricHostProvider.class,
@@ -228,7 +321,7 @@ public class GangliaPropertyProviderTest {
 
     // datanode
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);

    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E1.compute-1.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "DATANODE");
 
@@ -252,7 +345,6 @@ public class GangliaPropertyProviderTest {
     
   }
 
  @Test
   public void testPopulateResources_checkHost() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("host_temporal_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -268,6 +360,7 @@ public class GangliaPropertyProviderTest {
 
     // host
     Resource resource = new ResourceImpl(Resource.Type.Host);
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "corp-hadoopda05.client.ext");
 
     // only ask for one property
@@ -285,7 +378,6 @@ public class GangliaPropertyProviderTest {
     Assert.assertEquals(226, val.length);
   }
 
  @Test
   public void testPopulateManyResources() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("temporal_ganglia_data_1.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -303,14 +395,17 @@ public class GangliaPropertyProviderTest {
 
     // host
     Resource resource = new ResourceImpl(Resource.Type.Host);
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E1.compute-1.internal");
     resources.add(resource);
 
     resource = new ResourceImpl(Resource.Type.Host);
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E2.compute-1.internal");
     resources.add(resource);
 
     resource = new ResourceImpl(Resource.Type.Host);
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "domU-12-31-39-0E-34-E3.compute-1.internal");
     resources.add(resource);
 
@@ -348,12 +443,11 @@ public class GangliaPropertyProviderTest {
     Assert.assertEquals(expected.substring(369 + httpsVariation), streamProvider.getLastSpec().substring(369 + httpsVariation));
 
     for (Resource res : resources) {
      Assert.assertEquals(2, PropertyHelper.getProperties(res).size());
      Assert.assertEquals(3, PropertyHelper.getProperties(res).size());
       Assert.assertNotNull(res.getPropertyValue(PROPERTY_ID));
     }
   }
 
  @Test
   public void testPopulateResources__LargeNumberOfHostResources() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("temporal_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -373,6 +467,7 @@ public class GangliaPropertyProviderTest {
     
     for (int i = 0; i &lt; 150; ++i) {
       Resource resource = new ResourceImpl(Resource.Type.Host);
      resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
       resource.setProperty(HOST_NAME_PROPERTY_ID, "host" + i);
       resources.add(resource);
       
@@ -412,7 +507,6 @@ public class GangliaPropertyProviderTest {
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));
   }
   
  @Test
   public void testPopulateResources_params() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -430,6 +524,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -466,11 +561,10 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    
     
    Assert.assertEquals(3, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(4, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_paramsMixed() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -488,6 +582,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -528,12 +623,11 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));
        
    Assert.assertEquals(22, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(23, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(PROPERTY_ID2));
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_paramsAll() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -550,6 +644,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -569,11 +664,10 @@ public class GangliaPropertyProviderTest {
     Assert.assertTrue(CollectionPresentationUtils.isStringPermutationOfCollection(streamProvider.getLastSpec().substring(66 + httpsVariation, 92 + httpsVariation), components, "%2C", 0, 0));
     Assert.assertTrue(streamProvider.getLastSpec().substring(92 + httpsVariation).startsWith(expected.substring(92 + httpsVariation)));
 
    Assert.assertEquals(33, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(34, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_params_category1() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -591,6 +685,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -627,11 +722,10 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    
 
    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(22, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_params_category2() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -649,6 +743,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -685,11 +780,10 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));
 
    Assert.assertEquals(21, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(22, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_params_category3() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -707,6 +801,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -744,11 +839,10 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    
 
    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(12, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
  @Test
   public void testPopulateResources_params_category4() throws Exception {
     TestStreamProvider streamProvider  = new TestStreamProvider("flume_ganglia_data.txt");
     TestGangliaHostProvider hostProvider = new TestGangliaHostProvider();
@@ -766,6 +860,7 @@ public class GangliaPropertyProviderTest {
     // flume
     Resource resource = new ResourceImpl(Resource.Type.HostComponent);
 
    resource.setProperty(CLUSTER_NAME_PROPERTY_ID, "c1");
     resource.setProperty(HOST_NAME_PROPERTY_ID, "ip-10-39-113-33.ec2.internal");
     resource.setProperty(COMPONENT_NAME_PROPERTY_ID, "FLUME_HANDLER");
 
@@ -803,7 +898,7 @@ public class GangliaPropertyProviderTest {
     
     Assert.assertTrue(isUrlParamsEquals(actualUri, expectedUri));    
     
    Assert.assertEquals(11, PropertyHelper.getProperties(resource).size());
    Assert.assertEquals(12, PropertyHelper.getProperties(resource).size());
     Assert.assertNotNull(resource.getPropertyValue(FLUME_CHANNEL_CAPACITY_PROPERTY));
   }
 
@@ -855,6 +950,25 @@ public class GangliaPropertyProviderTest {
     return metricsBuilder.toString();
   }
 
  private void setUpCommonMocks() throws AmbariException, NoSuchFieldException, IllegalAccessException {
    AmbariManagementController amc = createNiceMock(AmbariManagementController.class);
    Field field = AmbariServer.class.getDeclaredField("clusterController");
    field.setAccessible(true);
    field.set(null, amc);
    Clusters clusters = createNiceMock(Clusters.class);
    Cluster cluster = createNiceMock(Cluster.class);
    expect(amc.getClusters()).andReturn(clusters).anyTimes();
    expect(clusters.getCluster(CLUSTER_NAME_PROPERTY_ID)).andReturn(cluster).anyTimes();
    expect(cluster.getResourceId()).andReturn(2L).anyTimes();
    try {
      expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster).anyTimes();
    } catch (AmbariException e) {
      e.printStackTrace();
    }
    replay(amc, clusters, cluster);
    PowerMock.replayAll();
  }

   public static class TestGangliaServiceProvider implements MetricsServiceProvider {
 
     @Override
diff --git a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProviderTest.java b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProviderTest.java
index 6b5926b47d..3c72dbf2e4 100644
-- a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProviderTest.java
++ b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProviderTest.java
@@ -7,7 +7,7 @@
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
 *     http://www.apache.org/licenses/LICENSE-2.0
 * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -29,6 +29,7 @@ import org.apache.ambari.server.controller.internal.TemporalInfoImpl;
 import org.apache.ambari.server.controller.internal.URLStreamProvider;
 import org.apache.ambari.server.controller.metrics.MetricHostProvider;
 import org.apache.ambari.server.controller.metrics.ganglia.TestStreamProvider;
import org.apache.ambari.server.controller.metrics.timeline.cache.TimelineMetricCache;
 import org.apache.ambari.server.controller.metrics.timeline.cache.TimelineMetricCacheEntryFactory;
 import org.apache.ambari.server.controller.metrics.timeline.cache.TimelineMetricCacheProvider;
 import org.apache.ambari.server.controller.spi.Request;
@@ -36,26 +37,29 @@ import org.apache.ambari.server.controller.spi.Resource;
 import org.apache.ambari.server.controller.spi.SystemException;
 import org.apache.ambari.server.controller.spi.TemporalInfo;
 import org.apache.ambari.server.controller.utilities.PropertyHelper;
import org.apache.ambari.server.controller.utilities.StreamProvider;
import org.apache.ambari.server.security.TestAuthenticationFactory;
import org.apache.ambari.server.security.authorization.AuthorizationException;
 import org.apache.ambari.server.state.Cluster;
 import org.apache.ambari.server.state.Clusters;
 import org.apache.ambari.server.state.ComponentInfo;
 import org.apache.ambari.server.state.StackId;
 import org.apache.http.client.utils.URIBuilder;
import org.easymock.EasyMock;
import org.junit.After;
 import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.easymock.PowerMock;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.security.core.context.SecurityContextHolder;
 
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -91,28 +95,104 @@ public class AMSPropertyProviderTest {
   private static final String AGGREGATE_METRICS_FILE_PATH = FILE_PATH_PREFIX + "aggregate_component_metric.json";
 
   private static TimelineMetricCacheEntryFactory cacheEntryFactory;
  private static TimelineMetricCacheProvider cacheProvider;
 
  @BeforeClass
  public static void setupCache() {
  @Before
  public void setupCache() {
     cacheEntryFactory = new TimelineMetricCacheEntryFactory(new Configuration());
    cacheProvider = new TimelineMetricCacheProvider(new Configuration(), cacheEntryFactory);
  }

  @After
  public void clearAuthentication() {
    SecurityContextHolder.getContext().setAuthentication(null);
  }

  @Test
  public void testAMSPropertyProviderAsClusterAdministrator() throws Exception {
    //Setup user with Role 'ClusterAdministrator'.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createClusterAdministrator("ClusterAdmin", 2L));

    SecurityContextHolder.getContext();
    testPopulateResourcesForSingleHostMetric();
    testPopulateResourcesForSingleHostMetricPointInTime();
    testPopulateResourcesForMultipleHostMetricscPointInTime();
    testPopulateResourcesForMultipleHostMetrics();
    testPopulateResourcesForRegexpMetrics();
    testPopulateResourcesForSingleComponentMetric();
    testPopulateMetricsForEmbeddedHBase();
    testAggregateFunctionForComponentMetrics();
    testFilterOutOfBandMetricData();
    testPopulateResourcesForHostComponentHostMetrics();
   }
 
   @Test
  public void testAMSPropertyProviderAsAdministrator() throws Exception {
    //Setup user with Role 'Administrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator("Admin"));

    testPopulateResourcesForSingleHostMetric();
    testPopulateResourcesForSingleHostMetricPointInTime();
    testPopulateResourcesForMultipleHostMetricscPointInTime();
    testPopulateResourcesForMultipleHostMetrics();
    testPopulateResourcesForRegexpMetrics();
    testPopulateResourcesForSingleComponentMetric();
    testPopulateMetricsForEmbeddedHBase();
    testAggregateFunctionForComponentMetrics();
    testFilterOutOfBandMetricData();
    testPopulateResourcesForHostComponentHostMetrics();
  }

  @Test
  public void testAMSPropertyProviderAsServiceAdministrator() throws Exception {
    //Setup user with 'ServiceAdministrator'
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createServiceAdministrator("ServiceAdmin", 2L));

    testPopulateResourcesForSingleHostMetric();
    testPopulateResourcesForSingleHostMetricPointInTime();
    testPopulateResourcesForMultipleHostMetricscPointInTime();
    testPopulateResourcesForMultipleHostMetrics();
    testPopulateResourcesForRegexpMetrics();
    testPopulateResourcesForSingleComponentMetric();
    testPopulateMetricsForEmbeddedHBase();
    testAggregateFunctionForComponentMetrics();
    testFilterOutOfBandMetricData();
    testPopulateResourcesForHostComponentHostMetrics();
  }

  @Test(expected = AuthorizationException.class)
  public void testAMSPropertyProviderAsViewUser() throws Exception {
    // Setup user with 'ViewUser'
    // ViewUser doesn't have the 'CLUSTER_VIEW_METRICS', 'HOST_VIEW_METRICS' and 'SERVICE_VIEW_METRICS', thus
    // can't retrieve the Metrics.
    SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createViewUser("ViewUser", 2L));

    testPopulateResourcesForSingleHostMetric();
    testPopulateResourcesForSingleHostMetricPointInTime();
    testPopulateResourcesForMultipleHostMetricscPointInTime();
    testPopulateResourcesForMultipleHostMetrics();
    testPopulateResourcesForRegexpMetrics();
    testPopulateResourcesForSingleComponentMetric();
    testPopulateMetricsForEmbeddedHBase();
    testAggregateFunctionForComponentMetrics();
    testFilterOutOfBandMetricData();
    testPopulateResourcesForHostComponentHostMetrics();
  }

   public void testPopulateResourcesForSingleHostMetric() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(SINGLE_HOST_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
     AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID
@@ -142,7 +222,6 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(111, val.length);
   }
 
  @Test
   public void testPopulateResourcesForSingleHostMetricPointInTime() throws Exception {
     setUpCommonMocks();
 
@@ -152,11 +231,15 @@ public class AMSPropertyProviderTest {
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();

     AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID
@@ -186,20 +269,22 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(41.088, val, 0.001);
   }
 
  @Test
   public void testPopulateResourcesForMultipleHostMetricscPointInTime() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(MULTIPLE_HOST_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
     AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID
@@ -210,7 +295,10 @@ public class AMSPropertyProviderTest {
     resource.setProperty(HOST_NAME_PROPERTY_ID, "h1");
     Map&lt;String, TemporalInfo&gt; temporalInfoMap = Collections.emptyMap();
     Request request = PropertyHelper.getReadRequest(
      new HashSet&lt;String&gt;() {{ add(PROPERTY_ID1); add(PROPERTY_ID2); }}, temporalInfoMap);
      new HashSet&lt;String&gt;() {{
        add(PROPERTY_ID1);
        add(PROPERTY_ID2);
      }}, temporalInfoMap);
     Set&lt;Resource&gt; resources =
       propertyProvider.populateResources(Collections.singleton(resource), request, null);
     Assert.assertEquals(1, resources.size());
@@ -227,29 +315,31 @@ public class AMSPropertyProviderTest {
     uriBuilder2.addParameter("hostname", "h1");
     uriBuilder2.addParameter("appId", "HOST");
     Assert.assertTrue(uriBuilder.toString().equals(streamProvider.getLastSpec())
        || uriBuilder2.toString().equals(streamProvider.getLastSpec()));
      || uriBuilder2.toString().equals(streamProvider.getLastSpec()));
     Double val1 = (Double) res.getPropertyValue(PROPERTY_ID1);
     Assert.assertNotNull("No value for property " + PROPERTY_ID1, val1);
     Assert.assertEquals(41.088, val1, 0.001);
    Double val2 = (Double)res.getPropertyValue(PROPERTY_ID2);
    Double val2 = (Double) res.getPropertyValue(PROPERTY_ID2);
     Assert.assertNotNull("No value for property " + PROPERTY_ID2, val2);
     Assert.assertEquals(2.47025664E8, val2, 0.1);
   }
 
  @Test
   public void testPopulateResourcesForMultipleHostMetrics() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(MULTIPLE_HOST_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
     AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID
@@ -297,30 +387,32 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(86, val.length);
   }
 
  @Test
   public void testPopulateResourcesForRegexpMetrics() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(MULTIPLE_COMPONENT_REGEXP_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds =
        new HashMap&lt;String, Map&lt;String, PropertyInfo&gt;&gt;() {{
      put("RESOURCEMANAGER", new HashMap&lt;String, PropertyInfo&gt;() {{
        put("metrics/yarn/Queue/$1.replaceAll(\"([.])\",\"/\")/AvailableMB",
      new HashMap&lt;String, Map&lt;String, PropertyInfo&gt;&gt;() {{
        put("RESOURCEMANAGER", new HashMap&lt;String, PropertyInfo&gt;() {{
          put("metrics/yarn/Queue/$1.replaceAll(\"([.])\",\"/\")/AvailableMB",
             new PropertyInfo("yarn.QueueMetrics.Queue=(.+).AvailableMB", true, false));
      }});
    }};
        }});
      }};
 
     AMSPropertyProvider propertyProvider = new AMSComponentPropertyProvider(
        propertyIds,
        streamProvider,
        sslConfiguration,
        cacheProvider,
        metricHostProvider,
        CLUSTER_NAME_PROPERTY_ID,
        COMPONENT_NAME_PROPERTY_ID
      propertyIds,
      streamProvider,
      sslConfiguration,
      cacheProviderMock,
      metricHostProvider,
      CLUSTER_NAME_PROPERTY_ID,
      COMPONENT_NAME_PROPERTY_ID
     );
 
 
@@ -332,9 +424,9 @@ public class AMSPropertyProviderTest {
     Map&lt;String, TemporalInfo&gt; temporalInfoMap = new HashMap&lt;String, TemporalInfo&gt;();
     temporalInfoMap.put(propertyId1, new TemporalInfoImpl(1416528759233L, 1416531129231L, 1L));
     Request request = PropertyHelper.getReadRequest(
        Collections.singleton(propertyId1), temporalInfoMap);
      Collections.singleton(propertyId1), temporalInfoMap);
     Set&lt;Resource&gt; resources =
        propertyProvider.populateResources(Collections.singleton(resource), request, null);
      propertyProvider.populateResources(Collections.singleton(resource), request, null);
     Assert.assertEquals(1, resources.size());
     Resource res = resources.iterator().next();
     Map&lt;String, Object&gt; properties = PropertyHelper.getProperties(resources.iterator().next());
@@ -350,13 +442,15 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(238, val.length);
   }
 
  @Test
   public void testPopulateResourcesForSingleComponentMetric() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(SINGLE_COMPONENT_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds =
       PropertyHelper.getMetricPropertyIds(Resource.Type.Component);
@@ -365,7 +459,7 @@ public class AMSPropertyProviderTest {
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       COMPONENT_NAME_PROPERTY_ID
@@ -397,17 +491,19 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(238, val.length);
   }
 
  @Test
   public void testPopulateMetricsForEmbeddedHBase() throws Exception {
     AmbariManagementController ams = createNiceMock(AmbariManagementController.class);
     PowerMock.mockStatic(AmbariServer.class);
    expect(AmbariServer.getController()).andReturn(ams);
    expect(AmbariServer.getController()).andReturn(ams).anyTimes();
     AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);
     Clusters clusters = createNiceMock(Clusters.class);
     Cluster cluster = createNiceMock(Cluster.class);
     ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);
    StackId stackId= new StackId("HDP","2.2");
     expect(ams.getClusters()).andReturn(clusters).anyTimes();
    expect(clusters.getCluster("HostRoles/cluster_name")).andReturn(cluster).anyTimes();
    expect(cluster.getResourceId()).andReturn(2L).anyTimes();

    StackId stackId = new StackId("HDP", "2.2");
     try {
       expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster).anyTimes();
     } catch (AmbariException e) {
@@ -417,7 +513,7 @@ public class AMSPropertyProviderTest {
     expect(ams.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
     expect(ambariMetaInfo.getComponentToService("HDP", "2.2", "METRICS_COLLECTOR")).andReturn("AMS").anyTimes();
     expect(ambariMetaInfo.getComponent("HDP", "2.2", "AMS", "METRICS_COLLECTOR"))
            .andReturn(componentInfo).anyTimes();
      .andReturn(componentInfo).anyTimes();
     expect(componentInfo.getTimelineAppid()).andReturn("AMS-HBASE");
     replay(ams, clusters, cluster, ambariMetaInfo, componentInfo);
     PowerMock.replayAll();
@@ -426,6 +522,9 @@ public class AMSPropertyProviderTest {
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds =
       PropertyHelper.getMetricPropertyIds(Resource.Type.Component);
@@ -434,7 +533,7 @@ public class AMSPropertyProviderTest {
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       COMPONENT_NAME_PROPERTY_ID
@@ -465,17 +564,19 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(189, val.length);
   }
 
  @Test
   public void testAggregateFunctionForComponentMetrics() throws Exception {
     AmbariManagementController ams = createNiceMock(AmbariManagementController.class);
     PowerMock.mockStatic(AmbariServer.class);
    expect(AmbariServer.getController()).andReturn(ams);
    expect(AmbariServer.getController()).andReturn(ams).anyTimes();
     AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);
     Clusters clusters = createNiceMock(Clusters.class);
     Cluster cluster = createNiceMock(Cluster.class);
     ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);
    StackId stackId= new StackId("HDP","2.2");
    StackId stackId = new StackId("HDP", "2.2");
     expect(ams.getClusters()).andReturn(clusters).anyTimes();
    expect(clusters.getCluster("HostRoles/cluster_name")).andReturn(cluster).anyTimes();
    expect(cluster.getResourceId()).andReturn(2L).anyTimes();

     try {
       expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster).anyTimes();
     } catch (AmbariException e) {
@@ -485,7 +586,7 @@ public class AMSPropertyProviderTest {
     expect(ams.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
     expect(ambariMetaInfo.getComponentToService("HDP", "2.2", "HBASE_REGIONSERVER")).andReturn("HBASE").anyTimes();
     expect(ambariMetaInfo.getComponent("HDP", "2.2", "HBASE", "HBASE_REGIONSERVER"))
            .andReturn(componentInfo).anyTimes();
      .andReturn(componentInfo).anyTimes();
     expect(componentInfo.getTimelineAppid()).andReturn("HBASE");
     replay(ams, clusters, cluster, ambariMetaInfo, componentInfo);
     PowerMock.replayAll();
@@ -494,6 +595,9 @@ public class AMSPropertyProviderTest {
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds =
       PropertyHelper.getMetricPropertyIds(Resource.Type.Component);
@@ -503,7 +607,7 @@ public class AMSPropertyProviderTest {
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       COMPONENT_NAME_PROPERTY_ID
@@ -533,20 +637,22 @@ public class AMSPropertyProviderTest {
     Assert.assertEquals(32, val.length);
   }
 
  @Test
   public void testFilterOutOfBandMetricData() throws Exception {
     setUpCommonMocks();
     TestStreamProvider streamProvider = new TestStreamProvider(SINGLE_HOST_METRICS_FILE_PATH);
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host);
     AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID
@@ -601,7 +707,6 @@ public class AMSPropertyProviderTest {
     }
   }
 
  @Test
   public void testPopulateResourcesForHostComponentHostMetrics() throws Exception {
     setUpCommonMocks();
     TestStreamProviderForHostComponentHostMetricsTest streamProvider =
@@ -609,13 +714,16 @@ public class AMSPropertyProviderTest {
     injectCacheEntryFactoryWithStreamProvider(streamProvider);
     TestMetricHostProvider metricHostProvider = new TestMetricHostProvider();
     ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class);
    TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class);
    TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class);
    expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes();
 
     Map&lt;String, Map&lt;String, PropertyInfo&gt;&gt; propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.HostComponent);
     AMSPropertyProvider propertyProvider = new AMSHostComponentPropertyProvider(
       propertyIds,
       streamProvider,
       sslConfiguration,
      cacheProvider,
      cacheProviderMock,
       metricHostProvider,
       CLUSTER_NAME_PROPERTY_ID,
       HOST_NAME_PROPERTY_ID,
@@ -711,30 +819,23 @@ public class AMSPropertyProviderTest {
     }
   }
 
  // Helper function to setup common Mocks.
   private void setUpCommonMocks() throws AmbariException {
    AmbariManagementController ams = createNiceMock(AmbariManagementController.class);

    AmbariManagementController amc = createNiceMock(AmbariManagementController.class);
     PowerMock.mockStatic(AmbariServer.class);
    expect(AmbariServer.getController()).andReturn(ams);
    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);
    expect(AmbariServer.getController()).andReturn(amc).anyTimes();
     Clusters clusters = createNiceMock(Clusters.class);
     Cluster cluster = createNiceMock(Cluster.class);
    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);
    StackId stackId= new StackId("HDP","2.2");
    expect(ams.getClusters()).andReturn(clusters).anyTimes();
    expect(amc.getClusters()).andReturn(clusters).anyTimes();
    expect(clusters.getCluster(CLUSTER_NAME_PROPERTY_ID)).andReturn(cluster).anyTimes();
    expect(cluster.getResourceId()).andReturn(2L).anyTimes();
     try {
       expect(clusters.getCluster(anyObject(String.class))).andReturn(cluster).anyTimes();
     } catch (AmbariException e) {
       e.printStackTrace();
     }
    expect(cluster.getCurrentStackVersion()).andReturn(stackId).anyTimes();
    expect(ams.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
    expect(ambariMetaInfo.getComponentToService(anyObject(String.class),
            anyObject(String.class), anyObject(String.class))).andReturn("HDFS").anyTimes();
    expect(ambariMetaInfo.getComponent(anyObject(String.class),anyObject(String.class),
            anyObject(String.class), anyObject(String.class)))
            .andReturn(componentInfo).anyTimes();

    replay(ams, clusters, cluster, ambariMetaInfo);
    replay(amc, clusters, cluster);
     PowerMock.replayAll();
   }
 
- 
2.19.1.windows.1

</comment></unit>
