<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/ambari/c15a281e01.java"><expr_stmt><expr><name>From</name> <name>c15a281e01af5dda2e7551dae29bc60a53ca11a7</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Aravindan</name> <name><name>Vijayan</name> <argument_list type="generic">&lt;<argument><name>avijayan</name><annotation>@<name><name>hortonworks</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">14</literal> <name>Jun</name> <literal type="number">2016</literal> <literal type="number">21</literal><operator>:</operator><literal type="number">58</literal><operator>:</operator><literal type="number">29</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>AMBARI</name><operator>-</operator><literal type="number">17238</literal> <operator>:</operator> <name>AMS</name> <name>extrapolation</name> <name>should</name> <name>be</name> <name>done</name> <name>only</name></expr></expr_stmt> <for>for
 Counter metrics. <control>(<init><expr><name>avijayan</name></expr></init>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">86</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><name><name>lineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">28</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">91</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">23</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">722dc14d6c</literal><operator>..</operator><name>bdc0feb83f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecond</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></block_content></block></for>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>yarn</name><operator>.</operator><name>server</name><operator>.</operator><name>applicationhistoryservice</name><operator>.</operator><name>metrics</name><operator>.</operator><name>timeline</name><operator>.</operator><name>aggregators</name></name>;</package>
 
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name><operator>.</operator><name>PostProcessingUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>metrics2</name><operator>.</operator><name>sink</name><operator>.</operator><name>timeline</name><operator>.</operator><name>TimelineMetric</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">270</literal></expr><operator>,</operator><expr><literal type="number">77</literal> @@ <specifier>public</specifier> <name>class</name> <name>TimelineMetricClusterAggregatorSecond</name> extends <name>AbstractTimelineAggre</name>
                                          <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name> <name>timeSliceValueMap</name></expr></expr_stmt>) <block>{<block_content>
 
 
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>requiredTimestamps</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Long</name><index>[]</index></name></type> <name>timeSlice</name> <range>: <expr><name>timeSlices</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timeSliceValueMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>requiredTimestamps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"COUNTER"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">//For Counter Based metrics, ok to do interpolation and extrapolation</comment>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>requiredTimestamps</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>Long</name><index>[]</index></name></type> <name>timeSlice</name> <range>: <expr><name>timeSlices</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timeSliceValueMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>requiredTimestamps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>interpolatedValuesMap</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricValues</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requiredTimestamps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>interpolatedValuesMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>interpolatedValuesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name>interpolatedValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>clusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clusterMetric</name></expr></argument>, <argument><expr><name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Cannot compute interpolated value, hence skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">//For other metrics, ok to do only interpolation</comment>
 
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>interpolatedValuesMap</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricValues</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requiredTimestamps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>sliceNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sliceNum</name> <operator>&lt;</operator> <call><name><name>timeSlices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>sliceNum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>timeSlice</name> <init>= <expr><call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sliceNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <if_stmt><if>if <condition>(<expr><name>interpolatedValuesMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>interpolatedValuesMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timeSliceValueMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Found an empty slice : "</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <if_stmt><if>if <condition>(<expr><name>interpolatedValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>clusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(
            <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Double</name></type> <name>lastSeenValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>sliceNum</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>prevTimeSlice</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><name>lastSeenValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>prevTimeSlice</name> <operator>=</operator> <call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastSeenValue</name> <operator>=</operator> <call><name><name>timeSliceValueMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>prevTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></while>
 
          <expr_stmt><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clusterMetric</name></expr></argument>, <argument><expr><name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Cannot compute interpolated value, hence skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>Double</name></type> <name>nextSeenValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>sliceNum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>Long</name><index>[]</index></name></type> <name>nextTimeSlice</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><name>nextSeenValue</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name><name>timeSlices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nextTimeSlice</name> <operator>=</operator> <call><name><name>timeSlices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextSeenValue</name> <operator>=</operator> <call><name><name>timeSliceValueMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>nextTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></while>

          <decl_stmt><decl><type><name>Double</name></type> <name>interpolatedValue</name> <init>= <expr><call><name><name>PostProcessingUtil</name><operator>.</operator><name>interpolate</name></name><argument_list>(<argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>prevTimeSlice</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>prevTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>lastSeenValue</name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>nextTimeSlice</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>nextTimeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>nextSeenValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name>interpolatedValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>clusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><name><name>timeSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
              <argument><expr><call><name><name>timelineMetric</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Interpolated value : "</literal> <operator>+</operator> <name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clusterMetric</name></expr></argument>, <argument><expr><name>interpolatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Cannot compute interpolated value, hence skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
         </block_content>}</block></else></if_stmt>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dc01f38e3e</name><operator>..</operator><literal type="number">1e2f4ec367</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>/</operator><name>ambari</name><operator>-</operator><name>metrics</name><operator>-</operator><name>timelineservice</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>hadoop</name><operator>/</operator><name>yarn</name><operator>/</operator><name>server</name><operator>/</operator><name>applicationhistoryservice</name><operator>/</operator><name>metrics</name><operator>/</operator><name>timeline</name><operator>/</operator><name>aggregators</name><operator>/</operator><name><name>TimelineMetricClusterAggregatorSecondTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <name>class</name> <name>TimelineMetricClusterAggregatorSecondTest</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>TimelineMetric</name></type> <name>counterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineMetric</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>counterMetric</name><operator>.</operator><name>setMetricName</name></name><argument_list>(<argument><expr><literal type="string">"TestMetric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>counterMetric</name><operator>.</operator><name>setHostName</name></name><argument_list>(<argument><expr><literal type="string">"TestHost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>counterMetric</name><operator>.</operator><name>setAppId</name></name><argument_list>(<argument><expr><literal type="string">"TestAppId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>counterMetric</name><operator>.</operator><name>setMetricValues</name></name><argument_list>(<argument><expr><name>metricValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>counterMetric</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"COUNTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TimelineClusterMetric</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>timelineClusterMetricMap</name> <init>= <expr><call><name><name>secondAggregator</name><operator>.</operator><name>sliceFromTimelineMetric</name></name><argument_list>(<argument><expr><name>counterMetric</name></expr></argument>, <argument><expr><name>timeSlices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>timelineClusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(<argument><expr><call><name><name>counterMetric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>counterMetric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>counterMetric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <decl_stmt><decl><type><name>TimelineMetric</name></type> <name>metric</name> <init>= <expr><operator>new</operator> <call><name>TimelineMetric</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>setMetricName</name></name><argument_list>(<argument><expr><literal type="string">"TestMetric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>setHostName</name></name><argument_list>(<argument><expr><literal type="string">"TestHost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>setAppId</name></name><argument_list>(<argument><expr><literal type="string">"TestAppId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>setMetricValues</name></name><argument_list>(<argument><expr><name>metricValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TimelineClusterMetric</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>timelineClusterMetricMap</name> <init>= <expr><call><name><name>secondAggregator</name><operator>.</operator><name>sliceFromTimelineMetric</name></name><argument_list>(<argument><expr><name>metric</name></expr></argument>, <argument><expr><name>timeSlices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>timelineClusterMetricMap</name> <operator>=</operator> <call><name><name>secondAggregator</name><operator>.</operator><name>sliceFromTimelineMetric</name></name><argument_list>(<argument><expr><name>metric</name></expr></argument>, <argument><expr><name>timeSlices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>TimelineClusterMetric</name></type> <name>timelineClusterMetric</name> <init>= <expr><operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(<argument><expr><call><name><name>metric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>metric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><name>timelineClusterMetric</name> <operator>=</operator> <operator>new</operator> <call><name>TimelineClusterMetric</name><argument_list>(<argument><expr><call><name><name>metric</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>metric</name><operator>.</operator><name>getAppId</name></name><argument_list>()</argument_list></call></expr></argument>,
       <argument><expr><call><name><name>metric</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
 
     <expr_stmt><expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>timelineClusterMetric</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><name>roundedStartTime</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>sliceInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>timelineClusterMetricMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timelineClusterMetric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   </block_content>}</block></for>
 
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block>

</unit>
