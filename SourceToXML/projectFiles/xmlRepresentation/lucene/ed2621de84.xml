<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/ed2621de84.java"><expr_stmt><expr><name>From</name> <name>ed2621de8402154440e3e1e1979eb620bd23b926</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Scott</name> <name><name>Blum</name> <argument_list type="generic">&lt;<argument><name>dragonsinth</name><annotation>@<name><name>gmail</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">7</literal> <name>Jun</name> <literal type="number">2016</literal> <literal type="number">01</literal><operator>:</operator><literal type="number">52</literal><operator>:</operator><literal type="number">16</literal> <operator>-</operator><literal type="number">0400</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">9191</literal><operator>:</operator> <call><name><name>OverseerTaskQueue</name><operator>.</operator><name>peekTopN</name></name><argument_list>()</argument_list></call> <name>fatally</name> <name>flawed</name>

<operator>--</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>  <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueue</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">95</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>OverseerTaskProcessor</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>OverseerTaskQueue</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">48</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueueTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">44</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">127</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">72</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>d73c61fd517</name><operator>..</operator><name>c8e7c1f6d59</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <call><name>Optimizations</name>
   <argument_list>(<argument><expr><name>Ryan</name> <name>Zezeski</name></expr></argument>, <argument><expr><name>Mark</name> <name>Miller</name></expr></argument>, <argument><expr><name>Shawn</name> <name>Heisey</name></expr></argument>, <argument><expr><name>Steve</name> <name>Davids</name></expr></argument>)</argument_list></call>
 
 <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>  <literal type="number">6.2.0</literal> <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>
<operator>(</operator><name>No</name> <name>Changes</name><operator>)</operator>

<name>Bug</name> <name>Fixes</name>
<operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>

<operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">9191</literal><operator>:</operator> <call><name><name>OverseerTaskQueue</name><operator>.</operator><name>peekTopN</name></name><argument_list>()</argument_list></call> <name>fatally</name> <call><name>flawed</name> <argument_list>(<argument><expr><name>Scott</name> <name>Blum</name></expr></argument>, <argument><expr><name>Noble</name> <name>Paul</name></expr></argument>)</argument_list></call>
 
 <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>  <literal type="number">6.1.0</literal> <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueue</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueue</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e424b7e89e6</name><operator>..</operator><name>afed6f13fef</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueue</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueue</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>invoke</name><operator>.</operator><name>MethodHandles</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Condition</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>SolrZkClient</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>cloud</name><operator>.</operator><name>ZkCmdExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>stats</name><operator>.</operator><name>TimerContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>CreateMode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueue</name> <block>{
   <expr><specifier>private</specifier> <name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>knownChildren</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
   <comment type="block" format="javadoc">/**
   * Used to wait on a non-empty queue; you must hold {@link #updateLock} and verify that
   * {@link #knownChildren} is empty before waiting on this condition.
   * Used to wait on ZK changes to the child list; you must hold {@link #updateLock} before waiting on this condition.
    */</comment>
  <expr><specifier>private</specifier> <name>final</name> <name>Condition</name> <name>notEmpty</name> <operator>=</operator> <call><name><name>updateLock</name><operator>.</operator><name>newCondition</name></name><argument_list>()</argument_list></call></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name>Condition</name> <name>changed</name> <operator>=</operator> <call><name><name>updateLock</name><operator>.</operator><name>newCondition</name></name><argument_list>()</argument_list></call></expr>;
 
   <comment type="block" format="javadoc">/**
   * If non-null, the last watcher to listen for child changes.
   * If non-null, the last watcher to listen for child changes.  If null, the in-memory contents are dirty.
    */</comment>
   <expr><specifier>private</specifier> <name>ChildWatcher</name> <name>lastWatcher</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
  <comment type="block" format="javadoc">/**
   * If true, ZK's child list probably doesn't match what's in memory.
   */</comment>
  <expr><specifier>private</specifier> <name>boolean</name> <name>isDirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;

   <expr><specifier>public</specifier> <call><name>DistributedQueue</name><argument_list>(<argument><expr><name>SolrZkClient</name> <name>zookeeper</name></expr></argument>, <argument><expr><name>String</name> <name>dir</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>this</name><argument_list>(<argument><expr><name>zookeeper</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Overseer</name><operator>.</operator><name>Stats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
@@ <operator>-</operator><literal type="number">165</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">161</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueue</name> <block>{
         <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <return>return <expr><name>result</name></expr>;</return>
         <expr_stmt/></block_content></block></if></if_stmt>}</block>
        <name>waitNanos</name> <operator>=</operator> <call><name><name>notEmpty</name><operator>.</operator><name>awaitNanos</name></name><argument_list>(<argument><expr><name>waitNanos</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>waitNanos</name> <operator>=</operator> <call><name><name>changed</name><operator>.</operator><name>awaitNanos</name></name><argument_list>(<argument><expr><name>waitNanos</name></expr></argument>)</argument_list></call></expr>;
       }</block></expr></expr_stmt>
       <return>return <expr><literal type="null">null</literal></expr>;</return>
     } finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">218</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueue</name> <block>{
         <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <return>return <expr><name>result</name></expr>;</return>
         <expr_stmt/></block_content></block></if></if_stmt>}</block>
        <call><name><name>notEmpty</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>changed</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block>
     } finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">273</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueue</name> <block>{
   <expr><specifier>private</specifier> <name>String</name> <call><name>firstChild</name><argument_list>(<argument><expr><name>boolean</name> <name>remove</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
     <expr><call><name><name>updateLock</name><operator>.</operator><name>lockInterruptibly</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <try>try <block>{<block_content>
      <comment type="line">// Try to fetch the first in-memory child.</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>knownChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// If we're not in a dirty state, and we have in-memory children, return from in-memory.</comment>
      <if_stmt><if>if <condition>(<expr><name>lastWatcher</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>knownChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><call><name><name>knownChildren</name><operator>.</operator><name>pollFirst</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>knownChildren</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
       <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></try>}</block></expr></expr_stmt>
 
      <if_stmt><if>if <condition>(<expr><name>lastWatcher</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isDirty</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// No children, no known updates, and a watcher is already set; nothing we can do.</comment>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

       <comment type="line">// Try to fetch an updated list of children from ZK.</comment>
       <decl_stmt><decl><type><name>ChildWatcher</name></type> <name>newWatcher</name> <init>= <expr><operator>new</operator> <call><name>ChildWatcher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name>knownChildren</name> <operator>=</operator> <call><name>fetchZkChildren</name><argument_list>(<argument><expr><name>newWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>lastWatcher</name> <operator>=</operator> <name>newWatcher</name></expr>;</expr_stmt> <comment type="line">// only set after fetchZkChildren returns successfully</comment>
      <expr_stmt><expr><name>isDirty</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>knownChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>notEmpty</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>changed</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><call><name><name>knownChildren</name><operator>.</operator><name>pollFirst</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>knownChildren</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
     </block_content>}</block> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">325</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">315</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueue</name> <block>{
   }</block>
 
   <comment type="block" format="javadoc">/**
   * Return the currently-known set of children from memory. If there are no children,
   * waits up to {@code waitMillis} for at least one child to become available. May
   * update the set of known children.
   * Return the currently-known set of elements, using child names from memory. If no children are found, or no
   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.
   * &lt;p/&gt;
   * Package-private to support {@link OverseerTaskQueue} specifically.
    */</comment>
  <name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>getChildren</name><argument_list>(<argument><expr><name>long</name> <name>waitMillis</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
  <expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <call><name>peekElements</name><argument_list>(<argument><expr><name>int</name> <name>max</name></expr></argument>, <argument><expr><name>long</name> <name>waitMillis</name></expr></argument>, <argument><expr><name><name>Function</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name> <name>acceptFilter</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
    <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>foundChildren</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>long</name></type> <name>waitNanos</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>waitMillis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>waitNanos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">// Trigger a fetch if needed.</comment>
      <expr_stmt><expr><call><name>firstElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>firstChild</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>lockInterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>knownChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>knownChildren</name></expr></argument>)</argument_list></call></expr>;</return>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>child</name> <range>: <expr><name>knownChildren</name></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>acceptFilter</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>foundChildren</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <expr_stmt><expr><name>waitNanos</name> <operator>=</operator> <call><name><name>notEmpty</name><operator>.</operator><name>awaitNanos</name></name><argument_list>(<argument><expr><name>waitNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>foundChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>waitNanos</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>waitNanos</name> <operator>=</operator> <call><name><name>changed</name><operator>.</operator><name>awaitNanos</name></name><argument_list>(<argument><expr><name>waitNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
         <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></finally>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>foundChildren</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></try>

    <comment type="line">// Technically we could restart the method if we fail to actually obtain any valid children</comment>
    <comment type="line">// from ZK, but this is a super rare case, and the latency of the ZK fetches would require</comment>
    <comment type="line">// much more sophisticated waitNanos tracking.</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>child</name> <range>: <expr><name>foundChildren</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>zookeeper</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>child</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>KeeperException</name><operator>.</operator><name>NoNodeException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Another client deleted the node first, remove the in-memory and continue.</comment>
        <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>lockInterruptibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>knownChildren</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
          <expr_stmt><expr><call><name><name>updateLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></catch></try>
     </block_content>}</block></for>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySortedSet</name></name><argument_list>()</argument_list></call></expr>;</return>
    <return>return <expr><name>result</name></expr>;</return>
   </block_content>}</block></while>
 
   <comment type="block" format="javadoc">/**
@@ -418,10 +445,8 @@ public class DistributedQueue {
         if (lastWatcher == this) {
           lastWatcher = null;
         }
        // Do no updates in this thread, just signal state back to client threads.
        isDirty = true;
         // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry
        notEmpty.signalAll();
        changed.signalAll();
       } finally {
         updateLock.unlock();
       }
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java
index 93a7e6fee1b..092ed97cc3a 100644
-- a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java
++ b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java
@@ -190,9 +190,9 @@ public class OverseerTaskProcessor implements Runnable, Closeable {
             cleanUpWorkQueue();
 
           List&lt;QueueEvent&gt; heads = workQueue.peekTopN(MAX_PARALLEL_TASKS, runningZKTasks, 2000L);

          if (heads == null)
          if (heads.isEmpty()) {
             continue;
          }
 
           log.debug("Got {} tasks from work-queue : [{}]", heads.size(), heads.toString());
 
@@ -466,6 +466,8 @@ public class OverseerTaskProcessor implements Runnable, Closeable {
           log.warn("Could not find and remove async call [" + asyncId + "] from the running map.");
         }
       }

      workQueue.remove(head);
     }
 
     private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java
index 4cee814e38c..aae7df22069 100644
-- a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java
++ b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java
@@ -17,7 +17,6 @@
 package org.apache.solr.cloud;
 
 import java.lang.invoke.MethodHandles;

 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -25,6 +24,7 @@ import java.util.TreeSet;
 
 import org.apache.solr.common.cloud.SolrZkClient;
 import org.apache.solr.common.cloud.ZkNodeProps;
import org.apache.solr.common.util.Pair;
 import org.apache.solr.util.stats.TimerContext;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
@@ -82,9 +82,8 @@ public class OverseerTaskQueue extends DistributedQueue {
 
   /**
    * Remove the event and save the response into the other path.
   * 
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>remove</name><argument_list>(<argument><expr><name>QueueEvent</name> <name>event</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>,
  <argument><expr><specifier>public</specifier> <name>void</name> <call><name>remove</name><argument_list>(<argument><expr><name>QueueEvent</name> <name>event</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>,
       <argument><expr><name>InterruptedException</name> <block>{
     <expr><name>TimerContext</name> <name>time</name> <operator>=</operator> <call><name><name>stats</name><operator>.</operator><name>time</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"_remove_event"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>OverseerTaskQueue</name> extends <name>DistributedQueue</name> <block>{
         <expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Response ZK path: "</literal> <operator>+</operator> <name>responsePath</name> <operator>+</operator> <literal type="string">" doesn't exist."</literal>
             <operator>+</operator> <literal type="string">"  Requestor may have disconnected from ZooKeeper"</literal></expr></argument>)</argument_list></call></expr>;
       }</block>
      <name><name>byte</name><index>[]</index></name> <name>data</name> <operator>=</operator> <call><name><name>zookeeper</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>zookeeper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>data</name></expr>;</return>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>zookeeper</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>KeeperException</name><operator>.</operator><name>NoNodeException</name></name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch></try>
     </block_content>}</block> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">44</literal> <operator>+</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>OverseerTaskQueue</name> extends <name>DistributedQueue</name> <block>{
     <expr><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueueEvent</name></argument>&gt;</argument_list></name> <name>topN</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
     <expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Peeking for top {} elements. ExcludeSet: {}"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>excludeSet</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>TimerContext</name> <name>time</name> <operator>=</operator> <literal type="null">null</literal></expr>;
    <expr><name>TimerContext</name> <name>time</name></expr>;
     <if_stmt><if>if <condition>(<expr><name>waitMillis</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>stats</name><operator>.</operator><name>time</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"_peekTopN_wait_forever"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
     <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>stats</name><operator>.</operator><name>time</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"_peekTopN_wait"</literal> <operator>+</operator> <name>waitMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
 
     <try>try <block>{<block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>headNode</name> <range>: <expr><call><name>getChildren</name><argument_list>(<argument><expr><name>waitMillis</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>topN</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
          <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><name>dir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>headNode</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>excludeSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>QueueEvent</name></type> <name>queueEvent</name> <init>= <expr><operator>new</operator> <call><name>QueueEvent</name><argument_list>(<argument><expr><name>id</name></expr></argument>,
                <argument><expr><call><name><name>zookeeper</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>headNode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>topN</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>queueEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>KeeperException</name><operator>.</operator><name>NoNodeException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Another client removed the node first, try next</comment>
          </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>topN</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printQueueEventsListElementIds</name><argument_list>(<argument><expr><name>topN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>topN</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><call><name><name>topN</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printQueueEventsListElementIds</name><argument_list>(<argument><expr><name>topN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>topN</name></expr>;</return>
      <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>element</name> <range>: <expr><call><name>peekElements</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>waitMillis</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>child</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>excludeSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>child</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
        <expr><call><name><name>topN</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QueueEvent</name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>element</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       }</block></for>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
      <expr_stmt><expr><call><name>printQueueEventsListElementIds</name><argument_list>(<argument><expr><name>topN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>topN</name></expr>;</return>
     </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
       <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally>
   </block_content>}</block></try>
 
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printQueueEventsListElementIds</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueueEvent</name></argument>&gt;</argument_list></name></type> <name>topN</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>QueueEvent</name></type> <name>queueEvent</name><range>: <expr><name>topN</name></expr></range></decl></init>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>LOG</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>topN</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>QueueEvent</name></type> <name>queueEvent</name> <range>: <expr><name>topN</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>queueEvent</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueueTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueueTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">840e7e51f7f</literal><operator>..</operator><name>f42f1014cc8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueueTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>cloud</name><operator>/</operator><name><name>DistributedQueueTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>cloud</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">49</literal> @@ <specifier>public</specifier> <name>class</name> <name>DistributedQueueTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>dq</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPeekElements</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>dqZNode</name> <init>= <expr><literal type="string">"/distqueue/test"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><literal type="string">"hello world"</literal><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>UTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DistributedQueue</name></type> <name>dq</name> <init>= <expr><call><name>makeDistributedQueue</name><argument_list>(<argument><expr><name>dqZNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Populate with data.</comment>
    <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should be able to get 0, 1, 2, or 3 instantly</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>dq</name><operator>.</operator><name>peekElements</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>child</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">true</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Asking for more should return only 3.</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>dq</name><operator>.</operator><name>peekElements</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>child</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">true</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If we filter everything out, we should block for the full time.</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>dq</name><operator>.</operator><name>peekElements</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>child</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">false</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>&gt;=</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If someone adds a new matching element while we're waiting, we should return immediately.</comment>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ignore</comment>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>dq</name><operator>.</operator><name>peekElements</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>child</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <comment type="line">// The 4th element in the queue will end with a "3".</comment>
      <return>return <expr><call><name><name>child</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>&gt;=</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><type><specifier>private</specifier> <name>void</name></type> <name>forceSessionExpire</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>long</name></type> <name>sessionId</name> <init>= <expr><call><name><name>zkClient</name><operator>.</operator><name>getSolrZooKeeper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSessionId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>zkServer</name><operator>.</operator><name>expire</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function></block_content></block></while></block_content></block></finally>

</unit>
