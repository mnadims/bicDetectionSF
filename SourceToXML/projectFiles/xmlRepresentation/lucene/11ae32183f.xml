<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/11ae32183f.java"><expr_stmt><expr><name>From</name> <literal type="number">11ae32183f088bc24f4f1cc797ab5ca29c70c8c5</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">24</literal> <name>Apr</name> <literal type="number">2014</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">44</literal><operator>:</operator><literal type="number">22</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">5610</literal><operator>:</operator> <name>improve</name> <name>CheckIndex</name> <name>checking</name></expr>;</expr_stmt> <expr_stmt><expr><name>javadocs</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1589752 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">40</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">6</literal> <operator>++</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">37</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">9</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4a87726a6f1</literal><operator>..</operator><name>cba481157ac</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>CheckIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">758</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">758</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>CheckIndex</name> <block>{
       <expr><name>final</name> <name>boolean</name> <name>hasOffsets</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>hasOffsets</name></name><argument_list>()</argument_list></call></expr>;
       
       <expr><name>BytesRef</name> <name>bb</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr>;
      <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <name>final</name> <name>BytesRef</name> <name>minTerm</name> <operator>=</operator> <ternary><condition><expr><name>bb</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>BytesRef</name></type> <name>minTerm</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>bb</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>minTerm</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>BytesRef</name></type> <name>maxTerm</name></decl>;</decl_stmt>
       <expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
      <decl_stmt><decl><type><specifier>final</specifier> <name>BytesRef</name></type> <name>maxTerm</name> <init>= <expr><ternary><condition><expr><name>bb</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>bb</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <assert>assert <expr><call><name><name>bb</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name>maxTerm</name> <operator>=</operator> <call><name><name>BytesRef</name><operator>.</operator><name>deepCopyOf</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field \""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\" has null minTerm but non-null maxTerm"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>maxTerm</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field \""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\" has non-null minTerm but null maxTerm"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
 
       <comment type="line">// term vectors cannot omit TF:</comment>
       <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>expectedHasFreqs</name> <init>= <expr><operator>(</operator><name>isVectors</name> <operator>||</operator> <call><name><name>fieldInfo</name><operator>.</operator><name>getIndexOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>IndexOptions</name><operator>.</operator><name>DOCS_AND_FREQS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">825</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">841</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>CheckIndex</name> <block>{
           <expr><call><name><name>lastTerm</name><operator>.</operator><name>copyBytes</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
         
        <if_stmt><if>if <condition>(<expr><name>minTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// We checked this above:</comment>
          <assert>assert <expr><name>maxTerm</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field=\""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\": invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", minTerm="</literal> <operator>+</operator> <name>minTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        
         <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minTerm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", minTerm="</literal> <operator>+</operator> <name>minTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field=\""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\": invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", minTerm="</literal> <operator>+</operator> <name>minTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
         
         <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>maxTerm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", maxTerm="</literal> <operator>+</operator> <name>maxTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field=\""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\": invalid term: term="</literal> <operator>+</operator> <name>term</name> <operator>+</operator> <literal type="string">", maxTerm="</literal> <operator>+</operator> <name>maxTerm</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
         
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>docFreq</name> <init>= <expr><call><name><name>termsEnum</name><operator>.</operator><name>docFreq</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1080</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1102</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>CheckIndex</name> <block>{
         }</block></expr></expr_stmt>
       }
       
      if <expr_stmt><expr><operator>(</operator><name>minTerm</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>status</name><operator>.</operator><name>termCount</name></name> <operator>+</operator> <name><name>status</name><operator>.</operator><name>delTermCount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <block>{
        <throw>throw <argument_list>new <argument><expr><call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"field=\""</literal> <operator>+</operator> <name>field</name> <operator>+</operator> <literal type="string">"\": minTerm is non-null yet we saw no terms: "</literal> <operator>+</operator> <name>minTerm</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
      }</block>

       <name>final</name> <name>Terms</name> <name>fieldTerms</name> <operator>=</operator> <call><name><name>fields</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>fieldTerms</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <comment type="line">// Unusual: the FieldsEnum returned a field but</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">533d51e8634</literal><operator>..</operator><name>f2b88cc904c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>Terms</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>Terms</name> <block>{
   
   <comment type="block" format="javadoc">/** Returns the smallest term (in lexicographic order) in the field. 
    *  Note that, just like other term measures, this measure does not 
   *  take deleted documents into account. */</comment>
   <expr><operator>*</operator>  <name>take</name> <name>deleted</name> <name>documents</name> <name>into</name> <name><name>account</name><operator>.</operator>  <name>This</name></name> <name>returns</name>
   <operator>*</operator>  <literal type="null">null</literal> <name>when</name> <name>there</name> <name>are</name> <name>no</name> <name><name>terms</name><operator>.</operator></name> *<operator>/</operator>
   <specifier>public</specifier> <name>BytesRef</name> <call><name>getMin</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
     <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/** Returns the largest term (in lexicographic order) in the field. 
    *  Note that, just like other term measures, this measure does not 
   *  take deleted documents into account. */</comment>
   <expr_stmt><expr><operator>*</operator>  <name>take</name> <name>deleted</name> <name>documents</name> <name>into</name> <name><name>account</name><operator>.</operator>  <name>This</name></name> <name>returns</name>
   <operator>*</operator>  <literal type="null">null</literal> <name>when</name> <name>there</name> <name>are</name> <name>no</name> <name><name>terms</name><operator>.</operator></name> *<operator>/</operator>
   @<call><name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"fallthrough"</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>BytesRef</name> <call><name>getMax</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>long</name> <name>size</name> <operator>=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt>

</unit>
