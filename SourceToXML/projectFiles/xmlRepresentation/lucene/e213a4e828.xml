<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/e213a4e828.java"><expr_stmt><expr><name>From</name> <name>e213a4e8289ebc8d65f33dfd04e90bd4b3cdf524</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Michael</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">14</literal> <name>Nov</name> <literal type="number">2008</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">02</literal><operator>:</operator><literal type="number">44</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">1452</literal><operator>:</operator> <name>fixes</name> <name>cases</name> <name>during</name> <name>merge</name> <name>and</name> <name>lazy</name> <name>field</name> <name>access</name>
 <name>where</name> <name>binary</name> <name>field</name> <name>is</name> <name>truncated</name> <name>to</name> <literal type="number">0</literal>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/java/trunk@713962 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                                   <operator>|</operator>  <literal type="number">6</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">7</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexReader</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">97</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">108</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">2</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>cec6d4df9c6</name><operator>..</operator><literal type="number">832b4e464ea</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>Bug</name> <name>fixes</name>
    <name>implementation</name> <operator>-</operator> <name>Leads</name> <name>to</name> <name>Solr</name> <name>Cache</name> <name><name>misses</name><operator>.</operator></name> 
    (<name>Todd</name> <name>Feak</name></expr><operator>,</operator> <expr><name>Mark</name> <name>Miller</name> <name>via</name> <name>yonik</name></expr></expr_stmt>)
 
<expr_stmt><expr><literal type="number">2.</literal> <name>LUCENE</name><operator>-</operator><literal type="number">1452</literal><operator>:</operator> <name>Fixed</name> <name>silent</name> <name>data</name><operator>-</operator><name>loss</name></expr></expr_stmt> <case>case <expr><name>whereby</name> <name>binary</name> <name>fields</name> <name>are</name>
   <name>truncated</name> <name>to</name> <literal type="number">0</literal> <name>bytes</name> <name>during</name> <name>merging</name></expr> <if_stmt><if>if the segments being merged
   are non-congruent <condition>(<expr><name>same</name> <name>field</name> <name>name</name> <name>maps</name> <name>to</name> <name>different</name> <name>field</name>
   <name>numbers</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>  <name>This</name> <name>bug</name> <name>was</name> <name>introduced</name> <name>with</name> <name>LUCENE</name><operator>-</operator><literal type="number">1219.</literal>  <operator>(</operator><name>Andrzej</name>
   <name>Bialecki</name> <name>via</name> <name>Mike</name> <name>McCandless</name><operator>)</operator><operator>.</operator>

 <name>New</name> <name>features</name>
 
  <literal type="number">1.</literal> <name>LUCENE</name><operator>-</operator><literal type="number">1411</literal></expr></expr_stmt></block_content></block></if></if_stmt>:</case> <expr_stmt><expr><name>Added</name> <name>expert</name> <name>API</name> <name>to</name> <name>open</name> <name>an</name> <name>IndexWriter</name> <name>on</name> <name>a</name> <name>prior</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a45a84f598a</name><operator>..</operator><literal type="number">3b2b915b7e1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FieldsReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">423</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">423</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>FieldsReader</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>toRead</name></name> <operator>=</operator> <name>toRead</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>pointer</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>isBinary</name></name> <operator>=</operator> <name>isBinary</name></expr>;
      <if_stmt><if>if <condition>(<expr><name>isBinary</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>binaryLength</name> <operator>=</operator> <name>toRead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <name>lazy</name> <operator>=</operator> <literal type="boolean">true</literal></block></expr>;</expr_stmt>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">431</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">433</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>FieldsReader</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>toRead</name></name> <operator>=</operator> <name>toRead</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>pointer</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>isBinary</name></name> <operator>=</operator> <name>isBinary</name></expr>;
      <if_stmt><if>if <condition>(<expr><name>isBinary</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>binaryLength</name> <operator>=</operator> <name>toRead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <name>lazy</name> <operator>=</operator> <literal type="boolean">true</literal></block></expr>;</expr_stmt>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">619</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">623</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>final</name> <name>class</name> <name>FieldsReader</name> <block>{
       <expr><name><name>this</name><operator>.</operator><name>fieldsData</name></name> <operator>=</operator> <name>value</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>isCompressed</name></name> <operator>=</operator> <name>compressed</name></expr>;
       <expr><name><name>this</name><operator>.</operator><name>isBinary</name></name> <operator>=</operator> <name>binary</name></expr>;
      <if_stmt><if>if <condition>(<expr><name>binary</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>binaryLength</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

       <name><name>this</name><operator>.</operator><name>isTokenized</name></name> <operator>=</operator> <name>tokenize</name></block></expr>;</expr_stmt>
 
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>fi</name><operator>.</operator><name>name</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2879fecb604</literal><operator>..</operator><name>f6b06bd1e1a</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 
 <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestSuite</name></name>;</import>
 <import>import <name><name>junit</name><operator>.</operator><name>textui</name><operator>.</operator><name>TestRunner</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WhitespaceAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Fieldable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>SetBasedFieldSelector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>FieldOption</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ScoreDoc</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">289</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">96</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexReader</name> extends <name>LuceneTestCase</name>
         <call><name><name>reader2</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
    
    public <function><type><name>void</name></type> <name>testBinaryFields</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>RAMDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bin</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>IndexWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WhitespaceAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>IndexWriter</name><operator>.</operator><name>MaxFieldLength</name><operator>.</operator><name>UNLIMITED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>addDoc</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><literal type="string">"document number "</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>addDocumentWithFields</name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>addDocumentWithDifferentFields</name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>addDocumentWithTermVectorFields</name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WhitespaceAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>IndexWriter</name><operator>.</operator><name>MaxFieldLength</name><operator>.</operator><name>LIMITED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"bin1"</literal></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>YES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"bin2"</literal></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>COMPRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><literal type="string">"junk"</literal></expr></argument>, <argument><expr><literal type="string">"junk text"</literal></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>, <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>ANALYZED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>addDocument</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name> <init>= <expr><call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>document</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Field</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getFields</name></name><argument_list>(<argument><expr><literal type="string">"bin1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>b1</name> <init>= <expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>b1</name><operator>.</operator><name>isBinary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data1</name> <init>= <expr><call><name><name>b1</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>b1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data1</name><index>[<expr><name>i</name> <operator>+</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>getFields</name></name><argument_list>(<argument><expr><literal type="string">"bin2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>b1</name><operator>.</operator><name>isBinary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data1</name> <operator>=</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>b1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data1</name><index>[<expr><name>i</name> <operator>+</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>Set</name></type> <name>lazyFields</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lazyFields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"bin1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FieldSelector</name></type> <name>sel</name> <init>= <expr><operator>new</operator> <call><name>SetBasedFieldSelector</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lazyFields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>document</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Fieldable</name><index>[]</index></name></type> <name>fieldables</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getFieldables</name></name><argument_list>(<argument><expr><literal type="string">"bin1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>fieldables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fieldables</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Fieldable</name></type> <name>fb1</name> <init>= <expr><name><name>fieldables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>fb1</name><operator>.</operator><name>isBinary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>fb1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data1</name> <operator>=</operator> <call><name><name>fb1</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>fb1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data1</name><index>[<expr><name>i</name> <operator>+</operator> <call><name><name>fb1</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// force optimize</comment>


        <expr_stmt><expr><name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>IndexWriter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WhitespaceAnalyzer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>IndexWriter</name><operator>.</operator><name>MaxFieldLength</name><operator>.</operator><name>LIMITED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>optimize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>document</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>getFields</name></name><argument_list>(<argument><expr><literal type="string">"bin1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>b1</name><operator>.</operator><name>isBinary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data1</name> <operator>=</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>b1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data1</name><index>[<expr><name>i</name> <operator>+</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>getFields</name></name><argument_list>(<argument><expr><literal type="string">"bin2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>b1</name><operator>.</operator><name>isBinary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data1</name> <operator>=</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><call><name><name>b1</name><operator>.</operator><name>getBinaryLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data1</name><index>[<expr><name>i</name> <operator>+</operator> <call><name><name>b1</name><operator>.</operator><name>getBinaryOffset</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
 
     <comment type="line">// Make sure attempts to make changes after reader is</comment>
     <comment type="line">// closed throws IOException:</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1403</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1497</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestIndexReader</name> extends <name>LuceneTestCase</name>
         <call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>, <argument><expr><literal type="string">"_0.fnm"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"did not hit expected exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AlreadyClosedException</name></type> <name>ace</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"should not have hit AlreadyClosedException"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></catch></try>

</unit>
