<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/4c83c2200c.java"><expr_stmt><expr><name>From</name> <literal type="number">4c83c2200c9b2097cad09e5dd0f97033254620df</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Steven</name> <name><name>Rowe</name> <argument_list type="generic">&lt;<argument><name>sarowe</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">9</literal> <name>Apr</name> <literal type="number">2015</literal> <literal type="number">04</literal><operator>:</operator><literal type="number">42</literal><operator>:</operator><literal type="number">30</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">7366</literal><operator>:</operator> <name>fix</name> <name>regression</name> <name>in</name> <name>ManagedIndexSchema</name><literal type="char">'s handling of
 ResourceLoaderAware objects used by field types, causing example XML docs to
 not be indexable via bin/post; add a test indexing example docs that fails
 without the patch and succeeds with it

git-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1672238 13f79535-47bb-0310-9956-ffa450edef68
--
 solr/CHANGES.txt                              |   3 +
 .../org/apache/solr/schema/IndexSchema.java   |  13 +-
 .../solr/schema/ManagedIndexSchema.java       |  77 +++--------
 .../solr/cloud/SolrCloudExampleTest.java      | 128 ++++++++++++++++++
 solr/example/exampledocs/ipod_other.xml       |   2 +-
 5 files changed, 161 insertions(+), 62 deletions(-)
 create mode 100644 solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest.java

diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 469c0a25cbc..214b6e33ff9 100644
-- a/solr/CHANGES.txt
++ b/solr/CHANGES.txt
@@ -407,6 +407,9 @@ Bug Fixes
 * SOLR-7338, SOLR-6583: A reloaded core will never register itself as active after a ZK session expiration
   (Mark Miller, Timothy Potter)
 
* SOLR-7366: Can'</literal><name>t</name> <name>index</name> <name>example</name> <name>XML</name> <name>docs</name> <name>into</name> <name>the</name> <name>cloud</name> <name>example</name> <name>using</name> <name>bin</name><operator>/</operator><name>post</name> <name>due</name> <name>to</name> <name>regression</name> <name>in</name> 
  <name>ManagedIndexSchema</name><literal type="char">'s handling of ResourceLoaderAware objects used by field types (Steve Rowe, Timothy Potter)

 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index 40560534891..5454e8b2c8e 100644
-- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -589,10 +589,8 @@ public class IndexSchema {
       dynamicCopyFields = new DynamicCopy[] {};
       loadCopyFields(document, xpath);
 
      //Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : schemaAware) {
        aware.inform(this);
      }
      postReadInform();

     } catch (SolrException e) {
       throw new SolrException(ErrorCode.getErrorCode(e.code()), e.getMessage() + ". Schema file is " +
           resourcePath, e);
@@ -606,6 +604,13 @@ public class IndexSchema {
     // create the field analyzers
     refreshAnalyzers();
   }
  
  protected void postReadInform() {
    //Run the callbacks on SchemaAware now that everything else is done
    for (SchemaAware aware : schemaAware) {
      aware.inform(this);
    }
  }
 
   /** 
    * Loads fields and dynamic fields.
diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
index b23a37a6fab..666d6bc65b8 100644
-- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
@@ -41,7 +41,6 @@ import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.ContentStream;
 import org.apache.solr.common.util.NamedList;
import org.apache.solr.core.Config;
 import org.apache.solr.core.SolrConfig;
 import org.apache.solr.core.SolrResourceLoader;
 import org.apache.solr.rest.schema.FieldTypeXmlAdapter;
@@ -50,13 +49,8 @@ import org.apache.solr.util.FileUtils;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.data.Stat;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
 
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -418,10 +412,8 @@ public final class ManagedIndexSchema extends IndexSchema {
         }
       }
 
      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.postReadInform();

       newSchema.refreshAnalyzers();
 
       if(persist) {
@@ -468,10 +460,7 @@ public final class ManagedIndexSchema extends IndexSchema {
           throw new SolrException(ErrorCode.BAD_REQUEST, msg);
         }
       }
      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.postReadInform();
       newSchema.refreshAnalyzers();
     } else {
       String msg = "This ManagedIndexSchema is not mutable.";
@@ -555,9 +544,7 @@ public final class ManagedIndexSchema extends IndexSchema {
         }
       }
 
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.postReadInform();
       newSchema.refreshAnalyzers();
     } else {
       String msg = "This ManagedIndexSchema is not mutable.";
@@ -595,10 +582,7 @@ public final class ManagedIndexSchema extends IndexSchema {
         }
       }
 
      // Run the callbacks on SchemaAware now that everything else is done
      for (SchemaAware aware : newSchema.schemaAware) {
        aware.inform(newSchema);
      }
      newSchema.postReadInform();
       newSchema.refreshAnalyzers();
       if (persist) {
         success = newSchema.persistManagedSchema(false); // don'</literal><name>t</name> <name>just</name> <name>create</name> <operator>-</operator> <name>update</name> <name>it</name></expr></expr_stmt> <if_stmt><if>if it already exists
@@ -677<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">661</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
         }</block></expr></expr_stmt></if></if_stmt>
       }
 
      <comment type="line">// Run the callbacks on SchemaAware now that everything else is done</comment>
      for <expr_stmt><expr><operator>(</operator><name>SchemaAware</name> <name>aware</name> <operator>:</operator> <name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name><operator>)</operator> <block>{
        <expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;
      }</block>
      <call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     } else <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">748</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">729</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
         }</block></expr></expr_stmt>
       </block_content>}</block>
 
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     } else <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">773</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">752</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
           <expr><call><name><name>newSchema</name><operator>.</operator><name>registerCopyField</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
       </block_content>}</block>
      <comment type="line">//TODO: move this common stuff out to shared methods</comment>
      <comment type="line">// Run the callbacks on SchemaAware now that everything else is done</comment>
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if<condition>(<expr><name>persist</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>newSchema</name><operator>.</operator><name>persistManagedSchema</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// don't just create - update it if it already exists</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">813</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">788</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
           <expr><call><name><name>newSchema</name><operator>.</operator><name>deleteCopyField</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
       </block_content>}</block></if></if_stmt>
      <comment type="line">//TODO: move this common stuff out to shared methods</comment>
      <comment type="line">// Run the callbacks on SchemaAware now that everything else is done</comment>
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     } else <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">960</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">931</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
       <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>, <argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <comment type="line">// Run the callbacks on SchemaAware now that everything else is done</comment>
    <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     
    <comment type="line">// looks good for the add, notify ResoureLoaderAware objects</comment>
    <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><name>fieldTypeList</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>informResourceLoaderAwareObjectsForFieldType</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

     <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name>persist</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1018</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">983</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
       <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
         <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for></block></expr></expr_stmt>
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>informResourceLoaderAwareObjectsForFieldType</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1153</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">1113</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
       }</block>
       <call><name><name>newSchema</name><operator>.</operator><name>rebuildCopyFields</name></name><argument_list>(<argument><expr><name>copyFieldsToRebuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
      <for>for <control>(<init><decl><type><name>SchemaAware</name></type> <name>aware</name> <range>: <expr><name><name>newSchema</name><operator>.</operator><name>schemaAware</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aware</name><operator>.</operator><name>inform</name></name><argument_list>(<argument><expr><name>newSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>newSchema</name><operator>.</operator><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>informResourceLoaderAwareObjectsForFieldType</name></name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>newSchema</name><operator>.</operator><name>refreshAnalyzers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt> <if_stmt><else>else <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"This ManagedIndexSchema is not mutable."</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1167</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1122</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>ManagedIndexSchema</name> extends <name>IndexSchema</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>newSchema</name></expr>;</return>
   </block_content>}</block></else></if_stmt>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>postReadInform</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>postReadInform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>FieldType</name></type> <name>fieldType</name> <range>: <expr><call><name><name>fieldTypes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>informResourceLoaderAwareObjectsForFieldType</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * Informs analyzers used by a fieldType.
diff --git a/solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest.java b/solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest.java
new file mode 100644
index 00000000000..2a92b6045a1
-- /dev/null
++ b/solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest.java
@@ -0,0 +1,128 @@
package org.apache.solr.cloud;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>CommandLine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>SolrQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>request</name><operator>.</operator><name>ContentStreamUpdateRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>response</name><operator>.</operator><name>QueryResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>ExternalPaths</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>SolrCLI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Emulates bin/solr -e cloud -noprompt; bin/post -c gettingstarted example/exampledocs/*.xml;
 * this test is useful for catching regressions in indexing the example docs in collections that
 * use data-driven schema and managed schema features provided by configsets/data_driven_schema_configs.
 */</comment>
<class><specifier>public</specifier> class <name>SolrCloudExampleTest</name> <super_list><extends>extends <super><name>AbstractFullDistribZkTestBase</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <specifier>transient</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SolrCloudExampleTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SolrCloudExampleTest</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sliceCount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>distribSetUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>distribSetUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"numShards"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>sliceCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testLoadDocsIntoGettingStartedCollection</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>waitForThingsToLevelOut</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"testLoadDocsIntoGettingStartedCollection initialized OK ... running test logic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>testCollectionName</name> <init>= <expr><literal type="string">"gettingstarted"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>data_driven_schema_configs</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>ExternalPaths</name><operator>.</operator><name>SCHEMALESS_CONFIGSET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>data_driven_schema_configs</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" not found!"</literal></expr></argument>, <argument><expr><call><name><name>data_driven_schema_configs</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>liveNodes</name> <init>= <expr><call><name><name>cloudClient</name><operator>.</operator><name>getZkStateReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClusterState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLiveNodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>liveNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"No live nodes found! Cannot create a collection until there is at least 1 live node in the cluster."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>firstLiveNode</name> <init>= <expr><call><name><name>liveNodes</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>solrUrl</name> <init>= <expr><call><name><name>cloudClient</name><operator>.</operator><name>getZkStateReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBaseUrlForNodeName</name><argument_list>(<argument><expr><name>firstLiveNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create the gettingstarted collection just like the bin/solr script would do</comment>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
        <expr><literal type="string">"create_collection"</literal></expr>,
        <expr><literal type="string">"-name"</literal></expr>, <expr><name>testCollectionName</name></expr>,
        <expr><literal type="string">"-shards"</literal></expr>, <expr><literal type="string">"2"</literal></expr>,
        <expr><literal type="string">"-replicationFactor"</literal></expr>, <expr><literal type="string">"2"</literal></expr>,
        <expr><literal type="string">"-confname"</literal></expr>, <expr><name>testCollectionName</name></expr>,
        <expr><literal type="string">"-confdir"</literal></expr>, <expr><literal type="string">"data_driven_schema_configs"</literal></expr>,
        <expr><literal type="string">"-configsetsDir"</literal></expr>, <expr><call><name><name>data_driven_schema_configs</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"-solrUrl"</literal></expr>, <expr><name>solrUrl</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SolrCLI</name><operator>.</operator><name>CreateCollectionTool</name></name></type> <name>tool</name> <init>= <expr><operator>new</operator> <call><name><name>SolrCLI</name><operator>.</operator><name>CreateCollectionTool</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommandLine</name></type> <name>cli</name> <init>= <expr><call><name><name>SolrCLI</name><operator>.</operator><name>processCommandLineArgs</name></name><argument_list>(<argument><expr><call><name><name>SolrCLI</name><operator>.</operator><name>joinCommonAndToolOptions</name></name><argument_list>(<argument><expr><call><name><name>tool</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating the '"</literal><operator>+</operator><name>testCollectionName</name><operator>+</operator><literal type="string">"' collection using SolrCLI with: "</literal><operator>+</operator><name>solrUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>runTool</name></name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Collection '"</literal> <operator>+</operator> <name>testCollectionName</name> <operator>+</operator> <literal type="string">"' doesn't exist after trying to create it!"</literal></expr></argument>,
        <argument><expr><call><name><name>cloudClient</name><operator>.</operator><name>getZkStateReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClusterState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasCollection</name><argument_list>(<argument><expr><name>testCollectionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// verify the collection is usable ...</comment>
    <expr_stmt><expr><call><name>ensureAllReplicasAreActive</name><argument_list>(<argument><expr><name>testCollectionName</name></expr></argument>, <argument><expr><literal type="string">"shard1"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ensureAllReplicasAreActive</name><argument_list>(<argument><expr><name>testCollectionName</name></expr></argument>, <argument><expr><literal type="string">"shard2"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cloudClient</name><operator>.</operator><name>setDefaultCollection</name></name><argument_list>(<argument><expr><name>testCollectionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// now index docs like bin/post would do but we can't use SimplePostTool because it uses System.exit when</comment>
    <comment type="line">// it encounters an error, which JUnit doesn't like ...</comment>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Created collection, now posting example docs!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>exampleDocsDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>ExternalPaths</name><operator>.</operator><name>SOURCE_HOME</name></name></expr></argument>, <argument><expr><literal type="string">"example/exampledocs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>exampleDocsDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" not found!"</literal></expr></argument>, <argument><expr><call><name><name>exampleDocsDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>xmlFiles</name> <init>= <expr><call><name><name>exampleDocsDir</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if you add/remove example XML docs, you'll have to fix these expected values</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>expectedXmlFileCount</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>expectedXmlDocCount</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expected 14 example XML files in "</literal><operator>+</operator><call><name><name>exampleDocsDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name><name>xmlFiles</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>expectedXmlFileCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>xml</name> <range>: <expr><name>xmlFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>ContentStreamUpdateRequest</name></type> <name>req</name> <init>= <expr><operator>new</operator> <call><name>ContentStreamUpdateRequest</name><argument_list>(<argument><expr><literal type="string">"/update"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"application/xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"POSTing "</literal><operator>+</operator><call><name><name>xml</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cloudClient</name><operator>.</operator><name>request</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>cloudClient</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QueryResponse</name></type> <name>qr</name> <init>= <expr><call><name><name>cloudClient</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SolrQuery</name><argument_list>(<argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numFound</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>qr</name><operator>.</operator><name>getResults</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNumFound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expected "</literal><operator>+</operator><name>expectedXmlDocCount</name><operator>+</operator><literal type="string">" docs but *:* found "</literal><operator>+</operator><name>numFound</name></expr></argument>, <argument><expr><name>numFound</name> <operator>==</operator> <name>expectedXmlDocCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"testLoadDocsIntoGettingStartedCollection succeeded ... shutting down now!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>example</name><operator>/</operator><name>exampledocs</name><operator>/</operator><name><name>ipod_other</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>example</name><operator>/</operator><name>exampledocs</name><operator>/</operator><name><name>ipod_other</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">0e3968fb1c4</literal><operator>..</operator><literal type="number">3de32f3b71c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>example</name><operator>/</operator><name>exampledocs</name><operator>/</operator><name><name>ipod_other</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>example</name><operator>/</operator><name>exampledocs</name><operator>/</operator><name><name>ipod_other</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"cat"</literal><operator>&gt;</operator><name><name>electronics</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>field</name></argument>&gt;</argument_list></name>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"cat"</literal><operator>&gt;</operator><name><name>connector</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>field</name></argument>&gt;</argument_list></name>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"features"</literal><operator>&gt;</operator><name>car</name> <name>power</name> <name>adapter</name></expr></expr_stmt> <for>for iPod<operator>,</operator> <expr_stmt><expr><name><name>white</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>field</name></argument>&gt;</argument_list></name>
  <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"weight"</literal><operator>&gt;</operator><literal type="number">2</literal><operator>&lt;</operator><operator>/</operator><name>field</name><operator>&gt;</operator>
  <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"weight"</literal><operator>&gt;</operator><literal type="number">2.0</literal><operator>&lt;</operator><operator>/</operator><name>field</name><operator>&gt;</operator>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"price"</literal><operator>&gt;</operator><literal type="number">11.50</literal><operator>&lt;</operator><operator>/</operator><name>field</name><operator>&gt;</operator>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"popularity"</literal><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>field</name><operator>&gt;</operator>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"inStock"</literal><operator>&gt;</operator><literal type="boolean">false</literal><operator>&lt;</operator><operator>/</operator><name>field</name><operator>&gt;</operator>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></for></block_content></block>

</unit>
