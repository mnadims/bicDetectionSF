<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/067fb25e43.java"><expr_stmt><expr><name>From</name> <literal type="number">067fb25e4359ed8d5673e385976da7debc0e5b77</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Mike</name> <name><name>McCandless</name> <argument_list type="generic">&lt;<argument><name>mikemccand</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">9</literal> <name>Jun</name> <literal type="number">2016</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">48</literal><operator>:</operator><literal type="number">58</literal> <operator>-</operator><literal type="number">0400</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">7323</literal><operator>:</operator> <name>compound</name> <name>file</name> <name>writing</name> <name>now</name> <name>verifies</name> <name>checksum</name> <name>and</name>
 <name>segment</name> <name>ID</name></expr></expr_stmt> <for>for the incoming sub-files<operator>,</operator> <macro><name>to</name></macro> <catch>catch <expr_stmt><expr><name>hardware</name> <name>issues</name> <name>or</name> <name>filesystem</name>
 <name>bugs</name> <name>earlier</name>

<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextDocValuesFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>simpletext</name><operator>/</operator><name><name>SimpleTextPostingsFormat</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>DocValuesFormat</name></name>  <operator>|</operator>   <literal type="number">1</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>   <operator>|</operator>   <literal type="number">1</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TestSimpleTextCompoundFormat</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">10</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CodecUtil</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">55</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CompoundFormat</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">26</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundReader</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><block>{<expr><name>index</name> <operator>=</operator><operator>&gt;</operator> <name>codecs</name></expr>}</block><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldDocValuesFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldPostingsFormat2</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestAddIndexes</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>mockrandom</name><operator>/</operator><name><name>MockRandomPostingsFormat</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseCompoundFormatTestCase</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">161</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>RandomCodec</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">5</literal> <operator>-</operator>
 <literal type="number">19</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">230</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">100</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>rename</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><block>{<expr><name>index</name> <operator>=</operator><operator>&gt;</operator> <name>codecs</name></expr>}</block><operator>/</operator><call><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name> <argument_list>(<argument><expr><literal type="number">99</literal><operator>%</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>af74c26967b</name><operator>..</operator><literal type="number">20df7b22fae</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">12</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">12</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>Bug</name> <name>Fixes</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">6662</literal><operator>:</operator> <name>Fixed</name> <name>potential</name> <name>resource</name> <name><name>leaks</name><operator>.</operator></name> (<name>Rishabh</name> <name>Patel</name> <name>via</name> <name>Adrien</name> <name>Grand</name></expr></expr_stmt></catch></for>)
 
<expr_stmt><expr><name>Improvements</name>

<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">7323</literal><operator>:</operator> <name>Compound</name> <name>file</name> <name>writing</name> <name>now</name> <name>verifies</name> <name>the</name> <name>incoming</name>
  <name>sub</name><operator>-</operator><name>files</name><literal type="char">' checkums and segment IDs, to catch hardware issues or
  filesytem bugs earlier (Robert Muir, Mike McCandless)

 Other
 
 * LUCENE-4787: Fixed some highlighting javadocs. (Michael Dodsworth via Adrien
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.java
index 46ac9839fa6..a846dc9d36a 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.java
@@ -122,7 +122,7 @@ import org.apache.lucene.index.SegmentWriteState;
  *  and saving the offset/etc for each field. 
  *  @lucene.experimental
  */
public class SimpleTextDocValuesFormat extends DocValuesFormat {
class SimpleTextDocValuesFormat extends DocValuesFormat {
   
   public SimpleTextDocValuesFormat() {
     super("SimpleText");
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java
index a77050561c6..44371200585 100644
-- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java
++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPostingsFormat.java
@@ -34,7 +34,7 @@ import org.apache.lucene.index.SegmentWriteState;
  *  any text editor, and even edit it to alter your index.
  *
  *  @lucene.experimental */
public final class SimpleTextPostingsFormat extends PostingsFormat {
final class SimpleTextPostingsFormat extends PostingsFormat {
   
   public SimpleTextPostingsFormat() {
     super("SimpleText");
diff --git a/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.DocValuesFormat b/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.DocValuesFormat
index 3e7164d967e..daef7c58536 100644
-- a/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.DocValuesFormat
++ b/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.DocValuesFormat
@@ -15,4 +15,3 @@
 
 org.apache.lucene.codecs.memory.MemoryDocValuesFormat
 org.apache.lucene.codecs.memory.DirectDocValuesFormat
org.apache.lucene.codecs.simpletext.SimpleTextDocValuesFormat
diff --git a/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat b/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat
index b82f15600d8..753b6d7b3ca 100644
-- a/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat
++ b/lucene/codecs/src/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat
@@ -19,5 +19,4 @@ org.apache.lucene.codecs.memory.DirectPostingsFormat
 org.apache.lucene.codecs.memory.FSTOrdPostingsFormat
 org.apache.lucene.codecs.memory.FSTPostingsFormat
 org.apache.lucene.codecs.memory.MemoryPostingsFormat
org.apache.lucene.codecs.simpletext.SimpleTextPostingsFormat
 org.apache.lucene.codecs.autoprefix.AutoPrefixPostingsFormat
diff --git a/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextCompoundFormat.java b/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextCompoundFormat.java
index ea38832593e..2f54e2c9159 100644
-- a/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextCompoundFormat.java
++ b/lucene/codecs/src/test/org/apache/lucene/codecs/simpletext/TestSimpleTextCompoundFormat.java
@@ -27,4 +27,14 @@ public class TestSimpleTextCompoundFormat extends BaseCompoundFormatTestCase {
   protected Codec getCodec() {
     return codec;
   }

  @Override
  public void testCorruptFilesAreCaught() {
    // SimpleText does not catch broken sub-files in CFS!
  }

  @Override
  public void testMissingCodecHeadersAreCaught() {
    // SimpleText does not catch broken sub-files in CFS!
  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java b/lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java
index 62bf2d58dc3..da487d00c91 100644
-- a/lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java
++ b/lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java
@@ -258,6 +258,57 @@ public final class CodecUtil {
     return version;
   }
 
  /**
   * Expert: verifies the incoming {@link IndexInput} has an index header
   * and that its segment ID matches the expected one, and then copies
   * that index header into the provided {@link DataOutput}.  This is
   * useful when building compound files.
   *
   * @param in Input stream, positioned at the point where the
   *        index header was previously written. Typically this is located
   *        at the beginning of the file.
   * @param out Output stream, where the header will be copied to.
   * @param expectedID Expected segment ID
   * @throws CorruptIndexException If the first four bytes are not
   *         {@link #CODEC_MAGIC}, or if the &lt;code&gt;expectedID&lt;/code&gt;
   *         does not match.
   * @throws IOException If there is an I/O error reading from the underlying medium.
   *
   * @lucene.internal 
   */
  public static void verifyAndCopyIndexHeader(IndexInput in, DataOutput out, byte[] expectedID) throws IOException {
    // make sure it'</literal><name>s</name> <name>large</name> <name>enough</name> <name>to</name> <name>have</name> <name>a</name> <name>header</name> <name>and</name> <name>footer</name></expr></expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>footerLength</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>headerLength</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"compound sub-files must have a valid codec header and footer: file is too small ("</literal> <operator>+</operator> <call><name><name>in</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" bytes)"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>actualHeader</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>actualHeader</name> <operator>!=</operator> <name>CODEC_MAGIC</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"compound sub-files must have a valid codec header and footer: codec header mismatch: actual header="</literal> <operator>+</operator> <name>actualHeader</name> <operator>+</operator> <literal type="string">" vs expected header="</literal> <operator>+</operator> <name><name>CodecUtil</name><operator>.</operator><name>CODEC_MAGIC</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// we can't verify these, so we pass-through:</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>codec</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// verify id:</comment>
    <expr_stmt><expr><call><name>checkIndexHeaderID</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>expectedID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// we can't verify extension either, so we pass-through:</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>suffixLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>suffixBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>suffixLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>suffixBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>suffixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// now write the header we just verified</comment>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>CodecUtil</name><operator>.</operator><name>CODEC_MAGIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>expectedID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>expectedID</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>suffixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>suffixBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>suffixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }


   <comment type="block" format="javadoc">/** Retrieves the full index header from the provided {@link IndexInput}.
    *  This throws {@link CorruptIndexException} if this file does
    * not appear to be an index file. */</comment>
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">474</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">525</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>CodecUtil</name> <block>{
    <expr><operator>*</operator> @<throws>throws <argument><expr><name>CorruptIndexException</name></expr></argument></throws></expr> <if_stmt><if>if CRC is formatted incorrectly <condition>(<expr><name>wrong</name> <name>bits</name> <name>set</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if an i/o error occurs
    */
  public static long readCRC<condition>(<expr><name>IndexInput</name> <name>input</name></expr>)</condition><block type="pseudo"><block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>static</specifier> <name>long</name> <call><name>readCRC</name><argument_list>(<argument><expr><name>IndexInput</name> <name>input</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>long</name> <name>value</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>CorruptIndexException</name><argument_list>(<argument><expr><literal type="string">"Illegal CRC-32 checksum: "</literal> <operator>+</operator> <name>value</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">487</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">538</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>CodecUtil</name> <block>{
    <expr><operator>*</operator> @<throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws></expr> <if_stmt><if>if CRC is formatted incorrectly <condition>(<expr><name>wrong</name> <name>bits</name> <name>set</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator> @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></expr_stmt></block_content></block></if></if_stmt> <if_stmt><if>if an i/o error occurs
    */
  public static void writeCRC<condition>(<expr><name>IndexOutput</name> <name>output</name></expr>)</condition><block type="pseudo"><block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>static</specifier> <name>void</name> <call><name>writeCRC</name><argument_list>(<argument><expr><name>IndexOutput</name> <name>output</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>long</name> <name>value</name> <operator>=</operator> <call><name><name>output</name><operator>.</operator><name>getChecksum</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000L</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Illegal CRC-32 checksum: "</literal> <operator>+</operator> <name>value</name> <operator>+</operator> <literal type="string">" (resource="</literal> <operator>+</operator> <name>output</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CompoundFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CompoundFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">954a78e0e7f</literal><operator>..</operator><name>af1cc2af5e2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CompoundFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>CompoundFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>CompoundFormat</name> <block>{
   <expr><specifier>public</specifier> <specifier>abstract</specifier> <name>Directory</name> <call><name>getCompoundReader</name><argument_list>(<argument><expr><name>Directory</name> <name>dir</name></expr></argument>, <argument><expr><name>SegmentInfo</name> <name>si</name></expr></argument>, <argument><expr><name>IOContext</name> <name>context</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
   
   <comment type="block" format="javadoc">/**
   * Packs the provided segment's files into a compound format.
   * Packs the provided segment's files into a compound format.  All files referenced
   * by the provided {@link SegmentInfo} must have {@link CodecUtil#writeIndexHeader}
   * and {@link CodecUtil#writeFooter}.
    */</comment>
   <specifier>public</specifier> <specifier>abstract</specifier> <name>void</name> <call><name>write</name><argument_list>(<argument><expr><name>Directory</name> <name>dir</name></expr></argument>, <argument><expr><name>SegmentInfo</name> <name>si</name></expr></argument>, <argument><expr><name>IOContext</name> <name>context</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></block></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2a40bde2ed5</literal><operator>..</operator><name>da2b93fcee1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>lucene50</name><operator>/</operator><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>lucene50</name></name>;</package>
 
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CompoundFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexFileNames</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>ChecksumIndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>DataOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IOContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>StringHelper</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Lucene 5.0 compound file format
@@ -76,6 +76,9 @@ public final class Lucene50CompoundFormat extends CompoundFormat {
     String dataFile = IndexFileNames.segmentFileName(si.name, "", DATA_EXTENSION);
     String entriesFile = IndexFileNames.segmentFileName(si.name, "", ENTRIES_EXTENSION);
     
    byte[] expectedID = si.getId();
    byte[] id = new byte[StringHelper.ID_LENGTH];

     try (IndexOutput data =    dir.createOutput(dataFile, context);
          IndexOutput entries = dir.createOutput(entriesFile, context)) {
       CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), "");
@@ -87,8 +90,23 @@ public final class Lucene50CompoundFormat extends CompoundFormat {
         
         // write bytes for file
         long startOffset = data.getFilePointer();
        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {
          data.copyBytes(in, in.length());
        try (ChecksumIndexInput in = dir.openChecksumInput(file, IOContext.READONCE)) {

          // just copies the index header, verifying that its id matches what we expect
          CodecUtil.verifyAndCopyIndexHeader(in, data, si.getId());
          
          // copy all bytes except the footer
          long numBytesToCopy = in.length() - CodecUtil.footerLength() - in.getFilePointer();
          data.copyBytes(in, numBytesToCopy);

          // verify footer (checksum) matches for the incoming file we are copying
          long checksum = CodecUtil.checkFooter(in);

          // this is poached from CodecUtil.writeFooter, but we need to use our own checksum, not data.getChecksum(), but I think
          // adding a public method to CodecUtil to do that is somewhat dangerous:
          data.writeInt(CodecUtil.FOOTER_MAGIC);
          data.writeInt(0);
          data.writeLong(checksum);
         }
         long endOffset = data.getFilePointer();
         
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java
index a4487826d62..f7de16915dc 100644
-- a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java
++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java
@@ -100,7 +100,7 @@ final class Lucene50CompoundReader extends Directory {
   }
 
   /** Helper method that reads CFS entries from an input stream */</comment>
  <function><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FileEntry</name></argument>&gt;</argument_list></name></type> <name>readEntries</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>segmentID</name></decl></parameter>, <parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>entriesFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FileEntry</name></argument>&gt;</argument_list></name></type> <name>readEntries</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>segmentID</name></decl></parameter>, <parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>entriesFileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>FileEntry</name></argument>&gt;</argument_list></name></type> <name>mapping</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <try>try <init>(<decl><type><name>ChecksumIndexInput</name></type> <name>entriesStream</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>openChecksumInput</name></name><argument_list>(<argument><expr><name>entriesFileName</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>READONCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
       <decl_stmt><decl><type><name>Throwable</name></type> <name>priorE</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>final</name> <name>class</name> <name>Lucene50CompoundReader</name> extends <name>Directory</name> <block>{
     <expr><name>final</name> <name>String</name> <name>id</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>stripSegmentName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
     <name>final</name> <name>FileEntry</name> <name>entry</name> <operator>=</operator> <call><name><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"No sub-file with id "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" found (fileName="</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" files: "</literal> <operator>+</operator> <call><name><name>entries</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      <decl_stmt><decl><type><name>String</name></type> <name>datFileName</name> <init>= <expr><call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name>segmentName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>Lucene50CompoundFormat</name><operator>.</operator><name>DATA_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"No sub-file with id "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" found in compound file \""</literal> <operator>+</operator> <name>datFileName</name> <operator>+</operator> <literal type="string">"\" (fileName="</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" files: "</literal> <operator>+</operator> <call><name><name>entries</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><call><name><name>handle</name><operator>.</operator><name>slice</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">99</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9752ce3e752</literal><operator>..</operator><name>d403f81b54f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name><name>TestCodecUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">14</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">14</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@
  <operator>*</operator> <name>See</name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  * limitations under the License.
  */
package org.apache.lucene.index<empty_stmt>;</empty_stmt></for>
 
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>CorruptIndexException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>BufferedChecksumIndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>ChecksumIndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexInput</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldDocValuesFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldDocValuesFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2eb0d1a94e4</literal><operator>..</operator><literal type="number">1ebfb69304f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldDocValuesFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldDocValuesFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPerFieldDocValuesFormat</name> extends <name>BaseDocValuesFormatTestCase</name> <block>{
     <comment type="line">// we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1</comment>
     <expr><name>IndexWriterConfig</name> <name>iwc</name> <operator>=</operator> <call><name>newIndexWriterConfig</name><argument_list>(<argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr>;
     <name>final</name> <name>DocValuesFormat</name> <name>fast</name> <operator>=</operator> <call><name><name>TestUtil</name><operator>.</operator><name>getDefaultDocValuesFormat</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocValuesFormat</name></type> <name>slow</name> <init>= <expr><call><name><name>DocValuesFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"SimpleText"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocValuesFormat</name></type> <name>slow</name> <init>= <expr><call><name><name>DocValuesFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"Memory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>iwc</name><operator>.</operator><name>setCodec</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AssertingCodec</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>DocValuesFormat</name></type> <name>getDocValuesFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldPostingsFormat2</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldPostingsFormat2</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">67d61df375e</literal><operator>..</operator><literal type="number">58c37fc525b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldPostingsFormat2</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>perfield</name><operator>/</operator><name><name>TestPerFieldPostingsFormat2</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>asserting</name><operator>.</operator><name>AssertingCodec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>blockterms</name><operator>.</operator><name>LuceneVarGapFixedInterval</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name><operator>.</operator><name>DirectPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name><operator>.</operator><name>MemoryPostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>simpletext</name><operator>.</operator><name>SimpleTextPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DirectoryReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name><operator>.</operator><name>OpenMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>LogDocMergePolicy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">202</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">202</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestPerFieldPostingsFormat2</name> extends <name>LuceneTestCase</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> class <name>MockCodec</name> extends <name>AssertingCodec</name> <block>{
     <expr><name>final</name> <name>PostingsFormat</name> <name>luceneDefault</name> <operator>=</operator> <call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call></expr>;
    <name>final</name> <name>PostingsFormat</name> <name>simpleText</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleTextPostingsFormat</name><argument_list>()</argument_list></call></block></expr>;
    <name>final</name> <name>PostingsFormat</name> <name>direct</name> <operator>=</operator> <operator>new</operator> <call><name>DirectPostingsFormat</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>PostingsFormat</name></type> <name>memory</name> <init>= <expr><operator>new</operator> <call><name>MemoryPostingsFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>PostingsFormat</name></type> <name>getPostingsFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>simpleText</name></expr>;</return>
        <return>return <expr><name>direct</name></expr>;</return>
       </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>memory</name></expr>;</return>
       </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> class <name>TestPerFieldPostingsFormat2</name> extends <name>LuceneTestCase</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> class <name>MockCodec2</name> extends <name>AssertingCodec</name> <block>{
     <expr><name>final</name> <name>PostingsFormat</name> <name>luceneDefault</name> <operator>=</operator> <call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call></expr>;
    <name>final</name> <name>PostingsFormat</name> <name>simpleText</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleTextPostingsFormat</name><argument_list>()</argument_list></call></block></expr>;
    <name>final</name> <name>PostingsFormat</name> <name>direct</name> <operator>=</operator> <operator>new</operator> <call><name>DirectPostingsFormat</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>PostingsFormat</name></type> <name>getPostingsFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>simpleText</name></expr>;</return>
        <return>return <expr><name>direct</name></expr>;</return>
       </block_content>}</block></if> <else>else <block>{<block_content>
         <return>return <expr><name>luceneDefault</name></expr>;</return>
       </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestAddIndexes</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestAddIndexes</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9d00c3f42d2</literal><operator>..</operator><literal type="number">876328a4a42</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestAddIndexes</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestAddIndexes</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1086</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">1086</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> class <name>TestAddIndexes</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> class <name>CustomPerFieldCodec</name> extends <name>AssertingCodec</name> <block>{
    <expr><specifier>private</specifier> <name>final</name> <name>PostingsFormat</name> <name>simpleTextFormat</name> <operator>=</operator> <call><name><name>PostingsFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"SimpleText"</literal></expr></argument>)</argument_list></call></expr>;
    <specifier>private</specifier> <name>final</name> <name>PostingsFormat</name> <name>directFormat</name> <operator>=</operator> <call><name><name>PostingsFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"Direct"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PostingsFormat</name></type> <name>defaultFormat</name> <init>= <expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PostingsFormat</name></type> <name>memoryFormat</name> <init>= <expr><call><name><name>PostingsFormat</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"Memory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>PostingsFormat</name></type> <name>getPostingsFormatForField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>simpleTextFormat</name></expr>;</return>
        <return>return <expr><name>directFormat</name></expr>;</return>
       </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>memoryFormat</name></expr>;</return>
       </block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>mockrandom</name><operator>/</operator><name><name>MockRandomPostingsFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>mockrandom</name><operator>/</operator><name><name>MockRandomPostingsFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4d943e6a495</literal><operator>..</operator><literal type="number">6b8793930e1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>mockrandom</name><operator>/</operator><name><name>MockRandomPostingsFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>codecs</name><operator>/</operator><name>mockrandom</name><operator>/</operator><name><name>MockRandomPostingsFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>mockrandom</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsConsumer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>FieldsProducer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>PostingsFormat</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FieldInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexFileNames</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentReadState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SegmentWriteState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>ChecksumIndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexInput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>IndexOutput</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> class <name>MockRandomPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
     }</block>
 
     <name>final</name> <name>String</name> <name>seedFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>SEED_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>seedFileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
    <try>try<init>(<decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>seedFileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"MockRandomSeed"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></finally></try>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">267</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">268</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> class <name>MockRandomPostingsFormat</name> extends <name>PostingsFormat</name> <block>{
   <expr><specifier>public</specifier> <name>FieldsProducer</name> <call><name>fieldsProducer</name><argument_list>(<argument><expr><name>SegmentReadState</name> <name>state</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
 
     <expr><name>final</name> <name>String</name> <name>seedFileName</name> <operator>=</operator> <call><name><name>IndexFileNames</name><operator>.</operator><name>segmentFileName</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>, <argument><expr><name>SEED_EXT</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>final</name> <name>IndexInput</name> <name>in</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>openInput</name></name><argument_list>(<argument><expr><name>seedFileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ChecksumIndexInput</name></type> <name>in</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>directory</name><operator>.</operator><name>openChecksumInput</name></name><argument_list>(<argument><expr><name>seedFileName</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>checkIndexHeader</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"MockRandomSeed"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>segmentSuffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>seed</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>checkFooter</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name><name>LuceneTestCase</name><operator>.</operator><name>VERBOSE</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"MockRandomCodec: reading from seg="</literal> <operator>+</operator> <name><name>state</name><operator>.</operator><name>segmentInfo</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" formatID="</literal> <operator>+</operator> <name><name>state</name><operator>.</operator><name>segmentSuffix</name></name> <operator>+</operator> <literal type="string">" seed="</literal> <operator>+</operator> <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseCompoundFormatTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseCompoundFormatTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7c19596aa81</literal><operator>..</operator><literal type="number">256b24e7d02</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseCompoundFormatTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BaseCompoundFormatTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>Codec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>CodecUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>StoredField</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>data</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>testfile</name> <init>= <expr><literal type="string">"_"</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">".test"</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>testfile</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
       <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>testfile</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
       <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
   <specifier>public</specifier> <name>void</name> <call><name>testTwoFiles</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name>String</name> <name><name>files</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="string">"_123.d1"</literal></expr>, <argument><expr><literal type="string">"_123.d2"</literal></expr></argument> }</block></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
     <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
     <name>final</name> <name>String</name> <name>testfile</name> <operator>=</operator> <literal type="string">"_123.test"</literal></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
     <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
    
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name></expr></expr_stmt>
         <return>return <expr><call><name><name>super</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></for>
     </block_content>}</block></try><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name>myContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
     <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name>myContext</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>
    
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>myContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">165</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">170</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
 
     <name>Directory</name> <name>dir</name> <operator>=</operator> <operator>new</operator> <call><name>NRTCachingDirectory</name><argument_list>(<argument><expr><call><name>newFSDirectory</name><argument_list>(<argument><expr><call><name>createTempDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">25.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>testfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">326</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">333</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
     <comment type="line">// Setup the test segment</comment>
     <name>String</name> <name>segment</name> <operator>=</operator> <literal type="string">"_123"</literal></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>chunk</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt> <comment type="line">// internal buffer size used by the stream</comment>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".zero"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".one"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".ten"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".hundred"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big1"</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big2"</literal></expr></argument>, <argument><expr><name>chunk</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big3"</literal></expr></argument>, <argument><expr><name>chunk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big6"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big7"</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>segId</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".zero"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".one"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".ten"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".hundred"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big1"</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big2"</literal></expr></argument>, <argument><expr><name>chunk</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big3"</literal></expr></argument>, <argument><expr><name>chunk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big6"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>chunk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createRandomFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="string">".big7"</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name>chunk</name></expr></argument>, <argument><expr><name>segId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>file</name> <range>: <expr><call><name><name>dir</name><operator>.</operator><name>listAll</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">345</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name></expr></expr_stmt>
       </block_content>}</block></for>
     </block_content>}</block></for>
     
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">370</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">378</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
     <name>final</name> <name>int</name> <name>FILE_COUNT</name> <operator>=</operator> <call><name>atLeast</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <name>FILE_COUNT</name></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>file</name> <init>= <expr><literal type="string">"_123."</literal> <operator>+</operator> <name>fileIdx</name></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>fileIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>out</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
        <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>fileIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></try>
     </block_content>}</block></for>
     
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>dir</name><operator>.</operator><name>getFileHandleCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">388</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">398</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
     <name>final</name> <name><name>IndexInput</name><index>[]</index></name> <name>ins</name> <operator>=</operator> <operator>new</operator> <name><name>IndexInput</name><index>[<expr><name>FILE_COUNT</name></expr>]</index></name></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <name>FILE_COUNT</name></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><name><name>ins</name><index>[<expr><name>fileIdx</name></expr>]</index></name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>openInput</name></name><argument_list>(<argument><expr><literal type="string">"_123."</literal> <operator>+</operator> <name>fileIdx</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>checkIndexHeader</name></name><argument_list>(<argument><expr><name><name>ins</name><index>[<expr><name>fileIdx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>dir</name><operator>.</operator><name>getFileHandleCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">631</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">642</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name></expr></expr_stmt>
   </block_content>}</block></else></if_stmt>
   
   <comment type="block" format="javadoc">/** Creates a file of the specified size with random data. */</comment>
  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>createRandomFile</name><parameter_list>(<parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>createRandomFile</name><parameter_list>(<parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>segId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Random</name></type> <name>rnd</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator> <call><name><name>rnd</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>segId</name></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator> <call><name><name>rnd</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></for>
   
   <comment type="block" format="javadoc">/** Creates a file of the specified size with sequential data. The first
    *  byte is written as the start byte provided. All subsequent bytes are
    *  computed as start + offset where offset is the number of the byte.
    */</comment>
  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>createSequenceFile</name><parameter_list>(<parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>start</name> <operator>++</operator></expr>;</expr_stmt>
  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>createSequenceFile</name><parameter_list>(<parameter><decl><type><name>Directory</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>segID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>segSuffix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>segID</name></expr></argument>, <argument><expr><name>segSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>start</name> <operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeFooter</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertSameStreams</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>IndexInput</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>IndexInput</name></type> <name>test</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">724</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">739</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
    <operator>*</operator><operator>/</operator>
   <specifier>protected</specifier> <specifier>static</specifier> <name>Directory</name> <call><name>createLargeCFS</name><argument_list>(<argument><expr><name>Directory</name> <name>dir</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>files</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123.f"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123.f"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"_123.f"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">750</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">765</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
   <specifier>public</specifier> <name>void</name> <call><name>testResourceNameInsideCompoundFile</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>Directory</name> <name>dir</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>subFile</name> <init>= <expr><literal type="string">"_123.xyz"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>subFile</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
     <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>createSequenceFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>subFile</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>subFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Directory</name></type> <name>cfs</name> <init>= <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompoundReader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">762</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">777</literal></expr><operator>,</operator><expr><literal type="number">48</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseCompoundFormatTestCase</name> extends <name>BaseIndexFileFormatTest</name>
     <call><name><name>cfs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingCodecHeadersAreCaught</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>subFile</name> <init>= <expr><literal type="string">"_123.xyz"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// missing codec header</comment>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>subFile</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></try>

    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>subFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Exception</name></type> <name>e</name> <init>= <expr><call><name>expectThrows</name><argument_list>(<argument><expr><name><name>CorruptIndexException</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"codec header mismatch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>testCorruptFilesAreCaught</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>subFile</name> <init>= <expr><literal type="string">"_123.xyz"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// wrong checksum</comment>
    <decl_stmt><decl><type><name>SegmentInfo</name></type> <name>si</name> <init>= <expr><call><name>newSegmentInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"_123"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>IndexOutput</name></type> <name>os</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>createOutput</name></name><argument_list>(<argument><expr><name>subFile</name></expr></argument>, <argument><expr><call><name>newIOContext</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>CodecUtil</name><operator>.</operator><name>writeIndexHeader</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"Foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>si</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// write footer w/ wrong checksum</comment>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>CodecUtil</name><operator>.</operator><name>FOOTER_MAGIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>checksum</name> <init>= <expr><call><name><name>os</name><operator>.</operator><name>getChecksum</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>checksum</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></try>

    <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>subFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Exception</name></type> <name>e</name> <init>= <expr><call><name>expectThrows</name><argument_list>(<argument><expr><name><name>CorruptIndexException</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>si</name><operator>.</operator><name>getCodec</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compoundFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>IOContext</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"checksum failed (hardware problem?)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>RandomCodec</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>RandomCodec</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c1c33f895c2</name><operator>..</operator><literal type="number">127549ff065</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>RandomCodec</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>RandomCodec</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name><operator>.</operator><name>FSTPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name><operator>.</operator><name>MemoryDocValuesFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>memory</name><operator>.</operator><name>MemoryPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>mockrandom</name><operator>.</operator><name>MockRandomPostingsFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>simpletext</name><operator>.</operator><name>SimpleTextDocValuesFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>codecs</name><operator>.</operator><name>simpletext</name><operator>.</operator><name>SimpleTextPostingsFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>PointValues</name><operator>.</operator><name>IntersectVisitor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>RandomCodec</name> extends <name>AssertingCodec</name> <block>{
     <expr><name>PostingsFormat</name> <name>codec</name> <operator>=</operator> <call><name><name>previousMappings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name><name>formats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>perFieldSeed</name> <operator>^</operator> <call><name><name>name</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <call><name><name>formats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>instanceof</operator> <name>SimpleTextPostingsFormat</name> <operator>&amp;&amp;</operator> <name>perFieldSeed</name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// make simpletext rarer, choose again</comment>
        <expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name><name>formats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>perFieldSeed</name> <operator>^</operator> <call><name><name>name</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <call><name><name>formats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><call><name><name>previousMappings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// Safety:</comment>
       <assert>assert <expr><call><name><name>previousMappings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">10000</literal><operator>:</operator> <literal type="string">"test went insane"</literal></expr>;</assert>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>RandomCodec</name> extends <name>AssertingCodec</name> <block>{
     <expr><name>DocValuesFormat</name> <name>codec</name> <operator>=</operator> <call><name><name>previousDVMappings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name><name>dvFormats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>perFieldSeed</name> <operator>^</operator> <call><name><name>name</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <call><name><name>dvFormats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>codec</name> <operator>instanceof</operator> <name>SimpleTextDocValuesFormat</name> <operator>&amp;&amp;</operator> <name>perFieldSeed</name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// make simpletext rarer, choose again</comment>
        <expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name><name>dvFormats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>perFieldSeed</name> <operator>^</operator> <call><name><name>name</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <call><name><name>dvFormats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><call><name><name>previousDVMappings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// Safety:</comment>
       <assert>assert <expr><call><name><name>previousDVMappings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">10000</literal><operator>:</operator> <literal type="string">"test went insane"</literal></expr>;</assert>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">214</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>RandomCodec</name> extends <name>AssertingCodec</name> <block>{
         <expr><operator>new</operator> <call><name>LuceneFixedGap</name><argument_list>(<argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>LuceneVarGapFixedInterval</name><argument_list>(<argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>LuceneVarGapDocFreqInterval</name><argument_list>(<argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
        <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <operator>new</operator> <call><name>SimpleTextPostingsFormat</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call></expr>,
        <expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>AssertingPostingsFormat</name><argument_list>()</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>MemoryPostingsFormat</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>random</name><operator>.</operator><name>nextFloat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>MemoryPostingsFormat</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>random</name><operator>.</operator><name>nextFloat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></else></if_stmt></block_content></block></function></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>RandomCodec</name> extends <name>AssertingCodec</name> <block>{
         <expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultDocValuesFormat</name></name><argument_list>()</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>DirectDocValuesFormat</name><argument_list>()</argument_list></call></expr>, <comment type="line">// maybe not a great idea...</comment>
         <expr><operator>new</operator> <call><name>MemoryDocValuesFormat</name><argument_list>()</argument_list></call></expr>,
        <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <operator>new</operator> <call><name>SimpleTextDocValuesFormat</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name><name>TestUtil</name><operator>.</operator><name>getDefaultDocValuesFormat</name></name><argument_list>()</argument_list></call></expr>,
        <expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultDocValuesFormat</name></name><argument_list>()</argument_list></call></expr>,
         <expr><operator>new</operator> <call><name>AssertingDocValuesFormat</name><argument_list>()</argument_list></call></expr>)</block></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>shuffle</name></name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">629396a2117</literal><operator>..</operator><literal type="number">8cd07297de4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>files</name><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema_codec</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator><operator>&gt;</operator>
 <operator>&lt;</operator><name>schema</name> <name>name</name><operator>=</operator><literal type="string">"codec"</literal> <name>version</name><operator>=</operator><literal type="string">"1.2"</literal><operator>&gt;</operator>
   <operator>&lt;</operator><name>fieldType</name> <name>name</name><operator>=</operator><literal type="string">"string_direct"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.StrField"</literal> <name>postingsFormat</name><operator>=</operator><literal type="string">"Direct"</literal><operator>/</operator><operator>&gt;</operator>
  <operator>&lt;</operator><name>fieldType</name> <name>name</name><operator>=</operator><literal type="string">"string_simpletext"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.StrField"</literal> <name>postingsFormat</name><operator>=</operator><literal type="string">"SimpleText"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>fieldType</name> <name>name</name><operator>=</operator><literal type="string">"string_standard"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.StrField"</literal> <name>postingsFormat</name><operator>=</operator><literal type="string">"Lucene50"</literal><operator>/</operator><operator>&gt;</operator>
 
   <operator>&lt;</operator><name>fieldType</name> <name>name</name><operator>=</operator><literal type="string">"string_disk"</literal> <name>class</name><operator>=</operator><literal type="string">"solr.StrField"</literal> <name>docValuesFormat</name><operator>=</operator><literal type="string">"Lucene54"</literal><operator>/</operator><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
   <operator>&lt;</operator><operator>/</operator><name>fieldType</name><operator>&gt;</operator>
 
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"string_direct_f"</literal> <name>type</name><operator>=</operator><literal type="string">"string_direct"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
  <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"string_simpletext_f"</literal> <name>type</name><operator>=</operator><literal type="string">"string_simpletext"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"string_standard_f"</literal> <name>type</name><operator>=</operator><literal type="string">"string_standard"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
 
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"string_disk_f"</literal> <name>type</name><operator>=</operator><literal type="string">"string_disk"</literal> <name>indexed</name><operator>=</operator><literal type="string">"false"</literal> <name>stored</name><operator>=</operator><literal type="string">"false"</literal> <name>docValues</name><operator>=</operator><literal type="string">"true"</literal> default<operator>=</operator><literal type="string">""</literal><operator>/</operator><operator>&gt;</operator>
@@ <operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"string_f"</literal> <name>type</name><operator>=</operator><literal type="string">"string"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal> <name>docValues</name><operator>=</operator><literal type="string">"true"</literal> <name>required</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>field</name> <name>name</name><operator>=</operator><literal type="string">"text"</literal> <name>type</name><operator>=</operator><literal type="string">"text_general"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
 
  <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_simple"</literal> <name>type</name><operator>=</operator><literal type="string">"string_simpletext"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_direct"</literal> <name>type</name><operator>=</operator><literal type="string">"string_direct"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><name>dynamicField</name> <name>name</name><operator>=</operator><literal type="string">"*_standard"</literal> <name>type</name><operator>=</operator><literal type="string">"string_standard"</literal> <name>indexed</name><operator>=</operator><literal type="string">"true"</literal> <name>stored</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a1718e65d5c</name><operator>..</operator><literal type="number">0fe6a02dcca</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestCodecSupport</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecSupport</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>SchemaField</name> <name>schemaField</name> <operator>=</operator> <call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"string_direct_f"</literal></expr></argument>)</argument_list></call></expr>;
     <name>PerFieldPostingsFormat</name> <name>format</name> <operator>=</operator> <operator>(</operator><name>PerFieldPostingsFormat</name><operator>)</operator> <call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Direct"</literal></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><call><name><name>schemaField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaField</name> <operator>=</operator> <call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"string_simpletext_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"SimpleText"</literal></expr></argument>,
        <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><call><name><name>schemaField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>schemaField</name> <operator>=</operator> <call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"string_standard_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><call><name><name>schemaField</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>schemaField</name> <operator>=</operator> <call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"string_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCodecSupport</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>Codec</name> <name>codec</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCodec</name><argument_list>()</argument_list></call></expr>;
     <name>PerFieldPostingsFormat</name> <name>format</name> <operator>=</operator> <operator>(</operator><name>PerFieldPostingsFormat</name><operator>)</operator> <call><name><name>codec</name><operator>.</operator><name>postingsFormat</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"SimpleText"</literal></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><literal type="string">"foo_simple"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"SimpleText"</literal></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><literal type="string">"bar_simple"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Direct"</literal></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><literal type="string">"foo_direct"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Direct"</literal></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><literal type="string">"bar_direct"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>TestUtil</name><operator>.</operator><name>getDefaultPostingsFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>getPostingsFormatForField</name></name><argument_list>(<argument><expr><literal type="string">"foo_standard"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt>

</unit>
