<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/36b17aab62.java"><expr_stmt><expr><name>From</name> <literal type="number">36b17aab62c7a3d254fa976dfee3093af501f889</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Simon</name> <name><name>Willnauer</name> <argument_list type="generic">&lt;<argument><name>simonw</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">5</literal> <name>Jan</name> <literal type="number">2011</literal> <literal type="number">20</literal><operator>:</operator><literal type="number">47</literal><operator>:</operator><literal type="number">08</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">2831</literal><operator>:</operator> <name>Revise</name> <name>Weight</name><operator>#</operator><name>scorer</name> <operator>&amp;</operator> <name>Filter</name><operator>#</operator><name>getDocIdSet</name> <name>API</name> <name>to</name>
 <name>pass</name> <name>Readers</name> <name>context</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1055636 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>instantiated</name><operator>/</operator><name><name>InstantiatedIndexReader</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name>memory</name><operator>/</operator><name><name>MemoryIndex</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ChainedFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">32</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DuplicateFilter</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">18</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRewriteMethod</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermsFilter</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanFilterTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermsFilterTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>geohash</name><operator>/</operator><name><name>GeoHashDistanceFilter</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spatial</name><operator>/</operator><name>tier</name><operator>/</operator><name><name>CartesianShapeFilter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spatial</name><operator>/</operator><name>tier</name><operator>/</operator><name><name>LatLongDistanceFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>spatial</name><operator>/</operator><name>tier</name><operator>/</operator><name><name>TestDistance</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>builders</name><operator>/</operator><name><name>NumericRangeFilterBuilder</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TestNumericRangeFilterBuilder</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>BufferedDeletes</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>DirectoryReader</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">28</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>FilterIndexReader</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>IndexReader</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">172</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiReader</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>ParallelReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentReader</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SlowMultiReaderWrapper</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>BooleanQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingSpanFilter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>ConstantScoreQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRangeFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">45</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheTermsFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>Filter</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexSearcher</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">161</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MatchAllDocsQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiTermQueryWrapperFilter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryWrapperFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SpanQueryFilter</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TermQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>Weight</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">38</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">21</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadNearQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadTermQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>SpanWeight</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ReaderUtil</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">91</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilterHelper</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>JustCompileSearch</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MockFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryUtils</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">51</literal> <operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SingleDocTestFilter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestCachingWrapperFilter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocIdSet</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredSearch</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery32</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery64</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScorerPerf</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermScorer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestNearSpansOrdered</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestSpans</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>PerSegmentSingleValuedFaceting</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">29</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DocSet</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrFilter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SortedIntDocSet</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">26</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>FunctionQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">23</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>QueryValueSource</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceRangeFilter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>common</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ContentStreamTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocSet</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DirectUpdateHandlerTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">81</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">855</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">486</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">78a75fd5db7</literal><operator>..</operator><name>fdd2e6c78d1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>Changes</name> <name>in</name> <name>backwards</name> <name>compatibility</name> <name>policy</name>
   <name>ParallelMultiSearcher</name> <name>into</name> <name>IndexSearcher</name> <name>as</name> <name>an</name> <name>optional</name>
   <name>ExecutorServiced</name> <name>passed</name> <name>to</name> <name>its</name> <name><name>ctor</name><operator>.</operator></name>  (<name>Mike</name> <name>McCandless</name></expr></expr_stmt>)
 
<expr_stmt><expr><operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2837</literal><operator>:</operator> <name>Changed</name> <name>Weight</name><operator>#</operator><name>scorer</name></expr><operator>,</operator> <expr><name>Weight</name><operator>#</operator><name>explain</name> <operator>&amp;</operator> <name>Filter</name><operator>#</operator><name>getDocIdSet</name> <name>to</name>
  <name>operate</name> <name>on</name> <name>a</name> <name>ReaderContext</name> <name>instead</name> <name>of</name> <name>directly</name> <name>on</name> <name>IndexReader</name> <name>to</name> <name>enable</name>
  <name>searches</name> <name>to</name> <name>be</name> <name>aware</name> <name>of</name> <name>IndexSearcher</name><literal type="char">'s context. (Simon Willnauer)

 Changes in Runtime Behavior
 
 * LUCENE-2650, LUCENE-2825: The behavior of FSDirectory.open has changed. On 64-bit
diff --git a/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java b/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
index 8fede649e66..58c5313bed4 100644
-- a/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
++ b/lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
@@ -31,6 +31,7 @@ import java.util.Comparator;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FieldSelector;
 import org.apache.lucene.index.*;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BitVector;
 import org.apache.lucene.util.BytesRef;
@@ -45,6 +46,8 @@ import org.apache.lucene.util.Bits;
 public class InstantiatedIndexReader extends IndexReader {
 
   private final InstantiatedIndex index;
  private ReaderContext context = new AtomicReaderContext(this);

 
   public InstantiatedIndexReader(InstantiatedIndex index) {
     super();
@@ -424,6 +427,11 @@ public class InstantiatedIndexReader extends IndexReader {
       }
     };
   }
  
  @Override
  public ReaderContext getTopReaderContext() {
    return context;
  }
 
   @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber) throws IOException {
diff --git a/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index b30adc7c7ad..f342c4f640f 100644
-- a/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
++ b/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -48,6 +48,7 @@ import org.apache.lucene.index.TermFreqVector;
 import org.apache.lucene.index.TermPositionVector;
 import org.apache.lucene.index.TermVectorMapper;
 import org.apache.lucene.index.FieldInvertState;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
@@ -738,6 +739,7 @@ public class MemoryIndex implements Serializable {
   private final class MemoryIndexReader extends IndexReader {
     
     private IndexSearcher searcher; // needed to find searcher.getSimilarity() 
    private final ReaderContext readerInfos = new AtomicReaderContext(this);
     
     private MemoryIndexReader() {
       super(); // avoid as much superclass baggage as possible
@@ -764,6 +766,11 @@ public class MemoryIndex implements Serializable {
       if (DEBUG) System.err.println("MemoryIndexReader.docFreq: " + term + ", freq:" + freq);
       return freq;
     }
    
    @Override
    public ReaderContext getTopReaderContext() {
      return readerInfos;
    }
   
     @Override
     public Fields fields() {
diff --git a/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java b/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
index 2e6868e5202..e3748774456 100644
-- a/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
++ b/lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.util.OpenBitSet;
 import org.apache.lucene.util.OpenBitSetDISI;
@@ -41,10 +42,10 @@ public class BooleanFilter extends Filter
   ArrayList&lt;Filter&gt; notFilters = null;
   ArrayList&lt;Filter&gt; mustFilters = null;
   
  private DocIdSetIterator getDISI(ArrayList&lt;Filter&gt; filters, int index, IndexReader reader)
  private DocIdSetIterator getDISI(ArrayList&lt;Filter&gt; filters, int index, ReaderContext info)
   throws IOException
   {
    return filters.get(index).getDocIdSet(reader).iterator();
    return filters.get(index).getDocIdSet(info).iterator();
   }
 
   /**
@@ -52,21 +53,21 @@ public class BooleanFilter extends Filter
    * of the filters that have been added.
    */
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException
   {
     OpenBitSetDISI res = null;
  
    final IndexReader reader = context.reader;
     if (shouldFilters != null) {
       for (int i = 0; i &lt; shouldFilters.size(); i++) {
         if (res == null) {
          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());
          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());
         } else { 
          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);
          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);
           if(dis instanceof OpenBitSet) {
             // optimized case for OpenBitSets
             res.or((OpenBitSet) dis);
           } else {
            res.inPlaceOr(getDISI(shouldFilters, i, reader));
            res.inPlaceOr(getDISI(shouldFilters, i, context));
           }
         }
       }
@@ -75,15 +76,15 @@ public class BooleanFilter extends Filter
     if (notFilters!=null) {
       for (int i = 0; i &lt; notFilters.size(); i++) {
         if (res == null) {
          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());
          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());
           res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs
         } else {
          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);
          DocIdSet dis = notFilters.get(i).getDocIdSet(context);
           if(dis instanceof OpenBitSet) {
             // optimized case for OpenBitSets
             res.andNot((OpenBitSet) dis);
           } else {
            res.inPlaceNot(getDISI(notFilters, i, reader));
            res.inPlaceNot(getDISI(notFilters, i, context));
           }
         }
       }
@@ -92,14 +93,14 @@ public class BooleanFilter extends Filter
     if (mustFilters!=null) {
       for (int i = 0; i &lt; mustFilters.size(); i++) {
         if (res == null) {
          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());
          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());
         } else {
          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);
          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);
           if(dis instanceof OpenBitSet) {
             // optimized case for OpenBitSets
             res.and((OpenBitSet) dis);
           } else {
            res.inPlaceAnd(getDISI(mustFilters, i, reader));
            res.inPlaceAnd(getDISI(mustFilters, i, context));
           }
         }
       }
diff --git a/lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter.java b/lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter.java
index e95b50660d8..a8cc00caf5f 100644
-- a/lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter.java
++ b/lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter.java
@@ -20,6 +20,7 @@ package org.apache.lucene.search;
 import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.Filter;
@@ -96,21 +97,21 @@ public class ChainedFilter extends Filter
      * {@link Filter#getDocIdSet}.
      */
     @Override
    public DocIdSet getDocIdSet(IndexReader reader) throws IOException
    public DocIdSet getDocIdSet(ReaderContext context) throws IOException
     {
         int[] index = new int[1]; // use array as reference to modifiable int; 
         index[0] = 0;             // an object attribute would not be thread safe.
         if (logic != -1)
            return getDocIdSet(reader, logic, index);
            return getDocIdSet(context, logic, index);
         else if (logicArray != null)
            return getDocIdSet(reader, logicArray, index);
            return getDocIdSet(context, logicArray, index);
         else
            return getDocIdSet(reader, DEFAULT, index);
            return getDocIdSet(context, DEFAULT, index);
     }
 
    private DocIdSetIterator getDISI(Filter filter, IndexReader reader)
    private DocIdSetIterator getDISI(Filter filter, ReaderContext info)
     throws IOException {
        DocIdSet docIdSet = filter.getDocIdSet(reader);
        DocIdSet docIdSet = filter.getDocIdSet(info);
         if (docIdSet == null) {
           return DocIdSet.EMPTY_DOCIDSET.iterator();
         } else {
@@ -123,9 +124,10 @@ public class ChainedFilter extends Filter
         }
     }
 
    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)
    private OpenBitSetDISI initialResult(ReaderContext info, int logic, int[] index)
     throws IOException
     {
        IndexReader reader = info.reader;
         OpenBitSetDISI result;
         /**
          * First AND operation takes place against a completely false
@@ -133,12 +135,12 @@ public class ChainedFilter extends Filter
          */
         if (logic == AND)
         {
            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());
            result = new OpenBitSetDISI(getDISI(chain[index[0]], info), reader.maxDoc());
             ++index[0];
         }
         else if (logic == ANDNOT)
         {
            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());
            result = new OpenBitSetDISI(getDISI(chain[index[0]], info), reader.maxDoc());
             result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.
             ++index[0];
         }
@@ -155,13 +157,13 @@ public class ChainedFilter extends Filter
      * @param logic Logical operation
      * @return DocIdSet
      */
    private DocIdSet getDocIdSet(IndexReader reader, int logic, int[] index)
    private DocIdSet getDocIdSet(ReaderContext info, int logic, int[] index)
     throws IOException
     {
        OpenBitSetDISI result = initialResult(reader, logic, index);
        OpenBitSetDISI result = initialResult(info, logic, index);
         for (; index[0] &lt; chain.length; index[0]++)
         {
            doChain(result, logic, chain[index[0]].getDocIdSet(reader));
            doChain(result, logic, chain[index[0]].getDocIdSet(info));
         }
         return result;
     }
@@ -172,16 +174,16 @@ public class ChainedFilter extends Filter
      * @param logic Logical operation
      * @return DocIdSet
      */
    private DocIdSet getDocIdSet(IndexReader reader, int[] logic, int[] index)
    private DocIdSet getDocIdSet(ReaderContext info, int[] logic, int[] index)
     throws IOException
     {
         if (logic.length != chain.length)
             throw new IllegalArgumentException("Invalid number of elements in logic array");
 
        OpenBitSetDISI result = initialResult(reader, logic[0], index);
        OpenBitSetDISI result = initialResult(info, logic[0], index);
         for (; index[0] &lt; chain.length; index[0]++)
         {
            doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(reader));
            doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(info));
         }
         return result;
     }
diff --git a/lucene/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java b/lucene/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
index 3a249344986..5f2e3b1528f 100644
-- a/lucene/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
++ b/lucene/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
@@ -19,6 +19,7 @@ import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.util.BytesRef;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.TermsEnum;
@@ -27,7 +28,8 @@ import org.apache.lucene.util.OpenBitSet;
 import org.apache.lucene.util.Bits;
 
 public class DuplicateFilter extends Filter
{
{ // TODO: make duplicate filter aware of ReaderContext such that we can 
  // filter duplicates across segments
 	
 	String fieldName;
 	
@@ -70,15 +72,15 @@ public class DuplicateFilter extends Filter
 	}
 
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException
 	{
 		if(processingMode==PM_FAST_INVALIDATION)
 		{
			return fastBits(reader);
			return fastBits(context.reader);
 		}
 		else
 		{
			return correctBits(reader);
			return correctBits(context.reader);
 		}
 	}
 	
@@ -96,7 +98,7 @@ public class DuplicateFilter extends Filter
         } else {
           docs = termsEnum.docs(delDocs, docs);
           int doc = docs.nextDoc();
          if (doc != docs.NO_MORE_DOCS) {
          if (doc != DocsEnum.NO_MORE_DOCS) {
             if (keepMode == KM_USE_FIRST_OCCURRENCE) {
               bits.set(doc);
             } else {
@@ -104,7 +106,7 @@ public class DuplicateFilter extends Filter
               while (true) {
                 lastDoc = doc;
                 doc = docs.nextDoc();
                if (doc == docs.NO_MORE_DOCS) {
                if (doc == DocsEnum.NO_MORE_DOCS) {
                   break;
                 }
               }
@@ -136,7 +138,7 @@ public class DuplicateFilter extends Filter
             // unset potential duplicates
             docs = termsEnum.docs(delDocs, docs);
             int doc = docs.nextDoc();
            if (doc != docs.NO_MORE_DOCS) {
            if (doc != DocsEnum.NO_MORE_DOCS) {
               if (keepMode == KM_USE_FIRST_OCCURRENCE) {
                 doc = docs.nextDoc();
               }
@@ -147,7 +149,7 @@ public class DuplicateFilter extends Filter
               lastDoc = doc;
               bits.clear(lastDoc);
               doc = docs.nextDoc();
              if (doc == docs.NO_MORE_DOCS) {
              if (doc == DocsEnum.NO_MORE_DOCS) {
                 break;
               }
             }
diff --git a/lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java b/lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
index e296fcaa5ff..6dee395ab70 100644
-- a/lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
++ b/lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.Comparator;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
@@ -108,8 +109,8 @@ public final class FieldCacheRewriteMethod extends MultiTermQuery.RewriteMethod
      * results.
      */
     @Override
    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, query.field);
    public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);
       final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());
       TermsEnum termsEnum = query.getTermsEnum(new Terms() {
         
@@ -142,7 +143,7 @@ public final class FieldCacheRewriteMethod extends MultiTermQuery.RewriteMethod
         return DocIdSet.EMPTY_DOCIDSET;
       }
       
      return new FieldCacheRangeFilter.FieldCacheDocIdSet(reader, true) {
      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {
         @Override
         boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {
           return termSet.fastGet(fcsi.getOrd(doc));
diff --git a/lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java b/lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
index 5ab5834a5b4..e1ab950ab0c 100644
-- a/lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
++ b/lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
@@ -23,6 +23,7 @@ import java.util.Set;
 import java.util.TreeSet;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.Terms;
@@ -57,7 +58,8 @@ public class TermsFilter extends Filter
    * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)
 	 */
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
    IndexReader reader = context.reader;
     OpenBitSet result=new OpenBitSet(reader.maxDoc());
     Fields fields = reader.fields();
     BytesRef br = new BytesRef();
diff --git a/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java b/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
index a9a6766f927..b9a8dfacd6c 100644
-- a/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
++ b/lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
@@ -24,6 +24,7 @@ import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.SlowMultiReaderWrapper;
 import org.apache.lucene.index.Term;
@@ -83,7 +84,7 @@ public class BooleanFilterTest extends LuceneTestCase {
         private void tstFilterCard(String mes, int expected, Filter filt)
         throws Throwable
         {
          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();
          DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();
           int actual = 0;
           while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
             actual++;
diff --git a/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java b/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
index 454b6de9165..27d76cdb8df 100644
-- a/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
++ b/lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest.java
@@ -21,6 +21,7 @@ import java.util.HashSet;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
@@ -59,23 +60,25 @@ public class TermsFilterTest extends LuceneTestCase {
 			w.addDocument(doc);			
 		}
 		IndexReader reader = new SlowMultiReaderWrapper(w.getReader());
		ReaderContext context = reader.getTopReaderContext();
		assertTrue(context.isAtomic);
 		w.close();
 		
 		TermsFilter tf=new TermsFilter();
 		tf.addTerm(new Term(fieldName,"19"));
		OpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);
		OpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);
 		assertEquals("Must match nothing", 0, bits.cardinality());
 
 		tf.addTerm(new Term(fieldName,"20"));
		bits = (OpenBitSet)tf.getDocIdSet(reader);
		bits = (OpenBitSet)tf.getDocIdSet(context);
 		assertEquals("Must match 1", 1, bits.cardinality());
 		
 		tf.addTerm(new Term(fieldName,"10"));
		bits = (OpenBitSet)tf.getDocIdSet(reader);
		bits = (OpenBitSet)tf.getDocIdSet(context);
 		assertEquals("Must match 2", 2, bits.cardinality());
 		
 		tf.addTerm(new Term(fieldName,"00"));
		bits = (OpenBitSet)tf.getDocIdSet(reader);
		bits = (OpenBitSet)tf.getDocIdSet(context);
 		assertEquals("Must match 2", 2, bits.cardinality());
 		
 		reader.close();
diff --git a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
index 69431f71f26..4f348b648d1 100644
-- a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
++ b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
@@ -19,7 +19,7 @@ package org.apache.lucene.spatial.geohash;
 
 import java.io.IOException;
 
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.FieldCache.DocTerms;
 import org.apache.lucene.search.Filter;
@@ -62,15 +62,15 @@ public class GeoHashDistanceFilter extends DistanceFilter {
   }
 
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
 
    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);
    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(context.reader, geoHashField);
     final BytesRef br = new BytesRef();
 
     final int docBase = nextDocBase;
    nextDocBase += reader.maxDoc();
    nextDocBase += context.reader.maxDoc();
 
    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {
       @Override
       public boolean match(int doc) {
 
diff --git a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
index 11527f396d4..07a833f3e2e 100644
-- a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
++ b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter.java
@@ -20,7 +20,7 @@ import java.io.IOException;
 import java.util.List;
 
 import org.apache.lucene.index.DocsEnum;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.DocIdSetIterator;
@@ -45,8 +45,8 @@ public class CartesianShapeFilter extends Filter {
   }
   
   @Override
  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {
    final Bits delDocs = reader.getDeletedDocs();
  public DocIdSet getDocIdSet(final ReaderContext context) throws IOException {
    final Bits delDocs = context.reader.getDeletedDocs();
     final List&lt;Double&gt; area = shape.getArea();
     final int sz = area.size();
     
@@ -58,7 +58,7 @@ public class CartesianShapeFilter extends Filter {
       return new DocIdSet() {
         @Override
         public DocIdSetIterator iterator() throws IOException {
          return reader.termDocsEnum(delDocs, fieldName, bytesRef);
          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);
         }
         
         @Override
@@ -67,11 +67,11 @@ public class CartesianShapeFilter extends Filter {
         }
       };
     } else {
      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());
      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());
       for (int i =0; i&lt; sz; i++) {
         double boxId = area.get(i).doubleValue();
         NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);
        final DocsEnum docsEnum = reader.termDocsEnum(delDocs, fieldName, bytesRef);
        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);
         if (docsEnum == null) continue;
         // iterate through all documents
         // which have this boxId
diff --git a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
index 44fba384701..58b475bca60 100644
-- a/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
++ b/lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
@@ -18,7 +18,8 @@
 package org.apache.lucene.spatial.tier;
 
 import java.io.IOException;
import org.apache.lucene.index.IndexReader;

import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.FilteredDocIdSet;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.Filter;
@@ -64,15 +65,15 @@ public class LatLongDistanceFilter extends DistanceFilter {
   }
   
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
 
    final double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);
    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);
    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);
    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);
 
     final int docBase = nextDocBase;
    nextDocBase += reader.maxDoc();
    nextDocBase += context.reader.maxDoc();
 
    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {
       @Override
       protected boolean match(int doc) {
         double x = latIndex[doc];
diff --git a/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java b/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
index 0e0a787f8fe..f355fab632d 100644
-- a/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
++ b/lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
@@ -22,6 +22,7 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericField;
import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexReader;
@@ -30,6 +31,7 @@ import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 

 public class TestDistance extends LuceneTestCase {
   
   private Directory directory;
@@ -100,9 +102,9 @@ public class TestDistance extends LuceneTestCase {
     LatLongDistanceFilter f = new LatLongDistanceFilter(new QueryWrapperFilter(new MatchAllDocsQuery()),
                                                         lat, lng, 1.0, latField, lngField);
 
    IndexReader[] readers = r.getSequentialSubReaders();
    for(int i=0;i&lt;readers.length;i++) {
      f.getDocIdSet(readers[i]);
    AtomicReaderContext[] leaves = r.getTopReaderContext().leaves();
    for (int i = 0; i &lt; leaves.length; i++) {
      f.getDocIdSet(leaves[i]);
     }
     r.close();
   }
diff --git a/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder.java b/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder.java
index c834f8e4d98..b6bea806dee 100644
-- a/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder.java
++ b/lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeFilterBuilder.java
@@ -19,7 +19,7 @@ package org.apache.lucene.xmlparser.builders;
 
 import java.io.IOException;
 
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.NumericRangeFilter;
@@ -157,7 +157,7 @@ public class NumericRangeFilterBuilder implements FilterBuilder {
 		private static final long serialVersionUID = 1L;
 
 		@Override
		public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
		public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
 			return null;
 		}
 
diff --git a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
index dca574dd0bf..4105c014f27 100644
-- a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
++ b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
@@ -67,7 +67,7 @@ public class TestNumericRangeFilterBuilder extends LuceneTestCase {
 			IndexReader reader = IndexReader.open(ramDir, true);
 			try
 			{
				assertNull(filter.getDocIdSet(reader));
				assertNull(filter.getDocIdSet(reader.getTopReaderContext()));
 			}
 			finally
 			{
diff --git a/lucene/src/java/org/apache/lucene/index/BufferedDeletes.java b/lucene/src/java/org/apache/lucene/index/BufferedDeletes.java
index 3b144aada2c..8b4032a6602 100644
-- a/lucene/src/java/org/apache/lucene/index/BufferedDeletes.java
++ b/lucene/src/java/org/apache/lucene/index/BufferedDeletes.java
@@ -26,6 +26,7 @@ import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
@@ -364,12 +365,16 @@ class BufferedDeletes {
     // Delete by query
     if (deletes.queries.size() &gt; 0) {
       IndexSearcher searcher = new IndexSearcher(reader);
      
      final ReaderContext readerContext = searcher.getTopReaderContext();
      assert readerContext.isAtomic;
       try {
         for (Entry&lt;Query, Integer&gt; entry : deletes.queries.entrySet()) {
           Query query = entry.getKey();
           int limit = entry.getValue().intValue();
           Weight weight = query.weight(searcher);
          Scorer scorer = weight.scorer(reader, true, false);
          
          Scorer scorer = weight.scorer(readerContext, true, false);
           if (scorer != null) {
             while(true)  {
               int doc = scorer.nextDoc();
diff --git a/lucene/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
index ff014d99f6b..c4ed2633760 100644
-- a/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
++ b/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -35,7 +35,6 @@ import org.apache.lucene.store.Lock;
 import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.util.Bits;
import org.apache.lucene.util.ReaderUtil;
 import org.apache.lucene.util.BytesRef;
 
 import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
@@ -60,8 +59,8 @@ class DirectoryReader extends IndexReader implements Cloneable {
   private boolean rollbackHasChanges;
 
   private SegmentReader[] subReaders;
  private ReaderContext topLevelReaderContext;
   private int[] starts;                           // 1st docno for each segment
  private final Map&lt;SegmentReader,ReaderUtil.Slice&gt; subReaderToSlice = new HashMap&lt;SegmentReader,ReaderUtil.Slice&gt;();
   private int maxDoc = 0;
   private int numDocs = -1;
   private boolean hasDeletions = false;
@@ -300,25 +299,22 @@ class DirectoryReader extends IndexReader implements Cloneable {
   private void initialize(SegmentReader[] subReaders) throws IOException {
     this.subReaders = subReaders;
     starts = new int[subReaders.length + 1];    // build starts array

    final AtomicReaderContext[] subReaderCtx = new AtomicReaderContext[subReaders.length];
    topLevelReaderContext = new CompositeReaderContext(this, subReaderCtx, subReaderCtx);
     final List&lt;Fields&gt; subFields = new ArrayList&lt;Fields&gt;();
    final List&lt;ReaderUtil.Slice&gt; fieldSlices = new ArrayList&lt;ReaderUtil.Slice&gt;();

    
     for (int i = 0; i &lt; subReaders.length; i++) {
       starts[i] = maxDoc;
      subReaderCtx[i] = new AtomicReaderContext(topLevelReaderContext, subReaders[i], i, maxDoc, i, maxDoc);
       maxDoc += subReaders[i].maxDoc();      // compute maxDocs
 
       if (subReaders[i].hasDeletions()) {
         hasDeletions = true;
       }

      final ReaderUtil.Slice slice = new ReaderUtil.Slice(starts[i], subReaders[i].maxDoc(), i);
      subReaderToSlice.put(subReaders[i], slice);

      
       final Fields f = subReaders[i].fields();
       if (f != null) {
         subFields.add(f);
        fieldSlices.add(slice);
       }
     }
     starts[subReaders.length] = maxDoc;
@@ -844,16 +840,16 @@ class DirectoryReader extends IndexReader implements Cloneable {
       fieldSet.addAll(names);
     }
     return fieldSet;
  } 
  }
   
   @Override
  public IndexReader[] getSequentialSubReaders() {
    return subReaders;
  public ReaderContext getTopReaderContext() {
    return topLevelReaderContext;
   }

  
   @Override
  public int getSubReaderDocBase(IndexReader subReader) {
    return subReaderToSlice.get(subReader).start;
  public IndexReader[] getSequentialSubReaders() {
    return subReaders;
   }
 
   /** Returns the directory this index resides in. */
diff --git a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
index ca211eaccea..aa18fcdb51f 100644
-- a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
++ b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -19,6 +19,7 @@ package org.apache.lucene.index;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FieldSelector;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
@@ -417,6 +418,11 @@ public class FilterIndexReader extends IndexReader {
   public IndexReader[] getSequentialSubReaders() {
     return in.getSequentialSubReaders();
   }
  
  @Override
  public ReaderContext getTopReaderContext() {
    return in.getTopReaderContext();
  }
 
   @Override
   public Fields fields() throws IOException {
diff --git a/lucene/src/java/org/apache/lucene/index/IndexReader.java b/lucene/src/java/org/apache/lucene/index/IndexReader.java
index cc561d6e43b..ac0f203a8fb 100644
-- a/lucene/src/java/org/apache/lucene/index/IndexReader.java
++ b/lucene/src/java/org/apache/lucene/index/IndexReader.java
@@ -1126,7 +1126,7 @@ public abstract class IndexReader implements Cloneable,Closeable {
     if (docs == null) return 0;
     int n = 0;
     int doc;
    while ((doc = docs.nextDoc()) != docs.NO_MORE_DOCS) {
    while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {
       deleteDocument(doc);
       n++;
     }
@@ -1356,9 +1356,7 @@ public abstract class IndexReader implements Cloneable,Closeable {
   }
 
   /** Expert: returns the sequential sub readers that this
   *  reader is logically composed of.  For example,
   *  IndexSearcher uses this API to drive searching by one
   *  sub reader at a time.  If this reader is not composed
   *  reader is logically composed of. If this reader is not composed
    *  of sequential child readers, it should return null.
    *  If this method returns an empty array, that means this
    *  reader is a null reader (for example a MultiReader
@@ -1373,12 +1371,33 @@ public abstract class IndexReader implements Cloneable,Closeable {
   public IndexReader[] getSequentialSubReaders() {
     return null;
   }


  /** Expert: returns the docID base for this subReader. */
  public int getSubReaderDocBase(IndexReader subReader) {
    throw new UnsupportedOperationException();
  }
  
  /**
   * Expert: Returns a the root {@link ReaderContext} for this
   * {@link IndexReader}'</literal><name>s</name> <name>sub</name><operator>-</operator><name>reader</name> <name><name>tree</name><operator>.</operator> <name>Iff</name></name> <name>this</name> <name>reader</name> <name>is</name> <name>composed</name> <name>of</name> <name>sub</name>
   <operator>*</operator> <name>readers</name></expr> <operator>,</operator><expr><name><name>ie</name><operator>.</operator> <name>this</name></name> <name>reader</name> <name>being</name> <name>a</name> <name>composite</name> <name>reader</name></expr><operator>,</operator> <expr><name>this</name> <name>method</name> <name>returns</name> <name>a</name>
   <operator>*</operator> <block>{@<expr><name>link</name> <name>CompositeReaderContext</name></expr>}</block> <name>holding</name> <name>the</name> <name>reader</name><literal type="char">'s direct children as well as a
   * view of the reader tree'</literal><name>s</name> <name>atomic</name> <name>leaf</name> <name><name>contexts</name><operator>.</operator> <name>All</name></name> <name>sub</name><operator>-</operator>
   <operator>*</operator> <block>{@<expr><name>link</name> <name>ReaderContext</name></expr>}</block> <name>instances</name> <name>referenced</name> <name>from</name> <name>this</name> <name>readers</name> <name>top</name><operator>-</operator><name>level</name>
   <operator>*</operator> <name>context</name> <name>are</name> <specifier>private</specifier> <name>to</name> <name>this</name> <name>reader</name> <name>and</name> <name>are</name> <name>not</name> <name>shared</name> <name>with</name> <name>another</name> <name>context</name>
   <operator>*</operator> <name><name>tree</name><operator>.</operator> <name>For</name></name> <name>example</name></expr><operator>,</operator> <expr><name>IndexSearcher</name> <name>uses</name> <name>this</name> <name>API</name> <name>to</name> <name>drive</name> <name>searching</name> <name>by</name> <name>one</name>
   <operator>*</operator> <name>atomic</name> <name>leaf</name> <name>reader</name> <name>at</name> <name>a</name> <name><name>time</name><operator>.</operator> <name>If</name></name> <name>this</name> <name>reader</name> <name>is</name> <name>not</name> <name>composed</name> <name>of</name> <name>child</name>
   <operator>*</operator> <name>readers</name></expr><operator>,</operator> <expr><name>this</name> <name>method</name> <name>returns</name> <name>an</name> <block>{@<expr><name>link</name> <name>AtomicReaderContext</name></expr>}</block><operator>.</operator>
   <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
   <operator>*</operator> <name>Note</name><operator>:</operator> <name>Any</name> <name>of</name> <name>the</name> <name>sub</name><operator>-</operator><block>{@<expr><name>link</name> <name>CompositeReaderContext</name></expr>}</block> <name>instances</name> <name>reference</name> <name>from</name> <name>this</name>
   <operator>*</operator> <name>top</name><operator>-</operator><name>level</name> <name>context</name> <name>holds</name> <name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><literal type="null">null</literal><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator> <block>{@<expr><name>link</name> <name>CompositeReaderContext</name><operator>#</operator><name>leaves</name></expr>}</block>
   <operator>*</operator> <name><name>reference</name><operator>.</operator> <name>Only</name></name> <name>the</name> <name>top</name><operator>-</operator><name>level</name> <name>context</name> <name>maintains</name> <name>the</name> <name>convenience</name> <name>leaf</name><operator>-</operator><name>view</name>
   <operator>*</operator></expr></expr_stmt> <for>for performance reasons.
   * &lt;p&gt;
   * NOTE: You should not try using sub-readers returned by this method to make
   * any changes <control>(<init><expr><name>setNorm</name></expr><operator>,</operator> <expr><name>deleteDocument</name></expr><operator>,</operator> <expr><name><name>etc</name><operator>.</operator></name>)<operator>.</operator> <name>While</name> <name>this</name> <name>might</name> <name>succeed</name></expr></init> <for>for
   * one composite reader <control>(<init><expr><name>like</name> <name>MultiReader</name></expr></init>)</control><block type="pseudo"><block_content><operator>,</operator> <expr_stmt><expr><name>it</name> <name>will</name> <name>most</name> <name>likely</name> <name>lead</name> <name>to</name> <name>index</name>
   <operator>*</operator> <name>corruption</name></expr></expr_stmt></block_content></block></for> <for>for other readers <control>(<init><expr><name>like</name> <name>DirectoryReader</name> <name>obtained</name> <name>through</name>
   <operator>*</operator> <block>{@<expr><name>link</name> <operator>#</operator><name>open</name></expr>}</block><operator>.</operator> <name>Use</name> <name>the</name> <name>top</name><operator>-</operator><name>level</name> <name>context</name><literal type="char">'s reader directly.
   * 
   * @lucene.experimental
   */
  public abstract ReaderContext getTopReaderContext();
 
   /** Expert */
   public Object getCoreCacheKey() {
@@ -1431,4 +1450,137 @@ public abstract class IndexReader implements Cloneable,Closeable {
   Fields retrieveFields() {
     return fields;
   }

  /**
   * A struct like class that represents a hierarchical relationship between
   * {@link IndexReader} instances. 
   * @lucene.experimental
   */
  public static abstract class ReaderContext {
    /** The reader context for this reader'</literal><name>s</name> <name>immediate</name> <name>parent</name></expr><operator>,</operator> <expr><name>or</name> <literal type="null">null</literal></expr></init> <if_stmt><if>if none */
    public final ReaderContext parent<empty_stmt>;</empty_stmt></if></if_stmt>
    <comment type="block" format="javadoc">/** The actual reader */</comment>
    <condition><expr><specifier>public</specifier> <name>final</name> <name>IndexReader</name> <name>reader</name></expr>;</condition>
    <comment type="block" format="javadoc">/** &lt;code&gt;true&lt;/code&gt; iff the reader is an atomic reader */</comment>
    <incr><expr><specifier>public</specifier> <name>final</name> <name>boolean</name> <name>isAtomic</name></expr>;</incr>
    <comment type="block" format="javadoc">/** &lt;code&gt;true&lt;/code&gt; if this context struct represents the top level reader within the hierarchical context */</comment>
    public final boolean isTopLevel<condition>;</condition>
    <comment type="block" format="javadoc">/** the doc base for this reader in the parent, &lt;tt&gt;0&lt;/tt&gt; if parent is null */</comment>
    public final int docBaseInParent<condition>;</condition>
    <comment type="block" format="javadoc">/** the ord for this reader in the parent, &lt;tt&gt;0&lt;/tt&gt; if parent is null */</comment>
    public final int ordInParent<condition>;</condition>
    
    ReaderContext(ReaderContext parent<operator>,</operator> IndexReader reader<operator>,</operator>
        boolean isAtomic<operator>,</operator> boolean isTopLevel<operator>,</operator> int ordInParent<operator>,</operator> int docBaseInParent)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isAtomic</name></name> <operator>=</operator> <name>isAtomic</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docBaseInParent</name></name> <operator>=</operator> <name>docBaseInParent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ordInParent</name></name> <operator>=</operator> <name>ordInParent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTopLevel</name></name> <operator>=</operator> <name>isTopLevel</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <comment type="block" format="javadoc">/**
     * Returns the context's leaves if this context is a top-level context
     * otherwise &lt;code&gt;null&lt;/code&gt;.
     * &lt;p&gt;
     * Note: this is convenience method since leaves can always be obtained by
     * walking the context tree.
     */</comment>
    <condition><expr><specifier>public</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name> <call><name>leaves</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></expr></condition>
    
    <comment type="block" format="javadoc">/**
     * Returns the context's children iff this context is a composite context
     * otherwise &lt;code&gt;null&lt;/code&gt;.
     * &lt;p&gt;
     * Note: this method is a convenience method to prevent
     * &lt;code&gt;instanceof&lt;/code&gt; checks and type-casts to
     * {@link CompositeReaderContext}.
     */</comment>
    <incr><expr><specifier>public</specifier> <name><name>ReaderContext</name><index>[]</index></name> <call><name>children</name><argument_list>()</argument_list></call> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></expr></incr>
  }</control></for>
  
  <comment type="block" format="javadoc">/**
   * {@link ReaderContext} for composite {@link IndexReader} instance.
   * @lucene.experimental
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>CompositeReaderContext</name> <super_list><extends>extends <super><name>ReaderContext</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/** the composite readers immediate children */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ReaderContext</name><index>[]</index></name></type> <name>children</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** the composite readers leaf reader contexts if this is the top level reader in this context */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a {@link CompositeReaderContext} for intermediate readers that aren't
     * not top-level readers in the current context
     */</comment>
    <constructor><specifier>public</specifier> <name>CompositeReaderContext</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>ordInParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docbaseInParent</name></decl></parameter>, <parameter><decl><type><name><name>ReaderContext</name><index>[]</index></name></type> <name>children</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>ordInParent</name></expr></argument>, <argument><expr><name>docbaseInParent</name></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Creates a {@link CompositeReaderContext} for top-level readers with parent set to &lt;code&gt;null&lt;/code&gt;
     */</comment>
    <constructor><specifier>public</specifier> <name>CompositeReaderContext</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name><name>ReaderContext</name><index>[]</index></name></type> <name>children</name></decl></parameter>, <parameter><decl><type><name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><name>leaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <constructor><specifier>private</specifier> <name>CompositeReaderContext</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>ordInParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docbaseInParent</name></decl></parameter>, <parameter><decl><type><name><name>ReaderContext</name><index>[]</index></name></type> <name>children</name></decl></parameter>,
        <parameter><decl><type><name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>leaves</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>ordInParent</name></expr></argument>, <argument><expr><name>docbaseInParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>children</name></name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>leaves</name></name> <operator>=</operator> <name>leaves</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>leaves</name></expr>;</return>
    </block_content>}</block></function>
    
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ReaderContext</name><index>[]</index></name></type> <name>children</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>children</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <comment type="block" format="javadoc">/**
   * {@link ReaderContext} for atomic {@link IndexReader} instances
   * @lucene.experimental
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>AtomicReaderContext</name> <super_list><extends>extends <super><name>ReaderContext</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/** The readers ord in the top-level's leaves array */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>ord</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The readers absolute doc base */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>docBase</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Creates a new {@link AtomicReaderContext} 
     */</comment>
    <constructor><specifier>public</specifier> <name>AtomicReaderContext</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>ord</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leafOrd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leafDocBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>ord</name></expr></argument>, <argument><expr><name>docBase</name></expr></argument>, <argument><expr><name>leafOrd</name></expr></argument>, <argument><expr><name>leafDocBase</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <constructor><specifier>private</specifier> <name>AtomicReaderContext</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>ord</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>docBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leafOrd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leafDocBase</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>topLevel</name></expr></argument>,  <argument><expr><name>ord</name></expr></argument>, <argument><expr><name>docBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <assert>assert <expr><call><name><name>reader</name><operator>.</operator><name>getSequentialSubReaders</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"Atomic readers must not have subreaders"</literal></expr>;</assert>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ord</name></name> <operator>=</operator> <name>leafOrd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docBase</name></name> <operator>=</operator> <name>leafDocBase</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Creates a new {@link AtomicReaderContext} for a atomic reader without an immediate
     * parent.
     */</comment>
    <constructor><specifier>public</specifier> <name>AtomicReaderContext</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>atomicReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>atomicReader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// toplevel!!</comment>
    </block_content>}</block></constructor>
  }</block></class>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a765f3ae10f</name><operator>..</operator><name>a519eeb6197</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>MultiReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ReaderUtil</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>  <name>their</name> <name><name>content</name><operator>.</operator></name> *<operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>MultiReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
   <expr><specifier>protected</specifier> <name><name>IndexReader</name><index>[]</index></name> <name>subReaders</name></expr>;
  <expr><specifier>private</specifier> <name>final</name> <name>ReaderContext</name> <name>topLevelContext</name></expr>;
   <expr><specifier>private</specifier> <name><name>int</name><index>[]</index></name> <name>starts</name></expr>;                           <comment type="line">// 1st docno for each segment</comment>
  <expr><specifier>private</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>,<argument><name><name>ReaderUtil</name><operator>.</operator><name>Slice</name></name></argument>&gt;</argument_list></name> <name>subReaderToSlice</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>,<argument><name><name>ReaderUtil</name><operator>.</operator><name>Slice</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name><name>boolean</name><index>[]</index></name> <name>decrefOnClose</name></expr>;                <comment type="line">// remember which subreaders to decRef on close</comment>
   <expr><specifier>private</specifier> <name>int</name> <name>maxDoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>numDocs</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">48</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">48</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
   <expr><operator>*</operator> @<name>param</name> <name>subReaders</name> <name>set</name> <call><name>of</name> <argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call><name>readers</name>
   <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <call><name>MultiReader</name><argument_list>(<argument><expr><name>IndexReader</name><operator>...</operator> <name>subReaders</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>initialize</name><argument_list>(<argument><expr><name>subReaders</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>topLevelContext</name> <operator>=</operator> <call><name>initialize</name><argument_list>(<argument><expr><name>subReaders</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   <comment type="block" format="javadoc">/**
@@ -60,14 +60,13 @@ public class MultiReader extends IndexReader implements Cloneable {
    * @param subReaders set of (sub)readers
    */</comment>
   <specifier>public</specifier> <call><name>MultiReader</name><argument_list>(<argument><expr><name><name>IndexReader</name><index>[]</index></name> <name>subReaders</name></expr></argument>, <argument><expr><name>boolean</name> <name>closeSubReaders</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>initialize</name><argument_list>(<argument><expr><name>subReaders</name></expr></argument>, <argument><expr><name>closeSubReaders</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>topLevelContext</name> <operator>=</operator> <call><name>initialize</name><argument_list>(<argument><expr><name>subReaders</name></expr></argument>, <argument><expr><name>closeSubReaders</name></expr></argument>)</argument_list></call></expr>;
   }</block>
   
  <specifier>private</specifier> <name>void</name> <call><name>initialize</name><argument_list>(<argument><expr><name><name>IndexReader</name><index>[]</index></name> <name>subReaders</name></expr></argument>, <argument><expr><name>boolean</name> <name>closeSubReaders</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>private</specifier> <name>ReaderContext</name> <call><name>initialize</name><argument_list>(<argument><expr><name><name>IndexReader</name><index>[]</index></name> <name>subReaders</name></expr></argument>, <argument><expr><name>boolean</name> <name>closeSubReaders</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>subReaders</name></name> <operator>=</operator>  <call><name><name>subReaders</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><name>starts</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>    <comment type="line">// build starts array</comment>
     <expr_stmt><expr><name>decrefOnClose</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>

     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>maxDoc</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>maxDoc</name> <operator>+=</operator> <name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">// compute maxDocs</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
       <if_stmt><if>if <condition>(<expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>hasDeletions</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>hasDeletions</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>

      <name>final</name> <name><name>ReaderUtil</name><operator>.</operator><name>Slice</name></name> <name>slice</name> <operator>=</operator> <operator>new</operator> <call><name><name>ReaderUtil</name><operator>.</operator><name>Slice</name></name><argument_list>(<argument><expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                          <argument><expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr></argument>,
                                                          <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>subReaderToSlice</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

     <expr_stmt><expr><name><name>starts</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>maxDoc</name></expr>;</expr_stmt>
    <return>return <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>buildReaderContext</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
   }
 
   @<expr_stmt><expr><name>Override</name>
@@ <operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
     <throw>throw <argument_list>new <argument><expr><call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>int</name> <call><name>getSubReaderDocBase</name><argument_list>(<argument><expr><name>IndexReader</name> <name>subReader</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>subReaderToSlice</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>subReader</name></expr></argument>)</argument_list></call><operator>.</operator><name>start</name></expr>;</return>
  }</block></expr></expr_stmt>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>Fields</name></type> <name>fields</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"please use MultiFields.getFields, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level Fields"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">403</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">392</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
   <expr><specifier>public</specifier> <name><name>IndexReader</name><index>[]</index></name> <call><name>getSequentialSubReaders</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><name>subReaders</name></expr>;</return></block></expr>
   }</block>
  
  <specifier>public</specifier> <name>ReaderContext</name> <call><name>getTopReaderContext</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>topLevelContext</name></expr>;</return>
  }</block></expr></expr_stmt>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>ParallelReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>ParallelReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">77f98487d35</literal><operator>..</operator><literal type="number">775c865b2b9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>ParallelReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>ParallelReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelectorResult</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Fieldable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ReaderUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>FieldCache</name></name>;</import> <comment type="line">// not great (circular); used only to purge FieldCache entry on close</comment>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Similarity</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ParallelReader</name> extends <name>IndexReader</name> <block>{
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>,<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>readerToFields</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>,<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>&gt;</argument_list></name> <name>storedFieldReaders</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name> <name>normsCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
  
  <expr><specifier>private</specifier> <name>final</name> <name>ReaderContext</name> <name>topLevelReaderContext</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicReaderContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>maxDoc</name></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>numDocs</name></expr>;
   <expr><specifier>private</specifier> <name>boolean</name> <name>hasDeletions</name></expr>;
@@ <expr><operator>-</operator><literal type="number">90</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">92</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ParallelReader</name> extends <name>IndexReader</name> <block>{
     <expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>

  
  <comment type="block" format="javadoc">/** Add an IndexReader.
   * @throws IOException if there is a low-level IO error
   */</comment>
@@ <operator>-</operator><literal type="number">559</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">561</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ParallelReader</name> extends <name>IndexReader</name> <block>{
     }</block></expr></expr_stmt>
     <return>return <expr><name>fieldSet</name></expr>;</return>
   }
  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>ReaderContext</name></type> <name>getTopReaderContext</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>topLevelReaderContext</name></expr>;</return>
  </block_content>}</block></function>

 }
 
 
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1909f62523f</literal><operator>..</operator><literal type="number">66ebced2126</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>SegmentReader</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SegmentReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
 
   <expr><specifier>private</specifier> <name>SegmentInfo</name> <name>si</name></expr>;
   <expr><specifier>private</specifier> <name>int</name> <name>readBufferSize</name></expr>;

  <expr><specifier>private</specifier> <name>final</name> <name>ReaderContext</name> <name>readerContext</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicReaderContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
   <expr><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>FieldsReader</name></argument>&gt;</argument_list></name> <name>fieldsReaderLocal</name> <operator>=</operator> <operator>new</operator> <call><name>FieldsReaderLocal</name><argument_list>()</argument_list></call></expr>;
   <expr><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>TermVectorsReader</name></argument>&gt;</argument_list></name> <name>termVectorsLocal</name> <operator>=</operator> <operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>TermVectorsReader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1183</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1183</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SegmentReader</name> extends <name>IndexReader</name> implements <name>Cloneable</name> <block>{
     <expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>si</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name>pendingDeleteCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
   }</block>
  
  @<name>Override</name>
  <specifier>public</specifier> <name>ReaderContext</name> <call><name>getTopReaderContext</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>readerContext</name></expr>;</return>
  }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/**
    * Return the name of the segment this reader is reading.
diff --git a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
index 7a29870586f..2deb8b2c741 100644
-- a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
++ b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
@@ -30,6 +30,7 @@ import org.apache.lucene.util.ReaderUtil; // javadoc
 
 import org.apache.lucene.index.DirectoryReader; // javadoc
 import org.apache.lucene.index.MultiReader; // javadoc
import org.apache.lucene.index.IndexReader.ReaderContext;
 
 /**
  * This class forces a composite reader (eg a {@link
@@ -55,10 +56,12 @@ import org.apache.lucene.index.MultiReader; // javadoc
 
 public final class SlowMultiReaderWrapper extends FilterIndexReader {
 
  private final ReaderContext readerContext;
   private final Map&lt;String,byte[]&gt; normsCache = new HashMap&lt;String,byte[]&gt;();
   
   public SlowMultiReaderWrapper(IndexReader other) {
     super(other);
    readerContext = new AtomicReaderContext(this); // emulate atomic reader!
   }
 
   @Override
@@ -103,6 +106,11 @@ public final class SlowMultiReaderWrapper extends FilterIndexReader {
     }
   }
   
  @Override
  public ReaderContext getTopReaderContext() {
    return readerContext;
  }
  
   @Override
   protected void doSetNorm(int n, String field, byte value)
       throws CorruptIndexException, IOException {
diff --git a/lucene/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/src/java/org/apache/lucene/search/BooleanQuery.java
index 56f7d098114..d756eff3bad 100644
-- a/lucene/src/java/org/apache/lucene/search/BooleanQuery.java
++ b/lucene/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name><operator>.</operator><name>Occur</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">224</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>final</name> <name>int</name> <name>minShouldMatch</name> <operator>=</operator>
         <call><name><name>BooleanQuery</name><operator>.</operator><name>this</name><operator>.</operator><name>getMinimumNumberShouldMatch</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">237</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">238</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
       <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Weight</name></argument>&gt;</argument_list></name></type> <name>wIter</name> <init>= <expr><call><name><name>weights</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>wIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>wIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>BooleanClause</name></type> <name>c</name> <init>= <expr><call><name><name>cIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isRequired</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
             <decl_stmt><decl><type><name>Explanation</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no match on required clause ("</literal> <operator>+</operator> <call><name><name>c</name><operator>.</operator><name>getQuery</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
           }</block></expr></expr_stmt>
           <continue>continue;</continue>
         <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>}</block>
        <name>Explanation</name> <name>e</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Explanation</name></type> <name>e</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>c</name><operator>.</operator><name>isProhibited</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>sumExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">299</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">300</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name> <name>required</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name></type> <name>prohibited</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Scorer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">307</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">308</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BooleanQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <block>{
       <expr><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>BooleanClause</name></argument>&gt;</argument_list></name> <name>cIter</name> <operator>=</operator> <call><name><name>clauses</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
       <for>for <control>(<init><decl><type><name>Weight</name></type> <name>w</name>  <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>BooleanClause</name></type> <name>c</name> <init>=  <expr><call><name><name>cIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scorer</name></type> <name>subScorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scorer</name></type> <name>subScorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>subScorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isRequired</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingSpanFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingSpanFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d19c872ee58</name><operator>..</operator><literal type="number">1939406749e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingSpanFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingSpanFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CachingSpanFilter</name> extends <name>SpanFilter</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>SpanFilterResult</name> <name>result</name> <operator>=</operator> <call><name>getCachedResult</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SpanFilterResult</name></type> <name>result</name> <init>= <expr><call><name>getCachedResult</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><ternary><condition><expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>result</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
   </block_content>}</block></function>
   
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d51eed25172</name><operator>..</operator><literal type="number">1fc5c9f8b80</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSetDISI</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <block>{@<expr><name>link</name> <name>DeletesMode</name><operator>#</operator><name>DYNAMIC</name></expr>}</block></expr></expr_stmt>)</block_content>.
  */
 public class CachingWrapperFilter extends Filter <block>{<block_content>
  <comment type="line">// TODO: make this filter aware of ReaderContext. a cached filter could </comment>
  <comment type="line">// specify the actual readers key or something similar to indicate on which</comment>
  <comment type="line">// level of the readers hierarchy it should be cached.</comment>
   <decl_stmt><decl><type><name>Filter</name></type> <name>filter</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
@@ -191,8 +195,8 @@ public class CachingWrapperFilter extends Filter {
   int hitCount, missCount;
 
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {

  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
    final IndexReader reader = context.reader;
     final Object coreKey = reader.getCoreCacheKey();
     final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;
 
@@ -205,7 +209,7 @@ public class CachingWrapperFilter extends Filter {
     missCount++;
 
     // cache miss
    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);
    docIdSet = docIdSetToCache(filter.getDocIdSet(context), reader);
 
     if (docIdSet != null) {
       cache.put(coreKey, delCoreKey, docIdSet);
diff --git a/lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index fe76121d3c2..6af8ed5305c 100644
-- a/lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.java
++ b/lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConstantScoreQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>,  <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>final</name> <name>DocIdSetIterator</name> <name>disi</name></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <assert>assert <expr><name>query</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>dis</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>dis</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>dis</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
         <expr_stmt><expr><name>disi</name> <operator>=</operator> <call><name><name>dis</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
         <assert>assert <expr><name>query</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>innerWeight</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
         <expr_stmt><expr><name>disi</name> <operator>=</operator>
          <call><name><name>innerWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>topScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>innerWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>topScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
       <if_stmt><if>if <condition>(<expr><name>disi</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConstantScoreQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>final</name> <name>Scorer</name> <name>cs</name> <operator>=</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>cs</name> <init>= <expr><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>exists</name> <init>= <expr><operator>(</operator><name>cs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cs</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>doc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
 
       <decl_stmt><decl><type><specifier>final</specifier> <name>ComplexExplanation</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b6cd0295247</name><operator>..</operator><literal type="number">83f7764776f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>DisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -141,12 +142,12 @@ public class DisjunctionMaxQuery extends Query implements Iterable&lt;Query&gt; {
 
     /* Create the scorer used to score our associated DisjunctionMaxQuery */</comment>
     <decl_stmt><decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
    <argument><expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
         <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name><name>Scorer</name><index>[]</index></name> <name>scorers</name> <operator>=</operator> <operator>new</operator> <name><name>Scorer</name><index>[<expr><call><name><name>weights</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></block></expr></argument></throws></expr></argument>;</argument_list></decl></decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>Weight</name></type> <name>w</name> <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Scorer</name></type> <name>subScorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scorer</name></type> <name>subScorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>subScorer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>subScorer</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>scorers</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>subScorer</name></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>DisjunctionMaxQuery</name> extends <name>Query</name> implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Query</name></argument>&gt;</argument_list></name> <block>{
 
     <comment type="block">/* Explain the score we computed for doc */</comment>
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
      <if_stmt><if>if <condition>(<expr><call><name><name>disjuncts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>weights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>disjuncts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>weights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>context</name></expr></argument>,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
       <decl_stmt><decl><type><name>ComplexExplanation</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>tieBreakerMultiplier</name> <operator>==</operator> <literal type="number">0.0f</literal></expr> ?</condition><then> <expr><literal type="string">"max of:"</literal></expr> </then><else>: <expr><literal type="string">"max plus "</literal> <operator>+</operator> <name>tieBreakerMultiplier</name> <operator>+</operator> <literal type="string">" times others of:"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>Weight</name></type> <name>wt</name> <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Explanation</name></type> <name>e</name> <init>= <expr><call><name><name>wt</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Explanation</name></type> <name>e</name> <init>= <expr><call><name><name>wt</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setMatch</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRangeFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRangeFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c4245a5d70</literal><operator>..</operator><name>e0a03169285</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRangeFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FieldCacheRangeFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiFields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>NumericUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>FieldCacheRangeFilter</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> extends <name>Filter</name> <block>{
   
   <comment type="block" format="javadoc">/** This method is implemented for each data type */</comment>
   @<expr><name>Override</name>
  <specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
  <specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></block></expr>;</expr_stmt>
 
   <comment type="block" format="javadoc">/**
    * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all
@@ -83,8 +84,8 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;String&gt; newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;String&gt;(field, null, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);
         final BytesRef spare = new BytesRef();
         final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);
         final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);
@@ -124,7 +125,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         
         // for this DocIdSet, we can ignore deleted docs
         // because deleted docs have an order of 0 (null entry in StringIndex)
        return new FieldCacheDocIdSet(reader, true) {
        return new FieldCacheDocIdSet(context.reader, true) {
           @Override
           final boolean matchDoc(int doc) {
             final int docOrd = fcsi.getOrd(doc);
@@ -152,7 +153,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Byte&gt; newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Byte&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         final byte inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
           final byte i = lowerVal.byteValue();
@@ -174,9 +175,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);
        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);
         // we only respect deleted docs if the range contains 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
@@ -203,7 +204,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Short&gt; newShortRange(String field, FieldCache.ShortParser parser, Short lowerVal, Short upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Short&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         final short inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
           short i = lowerVal.shortValue();
@@ -225,9 +226,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);
        final short[] values = FieldCache.DEFAULT.getShorts(context.reader, field, (FieldCache.ShortParser) parser);
         // ignore deleted docs if range doesn't contain 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
@@ -254,7 +255,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Integer&gt; newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Integer&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         final int inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
           int i = lowerVal.intValue();
@@ -276,9 +277,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);
        final int[] values = FieldCache.DEFAULT.getInts(context.reader, field, (FieldCache.IntParser) parser);
         // ignore deleted docs if range doesn't contain 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0 &amp;&amp; inclusiveUpperPoint &gt;= 0)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
@@ -305,7 +306,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Long&gt; newLongRange(String field, FieldCache.LongParser parser, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Long&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         final long inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
           long i = lowerVal.longValue();
@@ -327,9 +328,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final long[] values = FieldCache.DEFAULT.getLongs(reader, field, (FieldCache.LongParser) parser);
        final long[] values = FieldCache.DEFAULT.getLongs(context.reader, field, (FieldCache.LongParser) parser);
         // ignore deleted docs if range doesn't contain 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0L &amp;&amp; inclusiveUpperPoint &gt;= 0L)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0L &amp;&amp; inclusiveUpperPoint &gt;= 0L)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
@@ -356,7 +357,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Float&gt; newFloatRange(String field, FieldCache.FloatParser parser, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Float&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         // we transform the floating point numbers to sortable integers
         // using NumericUtils to easier find the next bigger/lower value
         final float inclusiveLowerPoint, inclusiveUpperPoint;
@@ -382,9 +383,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final float[] values = FieldCache.DEFAULT.getFloats(reader, field, (FieldCache.FloatParser) parser);
        final float[] values = FieldCache.DEFAULT.getFloats(context.reader, field, (FieldCache.FloatParser) parser);
         // ignore deleted docs if range doesn't contain 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0.0f &amp;&amp; inclusiveUpperPoint &gt;= 0.0f)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0.0f &amp;&amp; inclusiveUpperPoint &gt;= 0.0f)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
@@ -411,7 +412,7 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
   public static FieldCacheRangeFilter&lt;Double&gt; newDoubleRange(String field, FieldCache.DoubleParser parser, Double lowerVal, Double upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter&lt;Double&gt;(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
       @Override
      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
         // we transform the floating point numbers to sortable integers
         // using NumericUtils to easier find the next bigger/lower value
         final double inclusiveLowerPoint, inclusiveUpperPoint;
@@ -437,9 +438,9 @@ public abstract class FieldCacheRangeFilter&lt;T&gt; extends Filter {
         if (inclusiveLowerPoint &gt; inclusiveUpperPoint)
           return DocIdSet.EMPTY_DOCIDSET;
         
        final double[] values = FieldCache.DEFAULT.getDoubles(reader, field, (FieldCache.DoubleParser) parser);
        final double[] values = FieldCache.DEFAULT.getDoubles(context.reader, field, (FieldCache.DoubleParser) parser);
         // ignore deleted docs if range doesn't contain 0
        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint &lt;= 0.0 &amp;&amp; inclusiveUpperPoint &gt;= 0.0)) {
        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint &lt;= 0.0 &amp;&amp; inclusiveUpperPoint &gt;= 0.0)) {
           @Override
           boolean matchDoc(int doc) {
             return values[doc] &gt;= inclusiveLowerPoint &amp;&amp; values[doc] &lt;= inclusiveUpperPoint;
diff --git a/lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java b/lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
index 57f8be754a4..684b139e4cf 100644
-- a/lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
++ b/lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 
 import org.apache.lucene.index.DocsEnum; // javadoc @link
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.util.OpenBitSet;
 import org.apache.lucene.util.BytesRef;
 
@@ -115,8 +116,8 @@ public class FieldCacheTermsFilter extends Filter {
   }
 
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
    return new FieldCacheTermsFilterDocIdSet(getFieldCache().getTermsIndex(reader, field));
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
    return new FieldCacheTermsFilterDocIdSet(getFieldCache().getTermsIndex(context.reader, field));
   }
 
   protected class FieldCacheTermsFilterDocIdSet extends DocIdSet {
diff --git a/lucene/src/java/org/apache/lucene/search/Filter.java b/lucene/src/java/org/apache/lucene/search/Filter.java
index f8061ebf52f..2dea148e94e 100644
-- a/lucene/src/java/org/apache/lucene/search/Filter.java
++ b/lucene/src/java/org/apache/lucene/search/Filter.java
@@ -19,7 +19,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.util.DocIdBitSet;
 
 /** 
@@ -38,10 +38,13 @@ public abstract class Filter implements java.io.Serializable {
    * must refer to document IDs for that segment, not for
    * the top-level reader.
    * 
   * @param reader a {@link IndexReader} instance opened on the index currently
   *         searched on. The provided reader is always an
   *         atomic reader, so you can call reader.fields()
   *         or reader.getDeletedDocs(), for example.
   * @param context a {@link ReaderContext} instance opened on the index currently
   *         searched on. Note, it is likely that the provided reader info does not
   *         represent the whole underlying index i.e. if the index has more than
   *         one segment the given reader only represents a single segment.
   *         The provided context is always an atomic context, so you can call 
   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}
   *         on the context's reader, for example.
    *          
    * @return a DocIdSet that provides the documents which should be permitted or
    *         prohibited in search results. &lt;b&gt;NOTE:&lt;/b&gt; null can be returned if
@@ -49,5 +52,6 @@ public abstract class Filter implements java.io.Serializable {
    * 
    * @see DocIdBitSet
    */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
  <comment type="line">// TODO make this context an AtomicContext</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6f27cfc6773</literal><operator>..</operator><name>f0b6001665f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>FilteredQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ extends <name>Query</name> <block>{
       }</block>
 
       @<name>Override</name>
      <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name> <argument_list>(<argument><expr><name>IndexReader</name> <name>ir</name></expr></argument>, <argument><expr><name>int</name> <name>i</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><specifier>public</specifier> <name>Explanation</name> <call><name>explain</name> <argument_list>(<argument><expr><name>ReaderContext</name> <name>ir</name></expr></argument>, <argument><expr><name>int</name> <name>i</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>Explanation</name> <name>inner</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>explain</name></name> <argument_list>(<argument><expr><name>ir</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name>getBoost</name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>Explanation</name></type> <name>preBoost</name> <init>= <expr><name>inner</name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ extends <name>Query</name> <block>{
 
       <comment type="line">// return a filtering scorer</comment>
       @<expr><name>Override</name>
      <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>indexReader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call>
      <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>indexReader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call>
           <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>final</name> <name>Scorer</name> <name>scorer</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>indexReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexSearcher</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexSearcher</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">25f552c5fdf</literal><operator>..</operator><name>eb2a3809e89</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexSearcher</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>IndexSearcher</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CompletionService</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>CorruptIndexException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>NIOFSDirectory</name></name>;</import>    <comment type="line">// javadoc</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ThreadInterruptedException</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>use</name> <name>your</name> <call><name>own</name> <argument_list>(<argument><expr><name>non</name><operator>-</operator><name>Lucene</name></expr></argument>)</argument_list></call> <name>objects</name> <name><name>instead</name><operator>.</operator></name>&lt;<operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>IndexSearcher</name> <block>{
  <expr><name>IndexReader</name> <name>reader</name></expr>;
  <name>final</name> <name>IndexReader</name> <name>reader</name></block></expr>;</expr_stmt> <comment type="line">// package private for testing!</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closeReader</name></decl>;</decl_stmt>
   
   <comment type="line">// NOTE: these members might change in incompatible ways</comment>
   <comment type="line">// in the next release</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>IndexReader</name><index>[]</index></name></type> <name>subReaders</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ReaderContext</name></type> <name>readerContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leafContexts</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>IndexSearcher</name><index>[]</index></name></type> <name>subSearchers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>docStarts</name></decl>;</decl_stmt>
<comment type="line">//  protected final int[] docStarts;</comment>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ExecutorService</name></type> <name>executor</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/** The Similarity implementation used by this searcher. */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">83</literal> <operator>+</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">73</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSearcher</name> <block>{
     <expr><call><name>this</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/** Expert: directly specify the reader, subReaders and
   *  their docID starts.
  /**
   * Creates a searcher searching the provided top-level {@link ReaderContext}.
   * &lt;p&gt;
   * Given a non-&lt;code&gt;null&lt;/code&gt; {@link ExecutorService} this method runs
   * searches for each segment separately, using the provided ExecutorService.
   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on
   * close; you must do so, eventually, on your own. NOTE: if you are using
   * {@link NIOFSDirectory}, do not use the shutdownNow method of
   * ExecutorService as this uses Thread.interrupt under-the-hood which can
   * silently close file descriptors (see &lt;a
   * href="https://issues.apache.org/jira/browse/LUCENE-2239"&gt;LUCENE-2239&lt;/a&gt;).
    * 
   * @lucene.experimental */</comment>
  <constructor><specifier>public</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name><name>IndexReader</name><index>[]</index></name></type> <name>subReaders</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>docStarts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subReaders</name></name> <operator>=</operator> <name>subReaders</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docStarts</name></name> <operator>=</operator> <name>docStarts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>subSearchers</name> <operator>=</operator> <operator>new</operator> <name><name>IndexSearcher</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>subSearchers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>closeReader</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>executor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
   <expr_stmt><expr><operator>*</operator> @<name>see</name> <name>ReaderContext</name>
   <operator>*</operator> @<name>see</name> <name>IndexReader</name><operator>#</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call>
   <operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
   <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>ExecutorService</name> <name>executor</name></expr></argument>)</argument_list></call> <block>{
    <expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></expr_stmt>

  <comment type="block" format="javadoc">/**
   * Creates a searcher searching the provided top-level {@link ReaderContext}.
   *
   * @see ReaderContext
   * @see IndexReader#getTopReaderContext()
   * @lucene.experimental
   */</comment>
  <constructor><specifier>public</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
   
  <comment type="block" format="javadoc">/** Expert: directly specify the reader, subReaders and
   *  their docID starts, and an ExecutorService.  In this
   *  case, each segment will be separately searched using the
   *  ExecutorService.  IndexSearcher will not
   *  shutdown/awaitTermination this ExecutorService on
   *  close; you must do so, eventually, on your own.  NOTE:
   *  if you are using {@link NIOFSDirectory}, do not use
   *  the shutdownNow method of ExecutorService as this uses
   *  Thread.interrupt under-the-hood which can silently
   *  close file descriptors (see &lt;a
   *  href="https://issues.apache.org/jira/browse/LUCENE-2239"&gt;LUCENE-2239&lt;/a&gt;).
   * 
   * @lucene.experimental */</comment>
  <constructor><specifier>public</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name><name>IndexReader</name><index>[]</index></name></type> <name>subReaders</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>docStarts</name></decl></parameter>, <parameter><decl><type><name>ExecutorService</name></type> <name>executor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subReaders</name></name> <operator>=</operator> <name>subReaders</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docStarts</name></name> <operator>=</operator> <name>docStarts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>subSearchers</name> <operator>=</operator> <operator>new</operator> <name><name>IndexSearcher</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>subSearchers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>closeReader</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executor</name></name> <operator>=</operator> <name>executor</name></expr>;</expr_stmt>
  <comment type="line">// convinience ctor for other IR based ctors</comment>
  <constructor><specifier>private</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closeReader</name></decl></parameter>, <parameter><decl><type><name>ExecutorService</name></type> <name>executor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>closeReader</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
  <constructor><specifier>private</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closeReader</name></decl></parameter>, <parameter><decl><type><name>ExecutorService</name></type> <name>executor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
  <constructor><specifier>private</specifier> <name>IndexSearcher</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closeReader</name></decl></parameter>, <parameter><decl><type><name>ExecutorService</name></type> <name>executor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO: eable this assert once SolrIndexReader and friends are refactored to use ReaderContext</comment>
    <comment type="line">// We can't assert this here since SolrIndexReader will fail in some contexts - once solr is consistent we should be fine here</comment>
    <comment type="line">// Lucene instead passes all tests even with this assert!</comment>
    <comment type="line">// assert context.isTopLevel: "IndexSearcher's ReaderContext must be topLevel for reader" + context.reader;</comment>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>reader</name></name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executor</name></name> <operator>=</operator> <name>executor</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>closeReader</name></name> <operator>=</operator> <name>closeReader</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>&gt;</argument_list></name></type> <name>subReadersList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gatherSubReaders</name><argument_list>(<argument><expr><name>subReadersList</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subReaders</name> <operator>=</operator> <call><name><name>subReadersList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexReader</name><index>[<expr><call><name><name>subReadersList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>docStarts</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>subSearchers</name> <operator>=</operator> <operator>new</operator> <name><name>IndexSearcher</name><index>[<expr><name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxDoc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>docStarts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>maxDoc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxDoc</name> <operator>+=</operator> <name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>maxDoc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readerContext</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>.</operator><name>isAtomic</name></name></expr>)</condition> <block>{<block_content>
      <assert>assert <expr><call><name><name>context</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"AtomicReaderContext must not have any leaves"</literal></expr>;</assert>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>leafContexts</name></name> <operator>=</operator> <operator>new</operator> <name><name>AtomicReaderContext</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>AtomicReaderContext</name><operator>)</operator> <name>context</name></expr> }</block></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <assert>assert <expr><call><name><name>context</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"non-atomic top-level context must have leaves"</literal></expr>;</assert>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>leafContexts</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>subSearchers</name> <operator>=</operator> <operator>new</operator> <name><name>IndexSearcher</name><index>[<expr><name><name>this</name><operator>.</operator><name>leafContexts</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subSearchers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// TODO do we need those IS if executor is null?</comment>
      <if_stmt><if>if <condition>(<expr><name><name>leafContexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reader</name> <operator>==</operator> <name><name>context</name><operator>.</operator><name>reader</name></name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name><name>subSearchers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>subSearchers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subSearchers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name><name>leafContexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we need to get a TL context for sub searchers!</comment>
       </block_content>}</block></else></if_stmt>
     </block_content>}</block></for>
   </block_content>}</block></if></if_stmt>
 
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>gatherSubReaders</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexReader</name></argument>&gt;</argument_list></name></type> <name>allSubReaders</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ReaderUtil</name><operator>.</operator><name>gatherSubReaders</name></name><argument_list>(<argument><expr><name>allSubReaders</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/** Return the {@link IndexReader} this searches. */</comment>
   <function><type><specifier>public</specifier> <name>IndexReader</name></type> <name>getIndexReader</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>reader</name></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/** Returns the atomic subReaders used by this searcher. */</comment>
  <function><type><specifier>public</specifier> <name><name>IndexReader</name><index>[]</index></name></type> <name>getSubReaders</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>subReaders</name></expr>;</return>
  </block_content>}</block></function>

   <comment type="block" format="javadoc">/** Expert: Returns one greater than the largest possible document number.
    * 
    * @see org.apache.lucene.index.IndexReader#maxDoc()
@@ -206,7 +197,7 @@ public class IndexSearcher {
       return reader.docFreq(term);
     } else {
       final ExecutionHelper&lt;Integer&gt; runner = new ExecutionHelper&lt;Integer&gt;(executor);
      for(int i = 0; i &lt; subReaders.length; i++) {
      for(int i = 0; i &lt; subSearchers.length; i++) {
         final IndexSearcher searchable = subSearchers[i];
         runner.submit(new Callable&lt;Integer&gt;() {
             public Integer call() throws IOException {
@@ -369,9 +360,9 @@ public class IndexSearcher {
       final Lock lock = new ReentrantLock();
       final ExecutionHelper&lt;TopDocs&gt; runner = new ExecutionHelper&lt;TopDocs&gt;(executor);
     
      for (int i = 0; i &lt; subReaders.length; i++) { // search each sub
      for (int i = 0; i &lt; subSearchers.length; i++) { // search each sub
         runner.submit(
                      new MultiSearcherCallableNoSort(lock, subSearchers[i], weight, filter, nDocs, hq, docStarts[i]));
                      new MultiSearcherCallableNoSort(lock, subSearchers[i], weight, filter, nDocs, hq, leafContexts[i].docBase));
       }
 
       int totalHits = 0;
@@ -438,9 +429,9 @@ public class IndexSearcher {
       final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);
       final Lock lock = new ReentrantLock();
       final ExecutionHelper&lt;TopFieldDocs&gt; runner = new ExecutionHelper&lt;TopFieldDocs&gt;(executor);
      for (int i = 0; i &lt; subReaders.length; i++) { // search each sub
      for (int i = 0; i &lt; subSearchers.length; i++) { // search each sub
         runner.submit(
                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, docStarts[i]));
                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, leafContexts[i].docBase));
       }
       int totalHits = 0;
       float maxScore = Float.NEGATIVE_INFINITY;
@@ -484,27 +475,27 @@ public class IndexSearcher {
 
     // always use single thread:
     if (filter == null) {
      for (int i = 0; i &lt; subReaders.length; i++) { // search each subreader
        collector.setNextReader(subReaders[i], docStarts[i]);
        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);
      for (int i = 0; i &lt; leafContexts.length; i++) { // search each subreader
        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);
        Scorer scorer = weight.scorer(leafContexts[i], !collector.acceptsDocsOutOfOrder(), true);
         if (scorer != null) {
           scorer.score(collector);
         }
       }
     } else {
      for (int i = 0; i &lt; subReaders.length; i++) { // search each subreader
        collector.setNextReader(subReaders[i], docStarts[i]);
        searchWithFilter(subReaders[i], weight, filter, collector);
      for (int i = 0; i &lt; leafContexts.length; i++) { // search each subreader
        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);
        searchWithFilter(leafContexts[i], weight, filter, collector);
       }
     }
   }
 
  private void searchWithFilter(IndexReader reader, Weight weight,
  private void searchWithFilter(ReaderContext context, Weight weight,
       final Filter filter, final Collector collector) throws IOException {
 
     assert filter != null;
     
    Scorer scorer = weight.scorer(reader, true, false);
    Scorer scorer = weight.scorer(context, true, false);
     if (scorer == null) {
       return;
     }
@@ -513,7 +504,7 @@ public class IndexSearcher {
     assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;
 
     // CHECKME: use ConjunctionScorer here?
    DocIdSet filterDocIdSet = filter.getDocIdSet(reader);
    DocIdSet filterDocIdSet = filter.getDocIdSet(context);
     if (filterDocIdSet == null) {
       // this means the filter does not accept any documents.
       return;
@@ -581,10 +572,10 @@ public class IndexSearcher {
    * @throws BooleanQuery.TooManyClauses
    */</comment>
   <function><type><specifier>protected</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>Weight</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>subIndex</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>docStarts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>deBasedDoc</name> <init>= <expr><name>doc</name> <operator>-</operator> <name><name>docStarts</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>ReaderUtil</name><operator>.</operator><name>subIndex</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>leafContexts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>deBasedDoc</name> <init>= <expr><name>doc</name> <operator>-</operator> <name><name>leafContexts</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>docBase</name></expr></init></decl>;</decl_stmt>
     
    <return>return <expr><call><name><name>weight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>deBasedDoc</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name><name>weight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name><name>leafContexts</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>deBasedDoc</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fieldSortDoTrackScores</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">615</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">606</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexSearcher</name> <block>{
     <return>return <expr><call><name><name>query</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Returns this searchers the top-level {@link ReaderContext}.
   * @see IndexReader#getTopReaderContext()
   */</comment>
  <comment type="block">/* Sugar for .getIndexReader().getTopReaderContext() */</comment>
  <function><type><specifier>public</specifier> <name>ReaderContext</name></type> <name>getTopReaderContext</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>readerContext</name></expr>;</return>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
    * A thread subclass for searching a single searchable 
diff --git a/lucene/src/java/org/apache/lucene/search/MatchAllDocsQuery.java b/lucene/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
index eb4fcc1ae0d..38625194474 100644
-- a/lucene/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
++ b/lucene/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */</comment>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">126</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>MatchAllDocsQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>MatchAllScorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>this</name></expr></argument>,
          <argument><expr><name>normsField</name> <operator>!=</operator> <literal type="null">null</literal> <operator>?</operator> <call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>normsField</name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>MatchAllScorer</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>this</name></expr></argument>,
          <argument><expr><ternary><condition><expr><name>normsField</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>normsField</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <comment type="line">// explain query weight</comment>
       <decl_stmt><decl><type><name>Explanation</name></type> <name>queryExpl</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name>
         <argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MatchAllDocsQuery, product of:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2eb23cd7bfd</literal><operator>..</operator><literal type="number">42b2086ea3c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>termArrays</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>                  <comment type="line">// optimize zero-term case</comment>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       
       <decl_stmt><decl><type><name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[]</index></name></type> <name>postingsFreqs</name> <init>= <expr><operator>new</operator> <name><name>PhraseQuery</name><operator>.</operator><name>PostingsAndFreq</name><index>[<expr><call><name><name>termArrays</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">220</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
 
       <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>ExactPhraseScorer</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                                    <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>noDocs</name></name></expr>)</condition> <block>{<block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">232</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">233</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call>
    <specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call>
       <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><name>ComplexExplanation</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>ComplexExplanation</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"weight("</literal><operator>+</operator><call><name>getQuery</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator><literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">263</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">264</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"fieldWeight("</literal><operator>+</operator><call><name>getQuery</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator>
                                <literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;
 
      <name>Scorer</name> <name>scorer</name> <operator>=</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no matching docs"</literal></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">283</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">284</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiPhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>idfExpl</name></expr></argument>)</argument_list></call></expr>;
 
       <name>Explanation</name> <name>fieldNormExpl</name> <operator>=</operator> <operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>float</name></type> <name>fieldNorm</name> <init>=
         <expr><ternary><condition><expr><name>fieldNorms</name><operator>!=</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>similarity</name><operator>.</operator><name>decodeNormValue</name></name><argument_list>(<argument><expr><name><name>fieldNorms</name><index>[<expr><name>doc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>fieldNormExpl</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>fieldNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiTermQueryWrapperFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiTermQueryWrapperFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">21b271a550b</literal><operator>..</operator><literal type="number">6d591c8a984</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiTermQueryWrapperFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>MultiTermQueryWrapperFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Fields</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Terms</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsEnum</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>MultiTermQueryWrapperFilter</name><argument_list type="generic">&lt;<argument><name>Q</name> <extends>extends <name>MultiTermQuery</name></extends></argument>&gt;</argument_list></name> extends <name>Filte</name>
    <operator>*</operator> <name><name>results</name><operator>.</operator></name>
    *<operator>/</operator>
   @<name>Override</name>
  <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>final</name> <name>IndexReader</name> <name>reader</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>reader</name></name></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>Fields</name></type> <name>fields</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>fields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">// reader has no fields</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>MultiTermQueryWrapperFilter</name><argument_list type="generic">&lt;<argument><name>Q</name> <extends>extends <name>MultiTermQuery</name></extends></argument>&gt;</argument_list></name> extends <name>Filte</name></expr></expr_stmt>
     <assert>assert <expr><name>termsEnum</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
     <if_stmt><if>if <condition>(<expr><call><name><name>termsEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <comment type="line">// fill into a OpenBitSet</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>OpenBitSet</name></type> <name>bitSet</name> <init>= <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>OpenBitSet</name></type> <name>bitSet</name> <init>= <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>termCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>DocsEnum</name></type> <name>docsEnum</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c5c287b84a8</name><operator>..</operator><literal type="number">7142461ef25</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>PhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			  <comment type="line">// optimize zero-term case</comment>
         <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>reader</name> <init>= <expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name>PostingsAndFreq</name><index>[]</index></name></type> <name>postingsFreqs</name> <init>= <expr><operator>new</operator> <name><name>PostingsAndFreq</name><index>[<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
 
       <if_stmt><if>if <condition>(<expr><name>slop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>				  <comment type="line">// optimize exact case</comment>
         <decl_stmt><decl><type><name>ExactPhraseScorer</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>ExactPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>,
                                                    <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>noDocs</name></name></expr>)</condition> <block>{<block_content>
           <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">216</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
         <return>return
           <expr><operator>new</operator> <call><name>SloppyPhraseScorer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>postingsFreqs</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>slop</name></expr></argument>,
                                 <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
              <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>
       </block_content>}</block></else></if_stmt>
     </block_content>}</block></for>
 
     <decl_stmt><decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list>
    public <name>Explanation</name> <name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list>
       <throws>throws <argument><expr><name>IOException</name> <block>{
 
       <expr><name>Explanation</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">267</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">268</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"fieldWeight("</literal><operator>+</operator><name>field</name><operator>+</operator><literal type="string">":"</literal><operator>+</operator><name>query</name><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator>
                                <literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;
 
      <name>Scorer</name> <name>scorer</name> <operator>=</operator> <call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no matching docs"</literal></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PhraseQuery</name> extends <name>Query</name> <block>{
       <expr><call><name><name>fieldExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>idfExpl</name></expr></argument>)</argument_list></call></expr>;
 
       <name>Explanation</name> <name>fieldNormExpl</name> <operator>=</operator> <operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>float</name></type> <name>fieldNorm</name> <init>=
         <expr><ternary><condition><expr><name>fieldNorms</name><operator>!=</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>similarity</name><operator>.</operator><name>decodeNormValue</name></name><argument_list>(<argument><expr><name><name>fieldNorms</name><index>[<expr><name>doc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>fieldNormExpl</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>fieldNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryWrapperFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryWrapperFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3aa6d4d2245</literal><operator>..</operator><name>a2c2c29eaa1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryWrapperFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryWrapperFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>


<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <comment type="block" format="javadoc">/** 
  * Constrains search results to only match those which also match a provided
@@ -48,12 +46,14 @@ public class QueryWrapperFilter extends Filter {
   }
 
   @Override
  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {
    final Weight weight = query.weight(new IndexSearcher(reader));
  public DocIdSet getDocIdSet(final ReaderContext context) throws IOException {
    // get a private context that is used to rewrite, createWeight and score eventually
    final ReaderContext privateContext = context.reader.getTopReaderContext();
    final Weight weight = query.weight(new IndexSearcher(privateContext));
     return new DocIdSet() {
       @Override
       public DocIdSetIterator iterator() throws IOException {
        return weight.scorer(reader, true, false);
        return weight.scorer(privateContext, true, false);
       }
       @Override
       public boolean isCacheable() { return false; }
diff --git a/lucene/src/java/org/apache/lucene/search/SpanQueryFilter.java b/lucene/src/java/org/apache/lucene/search/SpanQueryFilter.java
index 4c8265155ea..68649be097a 100644
-- a/lucene/src/java/org/apache/lucene/search/SpanQueryFilter.java
++ b/lucene/src/java/org/apache/lucene/search/SpanQueryFilter.java
@@ -17,6 +17,7 @@ package org.apache.lucene.search;
 
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.Spans;
 import org.apache.lucene.util.OpenBitSet;
@@ -52,8 +53,8 @@ public class SpanQueryFilter extends SpanFilter {
   }
 
   @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
    SpanFilterResult result = bitSpans(reader);
  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
    SpanFilterResult result = bitSpans(context.reader);
     return result.getDocIdSet();
   }
 
diff --git a/lucene/src/java/org/apache/lucene/search/TermQuery.java b/lucene/src/java/org/apache/lucene/search/TermQuery.java
index 6eb34c6eab9..bf8346cfb50 100644
-- a/lucene/src/java/org/apache/lucene/search/TermQuery.java
++ b/lucene/src/java/org/apache/lucene/search/TermQuery.java
@@ -21,8 +21,10 @@ import java.io.IOException;
 import java.util.Set;
 
 import org.apache.lucene.index.DocsEnum;
import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.AtomicReaderContext;
import org.apache.lucene.index.IndexReader.ReaderContext;
import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Explanation.IDFExplanation;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -75,7 +77,8 @@ public class TermQuery extends Query {
     }
 
     @Override
    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {
    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {
      final IndexReader reader = context.reader;
       DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(),
                                           term.field(),
                                           term.bytes());
@@ -88,8 +91,9 @@ public class TermQuery extends Query {
     }
 
     @Override
    public Explanation explain(IndexReader reader, int doc)
    public Explanation explain(ReaderContext context, int doc)
       throws IOException {
      final IndexReader reader = context.reader;
 
       ComplexExplanation result = new ComplexExplanation();
       result.setDescription("weight("+getQuery()+" in "+doc+"), product of:");
diff --git a/lucene/src/java/org/apache/lucene/search/Weight.java b/lucene/src/java/org/apache/lucene/search/Weight.java
index 1da8f5ef436..016904eb833 100644
-- a/lucene/src/java/org/apache/lucene/search/Weight.java
++ b/lucene/src/java/org/apache/lucene/search/Weight.java
@@ -21,16 +21,26 @@ import java.io.IOException;
 import java.io.Serializable;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.AtomicReaderContext;
import org.apache.lucene.index.IndexReader.ReaderContext;
 
 /**
  * Expert: Calculate query weights and build query scorers.
  * &lt;p&gt;
 * The purpose of {@link Weight} is to ensure searching does not
 * modify a {@link Query}, so that a {@link Query} instance can be reused. &lt;br&gt;
 * The purpose of {@link Weight} is to ensure searching does not modify a
 * {@link Query}, so that a {@link Query} instance can be reused. &lt;br&gt;
  * {@link IndexSearcher} dependent state of the query should reside in the
  * {@link Weight}. &lt;br&gt;
  * {@link IndexReader} dependent state should reside in the {@link Scorer}.
  * &lt;p&gt;
 * Since {@link Weight} creates {@link Scorer} instances for a given
 * {@link ReaderContext} ({@link #scorer(ReaderContext, boolean, boolean)})
 * callers must maintain the relationship between the searcher's top-level
 * {@link ReaderContext} and the context used to create a {@link Scorer}. A
 * {@link ReaderContext} used to create a {@link Scorer} should be a leaf
 * context ({@link AtomicReaderContext}) of the searcher's top-level context,
 * otherwise the scorer's state will be undefined. 
 * &lt;p&gt;
  * A &lt;code&gt;Weight&lt;/code&gt; is used in the following way:
  * &lt;ol&gt;
  * &lt;li&gt;A &lt;code&gt;Weight&lt;/code&gt; is constructed by a top-level query, given a
@@ -41,9 +51,11 @@ import org.apache.lucene.index.IndexReader;
  * query.
  * &lt;li&gt;The query normalization factor is passed to {@link #normalize(float)}. At
  * this point the weighting is complete.
 * &lt;li&gt;A &lt;code&gt;Scorer&lt;/code&gt; is constructed by {@link #scorer(IndexReader,boolean,boolean)}.
 * &lt;li&gt;A &lt;code&gt;Scorer&lt;/code&gt; is constructed by
 * {@link #scorer(ReaderContext,boolean,boolean)}.
  * &lt;/ol&gt;
  * 
 * 
  * @since 2.9
  */</comment>
 <class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Weight</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>Weight</name> implements <name>Serializable</name> <block>{
   <comment type="block" format="javadoc">/**
    * An explanation of the score computation for the named document.
    * 
   * @param reader sub-reader containing the give doc
   * @param doc
   * @param context the readers context to create the {@link Explanation} for.
   * @param doc the document's id relative to the given context's reader
    * @return an Explanation for the score
   * @throws IOException
   * @throws IOException if an {@link IOException} occurs
    */</comment>
  <expr><specifier>public</specifier> <specifier>abstract</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
  <specifier>public</specifier> <specifier>abstract</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></block></expr>;</expr_stmt>
 
   <comment type="block" format="javadoc">/** The query that this concerns. */</comment>
   <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Query</name></type> <name>getQuery</name><parameter_list>()</parameter_list>;</function_decl>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>Weight</name> implements <name>Serializable</name> <block>{
    <expr><operator>*</operator> <name>in</name><operator>-</operator><name><name>order</name><operator>.</operator></name>&lt;<name>br</name><operator>&gt;</operator>
    <operator>*</operator> <operator>&lt;</operator><name>b</name><operator>&gt;</operator><name>NOTE</name><operator>:</operator><operator>&lt;</operator><operator>/</operator><name>b</name><operator>&gt;</operator> <literal type="null">null</literal> <name>can</name> <name>be</name> <name>returned</name></expr> <if_stmt><if>if no documents will be scored by this
    * query.
   * &lt;b&gt;NOTE: Calling this method with a <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>ReaderContext</name></expr></block_content>}</block></if></if_stmt> <name>that</name> <name>is</name> <name>not</name> <name>a</name>
   <operator>*</operator> <name>leaf</name> <call><name>context</name> <argument_list>(<argument><expr><block>{@<expr><name>link</name> <name>AtomicReaderContext</name></expr>}</block></expr></argument>)</argument_list></call> <name>of</name> <name>the</name> <name>searcher</name><literal type="char">'s top-level context 
   * used to create this {@link Weight} instance can cause undefined behavior.
    * 
   * @param reader
   *          the {@link IndexReader} for which to return the {@link Scorer}.
   * @param context
   *          the {@link ReaderContext} for which to return the {@link Scorer}.
    * @param scoreDocsInOrder
    *          specifies whether in-order scoring of documents is required. Note
    *          that if set to false (i.e., out-of-order scoring is required),
@@ -96,7 +111,8 @@ public abstract class Weight implements Serializable {
    * @return a {@link Scorer} which scores documents in/out-of order.
    * @throws IOException
    */
  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,
  // TODO make this context an AtomicContext if possible
  public abstract Scorer scorer(ReaderContext context, boolean scoreDocsInOrder,
       boolean topScorer) throws IOException;
   
   /** The sum of squared weights of contained query clauses. */
@@ -106,7 +122,7 @@ public abstract class Weight implements Serializable {
    * Returns true iff this implementation scores docs only out of order. This
    * method is used in conjunction with {@link Collector}'</literal><name>s</name>
    <operator>*</operator> <block>{@<expr><name>link</name> <name>Collector</name><operator>#</operator><call><name>acceptsDocsOutOfOrder</name><argument_list>()</argument_list></call> <name>acceptsDocsOutOfOrder</name></expr>}</block></block> <name>and</name>
   <operator>*</operator> <block>{@<expr><name>link</name> <operator>#</operator><call><name>scorer</name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>)</argument_list></call></expr>}</block> <name>to</name>
   <operator>*</operator> <block>{@<expr><name>link</name> <operator>#</operator><call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>)</argument_list></call></expr>}</block> <name>to</name>
    <operator>*</operator> <name>create</name> <name>a</name> <name>matching</name> <block>{@<expr><name>link</name> <name>Scorer</name></expr>}</block> <name>instance</name></expr></expr_stmt> <for>for a given <block>{<block_content><annotation>@<name>link</name></annotation> <expr><name>Collector</name></expr></block_content>}</block></for><operator>,</operator> <expr_stmt><expr><name>or</name>
    <operator>*</operator> <name>vice</name> <name><name>versa</name><operator>.</operator></name>
    * <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e1e39f3fd21</name><operator>..</operator><name>ecea73df689</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>CustomScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>ComplexExplanation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Explanation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">239</literal></expr><operator>,</operator><expr><literal type="number">40</literal> <operator>+</operator><literal type="number">240</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <name>class</name> <name>CustomScoreQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
       <comment type="line">// Pass true for "scoresDocsInOrder", because we</comment>
       <comment type="line">// require in-order scoring, even if caller does not,</comment>
       <comment type="line">// since we call advance on the valSrcScorers.  Pass</comment>
       <comment type="line">// false for "topScorer" because we will not invoke</comment>
       <comment type="line">// score(Collector) on these scorers:</comment>
      <expr><name>Scorer</name> <name>subQueryScorer</name> <operator>=</operator> <call><name><name>subQueryWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>subQueryScorer</name> <init>= <expr><call><name><name>subQueryWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>subQueryScorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       </block_content>}</block></if></if_stmt>
       <decl_stmt><decl><type><name><name>Scorer</name><index>[]</index></name></type> <name>valSrcScorers</name> <init>= <expr><operator>new</operator> <name><name>Scorer</name><index>[<expr><name><name>valSrcWeights</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>valSrcScorers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <expr_stmt><expr><name><name>valSrcScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>valSrcWeights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>topScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>valSrcScorers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>valSrcWeights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>topScorer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
      <return>return <expr><operator>new</operator> <call><name>CustomScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>subQueryScorer</name></expr></argument>, <argument><expr><name>valSrcScorers</name></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><operator>new</operator> <call><name>CustomScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>subQueryScorer</name></expr></argument>, <argument><expr><name>valSrcScorers</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></class>
 
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>explain</name> <init>= <expr><call><name>doExplain</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>explain</name> <init>= <expr><call><name>doExplain</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <return>return <expr><ternary><condition><expr><name>explain</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Explanation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="string">"no matching docs"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>explain</name></expr></else></ternary></expr>;</return>
     </block_content>}</block></function>
     
    <function><type><specifier>private</specifier> <name>Explanation</name></type> <name>doExplain</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>subQueryExpl</name> <init>= <expr><call><name><name>subQueryWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>private</specifier> <name>Explanation</name></type> <name>doExplain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>subQueryExpl</name> <init>= <expr><call><name><name>subQueryWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subQueryExpl</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>subQueryExpl</name></expr>;</return>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// match</comment>
       <decl_stmt><decl><type><name><name>Explanation</name><index>[]</index></name></type> <name>valSrcExpls</name> <init>= <expr><operator>new</operator> <name><name>Explanation</name><index>[<expr><name><name>valSrcWeights</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>valSrcWeights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>valSrcExpls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>valSrcWeights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>valSrcExpls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>valSrcWeights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>customExp</name> <init>= <expr><call><name><name>CustomScoreQuery</name><operator>.</operator><name>this</name><operator>.</operator><name>getCustomScoreProvider</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>customExplain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>,<argument><expr><name>subQueryExpl</name></expr></argument>,<argument><expr><name>valSrcExpls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>customExp</name> <init>= <expr><call><name><name>CustomScoreQuery</name><operator>.</operator><name>this</name><operator>.</operator><name>getCustomScoreProvider</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>customExplain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>,<argument><expr><name>subQueryExpl</name></expr></argument>,<argument><expr><name>valSrcExpls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>customExp</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Explanation</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>(
         <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name><name>CustomScoreQuery</name><operator>.</operator><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", product of:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bf7a0216dcc</name><operator>..</operator><literal type="number">25af66e85d9</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>ValueSourceQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>ValueSourceQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>ValueSourceScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>ValueSourceScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block">/*(non-Javadoc) @see org.apache.lucene.search.Weight#explain(org.apache.lucene.index.IndexReader, int) */</comment>
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>DocValues</name></type> <name>vals</name> <init>= <expr><call><name><name>valSrc</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>DocValues</name></type> <name>vals</name> <init>= <expr><call><name><name>valSrc</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><name>queryWeight</name> <operator>*</operator> <call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <decl_stmt><decl><type><name>Explanation</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>(
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadNearQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadNearQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">37bb6c7d32c</literal><operator>..</operator><literal type="number">1bb3b7a5f95</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadNearQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadNearQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument></argument_list></call></expr></init></decl></decl_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>payloads</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Explanation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>PayloadNearQuery</name> extends <name>SpanNearQuery</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
    <argument><expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
         <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>PayloadNearSpanScorer</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>,
          <argument><expr><name>similarity</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><operator>new</operator> <call><name>PayloadNearSpanScorer</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>,
          <argument><expr><name>similarity</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
   </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadTermQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadTermQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1d251447132</literal><operator>..</operator><literal type="number">4aa29583473</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadTermQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadTermQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>payloads</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>DocsAndPositionsEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Scorer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Weight</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>PayloadTermQuery</name> extends <name>SpanTermQuery</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
    <argument><expr><specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>,
         <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>PayloadTermSpanScorer</name><argument_list>(<argument><expr><operator>(</operator><name>TermSpans</name><operator>)</operator> <call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>this</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><operator>new</operator> <call><name>PayloadTermSpanScorer</name><argument_list>(<argument><expr><operator>(</operator><name>TermSpans</name><operator>)</operator> <call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>this</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <class><specifier>protected</specifier> class <name>PayloadTermSpanScorer</name> <super_list><extends>extends <super><name>SpanScorer</name></super></extends></super_list> <block>{
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>SpanWeight</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>SpanWeight</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">37451fecb2d</literal><operator>..</operator><literal type="number">6142ad42453</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>SpanWeight</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>SpanWeight</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>spans</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Explanation</name><operator>.</operator><name>IDFExplanation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>SpanWeight</name> extends <name>Weight</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>SpanScorer</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>reader</name>
  <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></argument></argument_list></call></expr></return>
    <return>return <expr><operator>new</operator> <call><name>SpanScorer</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name>
         <operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></class>
 
   <decl_stmt><decl><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list>
  public <name>Explanation</name> <name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list>
     <throws>throws <argument><expr><name>IOException</name> <block>{
 
     <expr><name>ComplexExplanation</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>ComplexExplanation</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>SpanWeight</name> extends <name>Weight</name> <block>{
     <expr><call><name><name>fieldExpl</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"fieldWeight("</literal><operator>+</operator><name>field</name><operator>+</operator><literal type="string">":"</literal><operator>+</operator><call><name><name>query</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call><operator>+</operator>
                              <literal type="string">" in "</literal><operator>+</operator><name>doc</name><operator>+</operator><literal type="string">"), product of:"</literal></expr></argument>)</argument_list></call></expr>;
 
    <name>Explanation</name> <name>tfExpl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SpanScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Explanation</name></type> <name>tfExpl</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SpanScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>fieldExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>tfExpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>fieldExpl</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>idfExpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Explanation</name></type> <name>fieldNormExpl</name> <init>= <expr><operator>new</operator> <call><name>Explanation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldNorms</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>norms</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>float</name></type> <name>fieldNorm</name> <init>=
       <expr><ternary><condition><expr><name>fieldNorms</name><operator>!=</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>similarity</name><operator>.</operator><name>decodeNormValue</name></name><argument_list>(<argument><expr><name><name>fieldNorms</name><index>[<expr><name>doc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>fieldNormExpl</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>fieldNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ReaderUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ReaderUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">430fc9bf38e</literal><operator>..</operator><name>bc03c9a9376</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ReaderUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ReaderUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>CompositeReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Common util methods for dealing with {@link IndexReader}s.
@@ -148,6 +152,67 @@ public final class ReaderUtil {
         .toArray(new IndexReader[subReadersList.size()]);
     return subReaders[subIndex];
   }
  
  public static ReaderContext buildReaderContext(IndexReader reader) {
    return new ReaderContextBuilder(reader).build();
  }
  
  public static class ReaderContextBuilder {
    private final IndexReader reader;
    private final AtomicReaderContext[] leaves;
    private int leafOrd = 0;
    private int leafDocBase = 0;
    public ReaderContextBuilder(IndexReader reader) {
      this.reader = reader;
      leaves = new AtomicReaderContext[numLeaves(reader)];
    }
    
    public ReaderContext build() {
      return build(null, reader, 0, 0);
    }
    
    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {
      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();
      if (sequentialSubReaders == null) {
        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);
        leaves[leafOrd++] = atomic;
        leafDocBase += reader.maxDoc();
        return atomic;
      } else {
        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];
        final CompositeReaderContext newParent;
        if (parent == null) {
          newParent = new CompositeReaderContext(reader, children, leaves);
        } else {
          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);
        }
        
        int newDocBase = 0;
        for (int i = 0; i &lt; sequentialSubReaders.length; i++) {
          build(newParent, sequentialSubReaders[i], i, newDocBase);
          newDocBase += sequentialSubReaders[i].maxDoc();
        }
        return newParent;
      }
    }
    
    private int numLeaves(IndexReader reader) {
      final AtomicInteger numLeaves = new AtomicInteger();
      try {
        new Gather(reader) {
          @Override
          protected void add(int base, IndexReader r) {
            numLeaves.incrementAndGet();
          }
        }.run();
      } catch (IOException ioe) {
        // won't happen
        throw new RuntimeException(ioe);
      }
      return numLeaves.get();
    }
    
  }
 
 
   /**
@@ -175,4 +240,30 @@ public final class ReaderUtil {
     }
     return hi;
   }
  
  /**
   * Returns index of the searcher/reader for document &lt;code&gt;n&lt;/code&gt; in the
   * array used to construct this searcher/reader.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>subIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="line">// find</comment>
    <comment type="line">// searcher/reader for doc n:</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>leaves</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// search starts array</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// for first element less than n, return its index</comment>
    <while>while <condition>(<expr><name>hi</name> <operator>&gt;=</operator> <name>lo</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>midValue</name> <init>= <expr><name><name>leaves</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>docBase</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>midValue</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>midValue</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content> <comment type="line">// found a match</comment>
        <while>while <condition>(<expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name><name>leaves</name><index>[<expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>docBase</name> <operator>==</operator> <name>midValue</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>mid</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// scan to last match</comment>
        </block_content>}</block></while>
        <return>return <expr><name>mid</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>hi</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilterHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilterHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">80df5720f0f</literal><operator>..</operator><literal type="number">5acd441b18d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilterHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>CachingWrapperFilterHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A unit test helper class to test when the filter is getting cached and when it is not.
@@ -41,10 +42,10 @@ public class CachingWrapperFilterHelper extends CachingWrapperFilter {
   }
   
   @Override
  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {
  public synchronized DocIdSet getDocIdSet(ReaderContext context) throws IOException {
 
     final int saveMissCount = missCount;
    DocIdSet docIdSet = super.getDocIdSet(reader);
    DocIdSet docIdSet = super.getDocIdSet(context);
 
     if (shouldHaveCache) {
       Assert.assertEquals("Cache should have data ", saveMissCount, missCount);
diff --git a/lucene/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/src/test/org/apache/lucene/search/JustCompileSearch.java
index daa24c91658..25c43b69921 100644
-- a/lucene/src/test/org/apache/lucene/search/JustCompileSearch.java
++ b/lucene/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -20,6 +20,7 @@ package org.apache.lucene.search;
 import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.PriorityQueue;
 
@@ -152,7 +153,7 @@ final class JustCompileSearch {
     // still added here in case someone will add abstract methods in the future.
     
     @Override
    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
    public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
       return null;
     }
   }
@@ -281,7 +282,7 @@ final class JustCompileSearch {
     }
     
     @Override
    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
    public DocIdSet getDocIdSet(ReaderContext context) throws IOException {
       return null;
     }    
   }
@@ -333,7 +334,7 @@ final class JustCompileSearch {
   static final class JustCompileWeight extends Weight {
 
     @Override
    public Explanation explain(IndexReader reader, int doc) throws IOException {
    public Explanation explain(ReaderContext context, int doc) throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
@@ -358,7 +359,7 @@ final class JustCompileSearch {
     }
 
     @Override
    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)
    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder, boolean topScorer)
         throws IOException {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
diff --git a/lucene/src/test/org/apache/lucene/search/MockFilter.java b/lucene/src/test/org/apache/lucene/search/MockFilter.java
index 36b4247fa91..1ac9207e9ef 100644
-- a/lucene/src/test/org/apache/lucene/search/MockFilter.java
++ b/lucene/src/test/org/apache/lucene/search/MockFilter.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */</comment>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>DocIdBitSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MockFilter</name> extends <name>Filter</name> <block>{
   <expr><specifier>private</specifier> <name>boolean</name> <name>wasCalled</name></expr>;
 
   @<name>Override</name>
  <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>wasCalled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</block></expr>
     <return>return <expr><operator>new</operator> <call><name>DocIdBitSet</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c2c8b17fc52</name><operator>..</operator><name>fd52b748a74</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>QueryUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">12</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">12</literal><operator>,</operator><literal type="number">8</literal> @@</block></expr></expr_stmt> <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryUtils</name> <block>{
       <throw>throw <argument_list>e2</argument_list></throw>;
     }</block></expr></expr_stmt>
   </block_content>}</block></function>

  
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>getLeaves</name><parameter_list>(<parameter><decl><type><name>IndexSearcher</name></type> <name>searcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ReaderContext</name></type> <name>topLevelReaderContext</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>topLevelReaderContext</name><operator>.</operator><name>isAtomic</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <name><name>AtomicReaderContext</name><index>[]</index></name> <block>{<expr><operator>(</operator><name>AtomicReaderContext</name><operator>)</operator> <name>topLevelReaderContext</name></expr>}</block></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name><name>topLevelReaderContext</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** alternate scorer skipTo(),skipTo(),next(),next(),skipTo(),skipTo(), etc
    * and ensure a hitcollector receives same docs and scores
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkSkipTo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Query</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>IndexSearcher</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">//System.out.println("Checking "+q);</comment>
    
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>context</name> <init>= <expr><call><name>getLeaves</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>scoresDocsOutOfOrder</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>  <comment type="line">// in this case order of skipTo() might differ from that of next().</comment>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>skip_op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">257</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryUtils</name> <block>{
 
         <expr><call><name><name>s</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Collector</name></super><argument_list>()</argument_list> <block>{
           <decl_stmt><decl><type><specifier>private</specifier> <name>Scorer</name></type> <name>sc</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>private</specifier> <name>IndexReader</name></type> <name>reader</name></decl>;</decl_stmt>
           <decl_stmt><decl><type><specifier>private</specifier> <name>Scorer</name></type> <name>scorer</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>leafPtr</name></decl>;</decl_stmt>
 
           <function><annotation>@<name>Override</name></annotation>
           <type><specifier>public</specifier> <name>void</name></type> <name>setScorer</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">262</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">272</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
             <try>try <block>{<block_content>
               <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>scorer</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>scorer</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name><name>context</name><index>[<expr><name>leafPtr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt/>}</block_content>
               
               int op = order[(opidx[0]++</block></if></if_stmt>)</block_content> % order.length]</block><empty_stmt>;</empty_stmt></try>
@@ <operator>-</operator><literal type="number">305</literal><operator>,</operator><literal type="number">14</literal> <operator>+</operator><literal type="number">315</literal><operator>,</operator><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
             <comment type="line">// previous reader, hits NO_MORE_DOCS</comment>
             <if_stmt><if>if <condition>(<expr><name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>previousReader</name> <init>= <expr><name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>indexSearcher</name> <init>= <expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>boolean</name></type> <name>more</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><literal type="string">"query's last doc was "</literal><operator>+</operator> <name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><operator>(</operator><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">") got to "</literal><operator>+</operator><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt/>}</block_content>
              leafPtr++</block><empty_stmt>;</empty_stmt></if></if_stmt>
             <expr_stmt/>}</block_content>
            this.reader = lastReader[0] = reader</block><empty_stmt>;</empty_stmt></if></if_stmt>
            <name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>reader</name></block></block></expr>;</expr_stmt>
            <assert>assert <expr><name><name>context</name><index>[<expr><name>leafPtr</name></expr>]</index></name><operator>.</operator><name>reader</name> <operator>==</operator> <name>reader</name></expr>;</assert>
             <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scorer</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
           <expr_stmt/>}</block_content>
@@ -327</block><operator>,</operator>8 +340<operator>,</operator>9 @@ public class QueryUtils <block>{<block_content>
           <comment type="line">// confirm that skipping beyond the last doc, on the</comment>
           <comment type="line">// previous reader, hits NO_MORE_DOCS</comment>
           <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>previousReader</name> <init>= <expr><name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>indexSearcher</name> <init>= <expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>previousReader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name>boolean</name></type> <name>more</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><literal type="string">"query's last doc was "</literal><operator>+</operator> <name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><operator>(</operator><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">") got to "</literal><operator>+</operator><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
     <expr><name>final</name> <name>float</name> <name>maxDiff</name> <operator>=</operator> <literal type="number">1e-3f</literal></expr>;
     <name>final</name> <name>int</name> <name><name>lastDoc</name><index>[]</index></name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name><name>lastReader</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="null">null</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ReaderContext</name><index>[]</index></name></type> <name>context</name> <init>= <expr><call><name>getLeaves</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><operator>new</operator> <class><super><name>Collector</name></super><argument_list>()</argument_list> <block>{
       <decl_stmt><decl><type><specifier>private</specifier> <name>Scorer</name></type> <name>scorer</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name>IndexReader</name></type> <name>reader</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>leafPtr</name></decl>;</decl_stmt>
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>setScorer</name><parameter_list>(<parameter><decl><type><name>Scorer</name></type> <name>scorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scorer</name></name> <operator>=</operator> <name>scorer</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">358</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">372</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
           <expr><name>long</name> <name>startMS</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>doc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name><name>context</name><index>[<expr><name>leafPtr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"query collected "</literal><operator>+</operator><name>doc</name><operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><name>i</name><operator>+</operator><literal type="string">") says no more docs!"</literal></expr></argument>,<argument><expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"query collected "</literal><operator>+</operator><name>doc</name><operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><name>i</name><operator>+</operator><literal type="string">") got to "</literal><operator>+</operator><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>doc</name></expr></argument>,<argument><expr><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <decl_stmt><decl><type><name>float</name></type> <name>skipToScore</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">397</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
         <comment type="line">// previous reader, hits NO_MORE_DOCS</comment>
         <if_stmt><if>if <condition>(<expr><name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><specifier>final</specifier> <name>IndexReader</name></type> <name>previousReader</name> <init>= <expr><name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>indexSearcher</name> <init>= <expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name>boolean</name></type> <name>more</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><literal type="string">"query's last doc was "</literal><operator>+</operator> <name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><operator>(</operator><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">") got to "</literal><operator>+</operator><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt/>}</block_content>
          leafPtr++</block><empty_stmt>;</empty_stmt></if></if_stmt>
         <expr_stmt/>}</block_content>
 
        this.reader = lastReader[0] = reader</block><empty_stmt>;</empty_stmt></if></if_stmt>
        <name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>reader</name></block></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
       @Override
@@ -404</block><operator>,</operator><expr_stmt><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> class <name>QueryUtils</name> <block>{
       <comment type="line">// confirm that skipping beyond the last doc, on the</comment>
       <comment type="line">// previous reader, hits NO_MORE_DOCS</comment>
       <expr><name>final</name> <name>IndexReader</name> <name>previousReader</name> <operator>=</operator> <name><name>lastReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;
      <name>Weight</name> <name>w</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></for>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IndexSearcher</name></type> <name>indexSearcher</name> <init>= <expr><operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>previousReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Weight</name></type> <name>w</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>scorer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>scorer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>boolean</name></type> <name>more</name> <init>= <expr><call><name><name>scorer</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><literal type="string">"query's last doc was "</literal><operator>+</operator> <name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator><literal type="string">" but skipTo("</literal><operator>+</operator><operator>(</operator><name><name>lastDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">") got to "</literal><operator>+</operator><call><name><name>scorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SingleDocTestFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SingleDocTestFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bd1df4e3ee0</name><operator>..</operator><literal type="number">2625cda5b67</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SingleDocTestFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SingleDocTestFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
  <expr_stmt><expr><operator>*</operator> <name>limitations</name> <name>under</name> <name>the</name> <name><name>License</name><operator>.</operator></name>
  *<operator>/</operator></expr></expr_stmt>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>DocIdBitSet</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>SingleDocTestFilter</name> extends <name>Filter</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>BitSet</name> <name>bits</name> <operator>=</operator> <operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
  <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BitSet</name></type> <name>bits</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>bits</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><operator>new</operator> <call><name>DocIdBitSet</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
diff --git a/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java b/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
index f56e440b0cd..a38fe553a26 100644
-- a/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
++ b/lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
@@ -23</block><operator>,</operator>6 +23<operator>,</operator>8 @@ import org.apache.lucene.analysis.MockAnalyzer;</function>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SerialMergeScheduler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SlowMultiReaderWrapper</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> class <name>TestCachingWrapperFilter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
 
     <name>IndexReader</name> <name>reader</name> <operator>=</operator> <call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ReaderContext</name></type> <name>context</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>MockFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>MockFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>CachingWrapperFilter</name></type> <name>cacher</name> <init>= <expr><operator>new</operator> <call><name>CachingWrapperFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// first time, nested filter is called</comment>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"first time"</literal></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>wasCalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// make sure no exception if cache is holding the wrong docIdSet</comment>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// second time, nested filter should not be called</comment>
     <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"second time"</literal></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>wasCalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> class <name>TestCachingWrapperFilter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
 
     <name>IndexReader</name> <name>reader</name> <operator>=</operator> <call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ReaderContext</name></type> <name>context</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>Filter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     <decl_stmt><decl><type><name>CachingWrapperFilter</name></type> <name>cacher</name> <init>= <expr><operator>new</operator> <call><name>CachingWrapperFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// the caching filter should return the empty set constant</comment>
    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> class <name>TestCachingWrapperFilter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
 
     <name>IndexReader</name> <name>reader</name> <operator>=</operator> <call><name><name>IndexReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ReaderContext</name></type> <name>context</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>final</specifier> <name>Filter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <class><super><name>DocIdSet</name></super><argument_list>()</argument_list> <block>{
           <function><annotation>@<name>Override</name></annotation>
           <type><specifier>public</specifier> <name>DocIdSetIterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>TestCachingWrapperFilter</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>CachingWrapperFilter</name> <name>cacher</name> <operator>=</operator> <operator>new</operator> <call><name>CachingWrapperFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// the caching filter should return the empty set constant</comment>
    <call><name>assertSame</name><argument_list>(<argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
   
   private static void assertDocIdSetCacheable(IndexReader reader</block><operator>,</operator> Filter filter<operator>,</operator> boolean shouldCacheable</function>)</block> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>ReaderContext</name> <name>context</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></class></expr></return>
     <decl_stmt><decl><type><specifier>final</specifier> <name>CachingWrapperFilter</name></type> <name>cacher</name> <init>= <expr><operator>new</operator> <call><name>CachingWrapperFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>originalSet</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>cachedSet</name> <init>= <expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>originalSet</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DocIdSet</name></type> <name>cachedSet</name> <init>= <expr><call><name><name>cacher</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>cachedSet</name><operator>.</operator><name>isCacheable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>shouldCacheable</name></expr></argument>, <argument><expr><call><name><name>originalSet</name><operator>.</operator><name>isCacheable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">//System.out.println("Original: "+originalSet.getClass().getName()+" -- cached: "+cachedSet.getClass().getName());</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestCachingWrapperFilter</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="line">// a openbitset filter is always cacheable</comment>
     <expr><call><name>assertDocIdSetCacheable</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>()</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block><operator>,</operator> true</function>)</block_content></block>;</function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDisjunctionMaxQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b89b6897c8a</name><operator>..</operator><literal type="number">1b89d4dd7dc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDisjunctionMaxQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SlowMultiReaderWrapper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> class <name>TestDisjunctionMaxQuery</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>dq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tq</name><argument_list>(<argument><expr><literal type="string">"dek"</literal></expr></argument>, <argument><expr><literal type="string">"DOES_NOT_EXIST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     
     <call><name><name>QueryUtils</name><operator>.</operator><name>check</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>dq</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>isAtomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>Weight</name></type> <name>dw</name> <init>= <expr><call><name><name>dq</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>ds</name> <init>= <expr><call><name><name>dw</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>ds</name> <init>= <expr><call><name><name>dw</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>skipOk</name> <init>= <expr><call><name><name>ds</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>skipOk</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"firsttime skipTo found a match? ... "</literal>
@@ <operator>-</operator><literal type="number">177</literal></expr></argument>,<argument><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">178</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>TestDisjunctionMaxQuery</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>final</name> <name>DisjunctionMaxQuery</name> <name>dq</name> <operator>=</operator> <operator>new</operator> <call><name>DisjunctionMaxQuery</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;
     <call><name><name>dq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tq</name><argument_list>(<argument><expr><literal type="string">"dek"</literal></expr></argument>, <argument><expr><literal type="string">"albino"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
     <expr_stmt><expr><call><name><name>dq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tq</name><argument_list>(<argument><expr><literal type="string">"dek"</literal></expr></argument>, <argument><expr><literal type="string">"DOES_NOT_EXIST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>isAtomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>check</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>dq</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
     <decl_stmt><decl><type><specifier>final</specifier> <name>Weight</name></type> <name>dw</name> <init>= <expr><call><name><name>dq</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>ds</name> <init>= <expr><call><name><name>dw</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Scorer</name></type> <name>ds</name> <init>= <expr><call><name><name>dw</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"firsttime skipTo found no match"</literal></expr></argument>,
         <argument><expr><call><name><name>ds</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"found wrong docid"</literal></expr></argument>, <argument><expr><literal type="string">"d4"</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>document</name></name><argument_list>(<argument><expr><call><name><name>ds</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocIdSet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocIdSet</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">78f517c67c7</literal><operator>..</operator><literal type="number">5ff89d5c888</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocIdSet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocIdSet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>Index</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name><operator>.</operator><name>Store</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestDocIdSet</name> extends <name>LuceneTestCase</name> <block>{
     <comment type="line">// Now search w/ a Filter which returns a null DocIdSet</comment>
     <expr><name>Filter</name> <name>f</name> <operator>=</operator> <operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ef0bf485aff</name><operator>..</operator><name>dd1655ad2a0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestFilteredQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanClause</name><operator>.</operator><name>Occur</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestFilteredQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>Filter</name> <call><name>newStaticFilterB</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name> <parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name> <parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>bitset</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>bitset</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>bitset</name><operator>.</operator><name>set</name></name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestFilteredQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>Filter</name> <call><name>newStaticFilterA</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name> <parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name> <parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>bitset</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>bitset</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><operator>new</operator> <call><name>DocIdBitSet</name><argument_list>(<argument><expr><name>bitset</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">216</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestFilteredQuery</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>bq</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BooleanClause</name><operator>.</operator><name>Occur</name><operator>.</operator><name>SHOULD</name></name></expr></argument>)</argument_list></call></expr>;
     <name><name>ScoreDoc</name><index>[]</index></name> <name>hits</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><name>scoreDocs</name></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>hits</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>check</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>query</name></expr></argument>,<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name><name>QueryUtils</name><operator>.</operator><name>check</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
   <expr_stmt/>}</block_content>
 }
 
diff --git a/lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java b/lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java
index 951abdd246c..a4b02fa9592 100644
-- a/lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java
++ b/lucene/src/test/org/apache/lucene/search/TestFilteredSearch.java
@@ -25</block><operator>,</operator>6 +25<operator>,</operator>8 @@ import org.apache.lucene.document.Document;</function>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>CorruptIndexException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name><operator>.</operator><name>OpenMode</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>LockObtainFailedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 
 

 <comment type="block" format="javadoc">/**
  *
  */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestFilteredSearch</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name><name>directory</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
   }</block>
 
  <specifier>public</specifier> <name>void</name> <call><name>searchFiltered</name><argument_list>(<argument><expr><name>IndexWriter</name> <name>writer</name></expr></argument>, <argument><expr><name>Directory</name> <name>directory</name></expr></argument>, <argument><expr><name>SimpleDocIdSetFilter</name> <name>filter</name></expr></argument>, <argument><expr><name>boolean</name> <name>optimize</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>void</name> <call><name>searchFiltered</name><argument_list>(<argument><expr><name>IndexWriter</name> <name>writer</name></expr></argument>, <argument><expr><name>Directory</name> <name>directory</name></expr></argument>, <argument><expr><name>Filter</name> <name>filter</name></expr></argument>, <argument><expr><name>boolean</name> <name>optimize</name></expr></argument>)</argument_list></call> <block>{
     <try>try <block>{<block_content>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content><comment type="line">//Simple docs</comment>
         <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><operator>new</operator> <call><name>Document</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> class <name>TestFilteredSearch</name> extends <name>LuceneTestCase</name> <block>{
      
      
       <expr><name>IndexSearcher</name> <name>indexSearcher</name> <operator>=</operator> <operator>new</operator> <call><name>IndexSearcher</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <call><name><name>filter</name><operator>.</operator><name>setTopReader</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>ScoreDoc</name><index>[]</index></name></type> <name>hits</name> <init>= <expr><call><name><name>indexSearcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>booleanQuery</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><name>scoreDocs</name></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Number of matched documents"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>hits</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>indexSearcher</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>TestFilteredSearch</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> class <name>SimpleDocIdSetFilter</name> extends <name>Filter</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name><name>int</name><index>[]</index></name> <name>docs</name></expr>;
     <specifier>private</specifier> <name>int</name> <name>index</name></block></expr>;
    <specifier>private</specifier> <name>IndexReader</name> <name>topReader</name></block></expr>;</expr_stmt>
    
     <constructor><specifier>public</specifier> <name>SimpleDocIdSetFilter</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>docs</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>docs</name></name> <operator>=</operator> <name>docs</name></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
 
    public void setTopReader(IndexReader r</block></constructor>)</block_content> <block>{<block_content>
      <expr_stmt><expr><name>topReader</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>

     @Override
    public DocIdSet getDocIdSet(IndexReader reader</block></block></for>)</block_content> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <assert>assert <expr><name><name>context</name><operator>.</operator><name>isAtomic</name></name></expr>;</assert>
       <decl_stmt><decl><type><specifier>final</specifier> <name>OpenBitSet</name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name>OpenBitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>docBase</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getSubReaderDocBase</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name>docBase</name><operator>+</operator><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>docBase</name> <init>= <expr><operator>(</operator><operator>(</operator><name>AtomicReaderContext</name><operator>)</operator><name>context</name><operator>)</operator><operator>.</operator><name>docBase</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name>docBase</name><operator>+</operator><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init>;</init><condition><expr><name>index</name> <operator>&lt;</operator> <name><name>docs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>docId</name> <init>= <expr><name><name>docs</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if<condition>(<expr><name>docId</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery32</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery32</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">699e4c20f8c</literal><operator>..</operator><name>f4b330e8fe9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery32</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestNumericRangeQuery32</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestNumericRangeQuery32</name> extends <name>LuceneTestCase</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testInverseRange</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name><name>NumericRangeFilter</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name> <name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newIntRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A inverse range should return the EMPTY_DOCIDSET instance"</literal></expr></argument>, <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A inverse range should return the EMPTY_DOCIDSET instance"</literal></expr></argument>, <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newIntRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance"</literal></expr></argument>,
               <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr><operator>,</operator> <expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></function></block_content></block></block></try></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></return></block></expr></block></expr></expr_stmt></block_content></block></function></block_content></block></function></block></class></expr></return></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></block></expr></expr_stmt></block_content></block></if></if_stmt></block></class></expr></argument>)</argument_list></call></expr>;
     <name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newIntRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance"</literal></expr></argument>,
               <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr><operator>,</operator> <expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></function></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></if></if_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
   
   @Test
diff --git a/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java b/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
index 63a3409a8c6..2e5c3e8b256 100644
-- a/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
++ b/lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64.java
@@ -182</block><operator>,</operator><expr_stmt><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">182</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> class <name>TestNumericRangeQuery64</name> extends <name>LuceneTestCase</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testInverseRange</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name><name>NumericRangeFilter</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name> <name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1000L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1000L</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A inverse range should return the EMPTY_DOCIDSET instance"</literal></expr></argument>, <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></if></if_stmt>
    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A inverse range should return the EMPTY_DOCIDSET instance"</literal></expr></argument>, <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>,
        <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance"</literal></expr></argument>,
               <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr><operator>,</operator> <expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;
     <name>f</name> <operator>=</operator> <call><name><name>NumericRangeFilter</name><operator>.</operator><name>newLongRange</name></name><argument_list>(<argument><expr><literal type="string">"field8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><literal type="string">"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance"</literal></expr></argument>,
               <argument><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name></name></expr><operator>,</operator> <expr><call><name><name>f</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTopReaderContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
   </block_content>}</block></if></if_stmt>
   
   <annotation>@<name>Test</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScorerPerf</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScorerPerf</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7aba01f55ee</literal><operator>..</operator><literal type="number">364b452ce23</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScorerPerf</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestScorerPerf</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">7</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name><operator>.</operator><name>OpenMode</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">142</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestScorerPerf</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>final</name> <name>BitSet</name> <name>rnd</name> <operator>=</operator> <name><name>sets</name><index>[<expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name><name>sets</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;
     <name>Query</name> <name>q</name> <operator>=</operator> <operator>new</operator> <call><name>ConstantScoreQuery</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><operator>new</operator> <call><name>DocIdBitSet</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</return>
       </block_content>}</block></function>
     </block_content>}</block></function><expr_stmt><expr/></expr_stmt></block></class></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a4b22d654e0</name><operator>..</operator><name>b0889f21332</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestSort</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>CorruptIndexException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiReader</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">687</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">688</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSort</name> extends <name>LuceneTestCase</name> implements <name>Serializable</name> <block>{
     <comment type="line">// a filter that only allows through the first hit</comment>
     <expr><name>Filter</name> <name>filt</name> <operator>=</operator> <operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>bs</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>bs</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>bs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>docs1</name><operator>.</operator><name>scoreDocs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><operator>new</operator> <call><name>DocIdBitSet</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/></block_content></block></function></block_content></block></function></block></class></expr>}</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermScorer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermScorer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">53900f67b84</literal><operator>..</operator><literal type="number">7265ada5b1c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermScorer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermScorer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SlowMultiReaderWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>TestTermScorer</name> <super_list><extends>extends <super><name>LuceneTestCase</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">71</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermScorer</name> extends <name>LuceneTestCase</name> <block>{
     
     <expr><name>Weight</name> <name>weight</name> <operator>=</operator> <call><name><name>termQuery</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr>;
     
    <name>Scorer</name> <name>ts</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>ts</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// we have 2 documents with the term all in them, one document for all the</comment>
     <comment type="line">// other values</comment>
     <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TestHit</name></argument>&gt;</argument_list></name></type> <name>docs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TestHit</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermScorer</name> extends <name>LuceneTestCase</name> <block>{
     
     <expr><name>Weight</name> <name>weight</name> <operator>=</operator> <call><name><name>termQuery</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr>;
     
    <name>Scorer</name> <name>ts</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>ts</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"next did not return a doc"</literal></expr></argument>,
         <argument><expr><call><name><name>ts</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"score is not correct"</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>score</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1.6931472f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermScorer</name> extends <name>LuceneTestCase</name> <block>{
     
     <expr><name>Weight</name> <name>weight</name> <operator>=</operator> <call><name><name>termQuery</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>indexSearcher</name></expr></argument>)</argument_list></call></expr>;
     
    <name>Scorer</name> <name>ts</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>ts</name> <init>= <expr><call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>indexSearcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Didn't skip"</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// The next doc should be doc 5</comment>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"doc should be number 5"</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestNearSpansOrdered</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestNearSpansOrdered</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d5b6b406a05</name><operator>..</operator><name>fc3fb442bab</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestNearSpansOrdered</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestNearSpansOrdered</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestNearSpansOrdered</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>testSpanNearScorerSkipTo1</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>SpanNearQuery</name> <name>q</name> <operator>=</operator> <call><name>makeQuery</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <name>Weight</name> <name>w</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>s</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>s</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
   <comment type="block" format="javadoc">/**
@@ -177,7 +177,7 @@ public class TestNearSpansOrdered extends LuceneTestCase {
    */</comment>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSpanNearScorerExplain</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>SpanNearQuery</name></type> <name>q</name> <init>= <expr><call><name>makeQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Explanation</name></type> <name>e</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Explanation</name></type> <name>e</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Scorer explanation value for doc#1 isn't positive: "</literal>
                <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="number">0.0f</literal> <operator>&lt;</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestSpans</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestSpans</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ac96892d5a0</name><operator>..</operator><literal type="number">9d3c83adbae</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestSpans</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestSpans</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>SlowMultiReaderWrapper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">420</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">421</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSpans</name> extends <name>LuceneTestCase</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></function><empty_stmt>;</empty_stmt>
 
    <decl_stmt><decl><type><name>Scorer</name></type> <name>spanScorer</name> <init>= <expr><call><name><name>snq</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>scorer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scorer</name></type> <name>spanScorer</name> <init>= <expr><call><name><name>snq</name><operator>.</operator><name>weight</name></name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>scorer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AtomicReaderContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SlowMultiReaderWrapper</name><argument_list>(<argument><expr><call><name><name>searcher</name><operator>.</operator><name>getIndexReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"first doc"</literal></expr></argument>, <argument><expr><call><name><name>spanScorer</name><operator>.</operator><name>nextDoc</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DocIdSetIterator</name><operator>.</operator><name>NO_MORE_DOCS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"first doc number"</literal></expr></argument>, <argument><expr><call><name><name>spanScorer</name><operator>.</operator><name>docID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>PerSegmentSingleValuedFaceting</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>PerSegmentSingleValuedFaceting</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fc1016597a7</name><operator>..</operator><literal type="number">24938cbb9c2</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>PerSegmentSingleValuedFaceting</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>PerSegmentSingleValuedFaceting</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>request</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>AtomicReaderContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>TermsEnum</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
     <comment type="line">// reuse the translation logic to go from top level set to per-segment set</comment>
     <expr><name>baseSet</name> <operator>=</operator> <call><name><name>docs</name><operator>.</operator><name>getTopFilter</name></name><argument_list>()</argument_list></call></expr>;
 
    <name>SolrIndexReader</name> <name>topReader</name> <operator>=</operator> <call><name><name>searcher</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SolrIndexReader</name><index>[]</index></name></type> <name>leafReaders</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>offsets</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>AtomicReaderContext</name><index>[]</index></name></type> <name>leaves</name> <init>= <expr><call><name><name>searcher</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// The list of pending tasks that aren't immediately submitted</comment>
     <comment type="line">// TODO: Is there a completion service, or a delegating executor that can</comment>
     <comment type="line">// limit the number of concurrent tasks submitted to a bigger executor?</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
 
     <expr><name>int</name> <name>threads</name> <operator>=</operator> <name>nThreads</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>?</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>:</operator> <name>nThreads</name></expr>;</block></expr></expr_stmt>
 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>leafReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>SegFacet</name></type> <name>segFacet</name> <init>= <expr><operator>new</operator> <call><name>SegFacet</name><argument_list>(<argument><expr><name><name>leafReaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>leaves</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>SegFacet</name></type> <name>segFacet</name> <init>= <expr><operator>new</operator> <call><name>SegFacet</name><argument_list>(<argument><expr><name><name>leaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>SegFacet</name></argument>&gt;</argument_list></name></type> <name>task</name> <init>= <expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>SegFacet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
         <function><type><specifier>public</specifier> <name>SegFacet</name></type> <name>call</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
     <comment type="line">// now merge the per-segment results</comment>
     <expr><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>SegFacet</name></argument>&gt;</argument_list></name> <name>queue</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>SegFacet</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <block>{<block_content>
        <constructor_decl><name>initialize</name><parameter_list>(<parameter><decl><type><name><name>leafReaders</name><operator>.</operator><name>length</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
        <constructor_decl><name>initialize</name><parameter_list>(<parameter><decl><type><name><name>leaves</name><operator>.</operator><name>length</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
       <expr_stmt/>}</block_content>
       @Override
       protected boolean lessThan(SegFacet a</block><operator>,</operator> <expr_stmt><expr><name>SegFacet</name> <name>b</name></expr></expr_stmt>)</block> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
 
     <expr><name>boolean</name> <name>hasMissingCount</name><operator>=</operator><literal type="boolean">false</literal></expr>;
     <name>int</name> <name>missingCount</name><operator>=</operator><literal type="number">0</literal></block></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>leafReaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>leaves</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <decl_stmt><decl><type><name>SegFacet</name></type> <name>seg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
       <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">209</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
   }</block>
 
   <name>class</name> <name>SegFacet</name> <block>{
    <expr><name>SolrIndexReader</name> <name>reader</name></expr>;
    <name>int</name> <name>readerOffset</name></block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SegFacet</name><argument_list>(<argument><expr><name>SolrIndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>int</name> <name>readerOffset</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;
      <name><name>this</name><operator>.</operator><name>readerOffset</name></name> <operator>=</operator> <name>readerOffset</name></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ReaderContext</name></type> <name>info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SegFacet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>info</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>info</name></expr>;
     }</block>
     
     <name><name>FieldCache</name><operator>.</operator><name>DocTermsIndex</name></name> <name>si</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
     <expr><name>BytesRef</name> <name>tempBR</name> <operator>=</operator> <operator>new</operator> <call><name>BytesRef</name><argument_list>()</argument_list></call></expr>;
 
     <name>void</name> <call><name>countTerms</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>si</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
      <expr_stmt><expr><name>si</name> <operator>=</operator> <call><name><name>FieldCache</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>getTermsIndex</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// SolrCore.log.info("reader= " + reader + "  FC=" + System.identityHashCode(si));</comment>
 
       <if_stmt><if>if <condition>(<expr><name>prefix</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">250</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>PerSegmentSingleValuedFaceting</name> <block>{
         <comment type="line">// count collection array only needs to be as big as the number of terms we are</comment>
         <comment type="line">// going to collect counts for.</comment>
         <expr><name>final</name> <name><name>int</name><index>[]</index></name> <name>counts</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>counts</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>nTerms</name></expr>]</index></name></expr>;
        <name>DocIdSet</name> <name>idSet</name> <operator>=</operator> <call><name><name>baseSet</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DocIdSet</name></type> <name>idSet</name> <init>= <expr><call><name><name>baseSet</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>DocIdSetIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>idSet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5bda359d146</literal><operator>..</operator><name>c76187fd325</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>LatLonType</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>schema</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Fieldable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiFields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>spatial</name><operator>.</operator><name>DistanceUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>response</name><operator>.</operator><name>TextResponseWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>QParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SpatialOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name><operator>.</operator><name>DocValues</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">371</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">371</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>class</name> <name>SpatialDistanceQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>SpatialScorer</name><argument_list>(<argument><expr><call><name>getSimilarity</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SpatialScorer</name><argument_list>(<argument><expr><call><name>getSimilarity</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
 
     @Override
    public Explanation explain(IndexReader reader</block><operator>,</operator> int doc</function>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>SolrIndexReader</name> <name>topReader</name> <operator>=</operator> <operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>reader</name></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt></if></if_stmt>
      <decl_stmt><decl><type><name><name>SolrIndexReader</name><index>[]</index></name></type> <name>subReaders</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>offsets</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerPos</name> <init>= <expr><call><name><name>SolrIndexReader</name><operator>.</operator><name>readerIndex</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerBase</name> <init>= <expr><name><name>offsets</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>(</operator><operator>(</operator><name>SpatialScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name><operator>-</operator><name>readerBase</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>(</operator><operator>(</operator><name>SpatialScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
diff --git a/solr/src/java/org/apache/solr/search/DocSet.java b/solr/src/java/org/apache/solr/search/DocSet.java
index a053e057a81..32dc4f53e94 100644
-- a/solr/src/java/org/apache/solr/search/DocSet.java
++ b/solr/src/java/org/apache/solr/search/DocSet.java
@@ -23</block><operator>,</operator>6 +23<operator>,</operator>7 @@ import org.apache.lucene.search.DocIdSet;</function>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Filter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>abstract</specifier> <name>class</name> <name>DocSetBase</name> implements <name>DocSet</name> <block>{
 
     <return>return <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name> <init>= <expr><name><name>ctx</name><operator>.</operator><name>reader</name></name></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>reader</name></expr></init></decl>;</decl_stmt>
         <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>r</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">50c94775285</literal><operator>..</operator><literal type="number">422f5926199</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrConstantScoreQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">2</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name><operator>.</operator><name>ValueSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>common</name><operator>.</operator><name>SolrException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConstantScoreQuery</name> extends <name>ConstantScoreQuery</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>ConstantScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>ConstantScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
 
     @Override
    public Explanation explain(IndexReader reader</block><operator>,</operator> int doc</function>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>public</specifier> <name>Explanation</name> <call><name>explain</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>, <argument><expr><name>int</name> <name>doc</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
 
      <expr><name>ConstantScorer</name> <name>cs</name> <operator>=</operator> <operator>new</operator> <call><name>ConstantScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt></while>
      <decl_stmt><decl><type><name>ConstantScorer</name></type> <name>cs</name> <init>= <expr><operator>new</operator> <call><name>ConstantScorer</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>boolean</name></type> <name>exists</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>docIdSetIterator</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>doc</name></expr></init></decl>;</decl_stmt>
 
       <decl_stmt><decl><type><name>ComplexExplanation</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrConstantScoreQuery</name> extends <name>ConstantScoreQuery</name> <block>{
     <expr><name>final</name> <name>float</name> <name>theScore</name></expr>;
     <name>int</name> <name>doc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></block></expr>;</expr_stmt>
 
    <constructor><specifier>public</specifier> <name>ConstantScorer</name><parameter_list>(<parameter><decl><type><name>Similarity</name></type> <name>similarity</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>ConstantWeight</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>ConstantScorer</name><parameter_list>(<parameter><decl><type><name>Similarity</name></type> <name>similarity</name></decl></parameter>, <parameter><decl><type><name>ReaderContext</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>ConstantWeight</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>theScore</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>DocIdSet</name></type> <name>docIdSet</name> <init>= <expr><ternary><condition><expr><name>filter</name> <operator>instanceof</operator> <name>SolrFilter</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SolrFilter</name><operator>)</operator><name>filter</name><operator>)</operator><operator>.</operator><call><name>getDocIdSet</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocIdSet</name></type> <name>docIdSet</name> <init>= <expr><ternary><condition><expr><name>filter</name> <operator>instanceof</operator> <name>SolrFilter</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SolrFilter</name><operator>)</operator><name>filter</name><operator>)</operator><operator>.</operator><call><name>getDocIdSet</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>filter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>docIdSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>docIdSetIterator</name> <operator>=</operator> <call><name><name>DocIdSet</name><operator>.</operator><name>EMPTY_DOCIDSET</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2a368c30e96</literal><operator>..</operator><literal type="number">91009320b3b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Filter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>SolrFilter</name> extends <name>Filter</name> <block>{
    <expr><operator>*</operator> <name>The</name> <name>context</name> <name>object</name> <name>will</name> <name>be</name> <name>passed</name> <name>to</name> <call><name>getDocIdSet</name><argument_list>()</argument_list></call> <name>where</name> <name>this</name> <name>info</name> <name>can</name> <name>be</name> <name><name>retrieved</name><operator>.</operator></name> *<operator>/</operator>
   <specifier>public</specifier> <specifier>abstract</specifier> <name>void</name> <call><name>createWeight</name><argument_list>(<argument><expr><name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>IndexSearcher</name> <name>searcher</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>;
   
  <specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><argument_list>(<argument><expr><name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>ReaderContext</name> <name>readerContext</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getDocIdSet</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
  <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getDocIdSet</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 }
diff --git a/solr/src/java/org/apache/solr/search/SolrIndexReader.java b/solr/src/java/org/apache/solr/search/SolrIndexReader.java
index 0a3b8c81b8f..72536896377 100755
-- a/solr/src/java/org/apache/solr/search/SolrIndexReader.java
++ b/solr/src/java/org/apache/solr/search/SolrIndexReader.java
@@ -19</block><operator>,</operator>12 +19<operator>,</operator>14 @@ package org.apache.solr.search;</function>
 
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>Directory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>store</name><operator>.</operator><name>LockObtainFailedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>FieldSelector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ReaderUtil</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrIndexReader</name> extends <name>FilterIndexReader</name> <block>{
   <expr><specifier>private</specifier> <name><name>int</name><index>[]</index></name> <name>leafOffsets</name></expr>;
   <specifier>private</specifier> <name>final</name> <name>SolrIndexReader</name> <name>parent</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>base</name></decl>;</decl_stmt> <comment type="line">// docid offset of this reader within parent</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReaderContext</name></type> <name>topLevelContext</name></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>zeroIntArray</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrIndexReader</name> extends <name>FilterIndexReader</name> <block>{
       <expr><name>leafReaders</name> <operator>=</operator> <operator>new</operator> <name><name>SolrIndexReader</name><index>[]</index></name><block>{<expr><name>this</name></expr>}</block></expr>;
       <name>leafOffsets</name> <operator>=</operator> <name>zeroIntArray</name></block></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>

    topLevelContext = ReaderUtil.buildReaderContext(this</block></function>)</block_content></block></block><empty_stmt>;</empty_stmt></if></if_stmt>
   <expr_stmt/>}</block_content>
 
   private SolrIndexReader[] getLeaves(int numLeaves</block></constructor>)</block_content> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">363</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">366</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrIndexReader</name> extends <name>FilterIndexReader</name> <block>{
     <return>return <expr><name>subReaders</name></expr>;</return>
   }</block>
 
  @<name>Override</name>
  <specifier>public</specifier> <name>int</name> <call><name>getSubReaderDocBase</name><argument_list>(<argument><expr><name>IndexReader</name> <name>subReader</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>in</name><operator>.</operator><name>getSubReaderDocBase</name></name><argument_list>(<argument><expr><name>subReader</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block>

   @<name>Override</name>
   <specifier>public</specifier> <name>int</name> <call><name>hashCode</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><call><name><name>in</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
@@ <operator>-</operator><literal type="number">493</literal>,<literal type="number">6</literal> <operator>+</operator><literal type="number">491</literal>,<literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrIndexReader</name> extends <name>FilterIndexReader</name> <block>{
   <expr><specifier>public</specifier> <name>int</name> <call><name>getTermInfosIndexDivisor</name><argument_list>()</argument_list></call> <block>{
     <return>return <expr><call><name><name>in</name><operator>.</operator><name>getTermInfosIndexDivisor</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block>
  
  @<name>Override</name>
  <specifier>public</specifier> <name>ReaderContext</name> <call><name>getTopReaderContext</name><argument_list>()</argument_list></call> <block>{
    <return>return <expr><name>topLevelContext</name></expr>;</return>
  }</block>
 }
 
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">569de901800</literal><operator>..</operator><name>d7dcff8525b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">904</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">904</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SolrIndexSearcher</name> extends <name>IndexSearcher</name> implements <name>SolrInfoMBean</name> <block>{
   <expr><operator>*</operator> <name>This</name> <name>method</name> <name>is</name> <name>not</name> <name>cache</name><operator>-</operator><name>aware</name> <name>and</name> <name>no</name> <name>caches</name> <name>are</name> <name><name>checked</name><operator>.</operator></name>
   *<operator>/</operator>
   <specifier>public</specifier> <name>DocSet</name> <call><name>convertFilter</name><argument_list>(<argument><expr><name>Filter</name> <name>lfilter</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>DocIdSet</name> <name>docSet</name> <operator>=</operator> <call><name><name>lfilter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>DocIdSet</name> <name>docSet</name> <operator>=</operator> <call><name><name>lfilter</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
     <name>OpenBitSet</name> <name>obs</name> <operator>=</operator> <operator>new</operator> <call><name>OpenBitSet</name><argument_list>()</argument_list></call></block></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>DocIdSetIterator</name></type> <name>it</name> <init>= <expr><call><name><name>docSet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>doc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SortedIntDocSet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SortedIntDocSet</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">661a4338bb6</literal><operator>..</operator><name>b0bb860407b</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SortedIntDocSet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SortedIntDocSet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Filter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">551</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">552</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SortedIntDocSet</name> extends <name>DocSetBase</name> <block>{
       <expr><name>int</name> <name>lastEndIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;
 
       @<name>Override</name>
      <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>ReaderContext</name> <name>context</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>int</name> <name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>IndexReader</name></type> <name>reader</name> <init>= <expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>reader</name></expr></init></decl>;</decl_stmt>
         <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>r</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ad45f7bb15f</name><operator>..</operator><name>c1ea5e97870</name> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name>function</name><operator>/</operator><name><name>BoostedQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>ToStringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">91</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>BoostedQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>Scorer</name> <name>subQueryScorer</name> <operator>=</operator> <call><name><name>qWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Scorer</name></type> <name>subQueryScorer</name> <init>= <expr><call><name><name>qWeight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if<condition>(<expr><name>subQueryScorer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="null">null</literal></expr>;</return>
       <expr_stmt/>}</block_content>
      return new BoostedQuery.CustomScorer(getSimilarity(searcher</block></if></if_stmt>)</block_content></block><operator>,</operator> searcher<operator>,</operator> reader<operator>,</operator> this<operator>,</operator> subQueryScorer<operator>,</operator> boostVal</function>)</block_content></block><empty_stmt>;</empty_stmt></while>
      <return>return <expr><operator>new</operator> <call><name><name>BoostedQuery</name><operator>.</operator><name>CustomScorer</name></name><argument_list>(<argument><expr><call><name>getSimilarity</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>searcher</name></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>subQueryScorer</name></expr></argument>, <argument><expr><name>boostVal</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
 
     @Override
    public Explanation explain(IndexReader reader</block></block><operator>,</operator> int doc</constructor>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>SolrIndexReader</name> <name>topReader</name> <operator>=</operator> <operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>reader</name></expr></block></expr></argument></throws></block>;</function>
      <decl_stmt><decl><type><name><name>SolrIndexReader</name><index>[]</index></name></type> <name>subReaders</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>offsets</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerPos</name> <init>= <expr><call><name><name>SolrIndexReader</name><operator>.</operator><name>readerIndex</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerBase</name> <init>= <expr><name><name>offsets</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Explanation</name></type> <name>subQueryExpl</name> <init>= <expr><call><name><name>qWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>readerContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Explanation</name></type> <name>subQueryExpl</name> <init>= <expr><call><name><name>qWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>readerContext</name></expr></argument>,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subQueryExpl</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>subQueryExpl</name></expr>;</return>
       <expr_stmt/>}</block_content>

      DocValues vals = boostVal.getValues(context</block><operator>,</operator> <expr_stmt><expr><name><name>subReaders</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></expr_stmt></if></if_stmt>)</block_content></block>;</function>
      <decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><call><name><name>subQueryExpl</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name><operator>-</operator><name>readerBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DocValues</name></type> <name>vals</name> <init>= <expr><call><name><name>boostVal</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>readerContext</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>sc</name> <init>= <expr><call><name><name>subQueryExpl</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>vals</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Explanation</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>ComplexExplanation</name><argument_list>(
         <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name><name>BoostedQuery</name><operator>.</operator><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", product of:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><name>subQueryExpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><call><name><name>vals</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>doc</name><operator>-</operator><name>readerBase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>addDetail</name></name><argument_list>(<argument><expr><call><name><name>vals</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>res</name></expr>;</return>
     <expr_stmt/>}</block_content>
   }
@@ -168</block><operator>,</operator>7 +162<operator>,</operator>7 @@ public class BoostedQuery extends Query <block>{<block_content>
     <expr_stmt/>}</block_content>
 
     public Explanation explain(int doc</block></function>)</block> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>Explanation</name> <name>subQueryExpl</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>qWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></class></expr></return>
      <name>Explanation</name> <name>subQueryExpl</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>qWeight</name><operator>.</operator><name>explain</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><name>doc</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subQueryExpl</name><operator>.</operator><name>isMatch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><name>subQueryExpl</name></expr>;</return>
       <expr_stmt/>}</block_content>
diff --git a/solr/src/java/org/apache/solr/search/function/FunctionQuery.java b/solr/src/java/org/apache/solr/search/function/FunctionQuery.java
index 6a8f5f40072..397798f064e 100644
-- a/solr/src/java/org/apache/solr/search/function/FunctionQuery.java
++ b/solr/src/java/org/apache/solr/search/function/FunctionQuery.java
@@ -18</block><operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt></if></if_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiFields</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Bits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexReader</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>FunctionQuery</name> extends <name>Query</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>Scorer</name> <call><name>scorer</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>boolean</name> <name>scoreDocsInOrder</name></expr></argument>, <argument><expr><name>boolean</name> <name>topScorer</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>AllScorer</name><argument_list>(<argument><expr><call><name>getSimilarity</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Scorer</name></type> <name>scorer</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scoreDocsInOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>topScorer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>AllScorer</name><argument_list>(<argument><expr><call><name>getSimilarity</name><argument_list>(<argument><expr><name>searcher</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
 
     @Override
    public Explanation explain(IndexReader reader</block><operator>,</operator> int doc</function>)</block_content> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>SolrIndexReader</name> <name>topReader</name> <operator>=</operator> <operator>(</operator><name>SolrIndexReader</name><operator>)</operator><name>reader</name></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt></try>
      <decl_stmt><decl><type><name><name>SolrIndexReader</name><index>[]</index></name></type> <name>subReaders</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>offsets</name> <init>= <expr><call><name><name>topReader</name><operator>.</operator><name>getLeafOffsets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerPos</name> <init>= <expr><call><name><name>SolrIndexReader</name><operator>.</operator><name>readerIndex</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>readerBase</name> <init>= <expr><name><name>offsets</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>(</operator><operator>(</operator><name>AllScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name><name>subReaders</name><index>[<expr><name>readerPos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name><operator>-</operator><name>readerBase</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>Explanation</name></type> <name>explain</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><operator>(</operator><operator>(</operator><name>AllScorer</name><operator>)</operator><call><name>scorer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>explain</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
@@ -119</block><operator>,</operator>16 +114<operator>,</operator>18 @@ public class FunctionQuery extends Query <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasDeletions</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name>Bits</name></type> <name>delDocs</name></decl>;</decl_stmt>
 
    <constructor><specifier>public</specifier> <name>AllScorer</name><parameter_list>(<parameter><decl><type><name>Similarity</name></type> <name>similarity</name></decl></parameter>, <parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>FunctionWeight</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>AllScorer</name><parameter_list>(<parameter><decl><type><name>Similarity</name></type> <name>similarity</name></decl></parameter>, <parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>FunctionWeight</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>qWeight</name></name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>reader</name></name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDoc</name></name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasDeletions</name></name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>hasDeletions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delDocs</name></name> <operator>=</operator> <call><name><name>MultiFields</name><operator>.</operator><name>getDeletedDocs</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <assert>assert <expr><operator>!</operator><name>hasDeletions</name> <operator>||</operator> <name>delDocs</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
      <expr_stmt><expr><name>vals</name> <operator>=</operator> <call><name><name>func</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name><name>weight</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Map</name></type> <name>funcContext</name> <init>= <expr><name><name>weight</name><operator>.</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>funcContext</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>vals</name> <operator>=</operator> <call><name><name>func</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>funcContext</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
 
     @Override
diff --git a/solr/src/java/org/apache/solr/search/function/QueryValueSource.java b/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
index 37bc35e7a68..cf65b3968fe 100755
-- a/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
++ b/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
@@ -90</block><operator>,</operator>7 +90<operator>,</operator>7 @@ class QueryDocValues extends DocValues <block>{<block_content>
     <try>try <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>&lt;</operator> <name>lastDocRequested</name></expr>)</condition> <block>{<block_content>
         <comment type="line">// out-of-order access.... reset scorer.</comment>
        <expr_stmt><expr><name>scorer</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scorer</name> <operator>=</operator> <call><name><name>weight</name><operator>.</operator><name>scorer</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>scorer</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>defVal</name></expr>;</return></block_content></block></if></if_stmt>
         <expr_stmt><expr><name>scorerDoc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
diff --git a/solr/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java b/solr/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
index 581792c9039..8813736a849 100755
-- a/solr/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
++ b/solr/src/java/org/apache/solr/search/function/ValueSourceRangeFilter.java
@@ -20</block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></if></if_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>function</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSetIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>IndexSearcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrFilter</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>ValueSourceRangeFilter</name> extends <name>SolrFilter</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>includeUpper</name></name> <operator>=</operator> <name>upperVal</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>includeUpper</name></expr>;
   }</block>
 
  <specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>final</name> <name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>final</name> <name>IndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>DocIdSet</name> <call><name>getDocIdSet</name><argument_list>(<argument><expr><name>final</name> <name>Map</name> <name>context</name></expr></argument>, <argument><expr><name>final</name> <name>ReaderContext</name> <name>readerContext</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <class><super><name>DocIdSet</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>DocIdSetIterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <return>return <expr><call><name><name>valueSource</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRangeScorer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>lowerVal</name></expr></argument>, <argument><expr><name>upperVal</name></expr></argument>, <argument><expr><name>includeLower</name></expr></argument>, <argument><expr><name>includeUpper</name></expr></argument>)</argument_list></call></expr>;</return>
         <return>return <expr><call><name><name>valueSource</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>readerContext</name><operator>.</operator><name>reader</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRangeScorer</name><argument_list>(<argument><expr><name><name>readerContext</name><operator>.</operator><name>reader</name></name></expr></argument>, <argument><expr><name>lowerVal</name></expr></argument>, <argument><expr><name>upperVal</name></expr></argument>, <argument><expr><name>includeLower</name></expr></argument>, <argument><expr><name>includeUpper</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt/>}</block_content>
      }</block>;</function>
   <expr_stmt/>}</block>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>common</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ContentStreamTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>common</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ContentStreamTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5aa7138d5b7</literal><operator>..</operator><literal type="number">01e0b6985f9</literal> <literal type="number">100755</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>common</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ContentStreamTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>common</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ContentStreamTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></class></expr></return> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContentStreamTest</name> extends <name>LuceneTestCase</name>
   <block>{
     <expr><name>String</name> <name>content</name> <operator>=</operator> <literal type="null">null</literal></expr>;
     <name>URL</name> <name>url</name> <operator>=</operator> <operator>new</operator> <call><name>URL</name><argument_list>( <argument><expr><literal type="string">"http://svn.apache.org/repos/asf/lucene/dev/trunk/"</literal></expr></argument> )</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>IOUtils</name><operator>.</operator><name>toString</name></name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> 
    finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content> catch (ConnectException ex</block></block></try>)</block_content> <block>{<block_content>
      <expr_stmt><expr><call><name>assumeNoException</name><argument_list>(<argument><expr><literal type="string">"Unable to connect to "</literal> <operator>+</operator> <name>url</name> <operator>+</operator> <literal type="string">" to run the test."</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
     }
     
     assertTrue( content.length(</block></if></if_stmt>)</block_content> &gt; 10</block></block></block></try> )</block_content></block><empty_stmt>;</empty_stmt></constructor> <comment type="line">// found something...</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocSet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocSet</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e52aecbf115</name><operator>..</operator><literal type="number">280e58d39ae</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocSet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestDocSet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>OpenBitSetIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>FilterIndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Filter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>DocIdSet</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">404</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">405</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocSet</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>void</name> <call><name>doFilterTest</name><argument_list>(<argument><expr><name>SolrIndexReader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>ReaderContext</name> <name>topLevelContext</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>OpenBitSet</name></type> <name>bs</name> <init>= <expr><call><name>getRandomSet</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>DocSet</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>BitDocSet</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>DocSet</name></type> <name>b</name> <init>= <expr><call><name>getIntDocSet</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">412</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">414</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestDocSet</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>Filter</name> <name>fb</name> <operator>=</operator> <call><name><name>b</name><operator>.</operator><name>getTopFilter</name></name><argument_list>()</argument_list></call></expr>;
 
     <comment type="line">// test top-level</comment>
    <name>DocIdSet</name> <name>da</name> <operator>=</operator> <call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DocIdSet</name></type> <name>db</name> <init>= <expr><call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocIdSet</name></type> <name>da</name> <init>= <expr><call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>topLevelContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocIdSet</name></type> <name>db</name> <init>= <expr><call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>topLevelContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>doTestIteratorEqual</name><argument_list>(<argument><expr><name>da</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// first test in-sequence sub readers</comment>
    <for>for <control>(<init><decl><type><name>SolrIndexReader</name></type> <name>sir</name> <range>: <expr><call><name><name>reader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>sir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>sir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ReaderContext</name></type> <name>readerInfo</name> <range>: <expr><call><name><name>topLevelContext</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>readerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>readerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>doTestIteratorEqual</name><argument_list>(<argument><expr><name>da</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>  
 
    int nReaders = reader.getLeafReaders(</block></for>)</block_content>.length</block><empty_stmt>;</empty_stmt></for>
    <decl_stmt><decl><type><name>int</name></type> <name>nReaders</name> <init>= <expr><call><name><name>topLevelContext</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
     <comment type="line">// now test out-of-sequence sub readers</comment>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nReaders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SolrIndexReader</name></type> <name>sir</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call><index>[<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>nReaders</name></expr></argument>)</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>sir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>sir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ReaderContext</name></type> <name>readerInfo</name> <init>= <expr><call><name><name>topLevelContext</name><operator>.</operator><name>leaves</name></name><argument_list>()</argument_list></call><index>[<expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>nReaders</name></expr></argument>)</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name><name>fa</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>readerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name><name>fb</name><operator>.</operator><name>getDocIdSet</name></name><argument_list>(<argument><expr><name>readerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>doTestIteratorEqual</name><argument_list>(<argument><expr><name>da</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
   }
diff --git a/solr/src/test/org/apache/solr/search/TestSort.java b/solr/src/test/org/apache/solr/search/TestSort.java
index 23069740acd..60b46237416 100755
-- a/solr/src/test/org/apache/solr/search/TestSort.java
++ b/solr/src/test/org/apache/solr/search/TestSort.java
@@ -21</block><operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></for> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>SimpleAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Field</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name><operator>.</operator><name>ReaderContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>*</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestSort</name> extends <name>AbstractSolrTestCase</name> <block>{
       <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>qiter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>Filter</name></type> <name>filt</name> <init>= <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
           <function><annotation>@<name>Override</name></annotation>
          <type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <return>return <expr><call><name>randSet</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          <function><type><specifier>public</specifier> <name>DocIdSet</name></type> <name>getDocIdSet</name><parameter_list>(<parameter><decl><type><name>ReaderContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <return>return <expr><call><name>randSet</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
           <expr_stmt/>}</block_content>
         }</block>;</function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DirectUpdateHandlerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DirectUpdateHandlerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2e05af23d3d</literal><operator>..</operator><name>dbe1c512ae0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DirectUpdateHandlerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>update</name><operator>/</operator><name><name>DirectUpdateHandlerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DirectUpdateHandlerTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>SolrQueryRequest</name> <name>sr</name> <operator>=</operator> <call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;
     <name>SolrIndexReader</name> <name>r</name> <operator>=</operator> <call><name><name>sr</name><operator>.</operator><name>getSearcher</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReader</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>r</name><operator>.</operator><name>numDocs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// should have deletions</comment>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// more than 1 segment</comment>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>isAtomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// more than 1 segment</comment>
     <expr_stmt><expr><call><name><name>sr</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="string">"expungeDeletes"</literal></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">254</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">254</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DirectUpdateHandlerTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><name>r</name> <operator>=</operator> <call><name><name>sr</name><operator>.</operator><name>getSearcher</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReader</name><argument_list>()</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>numDocs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>  <comment type="line">// no deletions</comment>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><call><name><name>r</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// no dups</comment>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getLeafReaders</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// still more than 1 segment</comment>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getTopReaderContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>isAtomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//still more than 1 segment</comment>
     <expr_stmt><expr><call><name><name>sr</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
   
- 
2.19.1.windows.1</block></function></block></class></expr></init></decl></decl_stmt></block_content></block></for></block></expr></expr_stmt></block_content></block></constructor></block_content></block></function></block_content></block></for></block_content></block></for></block></class></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></constructor></block_content></block></constructor></block_content></block></constructor></block_content></block></constructor></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></function></block_content></block></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</unit>
