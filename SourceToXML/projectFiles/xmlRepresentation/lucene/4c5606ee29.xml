<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/4c5606ee29.java"><expr_stmt><expr><name>From</name> <literal type="number">4c5606ee29e767db929999d906a66e9db32d7c68</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Christopher</name> <name>John</name> <name><name>Male</name> <argument_list type="generic">&lt;<argument><name>chrism</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">12</literal> <name>Sep</name> <literal type="number">2011</literal> <literal type="number">05</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">26</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <name>Converted</name> <name>most</name> <name>Analyzers</name> <name>over</name> <name>to</name> <name>using</name>
 <name>ReusableAnalyzerBase</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/lucene/dev/trunk@1169607 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                            <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>HighlighterTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>highlight</name><operator>/</operator><name><name>OffsetLimitTokenFilterTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>highlight</name><operator>/</operator><name><name>TokenSourcesTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>AbstractTestCase</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>vectorhighlight</name><operator>/</operator><name><name>IndexTimeSynonymTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">171</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">37</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>TestAssertions</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">37</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestDocumentWriter</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">21</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterCommit</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">21</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterDelete</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>TestIndexWriterExceptions</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">32</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestLazyProxSkipping</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestMultiLevelSkipList</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestPayloads</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>index</name><operator>/</operator><name><name>TestSameTokenSamePosition</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermVectorsReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>index</name><operator>/</operator><name><name>TestTermdocPerf</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestMultiPhraseQuery</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPositionIncrement</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>--</operator>
 <name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">27</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>ClassicAnalyzer</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>StandardAnalyzer</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name><name>TestChineseTokenizer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">25</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzerTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TestWordDelimiterFilter</name><operator>.</operator><name>java</name></name>              <operator>|</operator>  <literal type="number">28</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzerTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">26</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapperTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">34</literal> <operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">23</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">37</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>search</name><operator>/</operator><name><name>CategoryListIteratorTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiAnalyzer</name><operator>.</operator><name>java</name></name>            <operator>|</operator>  <literal type="number">24</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiFieldQueryParser</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestMultiAnalyzerQPHelper</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">24</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestMultiFieldQPHelper</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">19</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>queryparser</name><operator>/</operator><name>util</name><operator>/</operator><name><name>QueryParserTestBase</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">47</literal> <operator>++</operator><operator>+</operator><operator>--</operator>
 <literal type="number">56</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">494</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">557</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>abd9e84054c</name><operator>..</operator><literal type="number">58ce5869f2a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>Changes</name> <name>in</name> <name>backwards</name> <name>compatibility</name> <name>policy</name>
   <name><name>IndexableFieldType</name><operator>.</operator>  <name>See</name></name> <name><name>MIGRATE</name><operator>.</operator><name>txt</name></name></expr></expr_stmt> <for>for more details.
   <control>(<init><decl><type><name>Nikola</name></type> <name>Tankovic</name></decl>, <decl><type ref="prev"/><name>Mike</name> <name>McCandless</name></decl>, <decl><type ref="prev"/><name>Chris</name> <name>Male</name></decl></init>)</control><block type="pseudo"><block_content>
 
<expr_stmt><expr><operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <call><name><name>ReusableAnalyzerBase</name><operator>.</operator><name>TokenStreamComponents</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call> <name>now</name> <name>returns</name> <name>void</name> <name>instead</name>
  <name>of</name> <name><name>boolean</name><operator>.</operator>  <name>If</name></name> <name>a</name> <name>Component</name> <name>cannot</name> <name>be</name> <name>reset</name></expr><operator>,</operator> <expr><name>it</name> <name>should</name> <throw>throw <argument_list>an <argument><expr><name><name>Exception</name><operator>.</operator> 

 <name>Changes</name></name> <name>in</name> <name>Runtime</name> <name>Behavior</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2846</literal><operator>:</operator> <name>omitNorms</name> <name>now</name> <name>behaves</name> <name>like</name> <name>omitTermFrequencyAndPositions</name></expr></argument>, if <argument><expr><name>you</name>
@@ <operator>-</operator><literal type="number">523</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">526</literal></expr></argument>,<argument><expr><literal type="number">12</literal> @@ <name>New</name> <call><name>features</name>
 
   <argument_list>(<argument><expr><name>David</name> <name>Mark</name> <name>Nemeskey</name> <name>via</name> <name>Robert</name> <name>Muir</name></expr></argument>)</argument_list></call>
 
<operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3396</literal><operator>:</operator> <name>ReusableAnalyzerBase</name> <name>now</name> <name>provides</name> <name>a</name> <name>ReuseStrategy</name> <name>abstraction</name> <name>which</name>
  <name>controls</name> <name>how</name> <name>TokenStreamComponents</name> <name>are</name> <name>reused</name> <name>per</name> <name><name>request</name><operator>.</operator>  <name>Two</name></name> <name>implementations</name> <name>are</name>
  <name>provided</name> <operator>-</operator> <name>GlobalReuseStrategy</name> <name>which</name> implements <name>the</name> <name>current</name> <name>behavior</name> <name>of</name> <name>sharing</name>
  <name>components</name> <name>between</name> <name>all</name> <name>fields</name></expr></argument>, <argument><expr><name>and</name> <name>PerFieldReuseStrategy</name> <name>which</name> <name>shares</name> <name>per</name> <name><name>field</name><operator>.</operator></name>
  (<name>Chris</name> <name>Male</name></expr></argument>)</argument_list></throw>

 <name>Optimizations</name>
 
 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2588</literal><operator>:</operator> <name>Don</name><literal type="char">'t store unnecessary suffixes when writing the terms
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 728edf5c5c7..2b2e176942b 100644
-- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -1802,7 +1802,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 // behaviour to synonyms
 // ===================================================================
 
final class SynonymAnalyzer extends Analyzer {
final class SynonymAnalyzer extends ReusableAnalyzerBase {
   private Map&lt;String,String&gt; synonyms;
 
   public SynonymAnalyzer(Map&lt;String,String&gt; synonyms) {
@@ -1816,12 +1816,12 @@ final class SynonymAnalyzer extends Analyzer {
    *      java.io.Reader)
    */
   @Override
  public TokenStream tokenStream(String arg0, Reader arg1) {
  public TokenStreamComponents createComponents(String arg0, Reader arg1) {
     Tokenizer stream = new MockTokenizer(arg1, MockTokenizer.SIMPLE, true);
     stream.addAttribute(CharTermAttribute.class);
     stream.addAttribute(PositionIncrementAttribute.class);
     stream.addAttribute(OffsetAttribute.class);
    return new SynonymTokenizer(stream, synonyms);
    return new TokenStreamComponents(stream, new SynonymTokenizer(stream, synonyms));
   }
 }
 
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest.java
index 30dccc4bcc8..8afcecd6f00 100644
-- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest.java
++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest.java
@@ -20,10 +20,7 @@ package org.apache.lucene.search.highlight;
 import java.io.Reader;
 import java.io.StringReader;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.BaseTokenStreamTestCase;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 
 public class OffsetLimitTokenFilterTest extends BaseTokenStreamTestCase {
   
@@ -52,15 +49,14 @@ public class OffsetLimitTokenFilterTest extends BaseTokenStreamTestCase {
     assertTokenStreamContents(filter, new String[] {"short", "toolong",
         "evenmuchlongertext"});
     
    // TODO: This is not actually testing reuse! (reusableTokenStream is not implemented)
    checkOneTermReuse(new Analyzer() {
    checkOneTermReuse(new ReusableAnalyzerBase() {
       
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
         tokenizer.setEnableChecks(false);
        return new OffsetLimitTokenFilter(tokenizer, 10);
        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));
       }
     }, "llenges", "llenges");
   }
}
\ No newline at end of file
}
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
index c368128c7a9..0e0bb8585ab 100644
-- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest.java
@@ -20,9 +20,7 @@ package org.apache.lucene.search.highlight;
 import java.io.IOException;
 import java.io.Reader;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
@@ -50,15 +48,15 @@ import org.apache.lucene.util.LuceneTestCase;
 public class TokenSourcesTest extends LuceneTestCase {
   private static final String FIELD = "text";
 
  private static final class OverlapAnalyzer extends Analyzer {
  private static final class OverlapAnalyzer extends ReusableAnalyzerBase {
 
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {
      return new TokenStreamOverlap();
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      return new TokenStreamComponents(new TokenStreamOverlap());
     }
   }
 
  private static final class TokenStreamOverlap extends TokenStream {
  private static final class TokenStreamOverlap extends Tokenizer {
     private Token[] tokens;
 
     private int i = -1;
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
index befaef311e0..c28b3dac6c0 100644
-- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
@@ -24,11 +24,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
@@ -198,10 +194,10 @@ public abstract class AbstractTestCase extends LuceneTestCase {
     return phraseQuery;
   }
 
  static final class BigramAnalyzer extends Analyzer {
  static final class BigramAnalyzer extends ReusableAnalyzerBase {
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {
      return new BasicNGramTokenizer( reader );
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      return new TokenStreamComponents(new BasicNGramTokenizer(reader));
     }
   }
   
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
index abe550ddee0..433c6347bb2 100644
-- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
@@ -22,9 +22,7 @@ import java.io.Reader;
 import java.util.HashSet;
 import java.util.Set;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.BooleanClause.Occur;
@@ -292,15 +290,15 @@ public class IndexTimeSynonymTest extends AbstractTestCase {
     return token;
   }
   
  public static final class TokenArrayAnalyzer extends Analyzer {
    Token[] tokens;
    public TokenArrayAnalyzer( Token... tokens ){
  public static final class TokenArrayAnalyzer extends ReusableAnalyzerBase {
    final Token[] tokens;
    public TokenArrayAnalyzer(Token... tokens) {
       this.tokens = tokens;
     }
     
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {      
      TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      Tokenizer ts = new Tokenizer(Token.TOKEN_ATTRIBUTE_FACTORY) {
         final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);
         int p = 0;
         
@@ -318,7 +316,7 @@ public class IndexTimeSynonymTest extends AbstractTestCase {
           this.p = 0;
         }
       };
      return ts;
      return new TokenStreamComponents(ts);
     }
   }
 }
diff --git a/lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java b/lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java
index baf8f4ccbc4..638e7ab53d3 100644
-- a/lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java
++ b/lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java
@@ -17,8 +17,13 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
import org.apache.lucene.store.AlreadyClosedException;
import org.apache.lucene.util.CloseableThreadLocal;

 import java.io.IOException;
 import java.io.Reader;
import java.util.HashMap;
import java.util.Map;
 
 /**
  * An convenience subclass of Analyzer that makes it easy to implement
@@ -38,6 +43,16 @@ import java.io.Reader;
  */
 public abstract class ReusableAnalyzerBase extends Analyzer {
 
  private final ReuseStrategy reuseStrategy;

  public ReusableAnalyzerBase() {
    this(new GlobalReuseStrategy());
  }

  public ReusableAnalyzerBase(ReuseStrategy reuseStrategy) {
    this.reuseStrategy = reuseStrategy;
  }

   /**
    * Creates a new {@link TokenStreamComponents} instance for this analyzer.
    * 
@@ -66,14 +81,15 @@ public abstract class ReusableAnalyzerBase extends Analyzer {
   @Override
   public final TokenStream reusableTokenStream(final String fieldName,
       final Reader reader) throws IOException {
    TokenStreamComponents streamChain = (TokenStreamComponents)
    getPreviousTokenStream();
    TokenStreamComponents components = reuseStrategy.getReusableComponents(fieldName);
     final Reader r = initReader(reader);
    if (streamChain == null || !streamChain.reset(r)) {
      streamChain = createComponents(fieldName, r);
      setPreviousTokenStream(streamChain);
    if (components == null) {
      components = createComponents(fieldName, r);
      reuseStrategy.setReusableComponents(fieldName, components);
    } else {
      components.reset(r);
     }
    return streamChain.getTokenStream();
    return components.getTokenStream();
   }
 
   /**
@@ -98,7 +114,16 @@ public abstract class ReusableAnalyzerBase extends Analyzer {
   protected Reader initReader(Reader reader) {
     return reader;
   }
  

  /**
   * {@inheritDoc}
   */
  @Override
  public void close() {
    super.close();
    reuseStrategy.close();
  }

   /**
    * This class encapsulates the outer components of a token stream. It provides
    * access to the source ({@link Tokenizer}) and the outer end (sink), an
@@ -137,22 +162,16 @@ public abstract class ReusableAnalyzerBase extends Analyzer {
     }
 
     /**
     * Resets the encapsulated components with the given reader. This method by
     * default returns &lt;code&gt;true&lt;/code&gt; indicating that the components have
     * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use
     * their own {@link TokenStreamComponents} returning &lt;code&gt;false&lt;/code&gt; if
     * the components cannot be reset.
     * Resets the encapsulated components with the given reader. If the components
     * cannot be reset, an Exception should be thrown.
      * 
      * @param reader
      *          a reader to reset the source component
     * @return &lt;code&gt;true&lt;/code&gt; if the components were reset, otherwise
     *         &lt;code&gt;false&lt;/code&gt;
      * @throws IOException
      *           if the component'</literal><name>s</name> <name>reset</name> <name>method</name> <throws>throws <argument><expr><name>an</name> <block>{<expr><annotation>@<name>link</name></annotation> <name>IOException</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
    <specifier>protected</specifier> <name>boolean</name> <call><name>reset</name><argument_list>(<argument><expr><name>final</name> <name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><specifier>protected</specifier> <name>void</name> <call><name>reset</name><argument_list>(<argument><expr><name>final</name> <name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
       <expr><call><name><name>source</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt></block_content></block></for>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     }
 
     <comment type="block" format="javadoc">/**
@@ -166,4 +185,124 @@ public abstract class ReusableAnalyzerBase extends Analyzer {
 
   }
 
  /**
   * Strategy defining how TokenStreamComponents are reused per call to
   * {@link ReusableAnalyzerBase#tokenStream(String, java.io.Reader)}.
   */</comment>
  public <class><specifier>static</specifier> <specifier>abstract</specifier> class <name>ReuseStrategy</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>storedValue</name> <init>= <expr><operator>new</operator> <call><name><name>CloseableThreadLocal</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the reusable TokenStreamComponents for the field with the given name
     *
     * @param fieldName Name of the field whose reusable TokenStreamComponents
     *        are to be retrieved
     * @return Reusable TokenStreamComponents for the field, or {@code null}
     *         if there was no previous components for the field
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Stores the given TokenStreamComponents as the reusable components for the
     * field with the give name
     *
     * @param fieldName Name of the field whose TokenStreamComponents are being set
     * @param components TokenStreamComponents which are to be reused for the field
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the currently stored value
     *
     * @return Currently stored value or {@code null} if no value is stored
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Object</name></type> <name>getStoredValue</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <return>return <expr><call><name><name>storedValue</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the stored value
     *
     * @param storedValue Value to store
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setStoredValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>storedValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>storedValue</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>storedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AlreadyClosedException</name><argument_list>(<argument><expr><literal type="string">"this Analyzer is closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <throw>throw <expr><name>npe</name></expr>;</throw>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes the ReuseStrategy, freeing any resources
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>storedValue</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>storedValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses the same components for
   * every field.
   */</comment>
  <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>GlobalReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>TokenStreamComponents</name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Implementation of {@link ReuseStrategy} that reuses components per-field by
   * maintaining a Map of TokenStreamComponent per field name.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PerFieldReuseStrategy</name> <super_list><extends>extends <super><name>ReuseStrategy</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>getReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>componentsPerField</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>componentsPerField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setReusableComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>TokenStreamComponents</name></type> <name>components</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name></type> <name>componentsPerField</name> <init>= <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getStoredValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>componentsPerField</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>componentsPerField</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TokenStreamComponents</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStoredValue</name><argument_list>(<argument><expr><name>componentsPerField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>componentsPerField</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dbd28fe67fc</name><operator>..</operator><literal type="number">6762bd03b89</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>automaton</name><operator>.</operator><name>CharacterRunAutomaton</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><operator>/</operator><name>ul</name><operator>&gt;</operator>
  <operator>*</operator> @<name>see</name> <name>MockTokenizer</name>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>Analyzer</name> <block>{ 
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>CharacterRunAutomaton</name> <name>runAutomaton</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>boolean</name> <name>lowerCase</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>CharacterRunAutomaton</name> <name>filter</name></expr>;
@@ <expr><operator>-</operator><literal type="number">62</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">62</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><operator>*</operator> @<name>param</name> <name>enablePositionIncrements</name> <literal type="boolean">true</literal></expr> <if_stmt><if>if position increments should reflect filtered terms.
    */
   public MockAnalyzer<condition>(<expr><name>Random</name> <name>random</name></expr><operator>,</operator> <expr><name>CharacterRunAutomaton</name> <name>runAutomaton</name></expr><operator>,</operator> <expr><name>boolean</name> <name>lowerCase</name></expr><operator>,</operator> <expr><name>CharacterRunAutomaton</name> <name>filter</name></expr><operator>,</operator> <expr><name>boolean</name> <name>enablePositionIncrements</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>random</name></name> <operator>=</operator> <name>random</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>runAutomaton</name></name> <operator>=</operator> <name>runAutomaton</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerCase</name></name> <operator>=</operator> <name>lowerCase</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>MockAnalyzer</name> extends <name>Analyzer</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>MockTokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>runAutomaton</name></expr></argument>, <argument><expr><name>lowerCase</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>tokenizer</name><operator>.</operator><name>setEnableChecks</name></name><argument_list>(<argument><expr><name>enableChecks</name></expr></argument>)</argument_list></call></block></expr>;
     <name>TokenFilter</name> <name>filt</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>enablePositionIncrements</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>maybePayload</name><argument_list>(<argument><expr><name>filt</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>filt</name></expr>;</return>
  <expr_stmt/></block_content></block></if></if_stmt>}</block>

  <specifier>private</specifier> <name>class</name> <name>SavedStreams</name> <block>{
    <expr><name>MockTokenizer</name> <name>tokenizer</name></expr>;
    <expr><name>TokenFilter</name> <name>filter</name></expr>;
  }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>reusableTokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call>
      <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SavedStreams</name></argument>&gt;</argument_list></name> <name>map</name> <operator>=</operator> <operator>(</operator><name>Map</name><operator>)</operator> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>SavedStreams</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>
    
    <name>SavedStreams</name> <name>saved</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>saved</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>saved</name> <operator>=</operator> <operator>new</operator> <call><name>SavedStreams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>saved</name><operator>.</operator><name>tokenizer</name></name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>runAutomaton</name></expr></argument>, <argument><expr><name>lowerCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>saved</name><operator>.</operator><name>tokenizer</name><operator>.</operator><name>setEnableChecks</name></name><argument_list>(<argument><expr><name>enableChecks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>saved</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenFilter</name><argument_list>(<argument><expr><name><name>saved</name><operator>.</operator><name>tokenizer</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>enablePositionIncrements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>saved</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <call><name>maybePayload</name><argument_list>(<argument><expr><name><name>saved</name><operator>.</operator><name>filter</name></name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>saved</name><operator>.</operator><name>filter</name></name></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>saved</name><operator>.</operator><name>tokenizer</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>saved</name><operator>.</operator><name>filter</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><call><name>maybePayload</name><argument_list>(<argument><expr><name>filt</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }
   
   private <function><type><specifier>synchronized</specifier> <name>TokenFilter</name></type> <name>maybePayload</name><parameter_list>(<parameter><decl><type><name>TokenFilter</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fe64ad8884e</name><operator>..</operator><name>dbf9c2a2026</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>-</operator><name>framework</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>MockPayloadAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
  <expr_stmt><expr><operator>*</operator>
  <operator>*</operator>
  <operator>*</operator><operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>MockPayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>MockPayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
   @<expr><name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><operator>new</operator> <call><name>MockPayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
  <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockPayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></block></expr>
   }</block></expr>
 }</block></expr></expr_stmt>
 

 <comment type="block" format="javadoc">/**
  *
  *
diff --git a/lucene/src/test/org/apache/lucene/TestAssertions.java b/lucene/src/test/org/apache/lucene/TestAssertions.java
index ce51fd34484..4a3c75e1310 100644
-- a/lucene/src/test/org/apache/lucene/TestAssertions.java
++ b/lucene/src/test/org/apache/lucene/TestAssertions.java
@@ -19,6 +19,7 @@ package org.apache.lucene;
 
 import java.io.Reader;
 
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
@@ -34,32 +35,36 @@ public class TestAssertions extends LuceneTestCase {
     }
   }
   
  static class TestAnalyzer1 extends Analyzer {
    @Override
    public final TokenStream tokenStream(String s, Reader r) { return null; }
  static class TestAnalyzer1 extends ReusableAnalyzerBase {

     @Override
    public final TokenStream reusableTokenStream(String s, Reader r) { return null; }
    protected TokenStreamComponents createComponents(String fieldName, Reader aReader) {
      return null;
    }
   }
 
  static final class TestAnalyzer2 extends Analyzer {
    @Override
    public TokenStream tokenStream(String s, Reader r) { return null; }
  static final class TestAnalyzer2 extends ReusableAnalyzerBase {

     @Override
    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
    protected TokenStreamComponents createComponents(String fieldName, Reader aReader) {
      return null;
    }
   }
 
  static class TestAnalyzer3 extends Analyzer {
    @Override
    public TokenStream tokenStream(String s, Reader r) { return null; }
  static class TestAnalyzer3 extends ReusableAnalyzerBase {

     @Override
    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
    protected TokenStreamComponents createComponents(String fieldName, Reader aReader) {
      return null;
    }
   }
 
  static class TestAnalyzer4 extends Analyzer {
    @Override
    public final TokenStream tokenStream(String s, Reader r) { return null; }
  static class TestAnalyzer4 extends ReusableAnalyzerBase {

     @Override
    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
    protected TokenStreamComponents createComponents(String fieldName, Reader aReader) {
      return null;
    }
   }
 
   static class TestTokenStream1 extends TokenStream {
diff --git a/lucene/src/test/org/apache/lucene/index/TestDocumentWriter.java b/lucene/src/test/org/apache/lucene/index/TestDocumentWriter.java
index 45d92667c8d..3dc7c055a9b 100644
-- a/lucene/src/test/org/apache/lucene/index/TestDocumentWriter.java
++ b/lucene/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -20,11 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.Reader;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
@@ -107,10 +103,10 @@ public class TestDocumentWriter extends LuceneTestCase {
   }
 
   public void testPositionIncrementGap() throws IOException {
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase() {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));
       }
 
       @Override
@@ -142,10 +138,11 @@ public class TestDocumentWriter extends LuceneTestCase {
   }
 
   public void testTokenReuse() throws IOException {
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase() {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false)) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {
           boolean first = true;
           AttributeSource.State state;
 
@@ -187,7 +184,7 @@ public class TestDocumentWriter extends LuceneTestCase {
           final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
           final PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);
           final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
        };
        });
       }
     };
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
index 6fdb72bda79..9fca64934d8 100644
-- a/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -31,11 +31,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.document.BinaryField;
@@ -1710,10 +1706,10 @@ public class TestIndexWriter extends LuceneTestCase {
     dir.close();
   }
 
  static final class StringSplitAnalyzer extends Analyzer {
  static final class StringSplitAnalyzer extends ReusableAnalyzerBase {
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {
      return new StringSplitTokenizer(reader);
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      return new TokenStreamComponents(new StringSplitTokenizer(reader));
     }
   }
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
index 9bde4a3eb38..553cf076b91 100644
-- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit.java
@@ -23,11 +23,7 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockFixedLengthPayloadFilter;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StringField;
@@ -179,21 +175,20 @@ public class TestIndexWriterCommit extends LuceneTestCase {
     Analyzer analyzer;
     if (random.nextBoolean()) {
       // no payloads
     analyzer = new Analyzer() {
     analyzer = new ReusableAnalyzerBase() {
         @Override
        public TokenStream tokenStream(String fieldName, Reader reader) {
          return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
        public TokenStreamComponents createComponents(String fieldName, Reader reader) {
          return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));
         }
       };
     } else {
       // fixed length payloads
       final int length = random.nextInt(200);
      analyzer = new Analyzer() {
      analyzer = new ReusableAnalyzerBase() {
         @Override
        public TokenStream tokenStream(String fieldName, Reader reader) {
          return new MockFixedLengthPayloadFilter(random,
              new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),
              length);
        public TokenStreamComponents createComponents(String fieldName, Reader reader) {
          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
          return new TokenStreamComponents(tokenizer, new MockFixedLengthPayloadFilter(random, tokenizer, length));
         }
       };
     }
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
index bc35eb4adfb..bfea6ddcea3 100644
-- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
@@ -26,10 +26,7 @@ import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicBoolean;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StringField;
@@ -902,10 +899,10 @@ public class TestIndexWriterDelete extends LuceneTestCase {
     final Random r = random;
     Directory dir = newDirectory();
     // note this test explicitly disables payloads
    final Analyzer analyzer = new Analyzer() {
    final Analyzer analyzer = new ReusableAnalyzerBase() {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));
       }
     };
     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index 74ac08fca36..d0369b0bce4 100644
-- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -27,11 +27,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
@@ -390,12 +386,12 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     doc.add(newField("field", "a field", TextField.TYPE_STORED));
     w.addDocument(doc);
 
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
         tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.
        return new CrashingFilter(fieldName, tokenizer);
        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));
       }
     };
 
@@ -458,13 +454,13 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   // LUCENE-1072
   public void testExceptionFromTokenStream() throws IOException {
     Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {
    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new ReusableAnalyzerBase() {
 
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);
         tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.
        return new TokenFilter(tokenizer) {
        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {
           private int count = 0;
 
           @Override
@@ -480,7 +476,7 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
             super.reset();
             this.count = 0;
           }
        };
        });
       }
 
     });
@@ -595,12 +591,12 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   }
 
   public void testDocumentsWriterExceptions() throws IOException {
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
         tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.
        return new CrashingFilter(fieldName, tokenizer);
        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));
       }
     };
 
@@ -691,12 +687,12 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
   }
 
   public void testDocumentsWriterExceptionThreads() throws Exception {
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
         MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
         tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.
        return new CrashingFilter(fieldName, tokenizer);
        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));
       }
     };
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java b/lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
index 95bf55a37a2..d5975eb2bea 100755
-- a/lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
++ b/lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
@@ -20,10 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.Reader;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.codecs.CodecProvider;
@@ -71,10 +68,10 @@ public class TestLazyProxSkipping extends LuceneTestCase {
     private void createIndex(int numHits) throws IOException {
         int numDocs = 500;
         
        final Analyzer analyzer = new Analyzer() {
        final Analyzer analyzer = new ReusableAnalyzerBase() {
           @Override
          public TokenStream tokenStream(String fieldName, Reader reader) {
            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
          public TokenStreamComponents createComponents(String fieldName, Reader reader) {
            return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));
           }
         };
         Directory directory = new SeekCountingDirectory(new RAMDirectory());
diff --git a/lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java b/lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
index 599d490051a..6f4a5d97254 100644
-- a/lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
++ b/lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
@@ -21,10 +21,7 @@ import java.io.IOException;
 import java.io.Reader;
 import java.util.concurrent.atomic.AtomicInteger;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.TextField;
@@ -114,11 +111,12 @@ public class TestMultiLevelSkipList extends LuceneTestCase {
     assertEquals("Wrong payload for the target " + target + ": " + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);
   }
 
  private static class PayloadAnalyzer extends Analyzer {
  private static class PayloadAnalyzer extends ReusableAnalyzerBase {
     private final AtomicInteger payloadCount = new AtomicInteger(-1);
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {
      return new PayloadFilter(payloadCount, new MockTokenizer(reader, MockTokenizer.WHITESPACE, true));
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);
      return new TokenStreamComponents(tokenizer, new PayloadFilter(payloadCount, tokenizer));
     }
 
   }
diff --git a/lucene/src/test/org/apache/lucene/index/TestPayloads.java b/lucene/src/test/org/apache/lucene/index/TestPayloads.java
index 6ece3e5d9e8..c1ba6cb8dea 100644
-- a/lucene/src/test/org/apache/lucene/index/TestPayloads.java
++ b/lucene/src/test/org/apache/lucene/index/TestPayloads.java
@@ -25,11 +25,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.MockTokenizer;
import org.apache.lucene.analysis.TokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.document.Document;
@@ -105,12 +101,12 @@ public class TestPayloads extends LuceneTestCase {
         // so this field is used to check if the DocumentWriter correctly enables the payloads bit
         // even if only some term positions have payloads
         d.add(newField("f2", "This field has payloads in all docs", TextField.TYPE_UNSTORED));
        d.add(newField("f2", "This field has payloads in all docs", TextField.TYPE_UNSTORED));
        d.add(newField("f2", "This field has payloads in all docs NO PAYLOAD", TextField.TYPE_UNSTORED));
         // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads 
         // enabled in only some documents
         d.add(newField("f3", "This field has payloads in some docs", TextField.TYPE_UNSTORED));
         // only add payload data for field f2
        analyzer.setPayloadData("f2", 1, "somedata".getBytes(), 0, 1);
        analyzer.setPayloadData("f2", "somedata".getBytes(), 0, 1);
         writer.addDocument(d);
         // flush
         writer.close();
diff --git a/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java b/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
index 8e9e58c92ec..b117adab69b 100644
-- a/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
++ b/lucene/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java
@@ -20,8 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.Reader;
 
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
@@ -64,10 +63,10 @@ public class TestSameTokenSamePosition extends LuceneTestCase {
   }
 }
 
final class BugReproAnalyzer extends Analyzer{
final class BugReproAnalyzer extends ReusableAnalyzerBase {
   @Override
  public TokenStream tokenStream(String arg0, Reader arg1) {
    return new BugReproAnalyzerTokenizer();
  public TokenStreamComponents createComponents(String arg0, Reader arg1) {
    return new TokenStreamComponents(new BugReproAnalyzerTokenizer());
   }
 }
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java b/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index 6a93c435731..2aad70c16f9 100644
-- a/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java
++ b/lucene/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -137,7 +137,7 @@ public class TestTermVectorsReader extends LuceneTestCase {
     super.tearDown();
   }
 
  private class MyTokenStream extends TokenStream {
  private class MyTokenStream extends Tokenizer {
     private int tokenUpto;
     
     private final CharTermAttribute termAtt;
@@ -175,10 +175,10 @@ public class TestTermVectorsReader extends LuceneTestCase {
     }
   }
 
  private class MyAnalyzer extends Analyzer {
  private class MyAnalyzer extends ReusableAnalyzerBase {
     @Override
    public TokenStream tokenStream(String fieldName, Reader reader) {
      return new MyTokenStream();
    public TokenStreamComponents createComponents(String fieldName, Reader reader) {
      return new TokenStreamComponents(new MyTokenStream());
     }
   }
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java b/lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java
index f5c3dcdd89e..dbe1b94fbd8 100644
-- a/lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java
++ b/lucene/src/test/org/apache/lucene/index/TestTermdocPerf.java
@@ -22,7 +22,7 @@ import java.io.Reader;
 import java.util.Random;
 
 import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.ReusableAnalyzerBase;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.document.Document;
@@ -77,10 +77,10 @@ public class TestTermdocPerf extends LuceneTestCase {
   void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {
     final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);
 
    Analyzer analyzer = new Analyzer() {
    Analyzer analyzer = new ReusableAnalyzerBase() {
       @Override
      public TokenStream tokenStream(String fieldName, Reader reader) {
        return ts;
      public TokenStreamComponents createComponents(String fieldName, Reader reader) {
        return new TokenStreamComponents(ts);
       }
     };
 
diff --git a/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java b/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
index 5ef3a09b701..d63296c53ef 100644
-- a/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
++ b/lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
@@ -17,6 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */</comment>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>RandomIndexWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">345</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">346</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CannedAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CannedAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl>;</decl_stmt>
     
     <constructor><specifier>public</specifier> <name>CannedAnalyzer</name><parameter_list>(<parameter><decl><type><name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">353</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">354</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQuery</name> extends <name>LuceneTestCase</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>CannedTokenizer</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CannedTokenizer</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block>
   }</block></expr></expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3cb9a282b76</literal><operator>..</operator><name>a60a8824377</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestPhraseQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPhraseQuery</name> extends <name>LuceneTestCase</name> <block>{
   @<expr><name>BeforeClass</name>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>beforeClass</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>directory</name> <operator>=</operator> <call><name>newDirectory</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>Analyzer</name> <name>analyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
 
       @Override
diff --git a/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java b/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
index 3cbe6610f46..4e59e0f3d43 100644
-- a/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
++ b/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -56</block><operator>,</operator>10 +56<operator>,</operator>10 @@ public class TestPositionIncrement extends LuceneTestCase <block>{<block_content>
   <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>VERBOSE</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetPosition</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>TokenStream</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Tokenizer</name></super><argument_list>()</argument_list> <block>{
           <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>TOKENS</name> <init>= <expr><block>{<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"5"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>INCREMENTS</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestPositionIncrement</name> extends <name>LuceneTestCase</name> <block>{
             <expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
             <expr><name><name>this</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
           }</block></expr></expr_stmt>
        }</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr></return>
        <expr_stmt/>}</block_content></block></function>)</block><empty_stmt>;</empty_stmt></class></expr></return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     <decl_stmt><decl><type><name>Directory</name></type> <name>store</name> <init>= <expr><call><name>newDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">987fadc0564</literal><operator>..</operator><literal type="number">3b6fa24d10c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name><name>TestTermRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermRangeQuery</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"queries with different inclusive are not equal"</literal></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>SingleCharAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>SingleCharAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>SingleCharTokenizer</name> extends <name>Tokenizer</name> <block>{
       <expr><name><name>char</name><index>[]</index></name> <name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;
@@ <expr><operator>-</operator><literal type="number">225</literal></expr>,<expr><literal type="number">19</literal> <operator>+</operator><literal type="number">225</literal></expr>,<expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestTermRangeQuery</name> extends <name>LuceneTestCase</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>reusableTokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
      <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>(</operator><name>Tokenizer</name><operator>)</operator> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
      <if_stmt><if>if <condition>(<expr><name>tokenizer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>SingleCharTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content> else
        tokenizer.reset(reader</block></if></if_stmt>)</block></expr>;
      <return>return <expr><name>tokenizer</name></expr>;</return>
    }</block>

    @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>SingleCharTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SingleCharTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d799ca65df2</name><operator>..</operator><literal type="number">4648af7871f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>PayloadHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">55</literal></expr>,<expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>PayloadHelper</name> <block>{
 
   <expr><specifier>public</specifier> <name>IndexReader</name> <name>reader</name></expr>;
 
  <expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
    <expr><specifier>public</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0b216bcfd87</literal><operator>..</operator><literal type="number">6b37b5c7d9b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadNearQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">55</literal></expr>,<expr><literal type="number">12</literal> <operator>+</operator><literal type="number">55</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloadNearQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name> <name>payload2</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">2</literal></expr>}</block></expr>;
   <expr><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name> <name>payload4</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">4</literal></expr>}</block></expr>;
 
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8a102eda658</literal><operator>..</operator><name>cd952447ebb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>payloads</name><operator>/</operator><name><name>TestPayloadTermQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">64</literal></expr>,<expr><literal type="number">14</literal> <operator>+</operator><literal type="number">64</literal></expr>,<expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloadTermQuery</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>byte</name><index>[]</index></name> <name>payloadMultiField2</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><literal type="number">4</literal></expr>}</block></expr>;
   <expr><specifier>protected</specifier> <specifier>static</specifier> <name>Directory</name> <name>directory</name></expr>;
 
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
    <expr><specifier>private</specifier> <call><name>PayloadAnalyzer</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">81e90e32b0e</literal><operator>..</operator><name>c3a30c51477</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestBasics</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import></block></expr>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
@@ <operator>-</operator><literal type="number">70</literal>,<literal type="number">14</literal> <operator>+</operator><literal type="number">71</literal>,<literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBasics</name> extends <name>LuceneTestCase</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>Directory</name> <name>directory</name></expr>;
 
   <expr><specifier>static</specifier> <name>final</name> <name>class</name> <name>SimplePayloadFilter</name> extends <name>TokenFilter</name> <block>{
    <expr><name>String</name> <name>fieldName</name></expr>;
     <expr><name>int</name> <name>pos</name></expr>;
     <expr><name>final</name> <name>PayloadAttribute</name> <name>payloadAttr</name></expr>;
     <expr><name>final</name> <name>CharTermAttribute</name> <name>termAttr</name></expr>;
 
    <expr><specifier>public</specifier> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><name>TokenStream</name> <name>input</name></expr></argument>, <argument><expr><name>String</name> <name>fieldName</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><name>TokenStream</name> <name>input</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;
      <expr><name><name>this</name><operator>.</operator><name>fieldName</name></name> <operator>=</operator> <name>fieldName</name></expr>;
       <expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;
       <expr><name>payloadAttr</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>PayloadAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
       <expr><name>termAttr</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><name><name>CharTermAttribute</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">105</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">104</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestBasics</name> extends <name>LuceneTestCase</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
      <return>return <expr><operator>new</operator> <call><name>SimplePayloadFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block>
     
   }</expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ed6d5b7b02d</name><operator>..</operator><literal type="number">85771161ef0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>lucene</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>search</name><operator>/</operator><name>spans</name><operator>/</operator><name><name>TestPayloadSpans</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">23</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PayloadAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PositionIncrementAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">479</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">476</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloadSpans</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>numSpans</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <name>final</name> <name>class</name> <name>PayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><name>final</name> <name>class</name> <name>PayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
   <name>final</name> <name>class</name> <name>PayloadFilter</name> extends <name>TokenFilter</name> <block>{
    <expr><name>String</name> <name>fieldName</name></expr>;
     <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>entities</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <expr><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>nopayload</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <expr><name>int</name> <name>pos</name></expr>;
@@ <expr><operator>-</operator><literal type="number">498</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">493</literal></expr>,<expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloadSpans</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>CharTermAttribute</name> <name>termAtt</name></expr>;
     <expr><name>PositionIncrementAttribute</name> <name>posIncrAtt</name></expr>;
 
    <expr><specifier>public</specifier> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>TokenStream</name> <name>input</name></expr></argument>, <argument><expr><name>String</name> <name>fieldName</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>TokenStream</name> <name>input</name></expr></argument>)</argument_list></call> <block>{
       <expr><call><name>super</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;
      <expr><name><name>this</name><operator>.</operator><name>fieldName</name></name> <operator>=</operator> <name>fieldName</name></expr>;
       <expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;
       <expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"xx"</literal></expr></argument>)</argument_list></call></expr>;
       <expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">536</literal></expr>,<expr><literal type="number">13</literal> <operator>+</operator><literal type="number">530</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPayloadSpans</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr>
   }</block>
   
  <specifier>public</specifier> <name>final</name> <name>class</name> <name>TestPayloadAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>TestPayloadAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PayloadFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 }
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">32ab0f10c51</literal><operator>..</operator><literal type="number">58e9f0ca99e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">106</literal></expr>,<expr><literal type="number">3</literal> <operator>+</operator><literal type="number">106</literal></expr>,<expr><literal type="number">5</literal> @@ <name>Build</name>
  <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">2413</literal><operator>:</operator> <name>All</name> <name>analyzers</name> <name>in</name> <name>contrib</name><operator>/</operator><name>analyzers</name> <name>and</name> <name>contrib</name><operator>/</operator><name>icu</name> <name>were</name> <name>moved</name> <name>to</name> <name>the</name> 
    <name>analysis</name> <name><name>module</name><operator>.</operator>  <name>The</name></name> <literal type="char">'smartcn'</literal> <name>and</name> <literal type="char">'stempel'</literal> <name>components</name> <name>now</name> <name>depend</name> <name>on</name> <literal type="char">'common'</literal><operator>.</operator>  
    <operator>(</operator><name>Robert</name> <name>Muir</name><operator>)</operator>

 <operator>*</operator> <name>LUCENE</name><operator>-</operator><literal type="number">3376</literal><operator>:</operator> <name>Moved</name> <name>ReusableAnalyzerBase</name> <name>into</name> <name>lucene</name> <name><name>core</name><operator>.</operator></name> (<name>Chris</name> <name>Male</name></expr>)
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1d543551160</literal><operator>..</operator><literal type="number">4c12b31afb6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal>,<literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal>,<literal type="number">7</literal> @@</block></expr> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import></block></expr>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import></block></expr>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>StopAnalyzer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> @<call><name>deprecated</name> <argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call> <name>use</name> <name>the</name> <name>pattern</name><operator>-</operator><name>based</name> <name>analysis</name> <name>in</name> <name>the</name> <name>analysis</name><operator>/</operator><name>pattern</name></expr></expr_stmt> <package>package <name><name>instead</name><operator>.</operator></name>
  */
 @<name>Deprecated</name>
public <name>final</name> class <name>PatternAnalyzer</name> extends <name>Analyzer</name> <block>{<block_content>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PatternAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
   
   <comment type="block" format="javadoc">/** &lt;code&gt;"\\W+"&lt;/code&gt;; Divides text at non-letters (NOT Character.isLetter(c)) */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>NON_WORD_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\W+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>PatternAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><operator>*</operator>            <name>the</name> <name>string</name> <name>to</name> <name>tokenize</name>
    <operator>*</operator> @</expr><return>return <expr><name>a</name> <operator>new</operator> <name>token</name> <name>stream</name>
    <operator>*</operator><operator>/</operator>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>String</name> <name>text</name></expr></argument>)</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>String</name> <name>text</name></expr></argument>)</argument_list></call> <block>{
     <comment type="line">// Ideally the Analyzer superclass should have a method with the same signature, </comment>
     <comment type="line">// with a default impl that simply delegates to the StringReader flavour. </comment>
     <if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> 
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"text must not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
     
    <name>TokenStream</name> <name>stream</name></block></expr>;
     <if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NON_WORD_PATTERN</name></expr>)</condition> <block>{<block_content> <comment type="line">// fast path</comment>
      <expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>FastStringTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FastStringTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <expr_stmt/>}</block_content> else if (pattern == WHITESPACE_PATTERN</block></if></if_stmt>) <block>{ <comment type="line">// fast path</comment>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FastStringTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block></expr></return>
    <if_stmt><if type="elseif">else if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>WHITESPACE_PATTERN</name></expr>)</condition> <block>{<block_content> <comment type="line">// fast path</comment>
      <expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>FastStringTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    else <block>{<block_content>
      <expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>PatternTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>stopWords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt/>}</block_content>
    
    return stream</block></block><empty_stmt>;</empty_stmt></if></if_stmt>

    <name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>PatternTokenizer</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>toLowerCase</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>stopWords</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>tokenizer</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block>
   
   <comment type="block" format="javadoc">/**
@@ -220,10 +217,10 @@ public final class PatternAnalyzer extends Analyzer {
    * @return a new token stream
    */</comment>
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>toString</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>tokenStream</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><call><name>createComponents</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content> catch (IOException e</block></try>)</block_content> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     <expr_stmt/>}</block_content>
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicAnalyzer.java
index c856b524c0c..21415be5c3e 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicAnalyzer.java
@@ -123</block></block><operator>,</operator>9 +123<operator>,</operator>9 @@ public final class ClassicAnalyzer extends StopwordAnalyzerBase <block>{<block_content>
     <expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><name>stopwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><operator>new</operator> <class><super><name>TokenStreamComponents</name></super><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>boolean</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>protected</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>src</name><operator>.</operator><name>setMaxTokenLength</name></name><argument_list>(<argument><expr><name><name>ClassicAnalyzer</name><operator>.</operator><name>this</name><operator>.</operator><name>maxTokenLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
     }</block>;</function>
   <expr_stmt/>}</block_content>
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
index 637e06994bd..12f185e4d98 100644
-- a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
@@ -124</block><operator>,</operator>9 +124<operator>,</operator>9 @@ public final class StandardAnalyzer extends StopwordAnalyzerBase <block>{<block_content>
     <expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><name>stopwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><operator>new</operator> <class><super><name>TokenStreamComponents</name></super><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>boolean</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <function><type><specifier>protected</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>src</name><operator>.</operator><name>setMaxTokenLength</name></name><argument_list>(<argument><expr><name><name>StandardAnalyzer</name><operator>.</operator><name>this</name><operator>.</operator><name>maxTokenLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/>}</block_content>
     }</block>;</function>
   <expr_stmt/>}</block_content>
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
index 0f24353b0d4..3cec2995305 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
@@ -21</block><operator>,</operator>9 +21<operator>,</operator>7 @@ import java.io.IOException;</function>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>WhitespaceTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestChineseTokenizer</name> extends <name>BaseTokenStreamTestCase</name>
      <operator>*</operator> <name>Analyzer</name> <name>that</name> <name>just</name> <name>uses</name> <name>ChineseTokenizer</name></expr><operator>,</operator> <expr><name>not</name> <name><name>ChineseFilter</name><operator>.</operator></name>
      * <name>convenience</name> <name>to</name> <name>show</name> <name>the</name> <name>behavior</name> <name>of</name> <name>the</name> <name>tokenizer</name>
      <operator>*</operator><operator>/</operator>
    <specifier>private</specifier> <name>class</name> <name>JustChineseTokenizerAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><specifier>private</specifier> <name>class</name> <name>JustChineseTokenizerAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
       @<expr><name>Override</name>
      <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><operator>new</operator> <call><name>ChineseTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
      <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChineseTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       }</block></block>   
     }
     
@@ <operator>-</operator><literal type="number">77</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">75</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestChineseTokenizer</name> extends <name>BaseTokenStreamTestCase</name>
      <operator>*</operator> <name>Analyzer</name> <name>that</name> <name>just</name> <name>uses</name> <name>ChineseFilter</name></expr>, <expr><name>not</name> <name><name>ChineseTokenizer</name><operator>.</operator></name>
      * <name>convenience</name> <name>to</name> <name>show</name> <name>the</name> <name>behavior</name> <name>of</name> <name>the</name> <name><name>filter</name><operator>.</operator></name>
      *<operator>/</operator>
    <specifier>private</specifier> <name>class</name> <name>JustChineseFilterAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><specifier>private</specifier> <name>class</name> <name>JustChineseFilterAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
       @<expr><name>Override</name>
      <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <return>return <expr><operator>new</operator> <call><name>ChineseFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_CURRENT</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_CURRENT</name></name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ChineseFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       }</block></block>
     }
     
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7fac035fd91</literal><operator>..</operator><literal type="number">2119fc4a909</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>commongrams</name><operator>/</operator><name><name>CommonGramsFilterTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">11</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">8</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>commongrams</name></name>;</package></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>WhitespaceTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>CharArraySet</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommonGramsFilterTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
    <expr><operator>*</operator> @</expr><return>return <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <name>void</name> <call><name>testCommonGramsQueryFilter</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></return>) <block>{    
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CommonGramsQueryFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CommonGramsFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commonWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CommonGramsQueryFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CommonGramsFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
            <argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>commonWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content> 
     }</block>;</function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">156</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CommonGramsFilterTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
   }</block>
   
   <specifier>public</specifier> <name>void</name> <call><name>testCommonGramsFilter</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content> <block>{<block_content>    
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CommonGramsFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commonWords</name></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CommonGramsFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
            <argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>commonWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content> 
     }</block>;</function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">813c1195745</literal><operator>..</operator><name>b3fed982ead</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAnalyzers</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PayloadAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAnalyzers</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><name><name>String</name><index>[]</index></name> <name>y</name> <operator>=</operator> <name><name>StandardTokenizer</name><operator>.</operator><name>TOKEN_TYPES</name></name></expr>;
   }</block>
 
  <specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>LowerCaseWhitespaceAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>LowerCaseWhitespaceAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>LowerCaseFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>LowerCaseFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
     
   }
@@ <operator>-</operator><literal type="number">237</literal></expr>,<expr><literal type="number">4</literal> <operator>+</operator><literal type="number">234</literal></expr>,<expr><literal type="number">4</literal> @@ <name>final</name> <name>class</name> <name>PayloadSetter</name> extends <name>TokenFilter</name> <block>{
     <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;
     <return>return <expr><literal type="boolean">true</literal></expr>;</return>
   }</block>
}
<operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
}
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a0a59f661ab</name><operator>..</operator><literal type="number">8d6c5cf5c6d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>miscellaneous</name><operator>/</operator><name><name>PatternAnalyzerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>miscellaneous</name></name>;</package>
  <operator>*</operator><operator>/</operator></block></expr>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>PatternAnalyzerTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// analysis of a String, uses PatternAnalyzer.tokenStream(String, String)</comment>
    <expr><name>TokenStream</name> <name>ts2</name> <operator>=</operator> <call><name><name>analyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><literal type="string">"dummy"</literal></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>TokenStream</name> <name>ts2</name> <operator>=</operator> <call><name><name>analyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><literal type="string">"dummy"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>ts2</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 }</block_content>
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
index 77cf6efae17..c12a4142cc7 100644
-- a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter.java
@@ -17</block><operator>,</operator>12 +17<operator>,</operator>7 @@
 
 package org.apache.lucene.analysis.miscellaneous;</function>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>StopFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PositionIncrementAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">240</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWordDelimiterFilter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
         <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>)</block></expr>;</expr_stmt>
     
     <comment type="block">/* analyzer that will consume tokens with large position increments */</comment>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a2</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>LargePosIncTokenFilter</name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>LargePosIncTokenFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">273</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWordDelimiterFilter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
         <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>,
         <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>)</block></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a3</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a3</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>StopFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>StandardAnalyzer</name><operator>.</operator><name>STOP_WORDS_SET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tokenizer</name></expr><operator>,</operator> <expr><name><name>StandardAnalyzer</name><operator>.</operator><name>STOP_WORDS_SET</name></name></expr></expr_stmt>)</block_content></block>;</function>
         <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setEnablePositionIncrements</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WordDelimiterFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzerTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b3001335a49</name><operator>..</operator><name>a568537dc5e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzerTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>query</name><operator>/</operator><name><name>QueryAutoStopWordAnalyzerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">32</literal> <operator>+</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>QueryAutoStopWordAnalyzerTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
     <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>protectedTokenStream</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"boring"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;
   }</block>
   
  <comment type="block">/*
   * analyzer that does not support reuse
   * it is LetterTokenizer on odd invocations, WhitespaceTokenizer on even.
   */</comment>
  <specifier>private</specifier> <name>class</name> <name>NonreusableAnalyzer</name> extends <name>Analyzer</name> <block>{
    <expr><name>int</name> <name>invocationCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>invocationCount</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    }</block>
  }
  
  <specifier>public</specifier> <name>void</name> <call><name>testWrappingNonReusableAnalyzer</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>QueryAutoStopWordAnalyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <call><name>QueryAutoStopWordAnalyzer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NonreusableAnalyzer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name><name>a</name><operator>.</operator><name>addStopWords</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;

    <expr><name>TokenStream</name> <name>tokenStream</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><literal type="string">"repetitiveField"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><literal type="string">"boring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>tokenStream</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;

    <expr><name>tokenStream</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>reusableTokenStream</name></name><argument_list>(<argument><expr><literal type="string">"repetitiveField"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><literal type="string">"vaguelyboring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTokenStreamContents</name><argument_list>(<argument><expr><name>tokenStream</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
  }</block>
  
   <specifier>public</specifier> <name>void</name> <call><name>testTokenStream</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>QueryAutoStopWordAnalyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <call><name>QueryAutoStopWordAnalyzer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>addStopWords</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapperTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapperTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ee5e5ed6379</name><operator>..</operator><name>e4b4f35fe03</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapperTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>shingle</name><operator>/</operator><name><name>ShingleAnalyzerWrapperTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">40</literal> <operator>+</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShingleAnalyzerWrapperTest</name> extends <name>BaseTokenStreamTestCase</name> <block>{
         <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
         <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>)</block></expr>;</expr_stmt>
   <expr_stmt/>}</block>
  
  <comment type="block">/*
   * analyzer that does not support reuse
   * it is LetterTokenizer on odd invocations, WhitespaceTokenizer on even.
   */</comment>
  <class><specifier>private</specifier> class <name>NonreusableAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>invocationCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>invocationCount</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt/>}</block_content>
  }
  
  public void testWrappedAnalyzerDoesNotReuse(</block></function>)</block> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <call><name>ShingleAnalyzerWrapper</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NonreusableAnalyzer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>;</class></class></expr></init></decl></decl_stmt>
    <expr_stmt><expr><call><name>assertAnalyzesToReuse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"please divide into shingles."</literal></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"please"</literal></expr>, <expr><literal type="string">"please divide"</literal></expr>, <expr><literal type="string">"divide"</literal></expr>, <expr><literal type="string">"divide into"</literal></expr>, <expr><literal type="string">"into"</literal></expr>, <expr><literal type="string">"into shingles"</literal></expr>, <expr><literal type="string">"shingles"</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertAnalyzesToReuse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"please divide into shingles."</literal></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"please"</literal></expr>, <expr><literal type="string">"please divide"</literal></expr>, <expr><literal type="string">"divide"</literal></expr>, <expr><literal type="string">"divide into"</literal></expr>, <expr><literal type="string">"into"</literal></expr>, <expr><literal type="string">"into shingles."</literal></expr>, <expr><literal type="string">"shingles."</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertAnalyzesToReuse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"please divide into shingles."</literal></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"please"</literal></expr>, <expr><literal type="string">"please divide"</literal></expr>, <expr><literal type="string">"divide"</literal></expr>, <expr><literal type="string">"divide into"</literal></expr>, <expr><literal type="string">"into"</literal></expr>, <expr><literal type="string">"into shingles"</literal></expr>, <expr><literal type="string">"shingles"</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/>}</block>
 
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonDefaultMinShingleSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><name>ShingleAnalyzerWrapper</name> <name>analyzer</name> 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">348cb307913</literal><operator>..</operator><name>cb9c6e49214</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>common</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestCollationKeyFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>collation</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>CollationTestBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>KeywordTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCollationKeyFilter</name> extends <name>CollationTestBase</name> <block>{
     <expr><operator>(</operator><call><name><name>collator</name><operator>.</operator><name>getCollationKey</name></name><argument_list>(<argument><expr><name>secondRangeEndOriginal</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</block></expr>;</expr_stmt>
 
   
  <class><specifier>public</specifier> <specifier>final</specifier> class <name>TestAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
  <class><specifier>public</specifier> <specifier>final</specifier> class <name>TestAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <name>Collator</name></type> <name>_collator</name></decl>;</decl_stmt>
 
     <constructor><name>TestAnalyzer</name><parameter_list>(<parameter><decl><type><name>Collator</name></type> <name>collator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCollationKeyFilter</name> extends <name>CollationTestBase</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>KeywordTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>CollationKeyFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_collator</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>KeywordTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CollationKeyFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_collator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc7a74d828c</name><operator>..</operator><literal type="number">9a632d6c280</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUFoldingFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>icu</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>WhitespaceTokenizer</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Tests ICUFoldingFilter
  */</comment>
 <class><specifier>public</specifier> class <name>TestICUFoldingFilter</name> <super_list><extends>extends <super><name>BaseTokenStreamTestCase</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>ICUFoldingFilter</name><argument_list>(
          <argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ICUFoldingFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }</block>;</function>
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaults</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1a503cdd95f</literal><operator>..</operator><name>a7fbbaeb714</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name><name>TestICUNormalizer2Filter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>icu</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>BaseTokenStreamTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>WhitespaceTokenizer</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Normalizer2</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Normalizer2</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <name>Tests</name> <name>the</name> <name>ICUNormalizer2Filter</name>
  <operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>TestICUNormalizer2Filter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
  <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
  <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>ICUNormalizer2Filter</name><argument_list>(
          <argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ICUNormalizer2Filter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }</block>;</function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestICUNormalizer2Filter</name> extends <name>BaseTokenStreamTestCase</name> <block>{
   }</block>
   
   <specifier>public</specifier> <name>void</name> <call><name>testAlternate</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>(</argument_list></class></expr></block></expr></argument></throws></expr></expr_stmt>)</block_content> <block>{<block_content>
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ICUNormalizer2Filter</name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>WhitespaceTokenizer</name><argument_list>(<argument><expr><name>TEST_VERSION_CURRENT</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ICUNormalizer2Filter</name><argument_list>(
            <argument><expr><name>tokenizer</name></expr></argument>,
             <comment type="block">/* specify nfc with decompose to get nfd */</comment>
            <argument><expr><call><name><name>Normalizer2</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"nfc"</literal></expr></argument>, <argument><expr><name><name>Normalizer2</name><operator>.</operator><name>Mode</name><operator>.</operator><name>DECOMPOSE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
            <argument><expr><call><name><name>Normalizer2</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"nfc"</literal></expr></argument>, <argument><expr><name><name>Normalizer2</name><operator>.</operator><name>Mode</name><operator>.</operator><name>DECOMPOSE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></return></block></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">68b0ec92c0b</literal><operator>..</operator><name>a513bba3b4f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>icu</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>collation</name><operator>/</operator><name><name>TestICUCollationKeyFilter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>collation</name></name>;</package>
 
 <import>import <name><name>com</name><operator>.</operator><name>ibm</name><operator>.</operator><name>icu</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>CollationTestBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>core</name><operator>.</operator><name>KeywordTokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>BytesRef</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestICUCollationKeyFilter</name> extends <name>CollationTestBase</name> <block>{
     <expr><operator>(</operator><call><name><name>collator</name><operator>.</operator><name>getCollationKey</name></name><argument_list>(<argument><expr><name>secondRangeEndOriginal</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</block></expr>;</expr_stmt>
 
   
  <class><specifier>public</specifier> <specifier>final</specifier> class <name>TestAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
  <class><specifier>public</specifier> <specifier>final</specifier> class <name>TestAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <name>Collator</name></type> <name>_collator</name></decl>;</decl_stmt>
 
     <constructor><name>TestAnalyzer</name><parameter_list>(<parameter><decl><type><name>Collator</name></type> <name>collator</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestICUCollationKeyFilter</name> extends <name>CollationTestBase</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>KeywordTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>ICUCollationKeyFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_collator</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>KeywordTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ICUCollationKeyFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_collator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>smartcn</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>smartcn</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e42287935d5</name><operator>..</operator><name>d805717a34b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>smartcn</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>analysis</name><operator>/</operator><name>smartcn</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>analysis</name><operator>/</operator><name>cn</name><operator>/</operator><name>smart</name><operator>/</operator><name><name>SmartChineseAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>en</name><operator>.</operator><name>PorterStemFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>util</name><operator>.</operator><name>WordlistLoader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><operator>/</operator><name>p</name><operator>&gt;</operator>
  <operator>*</operator> @<name><name>lucene</name><operator>.</operator><name>experimental</name></name>
  <operator>*</operator><operator>/</operator>
<specifier>public</specifier> <name>final</name> <name>class</name> <name>SmartChineseAnalyzer</name> extends <name>Analyzer</name> <block>{
<expr><specifier>public</specifier> <name>final</name> <name>class</name> <name>SmartChineseAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
   <expr><specifier>private</specifier> <name>final</name> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>stopWords</name></expr>;
   
@@ <expr><operator>-</operator><literal type="number">141</literal></expr>,<expr><literal type="number">9</literal> <operator>+</operator><literal type="number">142</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SmartChineseAnalyzer</name> extends <name>Analyzer</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>SentenceTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>WordTokenFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>SentenceTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>WordTokenFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// result = new LowerCaseFilter(result);</comment>
     <comment type="line">// LowerCaseFilter is not needed, as SegTokenFilter lowercases Basic Latin text.</comment>
     <comment type="line">// The porter stemming is too strict, this is not a bug, this is a feature:)</comment>
@@ <expr><operator>-</operator><literal type="number">151</literal></expr>,<expr><literal type="number">32</literal> <operator>+</operator><literal type="number">152</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SmartChineseAnalyzer</name> extends <name>Analyzer</name> <block>{
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stopWords</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
    return result</block><empty_stmt>;</empty_stmt></if></if_stmt>
  }</block>
  
  <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>SavedStreams</name> <block>{
    <expr><name>Tokenizer</name> <name>tokenStream</name></expr>;
    <expr><name>TokenStream</name> <name>filteredTokenStream</name></expr>;
  }</block>
  
  @<name>Override</name>
  <specifier>public</specifier> <name>TokenStream</name> <call><name>reusableTokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call>
      <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><name>SavedStreams</name> <name>streams</name> <operator>=</operator> <operator>(</operator><name>SavedStreams</name><operator>)</operator> <call><name>getPreviousTokenStream</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <if_stmt><if>if <condition>(<expr><name>streams</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>streams</name> <operator>=</operator> <operator>new</operator> <call><name>SavedStreams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPreviousTokenStream</name><argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>tokenStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>SentenceTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>WordTokenFilter</name><argument_list>(<argument><expr><name><name>streams</name><operator>.</operator><name>tokenStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>PorterStemFilter</name><argument_list>(<argument><expr><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stopWords</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>StopFilter</name><argument_list>(<argument><expr><name>matchVersion</name></expr></argument>, <argument><expr><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name></name></expr></argument>, <argument><expr><name>stopWords</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
    } else <block>{<block_content>
      <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>tokenStream</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>streams</name><operator>.</operator><name>filteredTokenStream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// reset WordTokenFilter's state</comment>
    <expr_stmt/>}</block_content>

    return streams.filteredTokenStream</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 }
diff --git a/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java b/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
index 20b28a93eed..45103b6260d 100644
-- a/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
++ b/modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest.java
@@ -5</block><operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">5</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></if></if_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import></block></expr>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PayloadAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>CategoryListIteratorTest</name> extends <name>LuceneTestCase</name> <block>{
     <expr><name>DataTokenStream</name> <name>dts2</name> <operator>=</operator> <operator>new</operator> <call><name>DataTokenStream</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>SortingIntEncoder</name><argument_list>(
         <argument><expr><operator>new</operator> <call><name>UniqueValuesIntEncoder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DGapIntEncoder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>VInt8IntEncoder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// this test requires that no payloads ever be randomly present!</comment>
    <expr><name>final</name> <name>Analyzer</name> <name>noPayloadsAnalyzer</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Analyzer</name></type> <name>noPayloadsAnalyzer</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>KEYWORD</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>KEYWORD</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     <comment type="line">// NOTE: test is wired to LogMP... because test relies on certain docids having payloads</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">22b9df40774</literal><operator>..</operator><literal type="number">1e900c0cc1e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>analyzing</name><operator>/</operator><name><name>TestAnalyzingQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryparser</name><operator>.</operator><name>analyzing</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryparser</name><operator>.</operator><name>classic</name><operator>.</operator><name>ParseException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>LuceneTestCase</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">134</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>final</name> <name>class</name> <name>TestFoldingFilter</name> extends <name>TokenFilter</name> <block>{
   }</block></expr></expr_stmt>
 }</block_content>
 
final class ASCIIAnalyzer extends org.apache.lucene.analysis.Analyzer <block>{<block_content>
  <constructor><specifier>public</specifier> <name>ASCIIAnalyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt/>}</block_content>
final class ASCIIAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestFoldingFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Tokenizer</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TestFoldingFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   <expr_stmt/>}</block_content>
 }
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
index 9ea9cf6e036..a845161f99d 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
@@ -122</block><operator>,</operator>16 +122<operator>,</operator>12 @@ public class TestMultiAnalyzer extends BaseTokenStreamTestCase <block>{<block_content>
    <expr_stmt><expr><operator>*</operator> <name>Expands</name> <literal type="string">"multi"</literal> <name>to</name> <literal type="string">"multi"</literal> <name>and</name> <literal type="string">"multi2"</literal></expr><operator>,</operator> <expr><name>both</name> <name>at</name> <name>the</name> <name>same</name> <name>position</name></expr><operator>,</operator>
    <expr><operator>*</operator> <name>and</name> <name>expands</name> <literal type="string">"triplemulti"</literal> <name>to</name> <literal type="string">"triplemulti"</literal></expr><operator>,</operator> <expr><literal type="string">"multi3"</literal></expr><operator>,</operator> <expr><name>and</name> <literal type="string">"multi2"</literal><operator>.</operator>  
    <operator>*</operator><operator>/</operator>
  <specifier>private</specifier> <name>class</name> <name>MultiAnalyzer</name> extends <name>Analyzer</name> <block>{

    <expr><specifier>public</specifier> <call><name>MultiAnalyzer</name><argument_list>()</argument_list></call> <block>{
    }</block>
  <specifier>private</specifier> <name>class</name> <name>MultiAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TestFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
@@ <operator>-</operator><literal type="number">196</literal></expr>,<expr><literal type="number">16</literal> <operator>+</operator><literal type="number">192</literal></expr>,<expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiAnalyzer</name> extends <name>BaseTokenStreamTestCase</name> <block>{
    <expr><operator>*</operator> <name>Analyzes</name> <literal type="string">"the quick brown"</literal> <name>as</name><operator>:</operator> <call><name>quick</name><argument_list>(<argument><expr><name>incr</name><operator>=</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <call><name>brown</name><argument_list>(<argument><expr><name>incr</name><operator>=</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator>
    <operator>*</operator> <name>Does</name> <name>not</name> <name>work</name> <name>correctly</name></expr> <for>for input other than "the quick brown ...".
    */
  private class PosIncrementAnalyzer extends Analyzer <block>{<block_content>

    <constructor><specifier>public</specifier> <name>PosIncrementAnalyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt/>}</block_content>
  private class PosIncrementAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
 
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestPosIncrementFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TestPosIncrementFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
index 0bce46ce3bf..8ee4fcaf1b2 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
@@ -22</block><operator>,</operator>9 +22<operator>,</operator>7 @@ import java.io.Reader;</function>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">302</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">300</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiFieldQueryParser</name> extends <name>LuceneTestCase</name> <block>{
   <comment type="block" format="javadoc">/**
    * Return empty tokens for field "f1".
    */</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>AnalyzerReturningNull</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>class</name> <name>AnalyzerReturningNull</name> extends <name>ReusableAnalyzerBase</name> <block>{
     <expr><name>MockAnalyzer</name> <name>stdAnalyzer</name> <operator>=</operator> <operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><specifier>public</specifier> <call><name>AnalyzerReturningNull</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
       <if_stmt><if>if <condition>(<expr><literal type="string">"f1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EmptyTokenStream</name><argument_list>()</argument_list></call></expr>;</return>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyTokenStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content> else <block>{<block_content>
        <return>return <expr><call><name><name>stdAnalyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>stdAnalyzer</name><operator>.</operator><name>createComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }
 
    private static class EmptyTokenStream extends TokenStream <block>{<block_content>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>EmptyTokenStream</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3c8e963d384</literal><operator>..</operator><literal type="number">8da47149fa2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>classic</name><operator>/</operator><name><name>TestMultiPhraseQueryParsing</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>queryparser</name><operator>.</operator><name>classic</name></name>;</package>
  <expr_stmt><expr><operator>*</operator><operator>/</operator></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>ReusableAnalyzerBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQueryParsing</name> extends <name>LuceneTestCase</name> <block>{
       }</block></expr></expr_stmt>
     }</block_content>
 
  private static class CannedAnalyzer extends Analyzer <block>{<block_content>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CannedAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl>;</decl_stmt>
 
     <constructor><specifier>public</specifier> <name>CannedAnalyzer</name><parameter_list>(<parameter><decl><type><name><name>TokenAndPos</name><index>[]</index></name></type> <name>tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiPhraseQueryParsing</name> extends <name>LuceneTestCase</name> <block>{
     }</block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>CannedTokenizer</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CannedTokenizer</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e48c84bbfd1</name><operator>..</operator><literal type="number">86f27f95205</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>precedence</name><operator>/</operator><name><name>TestPrecedenceQueryParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestPrecedenceQueryParser</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content>
 
  public static final class QPTestAnalyzer extends Analyzer <block>{<block_content>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>QPTestAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
 
     <comment type="block" format="javadoc">/** Filters MockTokenizer with StopFilter. */</comment>
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
index 643183d78aa..65d4973d884 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java
@@ -143</block><operator>,</operator>16 +143<operator>,</operator>12 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase <block>{<block_content>
    <expr_stmt><expr><operator>*</operator> <name>Expands</name> <literal type="string">"multi"</literal> <name>to</name> <literal type="string">"multi"</literal> <name>and</name> <literal type="string">"multi2"</literal></expr><operator>,</operator> <expr><name>both</name> <name>at</name> <name>the</name> <name>same</name> <name>position</name></expr><operator>,</operator> <expr><name>and</name>
    <operator>*</operator> <name>expands</name> <literal type="string">"triplemulti"</literal> <name>to</name> <literal type="string">"triplemulti"</literal></expr><operator>,</operator> <expr><literal type="string">"multi3"</literal></expr><operator>,</operator> <expr><name>and</name> <literal type="string">"multi2"</literal><operator>.</operator>
    <operator>*</operator><operator>/</operator>
  <specifier>private</specifier> <name>class</name> <name>MultiAnalyzer</name> extends <name>Analyzer</name> <block>{

    <expr><specifier>public</specifier> <call><name>MultiAnalyzer</name><argument_list>()</argument_list></call> <block>{
    }</block>
  <specifier>private</specifier> <name>class</name> <name>MultiAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>TokenStream</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
      <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></block></expr>;</block></expr>
      <return>return <expr><name>result</name></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>result</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</block></block></expr></expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TestFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
@@ -214</block><operator>,</operator>16 +210<operator>,</operator>12 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase <block>{<block_content>
    <expr_stmt><expr><operator>*</operator> <name>Analyzes</name> <literal type="string">"the quick brown"</literal> <name>as</name><operator>:</operator> <call><name>quick</name><argument_list>(<argument><expr><name>incr</name><operator>=</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <call><name>brown</name><argument_list>(<argument><expr><name>incr</name><operator>=</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator> <name>Does</name> <name>not</name> <name>work</name>
    <operator>*</operator> <name>correctly</name></expr></expr_stmt> <for>for input other than "the quick brown ...".
    */
  private class PosIncrementAnalyzer extends Analyzer <block>{<block_content>

    <constructor><specifier>public</specifier> <name>PosIncrementAnalyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt/>}</block_content>
  private class PosIncrementAnalyzer extends ReusableAnalyzerBase <block>{<block_content>
 
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>TokenStream</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>TestPosIncrementFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TestPosIncrementFilter</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
index cd5d7c5cd72..97ef084bde8 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper.java
@@ -21</block><operator>,</operator>9 +21<operator>,</operator>7 @@ import java.io.Reader;</function>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>TextField</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexWriter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">338</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMultiFieldQPHelper</name> extends <name>LuceneTestCase</name> <block>{
   <comment type="block" format="javadoc">/**
    * Return empty tokens for field "f1".
    */</comment>
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>AnalyzerReturningNull</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>AnalyzerReturningNull</name> extends <name>ReusableAnalyzerBase</name> <block>{
     <expr><name>MockAnalyzer</name> <name>stdAnalyzer</name> <operator>=</operator> <operator>new</operator> <call><name>MockAnalyzer</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;
 
     <specifier>public</specifier> <call><name>AnalyzerReturningNull</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PerFieldReuseStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></block>
 
     @<name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
       <if_stmt><if>if <condition>(<expr><literal type="string">"f1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EmptyTokenStream</name><argument_list>()</argument_list></call></expr>;</return>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyTokenStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content> else <block>{<block_content>
        <return>return <expr><call><name><name>stdAnalyzer</name><operator>.</operator><name>tokenStream</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>stdAnalyzer</name><operator>.</operator><name>createComponents</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }
 
    private static class EmptyTokenStream extends TokenStream <block>{<block_content>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>EmptyTokenStream</name> <super_list><extends>extends <super><name>Tokenizer</name></super></extends></super_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>boolean</name></type> <name>incrementToken</name><parameter_list>()</parameter_list> <block>{<block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">63b6489c192</literal><operator>..</operator><literal type="number">6627609a5d5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>modules</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>lucene</name><operator>/</operator><name>queryparser</name><operator>/</operator><name>flexible</name><operator>/</operator><name>standard</name><operator>/</operator><name><name>TestQPHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">128</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestQPHelper</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr></expr_stmt>
   }</block_content>
 
  public static final class QPTestAnalyzer extends Analyzer <block>{<block_content>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>QPTestAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
 
     <comment type="block" format="javadoc">/** Filters MockTokenizer with StopFilter. */</comment>
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Tokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
@@ -344</block><operator>,</operator>10 +345<operator>,</operator>10 @@ public class TestQPHelper extends LuceneTestCase <block>{<block_content>
     <expr_stmt/>}</block_content>
   }
 
  private class SimpleCJKAnalyzer extends Analyzer <block>{<block_content>
  <class><specifier>private</specifier> class <name>SimpleCJKAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
   
@@ -1241</block><operator>,</operator>10 +1242<operator>,</operator>10 @@ public class TestQPHelper extends LuceneTestCase <block>{<block_content>
     <expr_stmt/>}</block_content>
   }
 
  private class CannedAnalyzer extends Analyzer <block>{<block_content>
  <class><specifier>private</specifier> class <name>CannedAnalyzer</name> <super_list><extends>extends <super><name>ReusableAnalyzerBase</name></super></extends></super_list> <block>{
     <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ignored</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>alsoIgnored</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>CannedTokenStream</name><argument_list>()</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ignored</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>alsoIgnored</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CannedTokenStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
   }
 
diff --git a/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java b/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index 801fbbb45c9..dae74708d2d 100644
-- a/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
++ b/modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -25</block><operator>,</operator>13 +25<operator>,</operator>7 @@ import java.util.Date;</function>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>GregorianCalendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockAnalyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>MockTokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Tokenizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>CharTermAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>OffsetAttribute</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>tokenattributes</name><operator>.</operator><name>PositionIncrementAttribute</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">104</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QueryParserTestBase</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
 
   
  <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>QPTestAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>QPTestAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
 
     <comment type="block" format="javadoc">/** Filters MockTokenizer with StopFilter. */</comment>
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>final</name> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</block></block></expr>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QPTestFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block>
   }
 
@@ <operator>-</operator><literal type="number">245</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">240</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QueryParserTestBase</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr>
   }</block>
 
  <specifier>private</specifier> <name>class</name> <name>SimpleCJKAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <name>class</name> <name>SimpleCJKAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleCJKTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
 
@@ <operator>-</operator><literal type="number">348</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">343</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QueryParserTestBase</name> extends <name>LuceneTestCase</name> <block>{
     <expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"a OR -b"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"a -b"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator</comment>
    <name>Analyzer</name> <name>a</name> <operator>=</operator> <operator>new</operator> <class><super><name>Analyzer</name></super><argument_list>()</argument_list> <block>{
    <decl_stmt><decl><type><name>Analyzer</name></type> <name>a</name> <init>= <expr><operator>new</operator> <class><super><name>ReusableAnalyzerBase</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>TokenStream</name></type> <name>tokenStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
      <function><type><specifier>public</specifier> <name>TokenStreamComponents</name></type> <name>createComponents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
       <expr_stmt/>}</block_content>
     }</block>;</function>
     <expr_stmt><expr><call><name>assertQueryEquals</name><argument_list>(<argument><expr><literal type="string">"a - b"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"a - b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1162</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">1157</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QueryParserTestBase</name> extends <name>LuceneTestCase</name> <block>{
   }</block>
   
   <comment type="block" format="javadoc">/** whitespace+lowercase analyzer with synonyms */</comment>
  <specifier>private</specifier> <name>class</name> <name>Analyzer1</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <name>class</name> <name>Analyzer1</name> extends <name>ReusableAnalyzerBase</name> <block>{
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>MockSynonymFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</block></block></expr>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockSynonymFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block>
   }
   
   <comment type="block" format="javadoc">/** whitespace+lowercase analyzer without synonyms */</comment>
  <specifier>private</specifier> <name>class</name> <name>Analyzer2</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <name>class</name> <name>Analyzer2</name> extends <name>ReusableAnalyzerBase</name> <block>{
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block></block>
   }
   
@@ <operator>-</operator><literal type="number">1235</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1231</literal></expr>,<expr><literal type="number">11</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QueryParserTestBase</name> extends <name>LuceneTestCase</name> <block>{
     }</block></expr>
     
   }</block>
  <specifier>private</specifier> <name>class</name> <name>MockCollationAnalyzer</name> extends <name>Analyzer</name> <block>{
  <expr><specifier>private</specifier> <name>class</name> <name>MockCollationAnalyzer</name> extends <name>ReusableAnalyzerBase</name> <block>{
     @<expr><name>Override</name>
    <specifier>public</specifier> <name>TokenStream</name> <call><name>tokenStream</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><operator>new</operator> <call><name>MockCollationFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <specifier>public</specifier> <name>TokenStreamComponents</name> <call><name>createComponents</name><argument_list>(<argument><expr><name>String</name> <name>fieldName</name></expr></argument>, <argument><expr><name>Reader</name> <name>reader</name></expr></argument>)</argument_list></call> <block>{
      <expr><name>Tokenizer</name> <name>tokenizer</name> <operator>=</operator> <operator>new</operator> <call><name>MockTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>MockTokenizer</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</block></block></expr>
      <return>return <expr><operator>new</operator> <call><name>TokenStreamComponents</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MockCollationFilter</name><argument_list>(<argument><expr><name>tokenizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     }</block>
   }
   
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block></class></block_content></block></block></function></block_content></block></function></block></class></block_content></block></block></function></block_content></block></function></block></class></block_content></block></block></function></block></class></block_content></block></block></block></if></if_stmt></block></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block_content></block></block></constructor></block_content></block></for></block_content></block></function></block_content></block></function></block></class></block_content></block></block></constructor></block></class></block_content></block></block></function></block></class></block_content></block></block></block></if></if_stmt></block></expr></block></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block_content></block></block></constructor></block_content></block></for></block></expr></block></expr></block></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></block></constructor></block_content></block></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></expr></expr_stmt></block_content></block></constructor></block></class></block></class></block></class></expr></init></decl></decl_stmt></block_content></block></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></expr></expr_stmt></block_content></block></function></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></block_content></block></constructor></block></class></block></class></block_content></block></function></class></expr></init></decl></decl_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></block></function></block></class></expr></block></block></expr></expr_stmt></block></class></expr></return></block_content></block></function></block></class></expr></return></block_content></block></function></block_content></block></function></class></block_content></block></package></block></class></expr></init></decl></decl_stmt></block></class></expr></init></decl></decl_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block></class></expr></init></decl></decl_stmt></block></class></expr></block></expr></expr_stmt></block_content></block></constructor></block></class></block></class>

</unit>
