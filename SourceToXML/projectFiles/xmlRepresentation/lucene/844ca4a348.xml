<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/lucene/844ca4a348.java"><expr_stmt><expr><name>From</name> <literal type="number">844ca4a348e282b5f857aa7ce4de6f9781766ef9</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Erick</name> <name><name>Erickson</name> <argument_list type="generic">&lt;<argument><name>erick</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Sat</name></expr><operator>,</operator> <expr><literal type="number">11</literal> <name>Jun</name> <literal type="number">2016</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">38</literal><operator>:</operator><literal type="number">19</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>SOLR</name><operator>-</operator><literal type="number">9187</literal><operator>:</operator> <name>Support</name> <name>dates</name> <name>and</name> <name>booleans</name> <name>in</name> <operator>/</operator><name>export</name> <name>handler</name></expr><operator>,</operator>
 <expr><name>support</name> <name>boolean</name> <name>DocValues</name> <name>fields</name>

<operator>--</operator>
 <name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>                              <operator>|</operator>  <literal type="number">13</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>response</name><operator>/</operator><name><name>SortingResponseWriter</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">126</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>BoolField</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">43</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>search</name><operator>/</operator><name><name>SolrIndexSearcher</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>docValues</name><operator>.</operator><name>xml</name></name>     <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>docValuesMissing</name><operator>.</operator><name>xml</name></name>          <operator>|</operator>  <literal type="number">13</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>conf</name><operator>/</operator><name>schema</name><operator>-</operator><name><name>docValuesMulti</name><operator>.</operator><name>xml</name></name>            <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>collection1</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema15</name><operator>.</operator><name>xml</name></name>        <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMissingTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">129</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMultiTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">103</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">87</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name><name>Tuple</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">53</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>solr</name><operator>/</operator><name>configsets</name><operator>/</operator><name>streaming</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>schema</name><operator>.</operator><name>xml</name></name> <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name>stream</name><operator>/</operator><name><name>StreamingTest</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">128</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <literal type="number">15</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">692</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">39</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<name>index</name> <name>b9b88d35fa7</name><operator>..</operator><literal type="number">659a1d7dbe4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name><name>CHANGES</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <name>Optimizations</name>
 
 <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>  <literal type="number">6.2.0</literal> <operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator><operator>==</operator>
 

<name>Upgrading</name> <name>from</name> <name>Solr</name> <name>any</name> <name>prior</name> <name>release</name>
<operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>

<name>Detailed</name> <name>Change</name> <name>List</name>
<operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>

<name>New</name> <name>Features</name>
<operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>

<operator>*</operator> <name>SOLR</name><operator>-</operator><literal type="number">9187</literal><operator>:</operator> <name>Support</name> <name>dates</name> <name>and</name> <name>booleans</name> <name>in</name> <operator>/</operator><name>export</name> <name>handler</name></expr><operator>,</operator> <expr><name>support</name> <name>boolean</name> <name>DocValues</name> <name>fields</name>


 <name>Bug</name> <name>Fixes</name>
 <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c804b74ff03</name><operator>..</operator><literal type="number">017deb4f617</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>request</name><operator>/</operator><name><name>SimpleFacets</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">554</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">554</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleFacets</name> <block>{
 
      <comment type="block">/*The user did not specify any preference*/</comment>
      <if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Always use filters for booleans... we know the number of values is very small. */</comment>
       <if_stmt><if>if <condition>(<expr><name>type</name> <operator>instanceof</operator> <name>BoolField</name></expr>)</condition> <block>{<block_content>
       <comment type="block">/* Always use filters for booleans if not DocValues only... we know the number of values is very small. */</comment>
       <if_stmt><if>if <condition>(<expr><name>type</name> <operator>instanceof</operator> <name>BoolField</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>field</name><operator>.</operator><name>indexed</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal> <operator>||</operator> <call><name><name>field</name><operator>.</operator><name>hasDocValues</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>method</name> <operator>=</operator> <name><name>FacetMethod</name><operator>.</operator><name>ENUM</name></name></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getNumericType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>field</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <comment type="block">/* the per-segment approach is optimal for numeric field types since there
diff --git a/solr/core/src/java/org/apache/solr/response/SortingResponseWriter.java b/solr/core/src/java/org/apache/solr/response/SortingResponseWriter.java
index 8daf90f93e1..b3752a87f08 100644
-- a/solr/core/src/java/org/apache/solr/response/SortingResponseWriter.java
++ b/solr/core/src/java/org/apache/solr/response/SortingResponseWriter.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.Writer;
 import java.lang.invoke.MethodHandles;
import java.util.Date;
 import java.util.List;
 import java.util.ArrayList;
 
@@ -44,10 +45,12 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrRequestInfo;
import org.apache.solr.schema.BoolField;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.SchemaField;
 import org.apache.solr.schema.StrField;
import org.apache.solr.schema.TrieDateField;
 import org.apache.solr.schema.TrieDoubleField;
 import org.apache.solr.schema.TrieFloatField;
 import org.apache.solr.schema.TrieIntField;
@@ -99,14 +102,24 @@ public class SortingResponseWriter implements QueryResponseWriter {
       exception = new IOException(new SyntaxError("Scoring is not currently supported with xsort."));
     }
 
    FixedBitSet[] sets = (FixedBitSet[])req.getContext().get("export");
    Integer th = (Integer)req.getContext().get("totalHits");

    if(sets == null) {
      exception = new IOException(new SyntaxError("xport RankQuery is required for xsort: rq={!xport}"));
    // There is a bailout in SolrIndexSearcher.getDocListNC when there are _no_ docs in the index at all.
    // if (lastDocRequested &lt;= 0) {
    // That causes the totalHits and export entries in the context to _not_ get set.
    // The only time that really matters is when we search against an _empty_ set. That's too obscure
    // a condition to handle as part of this patch, if someone wants to pursue it it can be reproduced with:
    // ant test  -Dtestcase=StreamingTest -Dtests.method=testAllValidExportTypes -Dtests.seed=10F13879D0D1D6AD -Dtests.slow=true -Dtests.locale=es-PA -Dtests.timezone=America/Bahia_Banderas -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1
    // You'll have to uncomment the if below to hit the null pointer exception.
    // This is such an unusual case (i.e. an empty index) that catching this concdition here is probably OK.
    // This came to light in the very artifical case of indexing a single doc to Cloud.
    int totalHits = 0;
    FixedBitSet[] sets = null;
    if (req.getContext().get("totalHits") != null) {
      totalHits = ((Integer)req.getContext().get("totalHits")).intValue();
      sets = (FixedBitSet[]) req.getContext().get("export");
      if (sets == null) {
        exception = new IOException(new SyntaxError("xport RankQuery is required for xsort: rq={!xport}"));
      }
     }

    int totalHits = th.intValue();
     SolrParams params = req.getParams();
     String fl = params.get("fl");
 
@@ -132,7 +145,7 @@ public class SortingResponseWriter implements QueryResponseWriter {
 
     try {
       fieldWriters = getFieldWriters(fields, req.getSearcher());
    }catch(Exception e) {
    } catch (Exception e) {
       exception = e;
     }
 
@@ -309,8 +322,21 @@ public class SortingResponseWriter implements QueryResponseWriter {
         } else {
           writers[i] = new StringFieldWriter(field, fieldType);
         }
      } else {
        throw new IOException("Export fields must either be one of the following types: int,float,long,double,string");
      } else if (fieldType instanceof TrieDateField) {
        if (multiValued) {
          writers[i] = new MultiFieldWriter(field, fieldType, false);
        } else {
          writers[i] = new DateFieldWriter(field);
        }
      } else if(fieldType instanceof BoolField) {
        if(multiValued) {
          writers[i] = new MultiFieldWriter(field, fieldType, true);
        } else {
          writers[i] = new BoolFieldWriter(field, fieldType);
        }
      }
      else {
        throw new IOException("Export fields must either be one of the following types: int,float,long,double,string,date,boolean");
       }
     }
     return writers;
@@ -362,8 +388,25 @@ public class SortingResponseWriter implements QueryResponseWriter {
         } else {
           sortValues[i] = new StringValue(vals, field, new IntAsc());
         }
      } else if (ft instanceof TrieDateField) {
        if (reverse) {
          sortValues[i] = new LongValue(field, new LongDesc());
        } else {
          sortValues[i] = new LongValue(field, new LongAsc());
        }
      } else if (ft instanceof BoolField) {
        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings
        // _and_ since "F" happens to sort before "T" (thus false sorts "less" than true)
        // we can just use the existing StringValue here.
        LeafReader reader = searcher.getLeafReader();
        SortedDocValues vals =  reader.getSortedDocValues(field);
        if(reverse) {
          sortValues[i] = new StringValue(vals, field, new IntDesc());
        } else {
          sortValues[i] = new StringValue(vals, field, new IntAsc());
        }
       } else {
        throw new IOException("Sort fields must be one of the following types: int,float,long,double,string");
        throw new IOException("Sort fields must be one of the following types: int,float,long,double,string,date,boolean");
       }
     }
 
@@ -1296,6 +1339,65 @@ public class SortingResponseWriter implements QueryResponseWriter {
     }
   }
 
  class DateFieldWriter extends FieldWriter {
    private String field;

    public DateFieldWriter(String field) {
      this.field = field;
    }

    public boolean write(int docId, LeafReader reader, Writer out, int fieldIndex) throws IOException {
      NumericDocValues vals = DocValues.getNumeric(reader, this.field);
      long val = vals.get(docId);

      if (fieldIndex &gt; 0) {
        out.write(',');
      }
      out.write('"');
      out.write(this.field);
      out.write('"');
      out.write(':');
      out.write('"');
      writeStr(new Date(val).toInstant().toString(), out);
      out.write('"');
      return true;
    }
  }

  class BoolFieldWriter extends FieldWriter {
    private String field;
    private FieldType fieldType;
    private CharsRefBuilder cref = new CharsRefBuilder();

    public BoolFieldWriter(String field, FieldType fieldType) {
      this.field = field;
      this.fieldType = fieldType;
    }

    public boolean write(int docId, LeafReader reader, Writer out, int fieldIndex) throws IOException {
      SortedDocValues vals = DocValues.getSorted(reader, this.field);
      int ord = vals.getOrd(docId);
      if(ord == -1) {
        return false;
      }

      BytesRef ref = vals.lookupOrd(ord);
      fieldType.indexedToReadable(ref, cref);

      if (fieldIndex &gt; 0) {
        out.write(',');
      }
      out.write('"');
      out.write(this.field);
      out.write('"');
      out.write(':');
      //out.write('"');
      writeStr(cref.toString(), out);
      //out.write('"');
      return true;
    }
  }

   class FloatFieldWriter extends FieldWriter {
     private String field;
 
@@ -1614,4 +1716,4 @@ public class SortingResponseWriter implements QueryResponseWriter {
       return (Object[]) heap;
     }
   }
}
\ No newline at end of file
}
diff --git a/solr/core/src/java/org/apache/solr/schema/BoolField.java b/solr/core/src/java/org/apache/solr/schema/BoolField.java
index 01161e72ada..1ecdb5961bd 100644
-- a/solr/core/src/java/org/apache/solr/schema/BoolField.java
++ b/solr/core/src/java/org/apache/solr/schema/BoolField.java
@@ -17,11 +17,16 @@
 package org.apache.solr.schema;
 
 import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
 import java.util.Map;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.document.SortedDocValuesField;
import org.apache.lucene.document.SortedSetDocValuesField;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.LeafReaderContext;
@@ -123,7 +128,11 @@ public class BoolField extends PrimitiveFieldType {
 
   @Override
   public String toExternal(IndexableField f) {
    return indexedToReadable(f.stringValue());
    if (f.binaryValue() == null) {
      return null;
    }

    return indexedToReadable(f.binaryValue().utf8ToString());
   }
 
   @Override
@@ -144,7 +153,7 @@ public class BoolField extends PrimitiveFieldType {
 
   private static final CharsRef TRUE = new CharsRef("true");
   private static final CharsRef FALSE = new CharsRef("false");
  

   @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRefBuilder charsRef) {
     if (input.length &gt; 0 &amp;&amp; input.bytes[input.offset] == 'T') {
@@ -169,6 +178,36 @@ public class BoolField extends PrimitiveFieldType {
   public Object unmarshalSortValue(Object value) {
     return unmarshalStringSortValue(value);
   }

  @Override
  public List&lt;IndexableField&gt; createFields(SchemaField field, Object value, float boost) {
    IndexableField fval = createField(field, value, boost);

    if (field.hasDocValues()) {
      IndexableField docval;
      final BytesRef bytes = new BytesRef(toInternal(value.toString()));
      if (field.multiValued()) {
        docval = new SortedSetDocValuesField(field.getName(), bytes);
      } else {
        docval = new SortedDocValuesField(field.getName(), bytes);
      }

      // Only create a list of we have 2 values...
      if (fval != null) {
        List&lt;IndexableField&gt; fields = new ArrayList&lt;&gt;(2);
        fields.add(fval);
        fields.add(docval);
        return fields;
      }

      fval = docval;
    }
    return Collections.singletonList(fval);
  }

  @Override
  public void checkSchemaField(final SchemaField field) {
  }
 }
 
 // TODO - this can be much more efficient - use FixedBitSet or Bits
diff --git a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 33d616ec808..213f7583540 100644
-- a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
++ b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -112,6 +112,7 @@ import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrRequestInfo;
 import org.apache.solr.response.SolrQueryResponse;
import org.apache.solr.schema.BoolField;
 import org.apache.solr.schema.EnumField;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.SchemaField;
@@ -841,8 +842,15 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable, SolrI
             break;
           case SORTED:
             SortedDocValues sdv = leafReader.getSortedDocValues(fieldName);
            if (sdv.getOrd(docid) &gt;= 0) {
              doc.addField(fieldName, sdv.get(docid).utf8ToString());
            int ord = sdv.getOrd(docid);
            if (ord &gt;= 0) {
              // Special handling for Boolean fields since they're stored as 'T' and 'F'.
              if (schemaField.getType() instanceof BoolField) {
                final BytesRef bRef = sdv.lookupOrd(ord);
                doc.addField(fieldName, schemaField.getType().toObject(schemaField, bRef));
              } else {
                doc.addField(fieldName, sdv.get(docid).utf8ToString());
              }
             }
             break;
           case SORTED_NUMERIC:
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml b/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml
index 59fe99a5373..c7b7de8c6b3 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema-docValues.xml
@@ -61,7 +61,8 @@
   &lt;field name="longdv" type="long" indexed="false" stored="false" docValues="true" default="4"/&gt;
   &lt;field name="datedv" type="date" indexed="false" stored="false" docValues="true" default="1995-12-31T23:59:59.999Z"/&gt;
 
  &lt;field name="stringdv" type="string" indexed="false" stored="false" docValues="true" default="solr"/&gt;
  &lt;field name="stringdv" type="string" indexed="false" stored="false" docValues="true" default="solr" /&gt;
  &lt;field name="booldv" type="boolean" indexed="false" stored="false" docValues="true" default="true" /&gt;
 
   &lt;field name="floatdvs" type="float" indexed="false" stored="false" docValues="true" default="1"/&gt;
   &lt;field name="intdvs" type="int" indexed="false" stored="false" docValues="true" default="2"/&gt;
@@ -69,7 +70,7 @@
   &lt;field name="longdvs" type="long" indexed="false" stored="false" docValues="true" default="4"/&gt;
   &lt;field name="datedvs" type="date" indexed="false" stored="false" docValues="true" default="1995-12-31T23:59:59.999Z"/&gt;
   &lt;field name="stringdvs" type="string" indexed="false" stored="false" docValues="true" default="solr"/&gt;

  &lt;field name="booldvs" type="boolean" indexed="false" stored="false" docValues="true" default="true"/&gt;
 
   &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;
 
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMissing.xml b/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMissing.xml
index 22047494eb1..ac319e29ecc 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMissing.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMissing.xml
@@ -25,6 +25,7 @@
   &lt;fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
   &lt;fieldType name="date" class="solr.TrieDateField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/&gt;
   &lt;fieldType name="string" class="solr.StrField"/&gt;
  &lt;fieldType name="boolean" class="solr.BoolField"/&gt;
 
   &lt;field name="id" type="string" required="true"/&gt;
 
@@ -61,6 +62,13 @@
          sortMissingLast="true"/&gt;
 
 
  &lt;field name="booldv" type="boolean" indexed="false" stored="false" docValues="true"/&gt;
  &lt;field name="booldv_missingfirst" type="boolean" indexed="false" stored="false" docValues="true"
         sortMissingFirst="true"/&gt;
  &lt;field name="booldv_missinglast" type="boolean" indexed="false" stored="false" docValues="true"
         sortMissingLast="true"/&gt;


   &lt;dynamicField name="*_floatdv" type="float" indexed="false" stored="false" docValues="true"/&gt;
   &lt;dynamicField name="*_floatdv_missingfirst" type="float" indexed="false" stored="false" docValues="true"
                 sortMissingFirst="true"/&gt;
@@ -97,6 +105,11 @@
   &lt;dynamicField name="*_stringdv_missinglast" type="string" indexed="false" stored="false" docValues="true"
                 sortMissingLast="true"/&gt;
 
  &lt;dynamicField name="*_booldv" type="boolean" indexed="false" stored="false" docValues="true"/&gt;
  &lt;dynamicField name="*_booldv_missingfirst" type="boolean" indexed="false" stored="false" docValues="true"
                sortMissingFirst="true"/&gt;
  &lt;dynamicField name="*_booldv_missinglast" type="boolean" indexed="false" stored="false" docValues="true"
                sortMissingLast="true"/&gt;
 
   &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;
 
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMulti.xml b/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMulti.xml
index 93a8588fcb7..81c78364369 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMulti.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema-docValuesMulti.xml
@@ -42,6 +42,7 @@
   &lt;field name="datedv" type="date" indexed="false" stored="false" docValues="true" multiValued="true"/&gt;
 
   &lt;field name="stringdv" type="string" indexed="false" stored="false" docValues="true" multiValued="true"/&gt;
  &lt;field name="booldv" type="boolean" indexed="false" stored="false" docValues="true" multiValued="true"/&gt;
 
   &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;
 
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema15.xml b/solr/core/src/test-files/solr/collection1/conf/schema15.xml
index 82faa6a76cc..d545149f366 100644
-- a/solr/core/src/test-files/solr/collection1/conf/schema15.xml
++ b/solr/core/src/test-files/solr/collection1/conf/schema15.xml
@@ -452,6 +452,7 @@
   &lt;field name="bind" type="boolean" indexed="true" stored="false"/&gt;
   &lt;field name="bsto" type="boolean" indexed="false" stored="true"/&gt;
   &lt;field name="bindsto" type="boolean" indexed="true" stored="true"/&gt;
  &lt;field name="bindstom" type="boolean" indexed="true" stored="true" multiValued="true"/&gt;
   &lt;field name="isto" type="int" indexed="false" stored="true"/&gt;
   &lt;field name="iind" type="int" indexed="true" stored="false"/&gt;
   &lt;field name="ssto" type="string" indexed="false" stored="true"/&gt;
diff --git a/solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest.java b/solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest.java
index 847130b4cb4..04d38fdf565 100644
-- a/solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest.java
++ b/solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest.java
@@ -18,6 +18,7 @@ package org.apache.solr.schema;
 
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.BeforeClass;
import org.junit.Test;
 
 /**
  * Tests things like sorting on docvalues with missing values
@@ -123,239 +124,290 @@ public class DocValuesMissingTest extends SolrTestCaseJ4 {
   }
 
   /** float with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testFloatSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic float with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynFloatSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"dyn_floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** float with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testFloatSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"floatdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic float with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynFloatSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_floatdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** float with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testFloatSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"floatdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic float with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynFloatSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_floatdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** float function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testFloatMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dyanmic float function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynFloatMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** float missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testFloatMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic float missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynFloatMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"dyn_floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** int with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testIntSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic int with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynIntSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"dyn_intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** int with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testIntSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"intdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic int with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynIntSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_intdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** int with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testIntSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"intdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic int with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynIntSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_intdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** int function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testIntMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic int function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynIntMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** int missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testIntMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic int missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynIntMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"dyn_intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** double with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDoubleSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic double with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDoubleSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"dyn_doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** double with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDoubleSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"doubledv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic double with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDoubleSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_doubledv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** double with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDoubleSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"doubledv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic double with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDoubleSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_doubledv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** double function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDoubleMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dyanmic double function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDoubleMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** double missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDoubleMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic double missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDoubleMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"dyn_doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-1.3"</literal></expr></argument>, <argument><expr><literal type="string">"4.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** long with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLongSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic long with default lucene sort (treats as 0) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynLongSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"dyn_longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** long with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLongSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"longdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic long with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynLongSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_longdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** long with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLongSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"longdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic long with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynLongSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_longdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** long function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLongMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic long function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynLongMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** long missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testLongMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic long missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynLongMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"dyn_longdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** date with default lucene sort (treats as 1970) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDateSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic date with default lucene sort (treats as 1970) */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDateSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingDefault</name><argument_list>(<argument><expr><literal type="string">"dyn_datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** date with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDateSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"datedv_missingfirst"</literal></expr></argument>, 
                           <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic date with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDateSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_datedv_missingfirst"</literal></expr></argument>, 
                           <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** date with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDateSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"datedv_missinglast"</literal></expr></argument>, 
                           <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic date with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDateSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_datedv_missinglast"</literal></expr></argument>, 
                          <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** date function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDateMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"datedv"</literal></expr></argument>, 
                              <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic date function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDateMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_datedv"</literal></expr></argument>, 
                              <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** date missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDateMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"datedv"</literal></expr></argument>, 
                           <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic date missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynDateMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFacet</name><argument_list>(<argument><expr><literal type="string">"dyn_datedv"</literal></expr></argument>, 
                           <argument><expr><literal type="string">"1900-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"2005-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** string (and dynamic string) with default lucene sort (treats as "") */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testStringSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
 
     <comment type="line">// note: cant use checkSortMissingDefault because </comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">377</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">429</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMissingTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   }</block>
   
   <comment type="block" format="javadoc">/** string with sort missing always first */</comment>
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testStringSortMissingFirst</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"stringdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic string with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynStringSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_stringdv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** string with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testStringSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"stringdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic string with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynStringSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_stringdv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/** string function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testStringMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   <comment type="block" format="javadoc">/** dynamic string function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testDynStringMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <comment type="block" format="javadoc">/** string missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testStringMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// missing</comment>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// missing</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">415</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">474</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMissingTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//lst[@name='facet_fields']/lst[@name='stringdv']/int[@name='z'][.=1]"</literal></expr>,
         <expr><literal type="string">"//lst[@name='facet_fields']/lst[@name='stringdv']/int[.=2]"</literal></expr>)</block></expr>;</expr_stmt>
   </block_content>}</block></function>

  <comment type="block" format="javadoc">/** bool (and dynamic bool) with default lucene sort (treats as "") */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBoolSort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// note: cant use checkSortMissingDefault because </comment>
    <comment type="line">// nothing sorts lower then the default of "" and</comment>
    <comment type="line">// bool fields are, at root, string fields.</comment>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>field</name> <range>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"booldv"</literal></expr>,<expr><literal type="string">"dyn_booldv"</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// missing</comment>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><name>field</name><operator>+</operator><literal type="string">" asc"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[1]/str[@name='id'][.=0]"</literal></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[2]/str[@name='id'][.=1]"</literal></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[3]/str[@name='id'][.=2]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><name>field</name><operator>+</operator><literal type="string">" desc"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[1]/str[@name='id'][.=2]"</literal></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[2]/str[@name='id'][.=1]"</literal></expr></argument>,
          <argument><expr><literal type="string">"//result/doc[3]/str[@name='id'][.=0]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** bool with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBoolSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"booldv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"ture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <comment type="block" format="javadoc">/** dynamic bool with sort missing always first */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDynBoolSortMissingFirst</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingFirst</name><argument_list>(<argument><expr><literal type="string">"dyn_booldv_missingfirst"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** bool with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBoolSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"booldv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <comment type="block" format="javadoc">/** dynamic bool with sort missing always last */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDynBoolSortMissingLast</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingLast</name><argument_list>(<argument><expr><literal type="string">"dyn_booldv_missinglast"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** bool function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBoolMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <comment type="block" format="javadoc">/** dynamic bool function query based on missing */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDynBoolMissingFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkSortMissingFunction</name><argument_list>(<argument><expr><literal type="string">"dyn_booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** bool missing facet count */</comment>
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBoolMissingFacet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// missing</comment>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// missing</comment>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.missing"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='facet_fields']/lst[@name='booldv']/int[@name='false'][.=1]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='facet_fields']/lst[@name='booldv']/int[@name='true'][.=1]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='facet_fields']/lst[@name='booldv']/int[.=2]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMultiTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMultiTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7b4a5db3ea8</literal><operator>..</operator><literal type="number">90c8b7363ff</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMultiTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesMultiTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexSearcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RefCounted</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     
     <comment type="line">// sanity check our schema meets our expectations</comment>
     <expr><name>final</name> <name>IndexSchema</name> <name>schema</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>String</name></type> <name>f</name> <range>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <expr><literal type="string">"intdv"</literal></expr>, <expr><literal type="string">"doubledv"</literal></expr>, <expr><literal type="string">"longdv"</literal></expr>, <expr><literal type="string">"datedv"</literal></expr>, <expr><literal type="string">"stringdv"</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>f</name> <range>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <expr><literal type="string">"intdv"</literal></expr>, <expr><literal type="string">"doubledv"</literal></expr>, <expr><literal type="string">"longdv"</literal></expr>, <expr><literal type="string">"datedv"</literal></expr>, <expr><literal type="string">"stringdv"</literal></expr>, <expr><literal type="string">"booldv"</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="string">" is not multiValued, test is useless, who changed the schema?"</literal></expr></argument>,
                  <argument><expr><call><name><name>sf</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>delQ</name><argument_list>(<argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValues</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"4.5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"value2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"4.5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>,
        <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"value2"</literal></expr></argument>,
        <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <init>(<decl><type><name>SolrCore</name></type> <name>core</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>getCoreInc</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>SolrIndexSearcher</name></argument>&gt;</argument_list></name></type> <name>searcherRef</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>openNewSearcher</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>numDocs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><name>final</name> <name>FieldInfos</name> <name>infos</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getFieldInfos</name></name><argument_list>()</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED_SET</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"stringdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED_SET</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED_SET</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED_SET</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">71</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">76</literal></expr>,<expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SortedSetDocValues</name><operator>.</operator><name>NO_MORE_ORDS</name></name></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>dv</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getSortedSetDocValues</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>dv</name><operator>.</operator><name>setDocument</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SortedSetDocValues</name><operator>.</operator><name>NO_MORE_ORDS</name></name></expr></argument>, <argument><expr><call><name><name>dv</name><operator>.</operator><name>nextOrd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;


       }</block></expr> <finally>finally <block>{<block_content>
         <expr_stmt><expr><call><name><name>searcherRef</name><operator>.</operator><name>decref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt/></block_content></block></finally>}</block>
@@ <operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   <comment type="block" format="javadoc">/** Tests the ability to do basic queries (without scoring, just match-only) on
    *  string docvalues fields that are not inverted (indexed "forward" only)
    */</comment>
  @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testStringDocValuesMatch</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">123</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">137</literal></expr>,<expr><literal type="number">49</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//result/doc[1]/str[@name='id'][.=4]"</literal></expr>
     )</block></expr>;
   }</block>
  

  <comment type="block" format="javadoc">/** Tests the ability to do basic queries (without scoring, just match-only) on
   *  boolean docvalues fields that are not inverted (indexed "forward" only)
   */</comment>
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testBoolDocValuesMatch</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// string: termquery</comment>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:true"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"id asc"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='3']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/str[@name='id'][.=1]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/str[@name='id'][.=3]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[3]/str[@name='id'][.=5]"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// boolean: range query, </comment>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:[false TO false]"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"id asc"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='3']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/str[@name='id'][.=2]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/str[@name='id'][.=4]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[3]/str[@name='id'][.=5]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"id asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/arr[@name='booldv']/bool[1][.='true']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/arr[@name='booldv']/bool[1][.='false']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[3]/arr[@name='booldv']/bool[1][.='true']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[4]/arr[@name='booldv']/bool[1][.='false']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[5]/arr[@name='booldv']/bool[1][.='false']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[5]/arr[@name='booldv']/bool[2][.='true']"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt/></block_content></block></try></block_content></block></for></block_content></block></for>}</block>
   <comment type="block" format="javadoc">/** Tests the ability to do basic queries (without scoring, just match-only) on
    *  float docvalues fields that are not inverted (indexed "forward" only)
    */</comment>
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testFloatDocValuesMatch</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   <comment type="block" format="javadoc">/** Tests the ability to do basic queries (without scoring, just match-only) on
    *  double docvalues fields that are not inverted (indexed "forward" only)
    */</comment>
  @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDoubleDocValuesMatch</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">201</literal></expr>,<expr><literal type="number">17</literal> <operator>+</operator><literal type="number">255</literal></expr>,<expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
             <expr><literal type="string">"//result/doc[1]/str[@name='id'][.=2]"</literal></expr>
             )</block></expr>;
   }</block>
  
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesFacetingSimple</name><argument_list>()</argument_list></call> <block>{
     <comment type="line">// this is the random test verbatim from DocValuesTest, so it populates with the default values defined in its schema.</comment>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, 
          <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>,
          <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name>rarely</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// to have several segments</comment>
       </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, 
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>,
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>,
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>


     </block_content>}</block></for>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">248</literal></expr></argument>,<argument><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">319</literal></expr></argument>,<argument><expr><literal type="number">25</literal> @@ <specifier>public</specifier> class <name>DocValuesMultiTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']"</literal></expr></block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><literal type="string">"facet.offset"</literal></expr></argument>, <argument><expr><literal type="string">"33"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc'][.='50']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><literal type="string">"facet.offset"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc1'][.='1']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc13'][.='1']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc19'][.='1']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc49'][.='1']"</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// Even though offseting by 33, the sort order is abc1 abc11....abc2 so it throws the position in the return list off.</comment>
    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><literal type="string">"facet.offset"</literal></expr></argument>, <argument><expr><literal type="string">"33"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='stringdv']/int[@name='abc38'][.='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='booldv']/int[@name='true'][.='83']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='booldv']/int[@name='false'][.='33']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   }
 }
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b4248da4b1d</name><operator>..</operator><name>d59d3267843</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>schema</name><operator>/</operator><name><name>DocValuesTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>core</name><operator>.</operator><name>SolrCore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>search</name><operator>.</operator><name>SolrIndexSearcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>util</name><operator>.</operator><name>RefCounted</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
 
     <comment type="line">// sanity check our schema meets our expectations</comment>
     <expr><name>final</name> <name>IndexSchema</name> <name>schema</name> <operator>=</operator> <call><name><name>h</name><operator>.</operator><name>getCore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestSchema</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>String</name></type> <name>f</name> <range>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <expr><literal type="string">"intdv"</literal></expr>, <expr><literal type="string">"doubledv"</literal></expr>, <expr><literal type="string">"longdv"</literal></expr>, <expr><literal type="string">"datedv"</literal></expr>, <expr><literal type="string">"stringdv"</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>f</name> <range>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <expr><literal type="string">"intdv"</literal></expr>, <expr><literal type="string">"doubledv"</literal></expr>, <expr><literal type="string">"longdv"</literal></expr>, <expr><literal type="string">"datedv"</literal></expr>, <expr><literal type="string">"stringdv"</literal></expr>, <expr><literal type="string">"booldv"</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
       <decl_stmt><decl><type><specifier>final</specifier> <name>SchemaField</name></type> <name>sf</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="string">" is multiValued, test is useless, who changed the schema?"</literal></expr></argument>,
                   <argument><expr><call><name><name>sf</name><operator>.</operator><name>multiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>delQ</name><argument_list>(<argument><expr><literal type="string">"*:*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValues</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"stringdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DocValuesType</name><operator>.</operator><name>SORTED</name></name></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>fieldInfo</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDocValuesType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getNumericDocValues</name></name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getNumericDocValues</name></name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>doubleToLongBits</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getNumericDocValues</name></name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4L</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getNumericDocValues</name></name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"solr"</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getSortedDocValues</name></name><argument_list>(<argument><expr><literal type="string">"stringdv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>utf8ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getSortedDocValues</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>utf8ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <expr><name>final</name> <name>IndexSchema</name> <name>schema</name> <operator>=</operator> <call><name><name>core</name><operator>.</operator><name>getLatestSchema</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>final</name> <name>SchemaField</name> <name>floatDv</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><name>final</name> <name>SchemaField</name> <name>intDv</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"intdv"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><name>final</name> <name>SchemaField</name> <name>doubleDv</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"doubledv"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><name>final</name> <name>SchemaField</name> <name>longDv</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"longdv"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name>final</name> <name>SchemaField</name> <name>boolDv</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call></expr>;
 
         <expr><name>FunctionValues</name> <name>values</name> <operator>=</operator> <call><name><name>floatDv</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueSource</name><argument_list>(<argument><expr><name>floatDv</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>getLeafReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>floatVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">104</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">110</literal></expr>,<expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><name>values</name> <operator>=</operator> <call><name><name>longDv</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueSource</name><argument_list>(<argument><expr><name>longDv</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>getLeafReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4L</literal></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>longVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4L</literal></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>objectVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        
        <expr><name>values</name> <operator>=</operator> <call><name><name>boolDv</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueSource</name><argument_list>(<argument><expr><name>boolDv</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>searcher</name><operator>.</operator><name>getLeafReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>leaves</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>strVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>objectVal</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <comment type="line">// check reversibility of created fields</comment>
         <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"floatdv"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">118</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">128</literal></expr>,<expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"datedvs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"stringdv"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"stringdvs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"booldv"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>tstToObj</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"booldvs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
       }</block></expr> <finally>finally <block>{<block_content>
         <expr_stmt><expr><call><name><name>searcherRef</name><operator>.</operator><name>decref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     }</block></expr></expr_stmt></block_content></block></finally>
   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesSorting</name><argument_list>()</argument_list></call> <block>{
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1997-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1996-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1997-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1996-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">146</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">159</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//int[@name='id'][.='1']"</literal></expr></block></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"longdv desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"//int[@name='id'][.='1']"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"datedv desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//int[@name='id'][.='2']"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"datedv desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id,datedv"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//int[@name='id'][.='2']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/date[@name='datedv'][.='1997-12-31T23:59:59.999Z']"</literal></expr></argument>
        )</argument_list></call></expr>;
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv desc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"//int[@name='id'][.='4']"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">162</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">177</literal></expr></argument>,<argument><expr><literal type="number">17</literal> @@ <specifier>public</specifier> class <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//int[@name='id'][.='1']"</literal></expr></block></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"//int[@name='id'][.='2']"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"booldv asc"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="string">"fl"</literal></expr></argument>, <argument><expr><literal type="string">"booldv,stringdv"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/bool[@name='booldv'][.='false']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/bool[@name='booldv'][.='true']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[3]/bool[@name='booldv'][.='true']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[4]/bool[@name='booldv'][.='true']"</literal></expr></argument>
        )</argument_list></call></expr>;
        

   }</block>
   
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesSorting2</name><argument_list>()</argument_list></call> <block>{
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"50.567"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">184</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">208</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         )</block></expr>;
   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesFaceting</name><argument_list>()</argument_list></call> <block>{
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
       <if_stmt><if>if <condition>(<expr><call><name>rarely</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// to have several segments</comment>
       <expr_stmt/></block_content></block></if></if_stmt>}</block>
      <call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>,
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>,
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>,
              <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      <expr_stmt/></block_content></block></switch></block_content></block></for>}</block></expr>
     }</block>
     <call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">229</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">267</literal></expr></argument>,<argument><expr><literal type="number">20</literal> @@ <specifier>public</specifier> class <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
         <expr><literal type="string">"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']"</literal></expr></block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><literal type="string">"facet.offset"</literal></expr></argument>, <argument><expr><literal type="string">"33"</literal></expr></argument>, <argument><expr><literal type="string">"facet.limit"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:true"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='83']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:false"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='17']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"*:*"</literal></expr></argument>, <argument><expr><literal type="string">"facet"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"facet.field"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"facet.sort"</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><literal type="string">"facet.mincount"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='booldv']/int[@name='false'][.='17']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//lst[@name='booldv']/int[@name='true'][.='83']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt/></block_content></block></for></block_content></block></for>}</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesStats</name><argument_list>()</argument_list></call> <block>{
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1900</literal><operator>+</operator><name>i</name><operator>%</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="string">"-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
   <comment type="block" format="javadoc">/** Tests the ability to do basic queries (without scoring, just match-only) on
    *  docvalues fields that are not inverted (indexed "forward" only)
    */</comment>
  @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testDocValuesMatch</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3.1"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-4.3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1997-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"2.1"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1996-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"3.1"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1995-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"-5"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"-4.3"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1997-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"2.1"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1996-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"booldv"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>adoc</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"floatdv"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"intdv"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>, <argument><expr><literal type="string">"1.5"</literal></expr></argument>, <argument><expr><literal type="string">"longdv"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"datedv"</literal></expr></argument>, <argument><expr><literal type="string">"1996-12-31T23:59:59.999Z"</literal></expr></argument>, <argument><expr><literal type="string">"stringdv"</literal></expr></argument>, <argument><expr><literal type="string">"car"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertU</name><argument_list>(<argument><expr><call><name>commit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
@@ <expr><operator>-</operator><literal type="number">439</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">490</literal></expr>,<expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
             <expr><literal type="string">"//result/doc[1]/int[@name='id'][.=2]"</literal></expr>,
             <expr><literal type="string">"//result/doc[2]/int[@name='id'][.=4]"</literal></expr>
             )</block></expr>;
    <comment type="line">// boolean basic queries:</comment>

    <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:false"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"id asc"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='2']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.=1]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/int[@name='id'][.=3]"</literal></expr></argument>
    )</argument_list></call></expr>;

    <expr><call><name>assertQ</name><argument_list>(<argument><expr><call><name>req</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">"booldv:true"</literal></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"id asc"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"//*[@numFound='2']"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[1]/int[@name='id'][.=2]"</literal></expr></argument>,
        <argument><expr><literal type="string">"//result/doc[2]/int[@name='id'][.=4]"</literal></expr></argument>
    )</argument_list></call></expr>;

   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testFloatAndDoubleRangeQueryRandom</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
 
     <expr><name>String</name> <name><name>fieldName</name><index>[]</index></name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>}</block></expr></block></expr></argument></throws></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">556</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">622</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DocValuesTest</name> extends <name>SolrTestCaseJ4</name> <block>{
     }</block></expr></expr_stmt></block_content></block></for>
   }</block>
 
  @<name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>testFloatAndDoubleRangeQuery</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>String</name> <name><name>fieldName</name><index>[]</index></name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"floatdv"</literal></expr>, <argument><expr><literal type="string">"doubledv"</literal></expr></argument>}</block></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name><name>largestNegative</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">0f</literal><operator>-</operator><name><name>Float</name><operator>.</operator><name>MIN_NORMAL</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="number">0f</literal><operator>-</operator><name><name>Double</name><operator>.</operator><name>MIN_NORMAL</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>solrj</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name><name>Tuple</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>solrj</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name><name>Tuple</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dee19abea60</name><operator>..</operator><literal type="number">2f646519f63</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>solr</name><operator>/</operator><name>solrj</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name><name>Tuple</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>solr</name><operator>/</operator><name>solrj</name><operator>/</operator><name>src</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>solr</name><operator>/</operator><name>client</name><operator>/</operator><name>solrj</name><operator>/</operator><name>io</name><operator>/</operator><name><name>Tuple</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>solr</name><operator>.</operator><name>client</name><operator>.</operator><name>solrj</name><operator>.</operator><name>io</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 
 
 <comment type="block" format="javadoc">/**
@@ -87,6 +89,53 @@ public class Tuple implements Cloneable {
     }
   }
 
  // Convenience method since Booleans can be pased around as Strings.
  public Boolean getBool(Object key) {
    Object o = this.fields.get(key);

    if (o == null) {
      return null;
    }

    if (o instanceof Boolean) {
      return (Boolean) o;
    } else {
      //Attempt to parse the Boolean
      return Boolean.parseBoolean(o.toString());
    }
  }

  public List&lt;Boolean&gt; getBools(Object key) {
    return (List&lt;Boolean&gt;) this.fields.get(key);
  }

  // Convenience methods since the dates are actually shipped around as Strings.
  public Date getDate(Object key) {
    Object o = this.fields.get(key);

    if (o == null) {
      return null;
    }

    if (o instanceof Date) {
      return (Date) o;
    } else {
      //Attempt to parse the Date from a String
      return new Date(Instant.parse(o.toString()).toEpochMilli());
    }
  }

  public List&lt;Date&gt; getDates(Object key) {
    List&lt;String&gt; vals = (List&lt;String&gt;) this.fields.get(key);
    if (vals == null) return null;
    
    List&lt;Date&gt; ret = new ArrayList&lt;&gt;();
    for (String dateStr : (List&lt;String&gt;) this.fields.get(key)) {
      ret.add(new Date(Instant.parse(dateStr).toEpochMilli()));
    }
    return ret;
  }

   public Double getDouble(Object key) {
     Object o = this.fields.get(key);
 
@@ -144,4 +193,4 @@ public class Tuple implements Cloneable {
   public void merge(Tuple other){
     fields.putAll(other.getMap());
   }
}
\ No newline at end of file
}
diff --git a/solr/solrj/src/test-files/solrj/solr/configsets/streaming/conf/schema.xml b/solr/solrj/src/test-files/solrj/solr/configsets/streaming/conf/schema.xml
index c10f6cfbf0f..34ecdcbb76b 100644
-- a/solr/solrj/src/test-files/solrj/solr/configsets/streaming/conf/schema.xml
++ b/solr/solrj/src/test-files/solrj/solr/configsets/streaming/conf/schema.xml
@@ -395,8 +395,19 @@
     &lt;field name="f_multi" type="float" indexed="true" stored="true" docValues="true" multiValued="true"/&gt;
     &lt;field name="l_multi" type="long" indexed="true" stored="true" docValues="true" multiValued="true"/&gt;
     &lt;field name="d_multi" type="double" indexed="true" stored="true" docValues="true" multiValued="true"/&gt;
    &lt;field name="dt_multi" type="date" indexed="true" stored="true" docValues="true" multiValued="true"/&gt;
    &lt;field name="b_multi" type="boolean" indexed="true" stored="true" docValues="true" multiValued="true"/&gt;
 
    &lt;field name="uuid" type="uuid" stored="true" /&gt;
    &lt;field name="s_sing" type="string" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="i_sing" type="int" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="f_sing" type="float" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="l_sing" type="long" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="d_sing" type="double" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="dt_sing" type="tdate" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;
    &lt;field name="b_sing" type="boolean" indexed="true" stored="true" docValues="true" multiValued="false"/&gt;


  &lt;field name="uuid" type="uuid" stored="true" /&gt;
     &lt;field name="name" type="nametext" indexed="true" stored="true"/&gt;
     &lt;field name="text" type="text" indexed="true" stored="false"/&gt;
     &lt;field name="subject" type="text" indexed="true" stored="true"/&gt;
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java
index 1cea3112621..9685b7414e4 100644
-- a/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java
++ b/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java
@@ -17,7 +17,9 @@
 package org.apache.solr.client.solrj.io.stream;
 
 import java.io.IOException;
import java.time.Instant;
 import java.util.ArrayList;
import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -1740,6 +1742,132 @@ public class StreamingTest extends SolrCloudTestCase {
 
   }
 
  @Test
  public void testDateBoolSorting() throws Exception {

    new UpdateRequest()
        .add(id, "0", "b_sing", "false", "dt_sing", "1981-03-04T01:02:03.78Z")
        .add(id, "3", "b_sing", "true", "dt_sing", "1980-03-04T01:02:03.78Z")
        .add(id, "2", "b_sing", "false", "dt_sing", "1981-04-04T01:02:03.78Z")
        .add(id, "1", "b_sing", "true", "dt_sing", "1980-04-04T01:02:03.78Z")
        .add(id, "4", "b_sing", "true", "dt_sing", "1980-04-04T01:02:03.78Z")
        .commit(cluster.getSolrClient(), COLLECTION);


    trySortWithQt("/export");
    trySortWithQt("/select");
  }
  private void trySortWithQt(String which) throws Exception {
    //Basic CloudSolrStream Test bools desc

    SolrParams sParams = mapParams("q", "*:*", "qt", which, "fl", "id,b_sing", "sort", "b_sing asc,id asc");
    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);
    try  {
      List&lt;Tuple&gt; tuples = getTuples(stream);

      assert (tuples.size() == 5);
      assertOrder(tuples, 0, 2, 1, 3, 4);

      //Basic CloudSolrStream Test bools desc
      sParams = mapParams("q", "*:*", "qt", which, "fl", "id,b_sing", "sort", "b_sing desc,id desc");
      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);
      tuples = getTuples(stream);

      assert (tuples.size() == 5);
      assertOrder(tuples, 4, 3, 1, 2, 0);

      //Basic CloudSolrStream Test dates desc
      sParams = mapParams("q", "*:*", "qt", which, "fl", "id,dt_sing", "sort", "dt_sing desc,id asc");
      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);
      tuples = getTuples(stream);

      assert (tuples.size() == 5);
      assertOrder(tuples, 2, 0, 1, 4, 3);

      //Basic CloudSolrStream Test ates desc
      sParams = mapParams("q", "*:*", "qt", which, "fl", "id,dt_sing", "sort", "dt_sing asc,id desc");
      stream = new CloudSolrStream(zkHost, COLLECTION, sParams);
      tuples = getTuples(stream);

      assert (tuples.size() == 5);
      assertOrder(tuples, 3, 4, 1, 0, 2);
    } finally {
      if (stream != null) {
        stream.close();
      }
    }

  }


  @Test
  public void testAllValidExportTypes() throws Exception {

    //Test whether all the expected types are actually returned, including booleans and dates.
    // The contract is that the /select and /export handlers return the same format, so we can test this once each
    // way
    new UpdateRequest()
        .add(id, "0", "i_sing", "11", "i_multi", "12", "i_multi", "13",
            "l_sing", "14", "l_multi", "15", "l_multi", "16",
            "f_sing", "1.70", "f_multi", "1.80", "f_multi", "1.90",
            "d_sing", "1.20", "d_multi", "1.21", "d_multi", "1.22",
            "s_sing", "single", "s_multi", "sm1", "s_multi", "sm2",
            "dt_sing", "1980-01-02T11:11:33.89Z", "dt_multi", "1981-03-04T01:02:03.78Z", "dt_multi", "1981-05-24T04:05:06.99Z",
            "b_sing", "true", "b_multi", "false", "b_multi", "true"
        )
        .commit(cluster.getSolrClient(), COLLECTION);

    tryWithQt("/export");
    tryWithQt("/select");
  }
  
  // We should be getting the exact same thing back with both the export and select handlers, so test
  private void tryWithQt(String which) throws IOException {
    SolrParams sParams = StreamingTest.mapParams("q", "*:*", "qt", which, "fl", 
        "id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi", 
        "sort", "i_sing asc");
    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {

      Tuple tuple = getTuple(stream); // All I really care about is that all the fields are returned. There's

      assertTrue("Integers should be returned", tuple.getLong("i_sing") == 11L);
      assertTrue("MV should be returned for i_multi", tuple.getLongs("i_multi").get(0) == 12);
      assertTrue("MV should be returned for i_multi", tuple.getLongs("i_multi").get(1) == 13);

      assertTrue("longs should be returned", tuple.getLong("l_sing") == 14L);
      assertTrue("MV should be returned for l_multi", tuple.getLongs("l_multi").get(0) == 15);
      assertTrue("MV should be returned for l_multi", tuple.getLongs("l_multi").get(1) == 16);

      assertTrue("floats should be returned", tuple.getDouble("f_sing") == 1.7);
      assertTrue("MV should be returned for f_multi", tuple.getDoubles("f_multi").get(0) == 1.8);
      assertTrue("MV should be returned for f_multi", tuple.getDoubles("f_multi").get(1) == 1.9);

      assertTrue("doubles should be returned", tuple.getDouble("d_sing") == 1.2);
      assertTrue("MV should be returned for d_multi", tuple.getDoubles("d_multi").get(0) == 1.21);
      assertTrue("MV should be returned for d_multi", tuple.getDoubles("d_multi").get(1) == 1.22);

      assertTrue("Strings should be returned", tuple.getString("s_sing").equals("single"));
      assertTrue("MV should be returned for s_multi", tuple.getStrings("s_multi").get(0).equals("sm1"));
      assertTrue("MV should be returned for s_multi", tuple.getStrings("s_multi").get(1).equals("sm2"));

      assertTrue("Dates should be returned as Strings", tuple.getString("dt_sing").equals("1980-01-02T11:11:33.890Z"));
      assertTrue("MV dates should be returned as Strings for dt_multi", tuple.getStrings("dt_multi").get(0).equals("1981-03-04T01:02:03.780Z"));
      assertTrue("MV dates should be returned as Strings for dt_multi", tuple.getStrings("dt_multi").get(1).equals("1981-05-24T04:05:06.990Z"));

      // Also test native type conversion
      Date dt = new Date(Instant.parse("1980-01-02T11:11:33.890Z").toEpochMilli());
      assertTrue("Dates should be returned as Dates", tuple.getDate("dt_sing").equals(dt));
      dt = new Date(Instant.parse("1981-03-04T01:02:03.780Z").toEpochMilli());
      assertTrue("MV dates should be returned as Dates for dt_multi", tuple.getDates("dt_multi").get(0).equals(dt));
      dt = new Date(Instant.parse("1981-05-24T04:05:06.990Z").toEpochMilli());
      assertTrue("MV dates should be returned as Dates  for dt_multi", tuple.getDates("dt_multi").get(1).equals(dt));
      
      assertTrue("Booleans should be returned", tuple.getBool("b_sing"));
      assertFalse("MV boolean should be returned for b_multi", tuple.getBools("b_multi").get(0));
      assertTrue("MV boolean should be returned for b_multi", tuple.getBools("b_multi").get(1));
    }

  }
   protected List&lt;Tuple&gt; getTuples(TupleStream tupleStream) throws IOException {
     tupleStream.open();
     List&lt;Tuple&gt; tuples = new ArrayList();
- 
2.19.1.windows.1

</comment></unit>
